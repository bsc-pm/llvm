// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py UTC_ARGS: --function-signature --include-generated-funcs
// RUN: %clang_cc1 -triple x86_64-gnu-linux -verify -fompss-2 -disable-llvm-passes -ferror-limit 100 %s -emit-llvm -o - | FileCheck %s --check-prefixes=LIN64
// expected-no-diagnostics

// This test checks that atomics defines in stdatomic.h
// generate valid OmpSs-2.
// For some reason the types differ from <atomic> where they
// have a deleted copy constructor and hence they are not copyable
#include <stdatomic.h>
int main() {
  atomic_int x;
  #pragma oss task
  {
    x = 2;
  }
}
// LIN64-LABEL: define {{[^@]+}}@main
// LIN64-SAME: () #[[ATTR0:[0-9]+]] !dbg [[DBG5:![0-9]+]] {
// LIN64-NEXT:  entry:
// LIN64-NEXT:    [[X:%.*]] = alloca i32, align 4
// LIN64-NEXT:    [[TMP0:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OSS"([5 x i8] c"TASK\00"), "QUAL.OSS.FIRSTPRIVATE"(ptr [[X]], i32 undef) ], !dbg [[DBG9:![0-9]+]]
// LIN64-NEXT:    store atomic i32 2, ptr [[X]] seq_cst, align 4, !dbg [[DBG10:![0-9]+]]
// LIN64-NEXT:    call void @llvm.directive.region.exit(token [[TMP0]]), !dbg [[DBG11:![0-9]+]]
// LIN64-NEXT:    ret i32 0, !dbg [[DBG12:![0-9]+]]
//
