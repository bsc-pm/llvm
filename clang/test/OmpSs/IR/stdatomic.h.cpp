// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py UTC_ARGS: --version 5
// RUN: %clang_cc1 -triple x86_64-gnu-linux -verify -fompss-2 -disable-llvm-passes -ferror-limit 100 %s -emit-llvm -o - | FileCheck %s --check-prefixes=LIN64
// expected-no-diagnostics

// This test checks that atomics defines in stdatomic.h
// generate valid OmpSs-2.
// For some reason the types differ from <atomic> where they
// have a deleted copy constructor and hence they are not copyable
#include <stdatomic.h>
// LIN64-LABEL: define dso_local noundef i32 @main(
// LIN64-SAME: ) #[[ATTR0:[0-9]+]] !dbg [[DBG5:![0-9]+]] {
// LIN64-NEXT:  [[ENTRY:.*:]]
// LIN64-NEXT:    [[X:%.*]] = alloca i32, align 4
// LIN64-NEXT:    [[TMP0:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OSS"([5 x i8] c"TASK\00"), "QUAL.OSS.FIRSTPRIVATE"(ptr [[X]], i32 undef) ], !dbg [[DBG9:![0-9]+]]
// LIN64-NEXT:    store atomic i32 2, ptr [[X]] seq_cst, align 4, !dbg [[DBG10:![0-9]+]]
// LIN64-NEXT:    call void @llvm.directive.region.exit(token [[TMP0]]), !dbg [[DBG11:![0-9]+]]
// LIN64-NEXT:    ret i32 0, !dbg [[DBG12:![0-9]+]]
//
int main() {
  atomic_int x;
  #pragma oss task
  {
    x = 2;
  }
}
//.
// LIN64: [[META0:![0-9]+]] = distinct !DICompileUnit(language: DW_LANG_C_plus_plus_14, file: [[META1:![0-9]+]], producer: "{{.*}}clang version {{.*}}", isOptimized: false, runtimeVersion: 0, emissionKind: NoDebug, splitDebugInlining: false, nameTableKind: None)
// LIN64: [[META1]] = !DIFile(filename: "<stdin>", directory: {{.*}})
// LIN64: [[DBG5]] = distinct !DISubprogram(name: "main", scope: [[META6:![0-9]+]], file: [[META6]], line: 4, type: [[META7:![0-9]+]], scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: [[META0]])
// LIN64: [[META6]] = !DIFile(filename: "stdatomic.h.cpp", directory: {{.*}})
// LIN64: [[META7]] = !DISubroutineType(types: [[META8:![0-9]+]])
// LIN64: [[META8]] = !{}
// LIN64: [[DBG9]] = !DILocation(line: 6, column: 3, scope: [[DBG5]])
// LIN64: [[DBG10]] = !DILocation(line: 8, column: 7, scope: [[DBG5]])
// LIN64: [[DBG11]] = !DILocation(line: 9, column: 3, scope: [[DBG5]])
// LIN64: [[DBG12]] = !DILocation(line: 10, column: 1, scope: [[DBG5]])
//.
