// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py
// RUN: %clang_cc1 -no-opaque-pointers -verify -disable-llvm-passes -fompss-2 -x c -S -emit-llvm %s -o - | FileCheck %s
// expected-no-diagnostics
#ifndef HEADER
#define HEADER

_Bool bv, bx;
char cv, cx;
unsigned char ucv, ucx;
short sv, sx;
unsigned short usv, usx;
int iv, ix;
unsigned int uiv, uix;
long lv, lx;
unsigned long ulv, ulx;
long long llv, llx;
unsigned long long ullv, ullx;
float fv, fx;
double dv, dx;
long double ldv, ldx;
_Complex int civ, cix;
_Complex float cfv, cfx;
_Complex double cdv, cdx;

typedef int int4 __attribute__((__vector_size__(16)));
int4 int4x;

struct BitFields {
  int : 32;
  int a : 31;
} bfx;

struct BitFields_packed {
  int : 32;
  int a : 31;
} __attribute__ ((__packed__)) bfx_packed;

struct BitFields2 {
  int : 31;
  int a : 1;
} bfx2;

struct BitFields2_packed {
  int : 31;
  int a : 1;
} __attribute__ ((__packed__)) bfx2_packed;

struct BitFields3 {
  int : 11;
  int a : 14;
} bfx3;

struct BitFields3_packed {
  int : 11;
  int a : 14;
} __attribute__ ((__packed__)) bfx3_packed;

struct BitFields4 {
  short : 16;
  int a: 1;
  long b : 7;
} bfx4;

struct BitFields4_packed {
  short : 16;
  int a: 1;
  long b : 7;
} __attribute__ ((__packed__)) bfx4_packed;

typedef float float2 __attribute__((ext_vector_type(2)));
float2 float2x;

#ifdef __x86_64__
// Register "0" is currently an invalid register for global register variables.
// Use "esp" instead of "0".
// register int rix __asm__("0");
register int rix __asm__("esp");
#endif

// CHECK-LABEL: @main(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[RETVAL:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i16, align 2
// CHECK-NEXT:    [[ATOMIC_TEMP10:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[ATOMIC_TEMP14:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[ATOMIC_TEMP18:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[ATOMIC_TEMP22:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[ATOMIC_TEMP28:%.*]] = alloca double, align 8
// CHECK-NEXT:    [[ATOMIC_TEMP32:%.*]] = alloca x86_fp80, align 16
// CHECK-NEXT:    [[ATOMIC_TEMP34:%.*]] = alloca x86_fp80, align 16
// CHECK-NEXT:    [[ATOMIC_TEMP38:%.*]] = alloca { i32, i32 }, align 4
// CHECK-NEXT:    [[ATOMIC_TEMP40:%.*]] = alloca { i32, i32 }, align 4
// CHECK-NEXT:    [[ATOMIC_TEMP45:%.*]] = alloca { float, float }, align 4
// CHECK-NEXT:    [[ATOMIC_TEMP47:%.*]] = alloca { float, float }, align 4
// CHECK-NEXT:    [[ATOMIC_TEMP52:%.*]] = alloca { double, double }, align 8
// CHECK-NEXT:    [[ATOMIC_TEMP54:%.*]] = alloca { double, double }, align 8
// CHECK-NEXT:    [[ATOMIC_TEMP64:%.*]] = alloca i8, align 1
// CHECK-NEXT:    [[ATOMIC_TEMP74:%.*]] = alloca i8, align 1
// CHECK-NEXT:    [[ATOMIC_TEMP82:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[ATOMIC_TEMP89:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[ATOMIC_TEMP93:%.*]] = alloca { i32, i32 }, align 4
// CHECK-NEXT:    [[ATOMIC_TEMP95:%.*]] = alloca { i32, i32 }, align 4
// CHECK-NEXT:    [[ATOMIC_TEMP107:%.*]] = alloca float, align 4
// CHECK-NEXT:    [[ATOMIC_TEMP113:%.*]] = alloca double, align 8
// CHECK-NEXT:    [[ATOMIC_TEMP117:%.*]] = alloca x86_fp80, align 16
// CHECK-NEXT:    [[ATOMIC_TEMP119:%.*]] = alloca x86_fp80, align 16
// CHECK-NEXT:    [[ATOMIC_TEMP123:%.*]] = alloca { i32, i32 }, align 4
// CHECK-NEXT:    [[ATOMIC_TEMP125:%.*]] = alloca { i32, i32 }, align 4
// CHECK-NEXT:    [[COERCE:%.*]] = alloca { float, float }, align 4
// CHECK-NEXT:    [[ATOMIC_TEMP135:%.*]] = alloca i16, align 2
// CHECK-NEXT:    [[ATOMIC_TEMP143:%.*]] = alloca i8, align 1
// CHECK-NEXT:    [[ATOMIC_TEMP156:%.*]] = alloca i8, align 1
// CHECK-NEXT:    [[ATOMIC_TEMP169:%.*]] = alloca <4 x i32>, align 16
// CHECK-NEXT:    [[ATOMIC_TEMP171:%.*]] = alloca <4 x i32>, align 16
// CHECK-NEXT:    [[ATOMIC_TEMP172:%.*]] = alloca <4 x i32>, align 16
// CHECK-NEXT:    [[ATOMIC_TEMP178:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[ATOMIC_TEMP179:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[ATOMIC_TEMP185:%.*]] = alloca i32, align 1
// CHECK-NEXT:    [[ATOMIC_TEMP187:%.*]] = alloca i32, align 1
// CHECK-NEXT:    [[ATOMIC_TEMP188:%.*]] = alloca i32, align 1
// CHECK-NEXT:    [[ATOMIC_TEMP203:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[ATOMIC_TEMP204:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[ATOMIC_TEMP218:%.*]] = alloca i32, align 1
// CHECK-NEXT:    [[ATOMIC_TEMP219:%.*]] = alloca i32, align 1
// CHECK-NEXT:    [[ATOMIC_TEMP233:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[ATOMIC_TEMP234:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[ATOMIC_TEMP247:%.*]] = alloca i32, align 1
// CHECK-NEXT:    [[ATOMIC_TEMP249:%.*]] = alloca i32, align 1
// CHECK-NEXT:    [[ATOMIC_TEMP250:%.*]] = alloca i32, align 1
// CHECK-NEXT:    [[ATOMIC_TEMP267:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[ATOMIC_TEMP268:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[ATOMIC_TEMP284:%.*]] = alloca i32, align 1
// CHECK-NEXT:    [[ATOMIC_TEMP285:%.*]] = alloca i32, align 1
// CHECK-NEXT:    [[ATOMIC_TEMP300:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[ATOMIC_TEMP301:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[ATOMIC_TEMP317:%.*]] = alloca i64, align 1
// CHECK-NEXT:    [[ATOMIC_TEMP318:%.*]] = alloca i64, align 1
// CHECK-NEXT:    [[ATOMIC_TEMP335:%.*]] = alloca <2 x float>, align 8
// CHECK-NEXT:    [[ATOMIC_TEMP336:%.*]] = alloca <2 x float>, align 8
// CHECK-NEXT:    store i32 0, i32* [[RETVAL]], align 4
// CHECK-NEXT:    [[TMP0:%.*]] = atomicrmw add i8* @bx, i8 1 monotonic, align 1, !dbg [[DBG10:![0-9]+]]
// CHECK-NEXT:    store i8 [[TMP0]], i8* @bv, align 1, !dbg [[DBG10]]
// CHECK-NEXT:    [[TMP1:%.*]] = atomicrmw add i8* @cx, i8 1 monotonic, align 1, !dbg [[DBG11:![0-9]+]]
// CHECK-NEXT:    [[CONV:%.*]] = sext i8 [[TMP1]] to i32, !dbg [[DBG12:![0-9]+]]
// CHECK-NEXT:    [[ADD:%.*]] = add nsw i32 [[CONV]], 1, !dbg [[DBG13:![0-9]+]]
// CHECK-NEXT:    [[CONV1:%.*]] = trunc i32 [[ADD]] to i8, !dbg [[DBG12]]
// CHECK-NEXT:    store i8 [[CONV1]], i8* @cv, align 1, !dbg [[DBG11]]
// CHECK-NEXT:    [[TMP2:%.*]] = atomicrmw sub i8* @ucx, i8 1 monotonic, align 1, !dbg [[DBG14:![0-9]+]]
// CHECK-NEXT:    store i8 [[TMP2]], i8* @ucv, align 1, !dbg [[DBG14]]
// CHECK-NEXT:    [[TMP3:%.*]] = atomicrmw sub i16* @sx, i16 1 monotonic, align 2, !dbg [[DBG15:![0-9]+]]
// CHECK-NEXT:    [[CONV2:%.*]] = sext i16 [[TMP3]] to i32, !dbg [[DBG16:![0-9]+]]
// CHECK-NEXT:    [[SUB:%.*]] = sub nsw i32 [[CONV2]], 1, !dbg [[DBG17:![0-9]+]]
// CHECK-NEXT:    [[CONV3:%.*]] = trunc i32 [[SUB]] to i16, !dbg [[DBG16]]
// CHECK-NEXT:    store i16 [[CONV3]], i16* @sv, align 2, !dbg [[DBG15]]
// CHECK-NEXT:    [[TMP4:%.*]] = load i16, i16* @usv, align 2, !dbg [[DBG18:![0-9]+]]
// CHECK-NEXT:    [[CONV4:%.*]] = zext i16 [[TMP4]] to i32, !dbg [[DBG18]]
// CHECK-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i16, i16* @usx monotonic, align 2, !dbg [[DBG19:![0-9]+]]
// CHECK-NEXT:    br label [[ATOMIC_CONT:%.*]], !dbg [[DBG19]]
// CHECK:       atomic_cont:
// CHECK-NEXT:    [[TMP5:%.*]] = phi i16 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP8:%.*]], [[ATOMIC_CONT]] ], !dbg [[DBG19]]
// CHECK-NEXT:    [[CONV5:%.*]] = zext i16 [[TMP5]] to i32, !dbg [[DBG20:![0-9]+]]
// CHECK-NEXT:    [[ADD6:%.*]] = add nsw i32 [[CONV5]], [[CONV4]], !dbg [[DBG21:![0-9]+]]
// CHECK-NEXT:    [[CONV7:%.*]] = trunc i32 [[ADD6]] to i16, !dbg [[DBG20]]
// CHECK-NEXT:    store i16 [[CONV7]], i16* [[ATOMIC_TEMP]], align 2, !dbg [[DBG19]]
// CHECK-NEXT:    [[TMP6:%.*]] = load i16, i16* [[ATOMIC_TEMP]], align 2, !dbg [[DBG19]]
// CHECK-NEXT:    [[TMP7:%.*]] = cmpxchg i16* @usx, i16 [[TMP5]], i16 [[TMP6]] monotonic monotonic, align 2, !dbg [[DBG19]]
// CHECK-NEXT:    [[TMP8]] = extractvalue { i16, i1 } [[TMP7]], 0, !dbg [[DBG19]]
// CHECK-NEXT:    [[TMP9:%.*]] = extractvalue { i16, i1 } [[TMP7]], 1, !dbg [[DBG19]]
// CHECK-NEXT:    br i1 [[TMP9]], label [[ATOMIC_EXIT:%.*]], label [[ATOMIC_CONT]], !dbg [[DBG19]]
// CHECK:       atomic_exit:
// CHECK-NEXT:    store i16 [[CONV7]], i16* @sv, align 2, !dbg [[DBG19]]
// CHECK-NEXT:    [[TMP10:%.*]] = load i32, i32* @iv, align 4, !dbg [[DBG22:![0-9]+]]
// CHECK-NEXT:    [[ATOMIC_LOAD8:%.*]] = load atomic i32, i32* @ix monotonic, align 4, !dbg [[DBG23:![0-9]+]]
// CHECK-NEXT:    br label [[ATOMIC_CONT9:%.*]], !dbg [[DBG23]]
// CHECK:       atomic_cont9:
// CHECK-NEXT:    [[TMP11:%.*]] = phi i32 [ [[ATOMIC_LOAD8]], [[ATOMIC_EXIT]] ], [ [[TMP14:%.*]], [[ATOMIC_CONT9]] ], !dbg [[DBG23]]
// CHECK-NEXT:    [[MUL:%.*]] = mul nsw i32 [[TMP11]], [[TMP10]], !dbg [[DBG24:![0-9]+]]
// CHECK-NEXT:    store i32 [[MUL]], i32* [[ATOMIC_TEMP10]], align 4, !dbg [[DBG23]]
// CHECK-NEXT:    [[TMP12:%.*]] = load i32, i32* [[ATOMIC_TEMP10]], align 4, !dbg [[DBG23]]
// CHECK-NEXT:    [[TMP13:%.*]] = cmpxchg i32* @ix, i32 [[TMP11]], i32 [[TMP12]] monotonic monotonic, align 4, !dbg [[DBG23]]
// CHECK-NEXT:    [[TMP14]] = extractvalue { i32, i1 } [[TMP13]], 0, !dbg [[DBG23]]
// CHECK-NEXT:    [[TMP15:%.*]] = extractvalue { i32, i1 } [[TMP13]], 1, !dbg [[DBG23]]
// CHECK-NEXT:    br i1 [[TMP15]], label [[ATOMIC_EXIT11:%.*]], label [[ATOMIC_CONT9]], !dbg [[DBG23]]
// CHECK:       atomic_exit11:
// CHECK-NEXT:    store i32 [[MUL]], i32* @uiv, align 4, !dbg [[DBG23]]
// CHECK-NEXT:    [[TMP16:%.*]] = load i32, i32* @uiv, align 4, !dbg [[DBG25:![0-9]+]]
// CHECK-NEXT:    [[TMP17:%.*]] = atomicrmw sub i32* @uix, i32 [[TMP16]] monotonic, align 4, !dbg [[DBG26:![0-9]+]]
// CHECK-NEXT:    store i32 [[TMP17]], i32* @iv, align 4, !dbg [[DBG26]]
// CHECK-NEXT:    [[TMP18:%.*]] = load i32, i32* @iv, align 4, !dbg [[DBG27:![0-9]+]]
// CHECK-NEXT:    [[ATOMIC_LOAD12:%.*]] = load atomic i32, i32* @ix monotonic, align 4, !dbg [[DBG28:![0-9]+]]
// CHECK-NEXT:    br label [[ATOMIC_CONT13:%.*]], !dbg [[DBG28]]
// CHECK:       atomic_cont13:
// CHECK-NEXT:    [[TMP19:%.*]] = phi i32 [ [[ATOMIC_LOAD12]], [[ATOMIC_EXIT11]] ], [ [[TMP22:%.*]], [[ATOMIC_CONT13]] ], !dbg [[DBG28]]
// CHECK-NEXT:    [[SHL:%.*]] = shl i32 [[TMP19]], [[TMP18]], !dbg [[DBG29:![0-9]+]]
// CHECK-NEXT:    store i32 [[SHL]], i32* [[ATOMIC_TEMP14]], align 4, !dbg [[DBG28]]
// CHECK-NEXT:    [[TMP20:%.*]] = load i32, i32* [[ATOMIC_TEMP14]], align 4, !dbg [[DBG28]]
// CHECK-NEXT:    [[TMP21:%.*]] = cmpxchg i32* @ix, i32 [[TMP19]], i32 [[TMP20]] monotonic monotonic, align 4, !dbg [[DBG28]]
// CHECK-NEXT:    [[TMP22]] = extractvalue { i32, i1 } [[TMP21]], 0, !dbg [[DBG28]]
// CHECK-NEXT:    [[TMP23:%.*]] = extractvalue { i32, i1 } [[TMP21]], 1, !dbg [[DBG28]]
// CHECK-NEXT:    br i1 [[TMP23]], label [[ATOMIC_EXIT15:%.*]], label [[ATOMIC_CONT13]], !dbg [[DBG28]]
// CHECK:       atomic_exit15:
// CHECK-NEXT:    store i32 [[SHL]], i32* @uiv, align 4, !dbg [[DBG28]]
// CHECK-NEXT:    [[TMP24:%.*]] = load i32, i32* @uiv, align 4, !dbg [[DBG30:![0-9]+]]
// CHECK-NEXT:    [[ATOMIC_LOAD16:%.*]] = load atomic i32, i32* @uix monotonic, align 4, !dbg [[DBG31:![0-9]+]]
// CHECK-NEXT:    br label [[ATOMIC_CONT17:%.*]], !dbg [[DBG31]]
// CHECK:       atomic_cont17:
// CHECK-NEXT:    [[TMP25:%.*]] = phi i32 [ [[ATOMIC_LOAD16]], [[ATOMIC_EXIT15]] ], [ [[TMP28:%.*]], [[ATOMIC_CONT17]] ], !dbg [[DBG31]]
// CHECK-NEXT:    [[SHR:%.*]] = lshr i32 [[TMP25]], [[TMP24]], !dbg [[DBG32:![0-9]+]]
// CHECK-NEXT:    store i32 [[SHR]], i32* [[ATOMIC_TEMP18]], align 4, !dbg [[DBG31]]
// CHECK-NEXT:    [[TMP26:%.*]] = load i32, i32* [[ATOMIC_TEMP18]], align 4, !dbg [[DBG31]]
// CHECK-NEXT:    [[TMP27:%.*]] = cmpxchg i32* @uix, i32 [[TMP25]], i32 [[TMP26]] monotonic monotonic, align 4, !dbg [[DBG31]]
// CHECK-NEXT:    [[TMP28]] = extractvalue { i32, i1 } [[TMP27]], 0, !dbg [[DBG31]]
// CHECK-NEXT:    [[TMP29:%.*]] = extractvalue { i32, i1 } [[TMP27]], 1, !dbg [[DBG31]]
// CHECK-NEXT:    br i1 [[TMP29]], label [[ATOMIC_EXIT19:%.*]], label [[ATOMIC_CONT17]], !dbg [[DBG31]]
// CHECK:       atomic_exit19:
// CHECK-NEXT:    store i32 [[SHR]], i32* @iv, align 4, !dbg [[DBG31]]
// CHECK-NEXT:    [[TMP30:%.*]] = load i64, i64* @lv, align 8, !dbg [[DBG33:![0-9]+]]
// CHECK-NEXT:    [[ATOMIC_LOAD20:%.*]] = load atomic i64, i64* @lx monotonic, align 8, !dbg [[DBG34:![0-9]+]]
// CHECK-NEXT:    br label [[ATOMIC_CONT21:%.*]], !dbg [[DBG34]]
// CHECK:       atomic_cont21:
// CHECK-NEXT:    [[TMP31:%.*]] = phi i64 [ [[ATOMIC_LOAD20]], [[ATOMIC_EXIT19]] ], [ [[TMP34:%.*]], [[ATOMIC_CONT21]] ], !dbg [[DBG34]]
// CHECK-NEXT:    [[DIV:%.*]] = sdiv i64 [[TMP31]], [[TMP30]], !dbg [[DBG35:![0-9]+]]
// CHECK-NEXT:    store i64 [[DIV]], i64* [[ATOMIC_TEMP22]], align 8, !dbg [[DBG34]]
// CHECK-NEXT:    [[TMP32:%.*]] = load i64, i64* [[ATOMIC_TEMP22]], align 8, !dbg [[DBG34]]
// CHECK-NEXT:    [[TMP33:%.*]] = cmpxchg i64* @lx, i64 [[TMP31]], i64 [[TMP32]] monotonic monotonic, align 8, !dbg [[DBG34]]
// CHECK-NEXT:    [[TMP34]] = extractvalue { i64, i1 } [[TMP33]], 0, !dbg [[DBG34]]
// CHECK-NEXT:    [[TMP35:%.*]] = extractvalue { i64, i1 } [[TMP33]], 1, !dbg [[DBG34]]
// CHECK-NEXT:    br i1 [[TMP35]], label [[ATOMIC_EXIT23:%.*]], label [[ATOMIC_CONT21]], !dbg [[DBG34]]
// CHECK:       atomic_exit23:
// CHECK-NEXT:    store i64 [[TMP31]], i64* @ulv, align 8, !dbg [[DBG34]]
// CHECK-NEXT:    [[TMP36:%.*]] = load i64, i64* @ulv, align 8, !dbg [[DBG36:![0-9]+]]
// CHECK-NEXT:    [[TMP37:%.*]] = atomicrmw and i64* @ulx, i64 [[TMP36]] monotonic, align 8, !dbg [[DBG37:![0-9]+]]
// CHECK-NEXT:    [[AND:%.*]] = and i64 [[TMP37]], [[TMP36]], !dbg [[DBG38:![0-9]+]]
// CHECK-NEXT:    store i64 [[AND]], i64* @lv, align 8, !dbg [[DBG37]]
// CHECK-NEXT:    [[TMP38:%.*]] = load i64, i64* @llv, align 8, !dbg [[DBG39:![0-9]+]]
// CHECK-NEXT:    [[TMP39:%.*]] = atomicrmw xor i64* @llx, i64 [[TMP38]] monotonic, align 8, !dbg [[DBG40:![0-9]+]]
// CHECK-NEXT:    [[XOR:%.*]] = xor i64 [[TMP39]], [[TMP38]], !dbg [[DBG41:![0-9]+]]
// CHECK-NEXT:    store i64 [[XOR]], i64* @ullv, align 8, !dbg [[DBG40]]
// CHECK-NEXT:    [[TMP40:%.*]] = load i64, i64* @ullv, align 8, !dbg [[DBG42:![0-9]+]]
// CHECK-NEXT:    [[TMP41:%.*]] = atomicrmw or i64* @ullx, i64 [[TMP40]] monotonic, align 8, !dbg [[DBG43:![0-9]+]]
// CHECK-NEXT:    [[OR:%.*]] = or i64 [[TMP41]], [[TMP40]], !dbg [[DBG44:![0-9]+]]
// CHECK-NEXT:    store i64 [[OR]], i64* @llv, align 8, !dbg [[DBG43]]
// CHECK-NEXT:    [[TMP42:%.*]] = load float, float* @fv, align 4, !dbg [[DBG45:![0-9]+]]
// CHECK-NEXT:    [[TMP43:%.*]] = atomicrmw fadd float* @fx, float [[TMP42]] monotonic, align 4, !dbg [[DBG46:![0-9]+]]
// CHECK-NEXT:    [[ADD24:%.*]] = fadd float [[TMP43]], [[TMP42]], !dbg [[DBG47:![0-9]+]]
// CHECK-NEXT:    [[CONV25:%.*]] = fpext float [[ADD24]] to double, !dbg [[DBG46]]
// CHECK-NEXT:    store double [[CONV25]], double* @dv, align 8, !dbg [[DBG46]]
// CHECK-NEXT:    [[TMP44:%.*]] = load double, double* @dv, align 8, !dbg [[DBG48:![0-9]+]]
// CHECK-NEXT:    [[ATOMIC_LOAD26:%.*]] = load atomic i64, i64* bitcast (double* @dx to i64*) monotonic, align 8, !dbg [[DBG49:![0-9]+]]
// CHECK-NEXT:    br label [[ATOMIC_CONT27:%.*]], !dbg [[DBG49]]
// CHECK:       atomic_cont27:
// CHECK-NEXT:    [[TMP45:%.*]] = phi i64 [ [[ATOMIC_LOAD26]], [[ATOMIC_EXIT23]] ], [ [[TMP50:%.*]], [[ATOMIC_CONT27]] ], !dbg [[DBG49]]
// CHECK-NEXT:    [[TMP46:%.*]] = bitcast double* [[ATOMIC_TEMP28]] to i64*, !dbg [[DBG49]]
// CHECK-NEXT:    [[TMP47:%.*]] = bitcast i64 [[TMP45]] to double, !dbg [[DBG49]]
// CHECK-NEXT:    [[SUB29:%.*]] = fsub double [[TMP44]], [[TMP47]], !dbg [[DBG50:![0-9]+]]
// CHECK-NEXT:    store double [[SUB29]], double* [[ATOMIC_TEMP28]], align 8, !dbg [[DBG49]]
// CHECK-NEXT:    [[TMP48:%.*]] = load i64, i64* [[TMP46]], align 8, !dbg [[DBG49]]
// CHECK-NEXT:    [[TMP49:%.*]] = cmpxchg i64* bitcast (double* @dx to i64*), i64 [[TMP45]], i64 [[TMP48]] monotonic monotonic, align 8, !dbg [[DBG49]]
// CHECK-NEXT:    [[TMP50]] = extractvalue { i64, i1 } [[TMP49]], 0, !dbg [[DBG49]]
// CHECK-NEXT:    [[TMP51:%.*]] = extractvalue { i64, i1 } [[TMP49]], 1, !dbg [[DBG49]]
// CHECK-NEXT:    br i1 [[TMP51]], label [[ATOMIC_EXIT30:%.*]], label [[ATOMIC_CONT27]], !dbg [[DBG49]]
// CHECK:       atomic_exit30:
// CHECK-NEXT:    [[CONV31:%.*]] = fptrunc double [[TMP47]] to float, !dbg [[DBG49]]
// CHECK-NEXT:    store float [[CONV31]], float* @fv, align 4, !dbg [[DBG49]]
// CHECK-NEXT:    [[TMP52:%.*]] = load x86_fp80, x86_fp80* @ldv, align 16, !dbg [[DBG51:![0-9]+]]
// CHECK-NEXT:    [[TMP53:%.*]] = bitcast x86_fp80* [[ATOMIC_TEMP32]] to i8*, !dbg [[DBG52:![0-9]+]]
// CHECK-NEXT:    call void @__atomic_load(i64 noundef 16, i8* noundef bitcast (x86_fp80* @ldx to i8*), i8* noundef [[TMP53]], i32 noundef 0), !dbg [[DBG52]]
// CHECK-NEXT:    br label [[ATOMIC_CONT33:%.*]], !dbg [[DBG52]]
// CHECK:       atomic_cont33:
// CHECK-NEXT:    [[TMP54:%.*]] = load x86_fp80, x86_fp80* [[ATOMIC_TEMP32]], align 16, !dbg [[DBG52]]
// CHECK-NEXT:    store x86_fp80 [[TMP54]], x86_fp80* [[ATOMIC_TEMP34]], align 16, !dbg [[DBG52]]
// CHECK-NEXT:    [[TMP55:%.*]] = load x86_fp80, x86_fp80* [[ATOMIC_TEMP32]], align 16, !dbg [[DBG52]]
// CHECK-NEXT:    [[MUL35:%.*]] = fmul x86_fp80 [[TMP55]], [[TMP52]], !dbg [[DBG53:![0-9]+]]
// CHECK-NEXT:    store x86_fp80 [[MUL35]], x86_fp80* [[ATOMIC_TEMP34]], align 16, !dbg [[DBG52]]
// CHECK-NEXT:    [[TMP56:%.*]] = bitcast x86_fp80* [[ATOMIC_TEMP32]] to i8*, !dbg [[DBG52]]
// CHECK-NEXT:    [[TMP57:%.*]] = bitcast x86_fp80* [[ATOMIC_TEMP34]] to i8*, !dbg [[DBG52]]
// CHECK-NEXT:    [[CALL:%.*]] = call zeroext i1 @__atomic_compare_exchange(i64 noundef 16, i8* noundef bitcast (x86_fp80* @ldx to i8*), i8* noundef [[TMP56]], i8* noundef [[TMP57]], i32 noundef 0, i32 noundef 0), !dbg [[DBG52]]
// CHECK-NEXT:    br i1 [[CALL]], label [[ATOMIC_EXIT36:%.*]], label [[ATOMIC_CONT33]], !dbg [[DBG52]]
// CHECK:       atomic_exit36:
// CHECK-NEXT:    [[CONV37:%.*]] = fptrunc x86_fp80 [[MUL35]] to double, !dbg [[DBG52]]
// CHECK-NEXT:    store double [[CONV37]], double* @dv, align 8, !dbg [[DBG52]]
// CHECK-NEXT:    [[CIV_REAL:%.*]] = load i32, i32* getelementptr inbounds ({ i32, i32 }, { i32, i32 }* @civ, i32 0, i32 0), align 4, !dbg [[DBG54:![0-9]+]]
// CHECK-NEXT:    [[CIV_IMAG:%.*]] = load i32, i32* getelementptr inbounds ({ i32, i32 }, { i32, i32 }* @civ, i32 0, i32 1), align 4, !dbg [[DBG54]]
// CHECK-NEXT:    [[TMP58:%.*]] = bitcast { i32, i32 }* [[ATOMIC_TEMP38]] to i8*, !dbg [[DBG55:![0-9]+]]
// CHECK-NEXT:    call void @__atomic_load(i64 noundef 8, i8* noundef bitcast ({ i32, i32 }* @cix to i8*), i8* noundef [[TMP58]], i32 noundef 0), !dbg [[DBG55]]
// CHECK-NEXT:    br label [[ATOMIC_CONT39:%.*]], !dbg [[DBG55]]
// CHECK:       atomic_cont39:
// CHECK-NEXT:    [[ATOMIC_TEMP38_REALP:%.*]] = getelementptr inbounds { i32, i32 }, { i32, i32 }* [[ATOMIC_TEMP38]], i32 0, i32 0, !dbg [[DBG55]]
// CHECK-NEXT:    [[ATOMIC_TEMP38_REAL:%.*]] = load i32, i32* [[ATOMIC_TEMP38_REALP]], align 4, !dbg [[DBG55]]
// CHECK-NEXT:    [[ATOMIC_TEMP38_IMAGP:%.*]] = getelementptr inbounds { i32, i32 }, { i32, i32 }* [[ATOMIC_TEMP38]], i32 0, i32 1, !dbg [[DBG55]]
// CHECK-NEXT:    [[ATOMIC_TEMP38_IMAG:%.*]] = load i32, i32* [[ATOMIC_TEMP38_IMAGP]], align 4, !dbg [[DBG55]]
// CHECK-NEXT:    [[TMP59:%.*]] = mul i32 [[CIV_REAL]], [[ATOMIC_TEMP38_REAL]], !dbg [[DBG56:![0-9]+]]
// CHECK-NEXT:    [[TMP60:%.*]] = mul i32 [[CIV_IMAG]], [[ATOMIC_TEMP38_IMAG]], !dbg [[DBG56]]
// CHECK-NEXT:    [[TMP61:%.*]] = add i32 [[TMP59]], [[TMP60]], !dbg [[DBG56]]
// CHECK-NEXT:    [[TMP62:%.*]] = mul i32 [[ATOMIC_TEMP38_REAL]], [[ATOMIC_TEMP38_REAL]], !dbg [[DBG56]]
// CHECK-NEXT:    [[TMP63:%.*]] = mul i32 [[ATOMIC_TEMP38_IMAG]], [[ATOMIC_TEMP38_IMAG]], !dbg [[DBG56]]
// CHECK-NEXT:    [[TMP64:%.*]] = add i32 [[TMP62]], [[TMP63]], !dbg [[DBG56]]
// CHECK-NEXT:    [[TMP65:%.*]] = mul i32 [[CIV_IMAG]], [[ATOMIC_TEMP38_REAL]], !dbg [[DBG56]]
// CHECK-NEXT:    [[TMP66:%.*]] = mul i32 [[CIV_REAL]], [[ATOMIC_TEMP38_IMAG]], !dbg [[DBG56]]
// CHECK-NEXT:    [[TMP67:%.*]] = sub i32 [[TMP65]], [[TMP66]], !dbg [[DBG56]]
// CHECK-NEXT:    [[TMP68:%.*]] = sdiv i32 [[TMP61]], [[TMP64]], !dbg [[DBG56]]
// CHECK-NEXT:    [[TMP69:%.*]] = sdiv i32 [[TMP67]], [[TMP64]], !dbg [[DBG56]]
// CHECK-NEXT:    [[ATOMIC_TEMP40_REALP:%.*]] = getelementptr inbounds { i32, i32 }, { i32, i32 }* [[ATOMIC_TEMP40]], i32 0, i32 0, !dbg [[DBG55]]
// CHECK-NEXT:    [[ATOMIC_TEMP40_IMAGP:%.*]] = getelementptr inbounds { i32, i32 }, { i32, i32 }* [[ATOMIC_TEMP40]], i32 0, i32 1, !dbg [[DBG55]]
// CHECK-NEXT:    store i32 [[TMP68]], i32* [[ATOMIC_TEMP40_REALP]], align 4, !dbg [[DBG55]]
// CHECK-NEXT:    store i32 [[TMP69]], i32* [[ATOMIC_TEMP40_IMAGP]], align 4, !dbg [[DBG55]]
// CHECK-NEXT:    [[TMP70:%.*]] = bitcast { i32, i32 }* [[ATOMIC_TEMP38]] to i8*, !dbg [[DBG55]]
// CHECK-NEXT:    [[TMP71:%.*]] = bitcast { i32, i32 }* [[ATOMIC_TEMP40]] to i8*, !dbg [[DBG55]]
// CHECK-NEXT:    [[CALL41:%.*]] = call zeroext i1 @__atomic_compare_exchange(i64 noundef 8, i8* noundef bitcast ({ i32, i32 }* @cix to i8*), i8* noundef [[TMP70]], i8* noundef [[TMP71]], i32 noundef 0, i32 noundef 0), !dbg [[DBG55]]
// CHECK-NEXT:    br i1 [[CALL41]], label [[ATOMIC_EXIT42:%.*]], label [[ATOMIC_CONT39]], !dbg [[DBG55]]
// CHECK:       atomic_exit42:
// CHECK-NEXT:    [[CONV43:%.*]] = sitofp i32 [[TMP68]] to float, !dbg [[DBG55]]
// CHECK-NEXT:    [[CONV44:%.*]] = sitofp i32 [[TMP69]] to float, !dbg [[DBG55]]
// CHECK-NEXT:    store float [[CONV43]], float* getelementptr inbounds ({ float, float }, { float, float }* @cfv, i32 0, i32 0), align 4, !dbg [[DBG55]]
// CHECK-NEXT:    store float [[CONV44]], float* getelementptr inbounds ({ float, float }, { float, float }* @cfv, i32 0, i32 1), align 4, !dbg [[DBG55]]
// CHECK-NEXT:    [[CFV_REAL:%.*]] = load float, float* getelementptr inbounds ({ float, float }, { float, float }* @cfv, i32 0, i32 0), align 4, !dbg [[DBG57:![0-9]+]]
// CHECK-NEXT:    [[CFV_IMAG:%.*]] = load float, float* getelementptr inbounds ({ float, float }, { float, float }* @cfv, i32 0, i32 1), align 4, !dbg [[DBG57]]
// CHECK-NEXT:    [[TMP72:%.*]] = bitcast { float, float }* [[ATOMIC_TEMP45]] to i8*, !dbg [[DBG58:![0-9]+]]
// CHECK-NEXT:    call void @__atomic_load(i64 noundef 8, i8* noundef bitcast ({ float, float }* @cfx to i8*), i8* noundef [[TMP72]], i32 noundef 0), !dbg [[DBG58]]
// CHECK-NEXT:    br label [[ATOMIC_CONT46:%.*]], !dbg [[DBG58]]
// CHECK:       atomic_cont46:
// CHECK-NEXT:    [[ATOMIC_TEMP45_REALP:%.*]] = getelementptr inbounds { float, float }, { float, float }* [[ATOMIC_TEMP45]], i32 0, i32 0, !dbg [[DBG58]]
// CHECK-NEXT:    [[ATOMIC_TEMP45_REAL:%.*]] = load float, float* [[ATOMIC_TEMP45_REALP]], align 4, !dbg [[DBG58]]
// CHECK-NEXT:    [[ATOMIC_TEMP45_IMAGP:%.*]] = getelementptr inbounds { float, float }, { float, float }* [[ATOMIC_TEMP45]], i32 0, i32 1, !dbg [[DBG58]]
// CHECK-NEXT:    [[ATOMIC_TEMP45_IMAG:%.*]] = load float, float* [[ATOMIC_TEMP45_IMAGP]], align 4, !dbg [[DBG58]]
// CHECK-NEXT:    [[ADD_R:%.*]] = fadd float [[CFV_REAL]], [[ATOMIC_TEMP45_REAL]], !dbg [[DBG59:![0-9]+]]
// CHECK-NEXT:    [[ADD_I:%.*]] = fadd float [[CFV_IMAG]], [[ATOMIC_TEMP45_IMAG]], !dbg [[DBG59]]
// CHECK-NEXT:    [[ATOMIC_TEMP47_REALP:%.*]] = getelementptr inbounds { float, float }, { float, float }* [[ATOMIC_TEMP47]], i32 0, i32 0, !dbg [[DBG58]]
// CHECK-NEXT:    [[ATOMIC_TEMP47_IMAGP:%.*]] = getelementptr inbounds { float, float }, { float, float }* [[ATOMIC_TEMP47]], i32 0, i32 1, !dbg [[DBG58]]
// CHECK-NEXT:    store float [[ADD_R]], float* [[ATOMIC_TEMP47_REALP]], align 4, !dbg [[DBG58]]
// CHECK-NEXT:    store float [[ADD_I]], float* [[ATOMIC_TEMP47_IMAGP]], align 4, !dbg [[DBG58]]
// CHECK-NEXT:    [[TMP73:%.*]] = bitcast { float, float }* [[ATOMIC_TEMP45]] to i8*, !dbg [[DBG58]]
// CHECK-NEXT:    [[TMP74:%.*]] = bitcast { float, float }* [[ATOMIC_TEMP47]] to i8*, !dbg [[DBG58]]
// CHECK-NEXT:    [[CALL48:%.*]] = call zeroext i1 @__atomic_compare_exchange(i64 noundef 8, i8* noundef bitcast ({ float, float }* @cfx to i8*), i8* noundef [[TMP73]], i8* noundef [[TMP74]], i32 noundef 0, i32 noundef 0), !dbg [[DBG58]]
// CHECK-NEXT:    br i1 [[CALL48]], label [[ATOMIC_EXIT49:%.*]], label [[ATOMIC_CONT46]], !dbg [[DBG58]]
// CHECK:       atomic_exit49:
// CHECK-NEXT:    [[CONV50:%.*]] = fptosi float [[ATOMIC_TEMP45_REAL]] to i32, !dbg [[DBG58]]
// CHECK-NEXT:    [[CONV51:%.*]] = fptosi float [[ATOMIC_TEMP45_IMAG]] to i32, !dbg [[DBG58]]
// CHECK-NEXT:    store i32 [[CONV50]], i32* getelementptr inbounds ({ i32, i32 }, { i32, i32 }* @civ, i32 0, i32 0), align 4, !dbg [[DBG58]]
// CHECK-NEXT:    store i32 [[CONV51]], i32* getelementptr inbounds ({ i32, i32 }, { i32, i32 }* @civ, i32 0, i32 1), align 4, !dbg [[DBG58]]
// CHECK-NEXT:    [[CDV_REAL:%.*]] = load double, double* getelementptr inbounds ({ double, double }, { double, double }* @cdv, i32 0, i32 0), align 8, !dbg [[DBG60:![0-9]+]]
// CHECK-NEXT:    [[CDV_IMAG:%.*]] = load double, double* getelementptr inbounds ({ double, double }, { double, double }* @cdv, i32 0, i32 1), align 8, !dbg [[DBG60]]
// CHECK-NEXT:    [[TMP75:%.*]] = bitcast { double, double }* [[ATOMIC_TEMP52]] to i8*, !dbg [[DBG61:![0-9]+]]
// CHECK-NEXT:    call void @__atomic_load(i64 noundef 16, i8* noundef bitcast ({ double, double }* @cdx to i8*), i8* noundef [[TMP75]], i32 noundef 5), !dbg [[DBG61]]
// CHECK-NEXT:    br label [[ATOMIC_CONT53:%.*]], !dbg [[DBG61]]
// CHECK:       atomic_cont53:
// CHECK-NEXT:    [[ATOMIC_TEMP52_REALP:%.*]] = getelementptr inbounds { double, double }, { double, double }* [[ATOMIC_TEMP52]], i32 0, i32 0, !dbg [[DBG61]]
// CHECK-NEXT:    [[ATOMIC_TEMP52_REAL:%.*]] = load double, double* [[ATOMIC_TEMP52_REALP]], align 8, !dbg [[DBG61]]
// CHECK-NEXT:    [[ATOMIC_TEMP52_IMAGP:%.*]] = getelementptr inbounds { double, double }, { double, double }* [[ATOMIC_TEMP52]], i32 0, i32 1, !dbg [[DBG61]]
// CHECK-NEXT:    [[ATOMIC_TEMP52_IMAG:%.*]] = load double, double* [[ATOMIC_TEMP52_IMAGP]], align 8, !dbg [[DBG61]]
// CHECK-NEXT:    [[SUB_R:%.*]] = fsub double [[ATOMIC_TEMP52_REAL]], [[CDV_REAL]], !dbg [[DBG62:![0-9]+]]
// CHECK-NEXT:    [[SUB_I:%.*]] = fsub double [[ATOMIC_TEMP52_IMAG]], [[CDV_IMAG]], !dbg [[DBG62]]
// CHECK-NEXT:    [[ATOMIC_TEMP54_REALP:%.*]] = getelementptr inbounds { double, double }, { double, double }* [[ATOMIC_TEMP54]], i32 0, i32 0, !dbg [[DBG61]]
// CHECK-NEXT:    [[ATOMIC_TEMP54_IMAGP:%.*]] = getelementptr inbounds { double, double }, { double, double }* [[ATOMIC_TEMP54]], i32 0, i32 1, !dbg [[DBG61]]
// CHECK-NEXT:    store double [[SUB_R]], double* [[ATOMIC_TEMP54_REALP]], align 8, !dbg [[DBG61]]
// CHECK-NEXT:    store double [[SUB_I]], double* [[ATOMIC_TEMP54_IMAGP]], align 8, !dbg [[DBG61]]
// CHECK-NEXT:    [[TMP76:%.*]] = bitcast { double, double }* [[ATOMIC_TEMP52]] to i8*, !dbg [[DBG61]]
// CHECK-NEXT:    [[TMP77:%.*]] = bitcast { double, double }* [[ATOMIC_TEMP54]] to i8*, !dbg [[DBG61]]
// CHECK-NEXT:    [[CALL55:%.*]] = call zeroext i1 @__atomic_compare_exchange(i64 noundef 16, i8* noundef bitcast ({ double, double }* @cdx to i8*), i8* noundef [[TMP76]], i8* noundef [[TMP77]], i32 noundef 5, i32 noundef 5), !dbg [[DBG61]]
// CHECK-NEXT:    br i1 [[CALL55]], label [[ATOMIC_EXIT56:%.*]], label [[ATOMIC_CONT53]], !dbg [[DBG61]]
// CHECK:       atomic_exit56:
// CHECK-NEXT:    [[CONV57:%.*]] = fptrunc double [[SUB_R]] to float, !dbg [[DBG61]]
// CHECK-NEXT:    [[CONV58:%.*]] = fptrunc double [[SUB_I]] to float, !dbg [[DBG61]]
// CHECK-NEXT:    store float [[CONV57]], float* getelementptr inbounds ({ float, float }, { float, float }* @cfv, i32 0, i32 0), align 4, !dbg [[DBG61]]
// CHECK-NEXT:    store float [[CONV58]], float* getelementptr inbounds ({ float, float }, { float, float }* @cfv, i32 0, i32 1), align 4, !dbg [[DBG61]]
// CHECK-NEXT:    [[TMP78:%.*]] = load i8, i8* @bv, align 1, !dbg [[DBG63:![0-9]+]]
// CHECK-NEXT:    [[TOBOOL:%.*]] = trunc i8 [[TMP78]] to i1, !dbg [[DBG63]]
// CHECK-NEXT:    [[CONV59:%.*]] = zext i1 [[TOBOOL]] to i64, !dbg [[DBG63]]
// CHECK-NEXT:    [[TMP79:%.*]] = atomicrmw and i64* @ulx, i64 [[CONV59]] monotonic, align 8, !dbg [[DBG64:![0-9]+]]
// CHECK-NEXT:    [[AND60:%.*]] = and i64 [[TMP79]], [[CONV59]], !dbg [[DBG65:![0-9]+]]
// CHECK-NEXT:    store i64 [[AND60]], i64* @ulv, align 8, !dbg [[DBG64]]
// CHECK-NEXT:    [[TMP80:%.*]] = load i8, i8* @cv, align 1, !dbg [[DBG66:![0-9]+]]
// CHECK-NEXT:    [[CONV61:%.*]] = sext i8 [[TMP80]] to i32, !dbg [[DBG66]]
// CHECK-NEXT:    [[ATOMIC_LOAD62:%.*]] = load atomic i8, i8* @bx monotonic, align 1, !dbg [[DBG67:![0-9]+]]
// CHECK-NEXT:    br label [[ATOMIC_CONT63:%.*]], !dbg [[DBG67]]
// CHECK:       atomic_cont63:
// CHECK-NEXT:    [[TMP81:%.*]] = phi i8 [ [[ATOMIC_LOAD62]], [[ATOMIC_EXIT56]] ], [ [[TMP84:%.*]], [[ATOMIC_CONT63]] ], !dbg [[DBG67]]
// CHECK-NEXT:    [[TOBOOL65:%.*]] = trunc i8 [[TMP81]] to i1, !dbg [[DBG67]]
// CHECK-NEXT:    [[CONV66:%.*]] = zext i1 [[TOBOOL65]] to i32, !dbg [[DBG68:![0-9]+]]
// CHECK-NEXT:    [[AND67:%.*]] = and i32 [[CONV61]], [[CONV66]], !dbg [[DBG69:![0-9]+]]
// CHECK-NEXT:    [[TOBOOL68:%.*]] = icmp ne i32 [[AND67]], 0, !dbg [[DBG66]]
// CHECK-NEXT:    [[FROMBOOL:%.*]] = zext i1 [[TOBOOL68]] to i8, !dbg [[DBG67]]
// CHECK-NEXT:    store i8 [[FROMBOOL]], i8* [[ATOMIC_TEMP64]], align 1, !dbg [[DBG67]]
// CHECK-NEXT:    [[TMP82:%.*]] = load i8, i8* [[ATOMIC_TEMP64]], align 1, !dbg [[DBG67]]
// CHECK-NEXT:    [[TMP83:%.*]] = cmpxchg i8* @bx, i8 [[TMP81]], i8 [[TMP82]] monotonic monotonic, align 1, !dbg [[DBG67]]
// CHECK-NEXT:    [[TMP84]] = extractvalue { i8, i1 } [[TMP83]], 0, !dbg [[DBG67]]
// CHECK-NEXT:    [[TMP85:%.*]] = extractvalue { i8, i1 } [[TMP83]], 1, !dbg [[DBG67]]
// CHECK-NEXT:    br i1 [[TMP85]], label [[ATOMIC_EXIT69:%.*]], label [[ATOMIC_CONT63]], !dbg [[DBG67]]
// CHECK:       atomic_exit69:
// CHECK-NEXT:    [[FROMBOOL70:%.*]] = zext i1 [[TOBOOL65]] to i8, !dbg [[DBG67]]
// CHECK-NEXT:    store i8 [[FROMBOOL70]], i8* @bv, align 1, !dbg [[DBG67]]
// CHECK-NEXT:    [[TMP86:%.*]] = load i8, i8* @ucv, align 1, !dbg [[DBG70:![0-9]+]]
// CHECK-NEXT:    [[CONV71:%.*]] = zext i8 [[TMP86]] to i32, !dbg [[DBG70]]
// CHECK-NEXT:    [[ATOMIC_LOAD72:%.*]] = load atomic i8, i8* @cx seq_cst, align 1, !dbg [[DBG71:![0-9]+]]
// CHECK-NEXT:    br label [[ATOMIC_CONT73:%.*]], !dbg [[DBG71]]
// CHECK:       atomic_cont73:
// CHECK-NEXT:    [[TMP87:%.*]] = phi i8 [ [[ATOMIC_LOAD72]], [[ATOMIC_EXIT69]] ], [ [[TMP90:%.*]], [[ATOMIC_CONT73]] ], !dbg [[DBG71]]
// CHECK-NEXT:    [[CONV75:%.*]] = sext i8 [[TMP87]] to i32, !dbg [[DBG72:![0-9]+]]
// CHECK-NEXT:    [[SHR76:%.*]] = ashr i32 [[CONV75]], [[CONV71]], !dbg [[DBG73:![0-9]+]]
// CHECK-NEXT:    [[CONV77:%.*]] = trunc i32 [[SHR76]] to i8, !dbg [[DBG72]]
// CHECK-NEXT:    store i8 [[CONV77]], i8* [[ATOMIC_TEMP74]], align 1, !dbg [[DBG71]]
// CHECK-NEXT:    [[TMP88:%.*]] = load i8, i8* [[ATOMIC_TEMP74]], align 1, !dbg [[DBG71]]
// CHECK-NEXT:    [[TMP89:%.*]] = cmpxchg i8* @cx, i8 [[TMP87]], i8 [[TMP88]] seq_cst seq_cst, align 1, !dbg [[DBG71]]
// CHECK-NEXT:    [[TMP90]] = extractvalue { i8, i1 } [[TMP89]], 0, !dbg [[DBG71]]
// CHECK-NEXT:    [[TMP91:%.*]] = extractvalue { i8, i1 } [[TMP89]], 1, !dbg [[DBG71]]
// CHECK-NEXT:    br i1 [[TMP91]], label [[ATOMIC_EXIT78:%.*]], label [[ATOMIC_CONT73]], !dbg [[DBG71]]
// CHECK:       atomic_exit78:
// CHECK-NEXT:    store i8 [[CONV77]], i8* @cv, align 1, !dbg [[DBG71]]
// CHECK-NEXT:    [[TMP92:%.*]] = load i16, i16* @sv, align 2, !dbg [[DBG74:![0-9]+]]
// CHECK-NEXT:    [[CONV79:%.*]] = sext i16 [[TMP92]] to i32, !dbg [[DBG74]]
// CHECK-NEXT:    [[ATOMIC_LOAD80:%.*]] = load atomic i64, i64* @ulx monotonic, align 8, !dbg [[DBG75:![0-9]+]]
// CHECK-NEXT:    br label [[ATOMIC_CONT81:%.*]], !dbg [[DBG75]]
// CHECK:       atomic_cont81:
// CHECK-NEXT:    [[TMP93:%.*]] = phi i64 [ [[ATOMIC_LOAD80]], [[ATOMIC_EXIT78]] ], [ [[TMP96:%.*]], [[ATOMIC_CONT81]] ], !dbg [[DBG75]]
// CHECK-NEXT:    [[SH_PROM:%.*]] = trunc i64 [[TMP93]] to i32, !dbg [[DBG76:![0-9]+]]
// CHECK-NEXT:    [[SHL83:%.*]] = shl i32 [[CONV79]], [[SH_PROM]], !dbg [[DBG76]]
// CHECK-NEXT:    [[CONV84:%.*]] = sext i32 [[SHL83]] to i64, !dbg [[DBG74]]
// CHECK-NEXT:    store i64 [[CONV84]], i64* [[ATOMIC_TEMP82]], align 8, !dbg [[DBG75]]
// CHECK-NEXT:    [[TMP94:%.*]] = load i64, i64* [[ATOMIC_TEMP82]], align 8, !dbg [[DBG75]]
// CHECK-NEXT:    [[TMP95:%.*]] = cmpxchg i64* @ulx, i64 [[TMP93]], i64 [[TMP94]] monotonic monotonic, align 8, !dbg [[DBG75]]
// CHECK-NEXT:    [[TMP96]] = extractvalue { i64, i1 } [[TMP95]], 0, !dbg [[DBG75]]
// CHECK-NEXT:    [[TMP97:%.*]] = extractvalue { i64, i1 } [[TMP95]], 1, !dbg [[DBG75]]
// CHECK-NEXT:    br i1 [[TMP97]], label [[ATOMIC_EXIT85:%.*]], label [[ATOMIC_CONT81]], !dbg [[DBG75]]
// CHECK:       atomic_exit85:
// CHECK-NEXT:    store i64 [[CONV84]], i64* @ulv, align 8, !dbg [[DBG75]]
// CHECK-NEXT:    [[TMP98:%.*]] = load i16, i16* @usv, align 2, !dbg [[DBG77:![0-9]+]]
// CHECK-NEXT:    [[CONV86:%.*]] = zext i16 [[TMP98]] to i64, !dbg [[DBG77]]
// CHECK-NEXT:    [[ATOMIC_LOAD87:%.*]] = load atomic i64, i64* @lx monotonic, align 8, !dbg [[DBG78:![0-9]+]]
// CHECK-NEXT:    br label [[ATOMIC_CONT88:%.*]], !dbg [[DBG78]]
// CHECK:       atomic_cont88:
// CHECK-NEXT:    [[TMP99:%.*]] = phi i64 [ [[ATOMIC_LOAD87]], [[ATOMIC_EXIT85]] ], [ [[TMP102:%.*]], [[ATOMIC_CONT88]] ], !dbg [[DBG78]]
// CHECK-NEXT:    [[REM:%.*]] = srem i64 [[TMP99]], [[CONV86]], !dbg [[DBG79:![0-9]+]]
// CHECK-NEXT:    store i64 [[REM]], i64* [[ATOMIC_TEMP89]], align 8, !dbg [[DBG78]]
// CHECK-NEXT:    [[TMP100:%.*]] = load i64, i64* [[ATOMIC_TEMP89]], align 8, !dbg [[DBG78]]
// CHECK-NEXT:    [[TMP101:%.*]] = cmpxchg i64* @lx, i64 [[TMP99]], i64 [[TMP100]] monotonic monotonic, align 8, !dbg [[DBG78]]
// CHECK-NEXT:    [[TMP102]] = extractvalue { i64, i1 } [[TMP101]], 0, !dbg [[DBG78]]
// CHECK-NEXT:    [[TMP103:%.*]] = extractvalue { i64, i1 } [[TMP101]], 1, !dbg [[DBG78]]
// CHECK-NEXT:    br i1 [[TMP103]], label [[ATOMIC_EXIT90:%.*]], label [[ATOMIC_CONT88]], !dbg [[DBG78]]
// CHECK:       atomic_exit90:
// CHECK-NEXT:    store i64 [[TMP99]], i64* @lv, align 8, !dbg [[DBG78]]
// CHECK-NEXT:    [[TMP104:%.*]] = load i32, i32* @iv, align 4, !dbg [[DBG80:![0-9]+]]
// CHECK-NEXT:    [[TMP105:%.*]] = atomicrmw or i32* @uix, i32 [[TMP104]] seq_cst, align 4, !dbg [[DBG81:![0-9]+]]
// CHECK-NEXT:    [[OR91:%.*]] = or i32 [[TMP104]], [[TMP105]], !dbg [[DBG82:![0-9]+]]
// CHECK-NEXT:    store i32 [[OR91]], i32* @uiv, align 4, !dbg [[DBG81]]
// CHECK-NEXT:    [[TMP106:%.*]] = load i32, i32* @uiv, align 4, !dbg [[DBG83:![0-9]+]]
// CHECK-NEXT:    [[TMP107:%.*]] = atomicrmw and i32* @ix, i32 [[TMP106]] monotonic, align 4, !dbg [[DBG84:![0-9]+]]
// CHECK-NEXT:    [[AND92:%.*]] = and i32 [[TMP107]], [[TMP106]], !dbg [[DBG85:![0-9]+]]
// CHECK-NEXT:    store i32 [[AND92]], i32* @iv, align 4, !dbg [[DBG84]]
// CHECK-NEXT:    [[TMP108:%.*]] = load i64, i64* @lv, align 8, !dbg [[DBG86:![0-9]+]]
// CHECK-NEXT:    [[TMP109:%.*]] = bitcast { i32, i32 }* [[ATOMIC_TEMP93]] to i8*, !dbg [[DBG87:![0-9]+]]
// CHECK-NEXT:    call void @__atomic_load(i64 noundef 8, i8* noundef bitcast ({ i32, i32 }* @cix to i8*), i8* noundef [[TMP109]], i32 noundef 0), !dbg [[DBG87]]
// CHECK-NEXT:    br label [[ATOMIC_CONT94:%.*]], !dbg [[DBG87]]
// CHECK:       atomic_cont94:
// CHECK-NEXT:    [[ATOMIC_TEMP93_REALP:%.*]] = getelementptr inbounds { i32, i32 }, { i32, i32 }* [[ATOMIC_TEMP93]], i32 0, i32 0, !dbg [[DBG87]]
// CHECK-NEXT:    [[ATOMIC_TEMP93_REAL:%.*]] = load i32, i32* [[ATOMIC_TEMP93_REALP]], align 4, !dbg [[DBG87]]
// CHECK-NEXT:    [[ATOMIC_TEMP93_IMAGP:%.*]] = getelementptr inbounds { i32, i32 }, { i32, i32 }* [[ATOMIC_TEMP93]], i32 0, i32 1, !dbg [[DBG87]]
// CHECK-NEXT:    [[ATOMIC_TEMP93_IMAG:%.*]] = load i32, i32* [[ATOMIC_TEMP93_IMAGP]], align 4, !dbg [[DBG87]]
// CHECK-NEXT:    [[CONV96:%.*]] = sext i32 [[ATOMIC_TEMP93_REAL]] to i64, !dbg [[DBG88:![0-9]+]]
// CHECK-NEXT:    [[CONV97:%.*]] = sext i32 [[ATOMIC_TEMP93_IMAG]] to i64, !dbg [[DBG88]]
// CHECK-NEXT:    [[ADD_R98:%.*]] = add i64 [[TMP108]], [[CONV96]], !dbg [[DBG89:![0-9]+]]
// CHECK-NEXT:    [[ADD_I99:%.*]] = add i64 0, [[CONV97]], !dbg [[DBG89]]
// CHECK-NEXT:    [[CONV100:%.*]] = trunc i64 [[ADD_R98]] to i32, !dbg [[DBG86]]
// CHECK-NEXT:    [[CONV101:%.*]] = trunc i64 [[ADD_I99]] to i32, !dbg [[DBG86]]
// CHECK-NEXT:    [[ATOMIC_TEMP95_REALP:%.*]] = getelementptr inbounds { i32, i32 }, { i32, i32 }* [[ATOMIC_TEMP95]], i32 0, i32 0, !dbg [[DBG87]]
// CHECK-NEXT:    [[ATOMIC_TEMP95_IMAGP:%.*]] = getelementptr inbounds { i32, i32 }, { i32, i32 }* [[ATOMIC_TEMP95]], i32 0, i32 1, !dbg [[DBG87]]
// CHECK-NEXT:    store i32 [[CONV100]], i32* [[ATOMIC_TEMP95_REALP]], align 4, !dbg [[DBG87]]
// CHECK-NEXT:    store i32 [[CONV101]], i32* [[ATOMIC_TEMP95_IMAGP]], align 4, !dbg [[DBG87]]
// CHECK-NEXT:    [[TMP110:%.*]] = bitcast { i32, i32 }* [[ATOMIC_TEMP93]] to i8*, !dbg [[DBG87]]
// CHECK-NEXT:    [[TMP111:%.*]] = bitcast { i32, i32 }* [[ATOMIC_TEMP95]] to i8*, !dbg [[DBG87]]
// CHECK-NEXT:    [[CALL102:%.*]] = call zeroext i1 @__atomic_compare_exchange(i64 noundef 8, i8* noundef bitcast ({ i32, i32 }* @cix to i8*), i8* noundef [[TMP110]], i8* noundef [[TMP111]], i32 noundef 0, i32 noundef 0), !dbg [[DBG87]]
// CHECK-NEXT:    br i1 [[CALL102]], label [[ATOMIC_EXIT103:%.*]], label [[ATOMIC_CONT94]], !dbg [[DBG87]]
// CHECK:       atomic_exit103:
// CHECK-NEXT:    store i32 [[ATOMIC_TEMP93_REAL]], i32* getelementptr inbounds ({ i32, i32 }, { i32, i32 }* @civ, i32 0, i32 0), align 4, !dbg [[DBG87]]
// CHECK-NEXT:    store i32 [[ATOMIC_TEMP93_IMAG]], i32* getelementptr inbounds ({ i32, i32 }, { i32, i32 }* @civ, i32 0, i32 1), align 4, !dbg [[DBG87]]
// CHECK-NEXT:    [[TMP112:%.*]] = load i64, i64* @ulv, align 8, !dbg [[DBG90:![0-9]+]]
// CHECK-NEXT:    [[CONV104:%.*]] = uitofp i64 [[TMP112]] to float, !dbg [[DBG90]]
// CHECK-NEXT:    [[ATOMIC_LOAD105:%.*]] = load atomic i32, i32* bitcast (float* @fx to i32*) monotonic, align 4, !dbg [[DBG91:![0-9]+]]
// CHECK-NEXT:    br label [[ATOMIC_CONT106:%.*]], !dbg [[DBG91]]
// CHECK:       atomic_cont106:
// CHECK-NEXT:    [[TMP113:%.*]] = phi i32 [ [[ATOMIC_LOAD105]], [[ATOMIC_EXIT103]] ], [ [[TMP118:%.*]], [[ATOMIC_CONT106]] ], !dbg [[DBG91]]
// CHECK-NEXT:    [[TMP114:%.*]] = bitcast float* [[ATOMIC_TEMP107]] to i32*, !dbg [[DBG91]]
// CHECK-NEXT:    [[TMP115:%.*]] = bitcast i32 [[TMP113]] to float, !dbg [[DBG91]]
// CHECK-NEXT:    [[MUL108:%.*]] = fmul float [[TMP115]], [[CONV104]], !dbg [[DBG92:![0-9]+]]
// CHECK-NEXT:    store float [[MUL108]], float* [[ATOMIC_TEMP107]], align 4, !dbg [[DBG91]]
// CHECK-NEXT:    [[TMP116:%.*]] = load i32, i32* [[TMP114]], align 4, !dbg [[DBG91]]
// CHECK-NEXT:    [[TMP117:%.*]] = cmpxchg i32* bitcast (float* @fx to i32*), i32 [[TMP113]], i32 [[TMP116]] monotonic monotonic, align 4, !dbg [[DBG91]]
// CHECK-NEXT:    [[TMP118]] = extractvalue { i32, i1 } [[TMP117]], 0, !dbg [[DBG91]]
// CHECK-NEXT:    [[TMP119:%.*]] = extractvalue { i32, i1 } [[TMP117]], 1, !dbg [[DBG91]]
// CHECK-NEXT:    br i1 [[TMP119]], label [[ATOMIC_EXIT109:%.*]], label [[ATOMIC_CONT106]], !dbg [[DBG91]]
// CHECK:       atomic_exit109:
// CHECK-NEXT:    store float [[MUL108]], float* @fv, align 4, !dbg [[DBG91]]
// CHECK-NEXT:    [[TMP120:%.*]] = load i64, i64* @llv, align 8, !dbg [[DBG93:![0-9]+]]
// CHECK-NEXT:    [[CONV110:%.*]] = sitofp i64 [[TMP120]] to double, !dbg [[DBG93]]
// CHECK-NEXT:    [[ATOMIC_LOAD111:%.*]] = load atomic i64, i64* bitcast (double* @dx to i64*) monotonic, align 8, !dbg [[DBG94:![0-9]+]]
// CHECK-NEXT:    br label [[ATOMIC_CONT112:%.*]], !dbg [[DBG94]]
// CHECK:       atomic_cont112:
// CHECK-NEXT:    [[TMP121:%.*]] = phi i64 [ [[ATOMIC_LOAD111]], [[ATOMIC_EXIT109]] ], [ [[TMP126:%.*]], [[ATOMIC_CONT112]] ], !dbg [[DBG94]]
// CHECK-NEXT:    [[TMP122:%.*]] = bitcast double* [[ATOMIC_TEMP113]] to i64*, !dbg [[DBG94]]
// CHECK-NEXT:    [[TMP123:%.*]] = bitcast i64 [[TMP121]] to double, !dbg [[DBG94]]
// CHECK-NEXT:    [[DIV114:%.*]] = fdiv double [[TMP123]], [[CONV110]], !dbg [[DBG95:![0-9]+]]
// CHECK-NEXT:    store double [[DIV114]], double* [[ATOMIC_TEMP113]], align 8, !dbg [[DBG94]]
// CHECK-NEXT:    [[TMP124:%.*]] = load i64, i64* [[TMP122]], align 8, !dbg [[DBG94]]
// CHECK-NEXT:    [[TMP125:%.*]] = cmpxchg i64* bitcast (double* @dx to i64*), i64 [[TMP121]], i64 [[TMP124]] monotonic monotonic, align 8, !dbg [[DBG94]]
// CHECK-NEXT:    [[TMP126]] = extractvalue { i64, i1 } [[TMP125]], 0, !dbg [[DBG94]]
// CHECK-NEXT:    [[TMP127:%.*]] = extractvalue { i64, i1 } [[TMP125]], 1, !dbg [[DBG94]]
// CHECK-NEXT:    br i1 [[TMP127]], label [[ATOMIC_EXIT115:%.*]], label [[ATOMIC_CONT112]], !dbg [[DBG94]]
// CHECK:       atomic_exit115:
// CHECK-NEXT:    store double [[DIV114]], double* @dv, align 8, !dbg [[DBG94]]
// CHECK-NEXT:    [[TMP128:%.*]] = load i64, i64* @ullv, align 8, !dbg [[DBG96:![0-9]+]]
// CHECK-NEXT:    [[CONV116:%.*]] = uitofp i64 [[TMP128]] to x86_fp80, !dbg [[DBG96]]
// CHECK-NEXT:    [[TMP129:%.*]] = bitcast x86_fp80* [[ATOMIC_TEMP117]] to i8*, !dbg [[DBG97:![0-9]+]]
// CHECK-NEXT:    call void @__atomic_load(i64 noundef 16, i8* noundef bitcast (x86_fp80* @ldx to i8*), i8* noundef [[TMP129]], i32 noundef 0), !dbg [[DBG97]]
// CHECK-NEXT:    br label [[ATOMIC_CONT118:%.*]], !dbg [[DBG97]]
// CHECK:       atomic_cont118:
// CHECK-NEXT:    [[TMP130:%.*]] = load x86_fp80, x86_fp80* [[ATOMIC_TEMP117]], align 16, !dbg [[DBG97]]
// CHECK-NEXT:    store x86_fp80 [[TMP130]], x86_fp80* [[ATOMIC_TEMP119]], align 16, !dbg [[DBG97]]
// CHECK-NEXT:    [[TMP131:%.*]] = load x86_fp80, x86_fp80* [[ATOMIC_TEMP117]], align 16, !dbg [[DBG97]]
// CHECK-NEXT:    [[SUB120:%.*]] = fsub x86_fp80 [[TMP131]], [[CONV116]], !dbg [[DBG98:![0-9]+]]
// CHECK-NEXT:    store x86_fp80 [[SUB120]], x86_fp80* [[ATOMIC_TEMP119]], align 16, !dbg [[DBG97]]
// CHECK-NEXT:    [[TMP132:%.*]] = bitcast x86_fp80* [[ATOMIC_TEMP117]] to i8*, !dbg [[DBG97]]
// CHECK-NEXT:    [[TMP133:%.*]] = bitcast x86_fp80* [[ATOMIC_TEMP119]] to i8*, !dbg [[DBG97]]
// CHECK-NEXT:    [[CALL121:%.*]] = call zeroext i1 @__atomic_compare_exchange(i64 noundef 16, i8* noundef bitcast (x86_fp80* @ldx to i8*), i8* noundef [[TMP132]], i8* noundef [[TMP133]], i32 noundef 0, i32 noundef 0), !dbg [[DBG97]]
// CHECK-NEXT:    br i1 [[CALL121]], label [[ATOMIC_EXIT122:%.*]], label [[ATOMIC_CONT118]], !dbg [[DBG97]]
// CHECK:       atomic_exit122:
// CHECK-NEXT:    store x86_fp80 [[TMP131]], x86_fp80* @ldv, align 16, !dbg [[DBG97]]
// CHECK-NEXT:    [[TMP134:%.*]] = load float, float* @fv, align 4, !dbg [[DBG99:![0-9]+]]
// CHECK-NEXT:    [[TMP135:%.*]] = bitcast { i32, i32 }* [[ATOMIC_TEMP123]] to i8*, !dbg [[DBG100:![0-9]+]]
// CHECK-NEXT:    call void @__atomic_load(i64 noundef 8, i8* noundef bitcast ({ i32, i32 }* @cix to i8*), i8* noundef [[TMP135]], i32 noundef 0), !dbg [[DBG100]]
// CHECK-NEXT:    br label [[ATOMIC_CONT124:%.*]], !dbg [[DBG100]]
// CHECK:       atomic_cont124:
// CHECK-NEXT:    [[ATOMIC_TEMP123_REALP:%.*]] = getelementptr inbounds { i32, i32 }, { i32, i32 }* [[ATOMIC_TEMP123]], i32 0, i32 0, !dbg [[DBG100]]
// CHECK-NEXT:    [[ATOMIC_TEMP123_REAL:%.*]] = load i32, i32* [[ATOMIC_TEMP123_REALP]], align 4, !dbg [[DBG100]]
// CHECK-NEXT:    [[ATOMIC_TEMP123_IMAGP:%.*]] = getelementptr inbounds { i32, i32 }, { i32, i32 }* [[ATOMIC_TEMP123]], i32 0, i32 1, !dbg [[DBG100]]
// CHECK-NEXT:    [[ATOMIC_TEMP123_IMAG:%.*]] = load i32, i32* [[ATOMIC_TEMP123_IMAGP]], align 4, !dbg [[DBG100]]
// CHECK-NEXT:    [[CONV126:%.*]] = sitofp i32 [[ATOMIC_TEMP123_REAL]] to float, !dbg [[DBG101:![0-9]+]]
// CHECK-NEXT:    [[CONV127:%.*]] = sitofp i32 [[ATOMIC_TEMP123_IMAG]] to float, !dbg [[DBG101]]
// CHECK-NEXT:    [[CALL128:%.*]] = call <2 x float> @__divsc3(float noundef [[TMP134]], float noundef 0.000000e+00, float noundef [[CONV126]], float noundef [[CONV127]]) #[[ATTR4:[0-9]+]], !dbg [[DBG102:![0-9]+]]
// CHECK-NEXT:    [[TMP136:%.*]] = bitcast { float, float }* [[COERCE]] to <2 x float>*, !dbg [[DBG102]]
// CHECK-NEXT:    store <2 x float> [[CALL128]], <2 x float>* [[TMP136]], align 4, !dbg [[DBG102]]
// CHECK-NEXT:    [[COERCE_REALP:%.*]] = getelementptr inbounds { float, float }, { float, float }* [[COERCE]], i32 0, i32 0, !dbg [[DBG102]]
// CHECK-NEXT:    [[COERCE_REAL:%.*]] = load float, float* [[COERCE_REALP]], align 4, !dbg [[DBG102]]
// CHECK-NEXT:    [[COERCE_IMAGP:%.*]] = getelementptr inbounds { float, float }, { float, float }* [[COERCE]], i32 0, i32 1, !dbg [[DBG102]]
// CHECK-NEXT:    [[COERCE_IMAG:%.*]] = load float, float* [[COERCE_IMAGP]], align 4, !dbg [[DBG102]]
// CHECK-NEXT:    [[CONV129:%.*]] = fptosi float [[COERCE_REAL]] to i32, !dbg [[DBG99]]
// CHECK-NEXT:    [[CONV130:%.*]] = fptosi float [[COERCE_IMAG]] to i32, !dbg [[DBG99]]
// CHECK-NEXT:    [[ATOMIC_TEMP125_REALP:%.*]] = getelementptr inbounds { i32, i32 }, { i32, i32 }* [[ATOMIC_TEMP125]], i32 0, i32 0, !dbg [[DBG100]]
// CHECK-NEXT:    [[ATOMIC_TEMP125_IMAGP:%.*]] = getelementptr inbounds { i32, i32 }, { i32, i32 }* [[ATOMIC_TEMP125]], i32 0, i32 1, !dbg [[DBG100]]
// CHECK-NEXT:    store i32 [[CONV129]], i32* [[ATOMIC_TEMP125_REALP]], align 4, !dbg [[DBG100]]
// CHECK-NEXT:    store i32 [[CONV130]], i32* [[ATOMIC_TEMP125_IMAGP]], align 4, !dbg [[DBG100]]
// CHECK-NEXT:    [[TMP137:%.*]] = bitcast { i32, i32 }* [[ATOMIC_TEMP123]] to i8*, !dbg [[DBG100]]
// CHECK-NEXT:    [[TMP138:%.*]] = bitcast { i32, i32 }* [[ATOMIC_TEMP125]] to i8*, !dbg [[DBG100]]
// CHECK-NEXT:    [[CALL131:%.*]] = call zeroext i1 @__atomic_compare_exchange(i64 noundef 8, i8* noundef bitcast ({ i32, i32 }* @cix to i8*), i8* noundef [[TMP137]], i8* noundef [[TMP138]], i32 noundef 0, i32 noundef 0), !dbg [[DBG100]]
// CHECK-NEXT:    br i1 [[CALL131]], label [[ATOMIC_EXIT132:%.*]], label [[ATOMIC_CONT124]], !dbg [[DBG100]]
// CHECK:       atomic_exit132:
// CHECK-NEXT:    store i32 [[CONV129]], i32* getelementptr inbounds ({ i32, i32 }, { i32, i32 }* @civ, i32 0, i32 0), align 4, !dbg [[DBG100]]
// CHECK-NEXT:    store i32 [[CONV130]], i32* getelementptr inbounds ({ i32, i32 }, { i32, i32 }* @civ, i32 0, i32 1), align 4, !dbg [[DBG100]]
// CHECK-NEXT:    [[TMP139:%.*]] = load double, double* @dv, align 8, !dbg [[DBG103:![0-9]+]]
// CHECK-NEXT:    [[ATOMIC_LOAD133:%.*]] = load atomic i16, i16* @sx monotonic, align 2, !dbg [[DBG104:![0-9]+]]
// CHECK-NEXT:    br label [[ATOMIC_CONT134:%.*]], !dbg [[DBG104]]
// CHECK:       atomic_cont134:
// CHECK-NEXT:    [[TMP140:%.*]] = phi i16 [ [[ATOMIC_LOAD133]], [[ATOMIC_EXIT132]] ], [ [[TMP143:%.*]], [[ATOMIC_CONT134]] ], !dbg [[DBG104]]
// CHECK-NEXT:    [[CONV136:%.*]] = sext i16 [[TMP140]] to i32, !dbg [[DBG105:![0-9]+]]
// CHECK-NEXT:    [[CONV137:%.*]] = sitofp i32 [[CONV136]] to double, !dbg [[DBG105]]
// CHECK-NEXT:    [[ADD138:%.*]] = fadd double [[CONV137]], [[TMP139]], !dbg [[DBG106:![0-9]+]]
// CHECK-NEXT:    [[CONV139:%.*]] = fptosi double [[ADD138]] to i16, !dbg [[DBG105]]
// CHECK-NEXT:    store i16 [[CONV139]], i16* [[ATOMIC_TEMP135]], align 2, !dbg [[DBG104]]
// CHECK-NEXT:    [[TMP141:%.*]] = load i16, i16* [[ATOMIC_TEMP135]], align 2, !dbg [[DBG104]]
// CHECK-NEXT:    [[TMP142:%.*]] = cmpxchg i16* @sx, i16 [[TMP140]], i16 [[TMP141]] monotonic monotonic, align 2, !dbg [[DBG104]]
// CHECK-NEXT:    [[TMP143]] = extractvalue { i16, i1 } [[TMP142]], 0, !dbg [[DBG104]]
// CHECK-NEXT:    [[TMP144:%.*]] = extractvalue { i16, i1 } [[TMP142]], 1, !dbg [[DBG104]]
// CHECK-NEXT:    br i1 [[TMP144]], label [[ATOMIC_EXIT140:%.*]], label [[ATOMIC_CONT134]], !dbg [[DBG104]]
// CHECK:       atomic_exit140:
// CHECK-NEXT:    store i16 [[CONV139]], i16* @sv, align 2, !dbg [[DBG104]]
// CHECK-NEXT:    [[TMP145:%.*]] = load x86_fp80, x86_fp80* @ldv, align 16, !dbg [[DBG107:![0-9]+]]
// CHECK-NEXT:    [[ATOMIC_LOAD141:%.*]] = load atomic i8, i8* @bx monotonic, align 1, !dbg [[DBG108:![0-9]+]]
// CHECK-NEXT:    br label [[ATOMIC_CONT142:%.*]], !dbg [[DBG108]]
// CHECK:       atomic_cont142:
// CHECK-NEXT:    [[TMP146:%.*]] = phi i8 [ [[ATOMIC_LOAD141]], [[ATOMIC_EXIT140]] ], [ [[TMP149:%.*]], [[ATOMIC_CONT142]] ], !dbg [[DBG108]]
// CHECK-NEXT:    [[TOBOOL144:%.*]] = trunc i8 [[TMP146]] to i1, !dbg [[DBG108]]
// CHECK-NEXT:    [[CONV145:%.*]] = zext i1 [[TOBOOL144]] to i32, !dbg [[DBG109:![0-9]+]]
// CHECK-NEXT:    [[CONV146:%.*]] = sitofp i32 [[CONV145]] to x86_fp80, !dbg [[DBG109]]
// CHECK-NEXT:    [[MUL147:%.*]] = fmul x86_fp80 [[TMP145]], [[CONV146]], !dbg [[DBG110:![0-9]+]]
// CHECK-NEXT:    [[TOBOOL148:%.*]] = fcmp une x86_fp80 [[MUL147]], 0xK00000000000000000000, !dbg [[DBG107]]
// CHECK-NEXT:    [[FROMBOOL149:%.*]] = zext i1 [[TOBOOL148]] to i8, !dbg [[DBG108]]
// CHECK-NEXT:    store i8 [[FROMBOOL149]], i8* [[ATOMIC_TEMP143]], align 1, !dbg [[DBG108]]
// CHECK-NEXT:    [[TMP147:%.*]] = load i8, i8* [[ATOMIC_TEMP143]], align 1, !dbg [[DBG108]]
// CHECK-NEXT:    [[TMP148:%.*]] = cmpxchg i8* @bx, i8 [[TMP146]], i8 [[TMP147]] monotonic monotonic, align 1, !dbg [[DBG108]]
// CHECK-NEXT:    [[TMP149]] = extractvalue { i8, i1 } [[TMP148]], 0, !dbg [[DBG108]]
// CHECK-NEXT:    [[TMP150:%.*]] = extractvalue { i8, i1 } [[TMP148]], 1, !dbg [[DBG108]]
// CHECK-NEXT:    br i1 [[TMP150]], label [[ATOMIC_EXIT150:%.*]], label [[ATOMIC_CONT142]], !dbg [[DBG108]]
// CHECK:       atomic_exit150:
// CHECK-NEXT:    [[FROMBOOL151:%.*]] = zext i1 [[TOBOOL144]] to i8, !dbg [[DBG108]]
// CHECK-NEXT:    store i8 [[FROMBOOL151]], i8* @bv, align 1, !dbg [[DBG108]]
// CHECK-NEXT:    [[CIV_REAL152:%.*]] = load i32, i32* getelementptr inbounds ({ i32, i32 }, { i32, i32 }* @civ, i32 0, i32 0), align 4, !dbg [[DBG111:![0-9]+]]
// CHECK-NEXT:    [[CIV_IMAG153:%.*]] = load i32, i32* getelementptr inbounds ({ i32, i32 }, { i32, i32 }* @civ, i32 0, i32 1), align 4, !dbg [[DBG111]]
// CHECK-NEXT:    [[ATOMIC_LOAD154:%.*]] = load atomic i8, i8* @bx monotonic, align 1, !dbg [[DBG112:![0-9]+]]
// CHECK-NEXT:    br label [[ATOMIC_CONT155:%.*]], !dbg [[DBG112]]
// CHECK:       atomic_cont155:
// CHECK-NEXT:    [[TMP151:%.*]] = phi i8 [ [[ATOMIC_LOAD154]], [[ATOMIC_EXIT150]] ], [ [[TMP154:%.*]], [[ATOMIC_CONT155]] ], !dbg [[DBG112]]
// CHECK-NEXT:    [[TOBOOL157:%.*]] = trunc i8 [[TMP151]] to i1, !dbg [[DBG112]]
// CHECK-NEXT:    [[CONV158:%.*]] = zext i1 [[TOBOOL157]] to i32, !dbg [[DBG113:![0-9]+]]
// CHECK-NEXT:    [[SUB_R159:%.*]] = sub i32 [[CIV_REAL152]], [[CONV158]], !dbg [[DBG114:![0-9]+]]
// CHECK-NEXT:    [[SUB_I160:%.*]] = sub i32 [[CIV_IMAG153]], 0, !dbg [[DBG114]]
// CHECK-NEXT:    [[TOBOOL161:%.*]] = icmp ne i32 [[SUB_R159]], 0, !dbg [[DBG111]]
// CHECK-NEXT:    [[TOBOOL162:%.*]] = icmp ne i32 [[SUB_I160]], 0, !dbg [[DBG111]]
// CHECK-NEXT:    [[TOBOOL163:%.*]] = or i1 [[TOBOOL161]], [[TOBOOL162]], !dbg [[DBG111]]
// CHECK-NEXT:    [[FROMBOOL164:%.*]] = zext i1 [[TOBOOL163]] to i8, !dbg [[DBG112]]
// CHECK-NEXT:    store i8 [[FROMBOOL164]], i8* [[ATOMIC_TEMP156]], align 1, !dbg [[DBG112]]
// CHECK-NEXT:    [[TMP152:%.*]] = load i8, i8* [[ATOMIC_TEMP156]], align 1, !dbg [[DBG112]]
// CHECK-NEXT:    [[TMP153:%.*]] = cmpxchg i8* @bx, i8 [[TMP151]], i8 [[TMP152]] monotonic monotonic, align 1, !dbg [[DBG112]]
// CHECK-NEXT:    [[TMP154]] = extractvalue { i8, i1 } [[TMP153]], 0, !dbg [[DBG112]]
// CHECK-NEXT:    [[TMP155:%.*]] = extractvalue { i8, i1 } [[TMP153]], 1, !dbg [[DBG112]]
// CHECK-NEXT:    br i1 [[TMP155]], label [[ATOMIC_EXIT165:%.*]], label [[ATOMIC_CONT155]], !dbg [[DBG112]]
// CHECK:       atomic_exit165:
// CHECK-NEXT:    [[FROMBOOL166:%.*]] = zext i1 [[TOBOOL163]] to i8, !dbg [[DBG112]]
// CHECK-NEXT:    store i8 [[FROMBOOL166]], i8* @bv, align 1, !dbg [[DBG112]]
// CHECK-NEXT:    [[TMP156:%.*]] = load i16, i16* @sv, align 2, !dbg [[DBG115:![0-9]+]]
// CHECK-NEXT:    [[TMP157:%.*]] = load i8, i8* @bv, align 1, !dbg [[DBG116:![0-9]+]]
// CHECK-NEXT:    [[TOBOOL167:%.*]] = trunc i8 [[TMP157]] to i1, !dbg [[DBG116]]
// CHECK-NEXT:    [[CONV168:%.*]] = zext i1 [[TOBOOL167]] to i32, !dbg [[DBG116]]
// CHECK-NEXT:    [[TMP158:%.*]] = bitcast <4 x i32>* [[ATOMIC_TEMP169]] to i8*, !dbg [[DBG117:![0-9]+]]
// CHECK-NEXT:    call void @__atomic_load(i64 noundef 16, i8* noundef bitcast (<4 x i32>* @int4x to i8*), i8* noundef [[TMP158]], i32 noundef 0), !dbg [[DBG117]]
// CHECK-NEXT:    br label [[ATOMIC_CONT170:%.*]], !dbg [[DBG117]]
// CHECK:       atomic_cont170:
// CHECK-NEXT:    [[TMP159:%.*]] = load <4 x i32>, <4 x i32>* [[ATOMIC_TEMP169]], align 16, !dbg [[DBG117]]
// CHECK-NEXT:    store <4 x i32> [[TMP159]], <4 x i32>* [[ATOMIC_TEMP171]], align 16, !dbg [[DBG117]]
// CHECK-NEXT:    [[TMP160:%.*]] = load <4 x i32>, <4 x i32>* [[ATOMIC_TEMP169]], align 16, !dbg [[DBG117]]
// CHECK-NEXT:    store <4 x i32> [[TMP160]], <4 x i32>* [[ATOMIC_TEMP172]], align 16, !dbg [[DBG117]]
// CHECK-NEXT:    [[TMP161:%.*]] = load <4 x i32>, <4 x i32>* [[ATOMIC_TEMP172]], align 16, !dbg [[DBG117]]
// CHECK-NEXT:    [[VECEXT:%.*]] = extractelement <4 x i32> [[TMP161]], i16 [[TMP156]], !dbg [[DBG117]]
// CHECK-NEXT:    [[OR173:%.*]] = or i32 [[VECEXT]], [[CONV168]], !dbg [[DBG118:![0-9]+]]
// CHECK-NEXT:    [[TMP162:%.*]] = load <4 x i32>, <4 x i32>* [[ATOMIC_TEMP171]], align 16, !dbg [[DBG117]]
// CHECK-NEXT:    [[VECINS:%.*]] = insertelement <4 x i32> [[TMP162]], i32 [[OR173]], i16 [[TMP156]], !dbg [[DBG117]]
// CHECK-NEXT:    store <4 x i32> [[VECINS]], <4 x i32>* [[ATOMIC_TEMP171]], align 16, !dbg [[DBG117]]
// CHECK-NEXT:    [[TMP163:%.*]] = bitcast <4 x i32>* [[ATOMIC_TEMP169]] to i8*, !dbg [[DBG117]]
// CHECK-NEXT:    [[TMP164:%.*]] = bitcast <4 x i32>* [[ATOMIC_TEMP171]] to i8*, !dbg [[DBG117]]
// CHECK-NEXT:    [[CALL174:%.*]] = call zeroext i1 @__atomic_compare_exchange(i64 noundef 16, i8* noundef bitcast (<4 x i32>* @int4x to i8*), i8* noundef [[TMP163]], i8* noundef [[TMP164]], i32 noundef 0, i32 noundef 0), !dbg [[DBG117]]
// CHECK-NEXT:    br i1 [[CALL174]], label [[ATOMIC_EXIT175:%.*]], label [[ATOMIC_CONT170]], !dbg [[DBG117]]
// CHECK:       atomic_exit175:
// CHECK-NEXT:    store i32 [[OR173]], i32* @iv, align 4, !dbg [[DBG117]]
// CHECK-NEXT:    [[TMP165:%.*]] = load x86_fp80, x86_fp80* @ldv, align 16, !dbg [[DBG119:![0-9]+]]
// CHECK-NEXT:    [[ATOMIC_LOAD176:%.*]] = load atomic i32, i32* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.BitFields* @bfx to i8*), i64 4) to i32*) monotonic, align 4, !dbg [[DBG120:![0-9]+]]
// CHECK-NEXT:    br label [[ATOMIC_CONT177:%.*]], !dbg [[DBG120]]
// CHECK:       atomic_cont177:
// CHECK-NEXT:    [[TMP166:%.*]] = phi i32 [ [[ATOMIC_LOAD176]], [[ATOMIC_EXIT175]] ], [ [[TMP169:%.*]], [[ATOMIC_CONT177]] ], !dbg [[DBG120]]
// CHECK-NEXT:    store i32 [[TMP166]], i32* [[ATOMIC_TEMP178]], align 4, !dbg [[DBG120]]
// CHECK-NEXT:    store i32 [[TMP166]], i32* [[ATOMIC_TEMP179]], align 4, !dbg [[DBG120]]
// CHECK-NEXT:    [[BF_LOAD:%.*]] = load i32, i32* [[ATOMIC_TEMP179]], align 4, !dbg [[DBG120]]
// CHECK-NEXT:    [[BF_SHL:%.*]] = shl i32 [[BF_LOAD]], 1, !dbg [[DBG120]]
// CHECK-NEXT:    [[BF_ASHR:%.*]] = ashr i32 [[BF_SHL]], 1, !dbg [[DBG120]]
// CHECK-NEXT:    [[CONV180:%.*]] = sitofp i32 [[BF_ASHR]] to x86_fp80, !dbg [[DBG121:![0-9]+]]
// CHECK-NEXT:    [[SUB181:%.*]] = fsub x86_fp80 [[CONV180]], [[TMP165]], !dbg [[DBG122:![0-9]+]]
// CHECK-NEXT:    [[CONV182:%.*]] = fptosi x86_fp80 [[SUB181]] to i32, !dbg [[DBG121]]
// CHECK-NEXT:    [[BF_LOAD183:%.*]] = load i32, i32* [[ATOMIC_TEMP178]], align 4, !dbg [[DBG120]]
// CHECK-NEXT:    [[BF_VALUE:%.*]] = and i32 [[CONV182]], 2147483647, !dbg [[DBG120]]
// CHECK-NEXT:    [[BF_CLEAR:%.*]] = and i32 [[BF_LOAD183]], -2147483648, !dbg [[DBG120]]
// CHECK-NEXT:    [[BF_SET:%.*]] = or i32 [[BF_CLEAR]], [[BF_VALUE]], !dbg [[DBG120]]
// CHECK-NEXT:    store i32 [[BF_SET]], i32* [[ATOMIC_TEMP178]], align 4, !dbg [[DBG120]]
// CHECK-NEXT:    [[TMP167:%.*]] = load i32, i32* [[ATOMIC_TEMP178]], align 4, !dbg [[DBG120]]
// CHECK-NEXT:    [[TMP168:%.*]] = cmpxchg i32* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.BitFields* @bfx to i8*), i64 4) to i32*), i32 [[TMP166]], i32 [[TMP167]] monotonic monotonic, align 4, !dbg [[DBG120]]
// CHECK-NEXT:    [[TMP169]] = extractvalue { i32, i1 } [[TMP168]], 0, !dbg [[DBG120]]
// CHECK-NEXT:    [[TMP170:%.*]] = extractvalue { i32, i1 } [[TMP168]], 1, !dbg [[DBG120]]
// CHECK-NEXT:    br i1 [[TMP170]], label [[ATOMIC_EXIT184:%.*]], label [[ATOMIC_CONT177]], !dbg [[DBG120]]
// CHECK:       atomic_exit184:
// CHECK-NEXT:    store i32 [[CONV182]], i32* @iv, align 4, !dbg [[DBG120]]
// CHECK-NEXT:    [[TMP171:%.*]] = load x86_fp80, x86_fp80* @ldv, align 16, !dbg [[DBG123:![0-9]+]]
// CHECK-NEXT:    [[TMP172:%.*]] = bitcast i32* [[ATOMIC_TEMP185]] to i8*, !dbg [[DBG124:![0-9]+]]
// CHECK-NEXT:    call void @__atomic_load(i64 noundef 4, i8* noundef getelementptr (i8, i8* bitcast (%struct.BitFields_packed* @bfx_packed to i8*), i64 4), i8* noundef [[TMP172]], i32 noundef 0), !dbg [[DBG124]]
// CHECK-NEXT:    br label [[ATOMIC_CONT186:%.*]], !dbg [[DBG124]]
// CHECK:       atomic_cont186:
// CHECK-NEXT:    [[TMP173:%.*]] = load i32, i32* [[ATOMIC_TEMP185]], align 1, !dbg [[DBG124]]
// CHECK-NEXT:    store i32 [[TMP173]], i32* [[ATOMIC_TEMP187]], align 1, !dbg [[DBG124]]
// CHECK-NEXT:    [[TMP174:%.*]] = load i32, i32* [[ATOMIC_TEMP185]], align 1, !dbg [[DBG124]]
// CHECK-NEXT:    store i32 [[TMP174]], i32* [[ATOMIC_TEMP188]], align 4, !dbg [[DBG124]]
// CHECK-NEXT:    [[BF_LOAD189:%.*]] = load i32, i32* [[ATOMIC_TEMP188]], align 1, !dbg [[DBG124]]
// CHECK-NEXT:    [[BF_SHL190:%.*]] = shl i32 [[BF_LOAD189]], 1, !dbg [[DBG124]]
// CHECK-NEXT:    [[BF_ASHR191:%.*]] = ashr i32 [[BF_SHL190]], 1, !dbg [[DBG124]]
// CHECK-NEXT:    [[CONV192:%.*]] = sitofp i32 [[BF_ASHR191]] to x86_fp80, !dbg [[DBG125:![0-9]+]]
// CHECK-NEXT:    [[MUL193:%.*]] = fmul x86_fp80 [[CONV192]], [[TMP171]], !dbg [[DBG126:![0-9]+]]
// CHECK-NEXT:    [[CONV194:%.*]] = fptosi x86_fp80 [[MUL193]] to i32, !dbg [[DBG125]]
// CHECK-NEXT:    [[BF_LOAD195:%.*]] = load i32, i32* [[ATOMIC_TEMP187]], align 1, !dbg [[DBG124]]
// CHECK-NEXT:    [[BF_VALUE196:%.*]] = and i32 [[CONV194]], 2147483647, !dbg [[DBG124]]
// CHECK-NEXT:    [[BF_CLEAR197:%.*]] = and i32 [[BF_LOAD195]], -2147483648, !dbg [[DBG124]]
// CHECK-NEXT:    [[BF_SET198:%.*]] = or i32 [[BF_CLEAR197]], [[BF_VALUE196]], !dbg [[DBG124]]
// CHECK-NEXT:    store i32 [[BF_SET198]], i32* [[ATOMIC_TEMP187]], align 1, !dbg [[DBG124]]
// CHECK-NEXT:    [[TMP175:%.*]] = bitcast i32* [[ATOMIC_TEMP185]] to i8*, !dbg [[DBG124]]
// CHECK-NEXT:    [[TMP176:%.*]] = bitcast i32* [[ATOMIC_TEMP187]] to i8*, !dbg [[DBG124]]
// CHECK-NEXT:    [[CALL199:%.*]] = call zeroext i1 @__atomic_compare_exchange(i64 noundef 4, i8* noundef getelementptr (i8, i8* bitcast (%struct.BitFields_packed* @bfx_packed to i8*), i64 4), i8* noundef [[TMP175]], i8* noundef [[TMP176]], i32 noundef 0, i32 noundef 0), !dbg [[DBG124]]
// CHECK-NEXT:    br i1 [[CALL199]], label [[ATOMIC_EXIT200:%.*]], label [[ATOMIC_CONT186]], !dbg [[DBG124]]
// CHECK:       atomic_exit200:
// CHECK-NEXT:    store i32 [[BF_ASHR191]], i32* @iv, align 4, !dbg [[DBG124]]
// CHECK-NEXT:    [[TMP177:%.*]] = load x86_fp80, x86_fp80* @ldv, align 16, !dbg [[DBG127:![0-9]+]]
// CHECK-NEXT:    [[ATOMIC_LOAD201:%.*]] = load atomic i32, i32* getelementptr inbounds ([[STRUCT_BITFIELDS2:%.*]], %struct.BitFields2* @bfx2, i32 0, i32 0) monotonic, align 4, !dbg [[DBG128:![0-9]+]]
// CHECK-NEXT:    br label [[ATOMIC_CONT202:%.*]], !dbg [[DBG128]]
// CHECK:       atomic_cont202:
// CHECK-NEXT:    [[TMP178:%.*]] = phi i32 [ [[ATOMIC_LOAD201]], [[ATOMIC_EXIT200]] ], [ [[TMP181:%.*]], [[ATOMIC_CONT202]] ], !dbg [[DBG128]]
// CHECK-NEXT:    store i32 [[TMP178]], i32* [[ATOMIC_TEMP203]], align 4, !dbg [[DBG128]]
// CHECK-NEXT:    store i32 [[TMP178]], i32* [[ATOMIC_TEMP204]], align 4, !dbg [[DBG128]]
// CHECK-NEXT:    [[BF_LOAD205:%.*]] = load i32, i32* [[ATOMIC_TEMP204]], align 4, !dbg [[DBG128]]
// CHECK-NEXT:    [[BF_ASHR206:%.*]] = ashr i32 [[BF_LOAD205]], 31, !dbg [[DBG128]]
// CHECK-NEXT:    [[CONV207:%.*]] = sitofp i32 [[BF_ASHR206]] to x86_fp80, !dbg [[DBG129:![0-9]+]]
// CHECK-NEXT:    [[SUB208:%.*]] = fsub x86_fp80 [[CONV207]], [[TMP177]], !dbg [[DBG130:![0-9]+]]
// CHECK-NEXT:    [[CONV209:%.*]] = fptosi x86_fp80 [[SUB208]] to i32, !dbg [[DBG129]]
// CHECK-NEXT:    [[BF_LOAD210:%.*]] = load i32, i32* [[ATOMIC_TEMP203]], align 4, !dbg [[DBG128]]
// CHECK-NEXT:    [[BF_VALUE211:%.*]] = and i32 [[CONV209]], 1, !dbg [[DBG128]]
// CHECK-NEXT:    [[BF_SHL212:%.*]] = shl i32 [[BF_VALUE211]], 31, !dbg [[DBG128]]
// CHECK-NEXT:    [[BF_CLEAR213:%.*]] = and i32 [[BF_LOAD210]], 2147483647, !dbg [[DBG128]]
// CHECK-NEXT:    [[BF_SET214:%.*]] = or i32 [[BF_CLEAR213]], [[BF_SHL212]], !dbg [[DBG128]]
// CHECK-NEXT:    store i32 [[BF_SET214]], i32* [[ATOMIC_TEMP203]], align 4, !dbg [[DBG128]]
// CHECK-NEXT:    [[TMP179:%.*]] = load i32, i32* [[ATOMIC_TEMP203]], align 4, !dbg [[DBG128]]
// CHECK-NEXT:    [[TMP180:%.*]] = cmpxchg i32* getelementptr inbounds ([[STRUCT_BITFIELDS2]], %struct.BitFields2* @bfx2, i32 0, i32 0), i32 [[TMP178]], i32 [[TMP179]] monotonic monotonic, align 4, !dbg [[DBG128]]
// CHECK-NEXT:    [[TMP181]] = extractvalue { i32, i1 } [[TMP180]], 0, !dbg [[DBG128]]
// CHECK-NEXT:    [[TMP182:%.*]] = extractvalue { i32, i1 } [[TMP180]], 1, !dbg [[DBG128]]
// CHECK-NEXT:    br i1 [[TMP182]], label [[ATOMIC_EXIT215:%.*]], label [[ATOMIC_CONT202]], !dbg [[DBG128]]
// CHECK:       atomic_exit215:
// CHECK-NEXT:    store i32 [[CONV209]], i32* @iv, align 4, !dbg [[DBG128]]
// CHECK-NEXT:    [[TMP183:%.*]] = load x86_fp80, x86_fp80* @ldv, align 16, !dbg [[DBG131:![0-9]+]]
// CHECK-NEXT:    [[ATOMIC_LOAD216:%.*]] = load atomic i8, i8* getelementptr (i8, i8* bitcast (%struct.BitFields2_packed* @bfx2_packed to i8*), i64 3) monotonic, align 1, !dbg [[DBG132:![0-9]+]]
// CHECK-NEXT:    br label [[ATOMIC_CONT217:%.*]], !dbg [[DBG132]]
// CHECK:       atomic_cont217:
// CHECK-NEXT:    [[TMP184:%.*]] = phi i8 [ [[ATOMIC_LOAD216]], [[ATOMIC_EXIT215]] ], [ [[TMP190:%.*]], [[ATOMIC_CONT217]] ], !dbg [[DBG132]]
// CHECK-NEXT:    [[TMP185:%.*]] = bitcast i32* [[ATOMIC_TEMP218]] to i8*, !dbg [[DBG132]]
// CHECK-NEXT:    store i8 [[TMP184]], i8* [[TMP185]], align 1, !dbg [[DBG132]]
// CHECK-NEXT:    [[TMP186:%.*]] = bitcast i32* [[ATOMIC_TEMP219]] to i8*, !dbg [[DBG132]]
// CHECK-NEXT:    store i8 [[TMP184]], i8* [[TMP186]], align 1, !dbg [[DBG132]]
// CHECK-NEXT:    [[BF_LOAD220:%.*]] = load i8, i8* [[TMP186]], align 1, !dbg [[DBG132]]
// CHECK-NEXT:    [[BF_ASHR221:%.*]] = ashr i8 [[BF_LOAD220]], 7, !dbg [[DBG132]]
// CHECK-NEXT:    [[BF_CAST:%.*]] = sext i8 [[BF_ASHR221]] to i32, !dbg [[DBG132]]
// CHECK-NEXT:    [[CONV222:%.*]] = sitofp i32 [[BF_CAST]] to x86_fp80, !dbg [[DBG133:![0-9]+]]
// CHECK-NEXT:    [[DIV223:%.*]] = fdiv x86_fp80 [[TMP183]], [[CONV222]], !dbg [[DBG134:![0-9]+]]
// CHECK-NEXT:    [[CONV224:%.*]] = fptosi x86_fp80 [[DIV223]] to i32, !dbg [[DBG131]]
// CHECK-NEXT:    [[TMP187:%.*]] = trunc i32 [[CONV224]] to i8, !dbg [[DBG132]]
// CHECK-NEXT:    [[BF_LOAD225:%.*]] = load i8, i8* [[TMP185]], align 1, !dbg [[DBG132]]
// CHECK-NEXT:    [[BF_VALUE226:%.*]] = and i8 [[TMP187]], 1, !dbg [[DBG132]]
// CHECK-NEXT:    [[BF_SHL227:%.*]] = shl i8 [[BF_VALUE226]], 7, !dbg [[DBG132]]
// CHECK-NEXT:    [[BF_CLEAR228:%.*]] = and i8 [[BF_LOAD225]], 127, !dbg [[DBG132]]
// CHECK-NEXT:    [[BF_SET229:%.*]] = or i8 [[BF_CLEAR228]], [[BF_SHL227]], !dbg [[DBG132]]
// CHECK-NEXT:    store i8 [[BF_SET229]], i8* [[TMP185]], align 1, !dbg [[DBG132]]
// CHECK-NEXT:    [[TMP188:%.*]] = load i8, i8* [[TMP185]], align 1, !dbg [[DBG132]]
// CHECK-NEXT:    [[TMP189:%.*]] = cmpxchg i8* getelementptr (i8, i8* bitcast (%struct.BitFields2_packed* @bfx2_packed to i8*), i64 3), i8 [[TMP184]], i8 [[TMP188]] monotonic monotonic, align 1, !dbg [[DBG132]]
// CHECK-NEXT:    [[TMP190]] = extractvalue { i8, i1 } [[TMP189]], 0, !dbg [[DBG132]]
// CHECK-NEXT:    [[TMP191:%.*]] = extractvalue { i8, i1 } [[TMP189]], 1, !dbg [[DBG132]]
// CHECK-NEXT:    br i1 [[TMP191]], label [[ATOMIC_EXIT230:%.*]], label [[ATOMIC_CONT217]], !dbg [[DBG132]]
// CHECK:       atomic_exit230:
// CHECK-NEXT:    store i32 [[CONV224]], i32* @iv, align 4, !dbg [[DBG132]]
// CHECK-NEXT:    [[TMP192:%.*]] = load x86_fp80, x86_fp80* @ldv, align 16, !dbg [[DBG135:![0-9]+]]
// CHECK-NEXT:    [[ATOMIC_LOAD231:%.*]] = load atomic i32, i32* getelementptr inbounds ([[STRUCT_BITFIELDS3:%.*]], %struct.BitFields3* @bfx3, i32 0, i32 0) monotonic, align 4, !dbg [[DBG136:![0-9]+]]
// CHECK-NEXT:    br label [[ATOMIC_CONT232:%.*]], !dbg [[DBG136]]
// CHECK:       atomic_cont232:
// CHECK-NEXT:    [[TMP193:%.*]] = phi i32 [ [[ATOMIC_LOAD231]], [[ATOMIC_EXIT230]] ], [ [[TMP196:%.*]], [[ATOMIC_CONT232]] ], !dbg [[DBG136]]
// CHECK-NEXT:    store i32 [[TMP193]], i32* [[ATOMIC_TEMP233]], align 4, !dbg [[DBG136]]
// CHECK-NEXT:    store i32 [[TMP193]], i32* [[ATOMIC_TEMP234]], align 4, !dbg [[DBG136]]
// CHECK-NEXT:    [[BF_LOAD235:%.*]] = load i32, i32* [[ATOMIC_TEMP234]], align 4, !dbg [[DBG136]]
// CHECK-NEXT:    [[BF_SHL236:%.*]] = shl i32 [[BF_LOAD235]], 7, !dbg [[DBG136]]
// CHECK-NEXT:    [[BF_ASHR237:%.*]] = ashr i32 [[BF_SHL236]], 18, !dbg [[DBG136]]
// CHECK-NEXT:    [[CONV238:%.*]] = sitofp i32 [[BF_ASHR237]] to x86_fp80, !dbg [[DBG137:![0-9]+]]
// CHECK-NEXT:    [[DIV239:%.*]] = fdiv x86_fp80 [[CONV238]], [[TMP192]], !dbg [[DBG138:![0-9]+]]
// CHECK-NEXT:    [[CONV240:%.*]] = fptosi x86_fp80 [[DIV239]] to i32, !dbg [[DBG137]]
// CHECK-NEXT:    [[BF_LOAD241:%.*]] = load i32, i32* [[ATOMIC_TEMP233]], align 4, !dbg [[DBG136]]
// CHECK-NEXT:    [[BF_VALUE242:%.*]] = and i32 [[CONV240]], 16383, !dbg [[DBG136]]
// CHECK-NEXT:    [[BF_SHL243:%.*]] = shl i32 [[BF_VALUE242]], 11, !dbg [[DBG136]]
// CHECK-NEXT:    [[BF_CLEAR244:%.*]] = and i32 [[BF_LOAD241]], -33552385, !dbg [[DBG136]]
// CHECK-NEXT:    [[BF_SET245:%.*]] = or i32 [[BF_CLEAR244]], [[BF_SHL243]], !dbg [[DBG136]]
// CHECK-NEXT:    store i32 [[BF_SET245]], i32* [[ATOMIC_TEMP233]], align 4, !dbg [[DBG136]]
// CHECK-NEXT:    [[TMP194:%.*]] = load i32, i32* [[ATOMIC_TEMP233]], align 4, !dbg [[DBG136]]
// CHECK-NEXT:    [[TMP195:%.*]] = cmpxchg i32* getelementptr inbounds ([[STRUCT_BITFIELDS3]], %struct.BitFields3* @bfx3, i32 0, i32 0), i32 [[TMP193]], i32 [[TMP194]] monotonic monotonic, align 4, !dbg [[DBG136]]
// CHECK-NEXT:    [[TMP196]] = extractvalue { i32, i1 } [[TMP195]], 0, !dbg [[DBG136]]
// CHECK-NEXT:    [[TMP197:%.*]] = extractvalue { i32, i1 } [[TMP195]], 1, !dbg [[DBG136]]
// CHECK-NEXT:    br i1 [[TMP197]], label [[ATOMIC_EXIT246:%.*]], label [[ATOMIC_CONT232]], !dbg [[DBG136]]
// CHECK:       atomic_exit246:
// CHECK-NEXT:    store i32 [[BF_ASHR237]], i32* @iv, align 4, !dbg [[DBG136]]
// CHECK-NEXT:    [[TMP198:%.*]] = load x86_fp80, x86_fp80* @ldv, align 16, !dbg [[DBG139:![0-9]+]]
// CHECK-NEXT:    [[TMP199:%.*]] = bitcast i32* [[ATOMIC_TEMP247]] to i24*, !dbg [[DBG140:![0-9]+]]
// CHECK-NEXT:    [[TMP200:%.*]] = bitcast i24* [[TMP199]] to i8*, !dbg [[DBG140]]
// CHECK-NEXT:    call void @__atomic_load(i64 noundef 3, i8* noundef getelementptr (i8, i8* bitcast (%struct.BitFields3_packed* @bfx3_packed to i8*), i64 1), i8* noundef [[TMP200]], i32 noundef 0), !dbg [[DBG140]]
// CHECK-NEXT:    br label [[ATOMIC_CONT248:%.*]], !dbg [[DBG140]]
// CHECK:       atomic_cont248:
// CHECK-NEXT:    [[TMP201:%.*]] = bitcast i32* [[ATOMIC_TEMP249]] to i24*, !dbg [[DBG140]]
// CHECK-NEXT:    [[TMP202:%.*]] = load i24, i24* [[TMP199]], align 1, !dbg [[DBG140]]
// CHECK-NEXT:    store i24 [[TMP202]], i24* [[TMP201]], align 1, !dbg [[DBG140]]
// CHECK-NEXT:    [[TMP203:%.*]] = load i24, i24* [[TMP199]], align 1, !dbg [[DBG140]]
// CHECK-NEXT:    [[TMP204:%.*]] = bitcast i32* [[ATOMIC_TEMP250]] to i24*, !dbg [[DBG140]]
// CHECK-NEXT:    store i24 [[TMP203]], i24* [[TMP204]], align 1, !dbg [[DBG140]]
// CHECK-NEXT:    [[BF_LOAD251:%.*]] = load i24, i24* [[TMP204]], align 1, !dbg [[DBG140]]
// CHECK-NEXT:    [[BF_SHL252:%.*]] = shl i24 [[BF_LOAD251]], 7, !dbg [[DBG140]]
// CHECK-NEXT:    [[BF_ASHR253:%.*]] = ashr i24 [[BF_SHL252]], 10, !dbg [[DBG140]]
// CHECK-NEXT:    [[BF_CAST254:%.*]] = sext i24 [[BF_ASHR253]] to i32, !dbg [[DBG140]]
// CHECK-NEXT:    [[CONV255:%.*]] = sitofp i32 [[BF_CAST254]] to x86_fp80, !dbg [[DBG141:![0-9]+]]
// CHECK-NEXT:    [[ADD256:%.*]] = fadd x86_fp80 [[CONV255]], [[TMP198]], !dbg [[DBG142:![0-9]+]]
// CHECK-NEXT:    [[CONV257:%.*]] = fptosi x86_fp80 [[ADD256]] to i32, !dbg [[DBG141]]
// CHECK-NEXT:    [[TMP205:%.*]] = trunc i32 [[CONV257]] to i24, !dbg [[DBG140]]
// CHECK-NEXT:    [[BF_LOAD258:%.*]] = load i24, i24* [[TMP201]], align 1, !dbg [[DBG140]]
// CHECK-NEXT:    [[BF_VALUE259:%.*]] = and i24 [[TMP205]], 16383, !dbg [[DBG140]]
// CHECK-NEXT:    [[BF_SHL260:%.*]] = shl i24 [[BF_VALUE259]], 3, !dbg [[DBG140]]
// CHECK-NEXT:    [[BF_CLEAR261:%.*]] = and i24 [[BF_LOAD258]], -131065, !dbg [[DBG140]]
// CHECK-NEXT:    [[BF_SET262:%.*]] = or i24 [[BF_CLEAR261]], [[BF_SHL260]], !dbg [[DBG140]]
// CHECK-NEXT:    store i24 [[BF_SET262]], i24* [[TMP201]], align 1, !dbg [[DBG140]]
// CHECK-NEXT:    [[TMP206:%.*]] = bitcast i24* [[TMP199]] to i8*, !dbg [[DBG140]]
// CHECK-NEXT:    [[TMP207:%.*]] = bitcast i24* [[TMP201]] to i8*, !dbg [[DBG140]]
// CHECK-NEXT:    [[CALL263:%.*]] = call zeroext i1 @__atomic_compare_exchange(i64 noundef 3, i8* noundef getelementptr (i8, i8* bitcast (%struct.BitFields3_packed* @bfx3_packed to i8*), i64 1), i8* noundef [[TMP206]], i8* noundef [[TMP207]], i32 noundef 0, i32 noundef 0), !dbg [[DBG140]]
// CHECK-NEXT:    br i1 [[CALL263]], label [[ATOMIC_EXIT264:%.*]], label [[ATOMIC_CONT248]], !dbg [[DBG140]]
// CHECK:       atomic_exit264:
// CHECK-NEXT:    store i32 [[CONV257]], i32* @iv, align 4, !dbg [[DBG140]]
// CHECK-NEXT:    [[TMP208:%.*]] = load x86_fp80, x86_fp80* @ldv, align 16, !dbg [[DBG143:![0-9]+]]
// CHECK-NEXT:    [[ATOMIC_LOAD265:%.*]] = load atomic i64, i64* bitcast (%struct.BitFields4* @bfx4 to i64*) monotonic, align 8, !dbg [[DBG144:![0-9]+]]
// CHECK-NEXT:    br label [[ATOMIC_CONT266:%.*]], !dbg [[DBG144]]
// CHECK:       atomic_cont266:
// CHECK-NEXT:    [[TMP209:%.*]] = phi i64 [ [[ATOMIC_LOAD265]], [[ATOMIC_EXIT264]] ], [ [[TMP213:%.*]], [[ATOMIC_CONT266]] ], !dbg [[DBG144]]
// CHECK-NEXT:    store i64 [[TMP209]], i64* [[ATOMIC_TEMP267]], align 8, !dbg [[DBG144]]
// CHECK-NEXT:    store i64 [[TMP209]], i64* [[ATOMIC_TEMP268]], align 8, !dbg [[DBG144]]
// CHECK-NEXT:    [[BF_LOAD269:%.*]] = load i64, i64* [[ATOMIC_TEMP268]], align 8, !dbg [[DBG144]]
// CHECK-NEXT:    [[BF_SHL270:%.*]] = shl i64 [[BF_LOAD269]], 47, !dbg [[DBG144]]
// CHECK-NEXT:    [[BF_ASHR271:%.*]] = ashr i64 [[BF_SHL270]], 63, !dbg [[DBG144]]
// CHECK-NEXT:    [[BF_CAST272:%.*]] = trunc i64 [[BF_ASHR271]] to i32, !dbg [[DBG144]]
// CHECK-NEXT:    [[CONV273:%.*]] = sitofp i32 [[BF_CAST272]] to x86_fp80, !dbg [[DBG145:![0-9]+]]
// CHECK-NEXT:    [[MUL274:%.*]] = fmul x86_fp80 [[CONV273]], [[TMP208]], !dbg [[DBG146:![0-9]+]]
// CHECK-NEXT:    [[CONV275:%.*]] = fptosi x86_fp80 [[MUL274]] to i32, !dbg [[DBG145]]
// CHECK-NEXT:    [[TMP210:%.*]] = zext i32 [[CONV275]] to i64, !dbg [[DBG144]]
// CHECK-NEXT:    [[BF_LOAD276:%.*]] = load i64, i64* [[ATOMIC_TEMP267]], align 8, !dbg [[DBG144]]
// CHECK-NEXT:    [[BF_VALUE277:%.*]] = and i64 [[TMP210]], 1, !dbg [[DBG144]]
// CHECK-NEXT:    [[BF_SHL278:%.*]] = shl i64 [[BF_VALUE277]], 16, !dbg [[DBG144]]
// CHECK-NEXT:    [[BF_CLEAR279:%.*]] = and i64 [[BF_LOAD276]], -65537, !dbg [[DBG144]]
// CHECK-NEXT:    [[BF_SET280:%.*]] = or i64 [[BF_CLEAR279]], [[BF_SHL278]], !dbg [[DBG144]]
// CHECK-NEXT:    store i64 [[BF_SET280]], i64* [[ATOMIC_TEMP267]], align 8, !dbg [[DBG144]]
// CHECK-NEXT:    [[TMP211:%.*]] = load i64, i64* [[ATOMIC_TEMP267]], align 8, !dbg [[DBG144]]
// CHECK-NEXT:    [[TMP212:%.*]] = cmpxchg i64* bitcast (%struct.BitFields4* @bfx4 to i64*), i64 [[TMP209]], i64 [[TMP211]] monotonic monotonic, align 8, !dbg [[DBG144]]
// CHECK-NEXT:    [[TMP213]] = extractvalue { i64, i1 } [[TMP212]], 0, !dbg [[DBG144]]
// CHECK-NEXT:    [[TMP214:%.*]] = extractvalue { i64, i1 } [[TMP212]], 1, !dbg [[DBG144]]
// CHECK-NEXT:    br i1 [[TMP214]], label [[ATOMIC_EXIT281:%.*]], label [[ATOMIC_CONT266]], !dbg [[DBG144]]
// CHECK:       atomic_exit281:
// CHECK-NEXT:    store i32 [[CONV275]], i32* @iv, align 4, !dbg [[DBG144]]
// CHECK-NEXT:    [[TMP215:%.*]] = load x86_fp80, x86_fp80* @ldv, align 16, !dbg [[DBG147:![0-9]+]]
// CHECK-NEXT:    [[ATOMIC_LOAD282:%.*]] = load atomic i8, i8* getelementptr inbounds ([[STRUCT_BITFIELDS4_PACKED:%.*]], %struct.BitFields4_packed* @bfx4_packed, i32 0, i32 0, i64 2) monotonic, align 1, !dbg [[DBG148:![0-9]+]]
// CHECK-NEXT:    br label [[ATOMIC_CONT283:%.*]], !dbg [[DBG148]]
// CHECK:       atomic_cont283:
// CHECK-NEXT:    [[TMP216:%.*]] = phi i8 [ [[ATOMIC_LOAD282]], [[ATOMIC_EXIT281]] ], [ [[TMP222:%.*]], [[ATOMIC_CONT283]] ], !dbg [[DBG148]]
// CHECK-NEXT:    [[TMP217:%.*]] = bitcast i32* [[ATOMIC_TEMP284]] to i8*, !dbg [[DBG148]]
// CHECK-NEXT:    store i8 [[TMP216]], i8* [[TMP217]], align 1, !dbg [[DBG148]]
// CHECK-NEXT:    [[TMP218:%.*]] = bitcast i32* [[ATOMIC_TEMP285]] to i8*, !dbg [[DBG148]]
// CHECK-NEXT:    store i8 [[TMP216]], i8* [[TMP218]], align 1, !dbg [[DBG148]]
// CHECK-NEXT:    [[BF_LOAD286:%.*]] = load i8, i8* [[TMP218]], align 1, !dbg [[DBG148]]
// CHECK-NEXT:    [[BF_SHL287:%.*]] = shl i8 [[BF_LOAD286]], 7, !dbg [[DBG148]]
// CHECK-NEXT:    [[BF_ASHR288:%.*]] = ashr i8 [[BF_SHL287]], 7, !dbg [[DBG148]]
// CHECK-NEXT:    [[BF_CAST289:%.*]] = sext i8 [[BF_ASHR288]] to i32, !dbg [[DBG148]]
// CHECK-NEXT:    [[CONV290:%.*]] = sitofp i32 [[BF_CAST289]] to x86_fp80, !dbg [[DBG149:![0-9]+]]
// CHECK-NEXT:    [[SUB291:%.*]] = fsub x86_fp80 [[CONV290]], [[TMP215]], !dbg [[DBG150:![0-9]+]]
// CHECK-NEXT:    [[CONV292:%.*]] = fptosi x86_fp80 [[SUB291]] to i32, !dbg [[DBG149]]
// CHECK-NEXT:    [[TMP219:%.*]] = trunc i32 [[CONV292]] to i8, !dbg [[DBG148]]
// CHECK-NEXT:    [[BF_LOAD293:%.*]] = load i8, i8* [[TMP217]], align 1, !dbg [[DBG148]]
// CHECK-NEXT:    [[BF_VALUE294:%.*]] = and i8 [[TMP219]], 1, !dbg [[DBG148]]
// CHECK-NEXT:    [[BF_CLEAR295:%.*]] = and i8 [[BF_LOAD293]], -2, !dbg [[DBG148]]
// CHECK-NEXT:    [[BF_SET296:%.*]] = or i8 [[BF_CLEAR295]], [[BF_VALUE294]], !dbg [[DBG148]]
// CHECK-NEXT:    store i8 [[BF_SET296]], i8* [[TMP217]], align 1, !dbg [[DBG148]]
// CHECK-NEXT:    [[TMP220:%.*]] = load i8, i8* [[TMP217]], align 1, !dbg [[DBG148]]
// CHECK-NEXT:    [[TMP221:%.*]] = cmpxchg i8* getelementptr inbounds ([[STRUCT_BITFIELDS4_PACKED]], %struct.BitFields4_packed* @bfx4_packed, i32 0, i32 0, i64 2), i8 [[TMP216]], i8 [[TMP220]] monotonic monotonic, align 1, !dbg [[DBG148]]
// CHECK-NEXT:    [[TMP222]] = extractvalue { i8, i1 } [[TMP221]], 0, !dbg [[DBG148]]
// CHECK-NEXT:    [[TMP223:%.*]] = extractvalue { i8, i1 } [[TMP221]], 1, !dbg [[DBG148]]
// CHECK-NEXT:    br i1 [[TMP223]], label [[ATOMIC_EXIT297:%.*]], label [[ATOMIC_CONT283]], !dbg [[DBG148]]
// CHECK:       atomic_exit297:
// CHECK-NEXT:    store i32 [[BF_CAST289]], i32* @iv, align 4, !dbg [[DBG148]]
// CHECK-NEXT:    [[TMP224:%.*]] = load x86_fp80, x86_fp80* @ldv, align 16, !dbg [[DBG151:![0-9]+]]
// CHECK-NEXT:    [[ATOMIC_LOAD298:%.*]] = load atomic i64, i64* bitcast (%struct.BitFields4* @bfx4 to i64*) monotonic, align 8, !dbg [[DBG152:![0-9]+]]
// CHECK-NEXT:    br label [[ATOMIC_CONT299:%.*]], !dbg [[DBG152]]
// CHECK:       atomic_cont299:
// CHECK-NEXT:    [[TMP225:%.*]] = phi i64 [ [[ATOMIC_LOAD298]], [[ATOMIC_EXIT297]] ], [ [[TMP228:%.*]], [[ATOMIC_CONT299]] ], !dbg [[DBG152]]
// CHECK-NEXT:    store i64 [[TMP225]], i64* [[ATOMIC_TEMP300]], align 8, !dbg [[DBG152]]
// CHECK-NEXT:    store i64 [[TMP225]], i64* [[ATOMIC_TEMP301]], align 8, !dbg [[DBG152]]
// CHECK-NEXT:    [[BF_LOAD302:%.*]] = load i64, i64* [[ATOMIC_TEMP301]], align 8, !dbg [[DBG152]]
// CHECK-NEXT:    [[BF_SHL303:%.*]] = shl i64 [[BF_LOAD302]], 40, !dbg [[DBG152]]
// CHECK-NEXT:    [[BF_ASHR304:%.*]] = ashr i64 [[BF_SHL303]], 57, !dbg [[DBG152]]
// CHECK-NEXT:    [[CONV305:%.*]] = sitofp i64 [[BF_ASHR304]] to x86_fp80, !dbg [[DBG153:![0-9]+]]
// CHECK-NEXT:    [[DIV306:%.*]] = fdiv x86_fp80 [[CONV305]], [[TMP224]], !dbg [[DBG154:![0-9]+]]
// CHECK-NEXT:    [[CONV307:%.*]] = fptosi x86_fp80 [[DIV306]] to i64, !dbg [[DBG153]]
// CHECK-NEXT:    [[BF_LOAD308:%.*]] = load i64, i64* [[ATOMIC_TEMP300]], align 8, !dbg [[DBG152]]
// CHECK-NEXT:    [[BF_VALUE309:%.*]] = and i64 [[CONV307]], 127, !dbg [[DBG152]]
// CHECK-NEXT:    [[BF_SHL310:%.*]] = shl i64 [[BF_VALUE309]], 17, !dbg [[DBG152]]
// CHECK-NEXT:    [[BF_CLEAR311:%.*]] = and i64 [[BF_LOAD308]], -16646145, !dbg [[DBG152]]
// CHECK-NEXT:    [[BF_SET312:%.*]] = or i64 [[BF_CLEAR311]], [[BF_SHL310]], !dbg [[DBG152]]
// CHECK-NEXT:    store i64 [[BF_SET312]], i64* [[ATOMIC_TEMP300]], align 8, !dbg [[DBG152]]
// CHECK-NEXT:    [[TMP226:%.*]] = load i64, i64* [[ATOMIC_TEMP300]], align 8, !dbg [[DBG152]]
// CHECK-NEXT:    [[TMP227:%.*]] = cmpxchg i64* bitcast (%struct.BitFields4* @bfx4 to i64*), i64 [[TMP225]], i64 [[TMP226]] release monotonic, align 8, !dbg [[DBG152]]
// CHECK-NEXT:    [[TMP228]] = extractvalue { i64, i1 } [[TMP227]], 0, !dbg [[DBG152]]
// CHECK-NEXT:    [[TMP229:%.*]] = extractvalue { i64, i1 } [[TMP227]], 1, !dbg [[DBG152]]
// CHECK-NEXT:    br i1 [[TMP229]], label [[ATOMIC_EXIT313:%.*]], label [[ATOMIC_CONT299]], !dbg [[DBG152]]
// CHECK:       atomic_exit313:
// CHECK-NEXT:    [[CONV314:%.*]] = trunc i64 [[CONV307]] to i32, !dbg [[DBG152]]
// CHECK-NEXT:    store i32 [[CONV314]], i32* @iv, align 4, !dbg [[DBG152]]
// CHECK-NEXT:    [[TMP230:%.*]] = load x86_fp80, x86_fp80* @ldv, align 16, !dbg [[DBG155:![0-9]+]]
// CHECK-NEXT:    [[ATOMIC_LOAD315:%.*]] = load atomic i8, i8* getelementptr inbounds ([[STRUCT_BITFIELDS4_PACKED]], %struct.BitFields4_packed* @bfx4_packed, i32 0, i32 0, i64 2) acquire, align 1, !dbg [[DBG156:![0-9]+]]
// CHECK-NEXT:    br label [[ATOMIC_CONT316:%.*]], !dbg [[DBG156]]
// CHECK:       atomic_cont316:
// CHECK-NEXT:    [[TMP231:%.*]] = phi i8 [ [[ATOMIC_LOAD315]], [[ATOMIC_EXIT313]] ], [ [[TMP237:%.*]], [[ATOMIC_CONT316]] ], !dbg [[DBG156]]
// CHECK-NEXT:    [[TMP232:%.*]] = bitcast i64* [[ATOMIC_TEMP317]] to i8*, !dbg [[DBG156]]
// CHECK-NEXT:    store i8 [[TMP231]], i8* [[TMP232]], align 1, !dbg [[DBG156]]
// CHECK-NEXT:    [[TMP233:%.*]] = bitcast i64* [[ATOMIC_TEMP318]] to i8*, !dbg [[DBG156]]
// CHECK-NEXT:    store i8 [[TMP231]], i8* [[TMP233]], align 1, !dbg [[DBG156]]
// CHECK-NEXT:    [[BF_LOAD319:%.*]] = load i8, i8* [[TMP233]], align 1, !dbg [[DBG156]]
// CHECK-NEXT:    [[BF_ASHR320:%.*]] = ashr i8 [[BF_LOAD319]], 1, !dbg [[DBG156]]
// CHECK-NEXT:    [[BF_CAST321:%.*]] = sext i8 [[BF_ASHR320]] to i64, !dbg [[DBG156]]
// CHECK-NEXT:    [[CONV322:%.*]] = sitofp i64 [[BF_CAST321]] to x86_fp80, !dbg [[DBG157:![0-9]+]]
// CHECK-NEXT:    [[ADD323:%.*]] = fadd x86_fp80 [[CONV322]], [[TMP230]], !dbg [[DBG158:![0-9]+]]
// CHECK-NEXT:    [[CONV324:%.*]] = fptosi x86_fp80 [[ADD323]] to i64, !dbg [[DBG157]]
// CHECK-NEXT:    [[TMP234:%.*]] = trunc i64 [[CONV324]] to i8, !dbg [[DBG156]]
// CHECK-NEXT:    [[BF_LOAD325:%.*]] = load i8, i8* [[TMP232]], align 1, !dbg [[DBG156]]
// CHECK-NEXT:    [[BF_VALUE326:%.*]] = and i8 [[TMP234]], 127, !dbg [[DBG156]]
// CHECK-NEXT:    [[BF_SHL327:%.*]] = shl i8 [[BF_VALUE326]], 1, !dbg [[DBG156]]
// CHECK-NEXT:    [[BF_CLEAR328:%.*]] = and i8 [[BF_LOAD325]], 1, !dbg [[DBG156]]
// CHECK-NEXT:    [[BF_SET329:%.*]] = or i8 [[BF_CLEAR328]], [[BF_SHL327]], !dbg [[DBG156]]
// CHECK-NEXT:    store i8 [[BF_SET329]], i8* [[TMP232]], align 1, !dbg [[DBG156]]
// CHECK-NEXT:    [[TMP235:%.*]] = load i8, i8* [[TMP232]], align 1, !dbg [[DBG156]]
// CHECK-NEXT:    [[TMP236:%.*]] = cmpxchg i8* getelementptr inbounds ([[STRUCT_BITFIELDS4_PACKED]], %struct.BitFields4_packed* @bfx4_packed, i32 0, i32 0, i64 2), i8 [[TMP231]], i8 [[TMP235]] acquire acquire, align 1, !dbg [[DBG156]]
// CHECK-NEXT:    [[TMP237]] = extractvalue { i8, i1 } [[TMP236]], 0, !dbg [[DBG156]]
// CHECK-NEXT:    [[TMP238:%.*]] = extractvalue { i8, i1 } [[TMP236]], 1, !dbg [[DBG156]]
// CHECK-NEXT:    br i1 [[TMP238]], label [[ATOMIC_EXIT330:%.*]], label [[ATOMIC_CONT316]], !dbg [[DBG156]]
// CHECK:       atomic_exit330:
// CHECK-NEXT:    [[CONV331:%.*]] = trunc i64 [[CONV324]] to i32, !dbg [[DBG156]]
// CHECK-NEXT:    store i32 [[CONV331]], i32* @iv, align 4, !dbg [[DBG156]]
// CHECK-NEXT:    [[TMP239:%.*]] = load i64, i64* @ulv, align 8, !dbg [[DBG159:![0-9]+]]
// CHECK-NEXT:    [[CONV332:%.*]] = uitofp i64 [[TMP239]] to float, !dbg [[DBG159]]
// CHECK-NEXT:    [[ATOMIC_LOAD333:%.*]] = load atomic i64, i64* bitcast (<2 x float>* @float2x to i64*) acquire, align 8, !dbg [[DBG160:![0-9]+]]
// CHECK-NEXT:    br label [[ATOMIC_CONT334:%.*]], !dbg [[DBG160]]
// CHECK:       atomic_cont334:
// CHECK-NEXT:    [[TMP240:%.*]] = phi i64 [ [[ATOMIC_LOAD333]], [[ATOMIC_EXIT330]] ], [ [[TMP249:%.*]], [[ATOMIC_CONT334]] ], !dbg [[DBG160]]
// CHECK-NEXT:    [[TMP241:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP335]] to i64*, !dbg [[DBG160]]
// CHECK-NEXT:    store i64 [[TMP240]], i64* [[TMP241]], align 8, !dbg [[DBG160]]
// CHECK-NEXT:    [[TMP242:%.*]] = bitcast i64 [[TMP240]] to <2 x float>, !dbg [[DBG160]]
// CHECK-NEXT:    store <2 x float> [[TMP242]], <2 x float>* [[ATOMIC_TEMP336]], align 8, !dbg [[DBG160]]
// CHECK-NEXT:    [[TMP243:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP336]], align 8, !dbg [[DBG160]]
// CHECK-NEXT:    [[TMP244:%.*]] = extractelement <2 x float> [[TMP243]], i64 0, !dbg [[DBG160]]
// CHECK-NEXT:    [[SUB337:%.*]] = fsub float [[CONV332]], [[TMP244]], !dbg [[DBG161:![0-9]+]]
// CHECK-NEXT:    [[TMP245:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP335]], align 8, !dbg [[DBG160]]
// CHECK-NEXT:    [[TMP246:%.*]] = insertelement <2 x float> [[TMP245]], float [[SUB337]], i64 0, !dbg [[DBG160]]
// CHECK-NEXT:    store <2 x float> [[TMP246]], <2 x float>* [[ATOMIC_TEMP335]], align 8, !dbg [[DBG160]]
// CHECK-NEXT:    [[TMP247:%.*]] = load i64, i64* [[TMP241]], align 8, !dbg [[DBG160]]
// CHECK-NEXT:    [[TMP248:%.*]] = cmpxchg i64* bitcast (<2 x float>* @float2x to i64*), i64 [[TMP240]], i64 [[TMP247]] acq_rel acquire, align 8, !dbg [[DBG160]]
// CHECK-NEXT:    [[TMP249]] = extractvalue { i64, i1 } [[TMP248]], 0, !dbg [[DBG160]]
// CHECK-NEXT:    [[TMP250:%.*]] = extractvalue { i64, i1 } [[TMP248]], 1, !dbg [[DBG160]]
// CHECK-NEXT:    br i1 [[TMP250]], label [[ATOMIC_EXIT338:%.*]], label [[ATOMIC_CONT334]], !dbg [[DBG160]]
// CHECK:       atomic_exit338:
// CHECK-NEXT:    store float [[TMP244]], float* @fv, align 4, !dbg [[DBG160]]
// CHECK-NEXT:    [[TMP251:%.*]] = load double, double* @dv, align 8, !dbg [[DBG162:![0-9]+]]
// CHECK-NEXT:    [[TMP252:%.*]] = call i32 @llvm.read_register.i32(metadata [[META2:![0-9]+]]), !dbg [[DBG163:![0-9]+]]
// CHECK-NEXT:    [[CONV339:%.*]] = sitofp i32 [[TMP252]] to double, !dbg [[DBG164:![0-9]+]]
// CHECK-NEXT:    [[DIV340:%.*]] = fdiv double [[TMP251]], [[CONV339]], !dbg [[DBG165:![0-9]+]]
// CHECK-NEXT:    [[CONV341:%.*]] = fptosi double [[DIV340]] to i32, !dbg [[DBG162]]
// CHECK-NEXT:    call void @llvm.write_register.i32(metadata [[META2]], i32 [[CONV341]]), !dbg [[DBG163]]
// CHECK-NEXT:    store i32 [[CONV341]], i32* @iv, align 4, !dbg [[DBG163]]
// CHECK-NEXT:    [[TMP253:%.*]] = atomicrmw xchg i32* @ix, i32 5 monotonic, align 4, !dbg [[DBG166:![0-9]+]]
// CHECK-NEXT:    call void @llvm.write_register.i32(metadata [[META2]], i32 [[TMP253]]), !dbg [[DBG166]]
// CHECK-NEXT:    ret i32 0, !dbg [[DBG167:![0-9]+]]
//
int main(void) {
#pragma oss atomic capture
  bv = bx++;
#pragma oss atomic capture
  cv = ++cx;
#pragma oss atomic capture
  ucv = ucx--;
#pragma oss atomic capture
  sv = --sx;
#pragma oss atomic capture
  sv = usx += usv;
#pragma oss atomic capture
  uiv = ix *= iv;
#pragma oss atomic capture
  {iv = uix; uix -= uiv;}
#pragma oss atomic capture
  {ix <<= iv; uiv = ix;}
#pragma oss atomic capture
  iv = uix >>= uiv;
#pragma oss atomic capture
  {ulv = lx; lx /= lv;}
#pragma oss atomic capture
  {ulx &= ulv; lv = ulx;}
#pragma oss atomic capture
  ullv = llx ^= llv;
#pragma oss atomic capture
  llv = ullx |= ullv;
#pragma oss atomic capture
  dv = fx = fx + fv;
#pragma oss atomic capture
  {fv = dx; dx = dv - dx;}
#pragma oss atomic capture
  {ldx = ldx * ldv; dv = ldx;}
// <Skip checks for complex calculations>
#pragma oss atomic capture
  cfv = cix = civ / cix;
// <Skip checks for complex calculations>
#pragma oss atomic capture
  {civ = cfx; cfx = cfv + cfx;}
// <Skip checks for complex calculations>
#pragma oss atomic capture seq_cst
  {cdx = cdx - cdv; cfv = cdx;}
#pragma oss atomic capture
  ulv = ulx = ulx & bv;
#pragma oss atomic capture
  {bv = bx; bx = cv & bx;}
#pragma oss atomic capture, seq_cst
  {cx = cx >> ucv; cv = cx;}
#pragma oss atomic capture
  ulv = ulx = sv << ulx;
#pragma oss atomic capture
  {lv = lx; lx = lx % usv;}
#pragma oss atomic seq_cst, capture
  {uix = iv | uix; uiv = uix;}
#pragma oss atomic capture
  iv = ix = ix & uiv;
// <Skip checks for complex calculations>
#pragma oss atomic capture
  {civ = cix; cix = lv + cix;}
#pragma oss atomic capture
  {fx = fx * ulv; fv = fx;}
#pragma oss atomic capture
  dv = dx /= llv;
#pragma oss atomic capture
  {ldv = ldx; ldx -= ullv;}
// <Skip checks for complex calculations>
#pragma oss atomic capture
  {cix = fv / cix; civ = cix;}
#pragma oss atomic capture
  sv = sx = sx + dv;
#pragma oss atomic capture
  {bv = bx; bx = ldv * bx;}
#pragma oss atomic capture
  {bx = civ - bx; bv = bx;}
#pragma oss atomic capture
  {int4x[sv] |= bv; iv = int4x[sv];}
#pragma oss atomic capture
  iv = bfx.a = bfx.a - ldv;
#pragma oss atomic capture
  {iv = bfx_packed.a; bfx_packed.a *= ldv;}
#pragma oss atomic capture
  {bfx2.a -= ldv; iv = bfx2.a;}
#pragma oss atomic capture
  iv = bfx2_packed.a = ldv / bfx2_packed.a;
#pragma oss atomic capture
  {iv = bfx3.a; bfx3.a /= ldv;}
#pragma oss atomic capture
  {bfx3_packed.a += ldv; iv = bfx3_packed.a;}
#pragma oss atomic relaxed capture
  iv = bfx4.a = bfx4.a * ldv;
#pragma oss atomic capture relaxed
  {iv = bfx4_packed.a; bfx4_packed.a -= ldv;}
#pragma oss atomic capture release
  {bfx4.b /= ldv; iv = bfx4.b;}
#pragma oss atomic capture acquire
  iv = bfx4_packed.b += ldv;
#pragma oss atomic capture acq_rel
  {fv = float2x.x; float2x.x = ulv - float2x.x;}
#ifdef __x86_64__
#pragma oss atomic capture seq_cst
  {rix = dv / rix; iv = rix;}
#pragma oss atomic capture
  {rix = ix; ix = 5;}
#endif
  return 0;
}
#endif
