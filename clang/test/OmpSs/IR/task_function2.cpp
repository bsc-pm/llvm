// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py UTC_ARGS: --function-signature --include-generated-funcs
// RUN: %clang_cc1 -verify -fompss-2 -disable-llvm-passes -ferror-limit 100 %s -S -emit-llvm -o - | FileCheck %s
// expected-no-diagnostics

#pragma oss task
template<typename T>
void foo(T *a) {}

int main() {
    foo<int>(nullptr);
}

// CHECK-LABEL: define {{[^@]+}}@main
// CHECK-SAME: () #[[ATTR0:[0-9]+]] !dbg [[DBG5:![0-9]+]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[CALL_ARG:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    store ptr null, ptr [[CALL_ARG]], align 8, !dbg [[DBG9:![0-9]+]]
// CHECK-NEXT:    [[TMP0:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OSS"([5 x i8] c"TASK\00"), "QUAL.OSS.FIRSTPRIVATE"(ptr [[CALL_ARG]], ptr undef), "QUAL.OSS.DEVICE.DEVFUNC"([14 x i8] c"_Z3fooIiEvPT_\00"), "QUAL.OSS.DECL.SOURCE"([23 x i8] c"task_function2.cpp:5:9\00") ], !dbg [[DBG10:![0-9]+]]
// CHECK-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[CALL_ARG]], align 8, !dbg [[DBG9]]
// CHECK-NEXT:    call void @_Z3fooIiEvPT_(ptr noundef [[TMP1]]), !dbg [[DBG10]]
// CHECK-NEXT:    call void @llvm.directive.region.exit(token [[TMP0]]), !dbg [[DBG10]]
// CHECK-NEXT:    ret i32 0, !dbg [[DBG11:![0-9]+]]
//
//
// CHECK-LABEL: define {{[^@]+}}@_Z3fooIiEvPT_
// CHECK-SAME: (ptr noundef [[A:%.*]]) #[[ATTR2:[0-9]+]] comdat !dbg [[DBG12:![0-9]+]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[A_ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    store ptr [[A]], ptr [[A_ADDR]], align 8
// CHECK-NEXT:    ret void, !dbg [[DBG13:![0-9]+]]
//
