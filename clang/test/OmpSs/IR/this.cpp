// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py UTC_ARGS: --include-generated-funcs
// RUN: %clang_cc1 -x c++ -verify -fompss-2 -disable-llvm-passes -ferror-limit 100 %s -S -emit-llvm -o - | FileCheck %s
// expected-no-diagnostics

struct S {
  int x = 43;
  int y;
  void f();
};

void S::f() {
  #pragma oss task depend(out : x)
  {}
  #pragma oss task depend(in : this->x)
  {}
  #pragma oss task
  { x = 3; }
  #pragma oss task
  { this->x = 3; }
}




// CHECK-LABEL: @_ZN1S1fEv(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    store ptr [[THIS:%.*]], ptr [[THIS_ADDR]], align 8
// CHECK-NEXT:    [[THIS1:%.*]] = load ptr, ptr [[THIS_ADDR]], align 8
// CHECK-NEXT:    [[TMP0:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OSS"([5 x i8] c"TASK\00"), "QUAL.OSS.SHARED"(ptr [[THIS1]], [[STRUCT_S:%.*]] undef), "QUAL.OSS.DEP.OUT"(ptr [[THIS1]], [2 x i8] c"x\00", ptr @compute_dep, ptr [[THIS1]]) ], !dbg [[DBG9:![0-9]+]]
// CHECK-NEXT:    call void @llvm.directive.region.exit(token [[TMP0]]), !dbg [[DBG10:![0-9]+]]
// CHECK-NEXT:    [[TMP1:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OSS"([5 x i8] c"TASK\00"), "QUAL.OSS.SHARED"(ptr [[THIS1]], [[STRUCT_S]] undef), "QUAL.OSS.DEP.IN"(ptr [[THIS1]], [8 x i8] c"this->x\00", ptr @compute_dep.1, ptr [[THIS1]]) ], !dbg [[DBG11:![0-9]+]]
// CHECK-NEXT:    call void @llvm.directive.region.exit(token [[TMP1]]), !dbg [[DBG12:![0-9]+]]
// CHECK-NEXT:    [[TMP2:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OSS"([5 x i8] c"TASK\00"), "QUAL.OSS.SHARED"(ptr [[THIS1]], [[STRUCT_S]] undef) ], !dbg [[DBG13:![0-9]+]]
// CHECK-NEXT:    [[X:%.*]] = getelementptr inbounds [[STRUCT_S]], ptr [[THIS1]], i32 0, i32 0, !dbg [[DBG14:![0-9]+]]
// CHECK-NEXT:    store i32 3, ptr [[X]], align 4, !dbg [[DBG15:![0-9]+]]
// CHECK-NEXT:    call void @llvm.directive.region.exit(token [[TMP2]]), !dbg [[DBG16:![0-9]+]]
// CHECK-NEXT:    [[TMP3:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OSS"([5 x i8] c"TASK\00"), "QUAL.OSS.SHARED"(ptr [[THIS1]], [[STRUCT_S]] undef) ], !dbg [[DBG17:![0-9]+]]
// CHECK-NEXT:    [[X2:%.*]] = getelementptr inbounds [[STRUCT_S]], ptr [[THIS1]], i32 0, i32 0, !dbg [[DBG18:![0-9]+]]
// CHECK-NEXT:    store i32 3, ptr [[X2]], align 4, !dbg [[DBG19:![0-9]+]]
// CHECK-NEXT:    call void @llvm.directive.region.exit(token [[TMP3]]), !dbg [[DBG20:![0-9]+]]
// CHECK-NEXT:    ret void, !dbg [[DBG21:![0-9]+]]
//
//
// CHECK-LABEL: @compute_dep(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[RETVAL:%.*]] = alloca [[STRUCT__DEPEND_UNPACK_T:%.*]], align 8
// CHECK-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    store ptr [[THIS:%.*]], ptr [[THIS_ADDR]], align 8
// CHECK-NEXT:    [[THIS1:%.*]] = load ptr, ptr [[THIS_ADDR]], align 8
// CHECK-NEXT:    [[X:%.*]] = getelementptr inbounds [[STRUCT_S:%.*]], ptr [[THIS1]], i32 0, i32 0, !dbg [[DBG23:![0-9]+]]
// CHECK-NEXT:    [[TMP0:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], i32 0, i32 0, !dbg [[DBG23]]
// CHECK-NEXT:    store ptr [[X]], ptr [[TMP0]], align 8, !dbg [[DBG23]]
// CHECK-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], i32 0, i32 1, !dbg [[DBG23]]
// CHECK-NEXT:    store i64 4, ptr [[TMP1]], align 8, !dbg [[DBG23]]
// CHECK-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], i32 0, i32 2, !dbg [[DBG23]]
// CHECK-NEXT:    store i64 0, ptr [[TMP2]], align 8, !dbg [[DBG23]]
// CHECK-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], i32 0, i32 3, !dbg [[DBG23]]
// CHECK-NEXT:    store i64 4, ptr [[TMP3]], align 8, !dbg [[DBG23]]
// CHECK-NEXT:    [[TMP4:%.*]] = load [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], align 8, !dbg [[DBG24:![0-9]+]]
// CHECK-NEXT:    ret [[STRUCT__DEPEND_UNPACK_T]] [[TMP4]], !dbg [[DBG24]]
//
//
// CHECK-LABEL: @compute_dep.1(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[RETVAL:%.*]] = alloca [[STRUCT__DEPEND_UNPACK_T_0:%.*]], align 8
// CHECK-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    store ptr [[THIS:%.*]], ptr [[THIS_ADDR]], align 8
// CHECK-NEXT:    [[THIS1:%.*]] = load ptr, ptr [[THIS_ADDR]], align 8
// CHECK-NEXT:    [[X:%.*]] = getelementptr inbounds [[STRUCT_S:%.*]], ptr [[THIS1]], i32 0, i32 0, !dbg [[DBG27:![0-9]+]]
// CHECK-NEXT:    [[TMP0:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_0]], ptr [[RETVAL]], i32 0, i32 0, !dbg [[DBG27]]
// CHECK-NEXT:    store ptr [[X]], ptr [[TMP0]], align 8, !dbg [[DBG27]]
// CHECK-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_0]], ptr [[RETVAL]], i32 0, i32 1, !dbg [[DBG27]]
// CHECK-NEXT:    store i64 4, ptr [[TMP1]], align 8, !dbg [[DBG27]]
// CHECK-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_0]], ptr [[RETVAL]], i32 0, i32 2, !dbg [[DBG27]]
// CHECK-NEXT:    store i64 0, ptr [[TMP2]], align 8, !dbg [[DBG27]]
// CHECK-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_0]], ptr [[RETVAL]], i32 0, i32 3, !dbg [[DBG27]]
// CHECK-NEXT:    store i64 4, ptr [[TMP3]], align 8, !dbg [[DBG27]]
// CHECK-NEXT:    [[TMP4:%.*]] = load [[STRUCT__DEPEND_UNPACK_T_0]], ptr [[RETVAL]], align 8, !dbg [[DBG28:![0-9]+]]
// CHECK-NEXT:    ret [[STRUCT__DEPEND_UNPACK_T_0]] [[TMP4]], !dbg [[DBG28]]
//
