// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py UTC_ARGS: --function-signature
// RUN: %clang_cc1 -verify -fompss-2 -fexceptions -fcxx-exceptions -disable-llvm-passes -ferror-limit 100 %s -S -emit-llvm -o - | FileCheck %s
// expected-no-diagnostics

// CHECK-LABEL: @_Z4foo1v(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OSS"([5 x i8] c"TASK\00") ], !dbg [[DBG9:![0-9]+]]
// CHECK-NEXT:    [[EXCEPTION:%.*]] = call ptr @__cxa_allocate_exception(i64 4) #[[ATTR1:[0-9]+]], !dbg [[DBG10:![0-9]+]]
// CHECK-NEXT:    store i32 1, ptr [[EXCEPTION]], align 16, !dbg [[DBG10]]
// CHECK-NEXT:    invoke void @__cxa_throw(ptr [[EXCEPTION]], ptr @_ZTIi, ptr null)
// CHECK-NEXT:    to label [[INVOKE_CONT:%.*]] unwind label [[TERMINATE_LPAD:%.*]], !dbg [[DBG10]]
// CHECK:       invoke.cont:
// CHECK-NEXT:    br label [[THROW_CONT:%.*]], !dbg [[DBG10]]
// CHECK:       throw.cont:
// CHECK-NEXT:    call void @llvm.directive.region.exit(token [[TMP0]]), !dbg [[DBG11:![0-9]+]]
// CHECK-NEXT:    ret void, !dbg [[DBG12:![0-9]+]]
// CHECK:       terminate.lpad:
// CHECK-NEXT:    [[TMP1:%.*]] = landingpad { ptr, i32 }
// CHECK-NEXT:    catch ptr null, !dbg [[DBG10]]
// CHECK-NEXT:    [[TMP2:%.*]] = extractvalue { ptr, i32 } [[TMP1]], 0, !dbg [[DBG10]]
// CHECK-NEXT:    call void @__clang_call_terminate(ptr [[TMP2]]) #[[ATTR4:[0-9]+]], !dbg [[DBG10]]
// CHECK-NEXT:    unreachable, !dbg [[DBG10]]
//
void foo1() {
    #pragma oss task
    {
        throw 1;
    }
}


// CHECK-LABEL: @_Z4foo2v(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OSS"([5 x i8] c"TASK\00") ], !dbg [[DBG14:![0-9]+]]
// CHECK-NEXT:    [[EXN_SLOT:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[EHSELECTOR_SLOT:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[E:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[EXCEPTION:%.*]] = call ptr @__cxa_allocate_exception(i64 4) #[[ATTR1]], !dbg [[DBG15:![0-9]+]]
// CHECK-NEXT:    store i32 1, ptr [[EXCEPTION]], align 16, !dbg [[DBG15]]
// CHECK-NEXT:    invoke void @__cxa_throw(ptr [[EXCEPTION]], ptr @_ZTIi, ptr null)
// CHECK-NEXT:    to label [[INVOKE_CONT:%.*]] unwind label [[LPAD:%.*]], !dbg [[DBG15]]
// CHECK:       invoke.cont:
// CHECK-NEXT:    br label [[THROW_CONT:%.*]], !dbg [[DBG15]]
// CHECK:       throw.cont:
// CHECK-NEXT:    br label [[TRY_CONT:%.*]], !dbg [[DBG16:![0-9]+]]
// CHECK:       lpad:
// CHECK-NEXT:    [[TMP1:%.*]] = landingpad { ptr, i32 }
// CHECK-NEXT:    catch ptr @_ZTIi
// CHECK-NEXT:    catch ptr null, !dbg [[DBG17:![0-9]+]]
// CHECK-NEXT:    [[TMP2:%.*]] = extractvalue { ptr, i32 } [[TMP1]], 0, !dbg [[DBG17]]
// CHECK-NEXT:    store ptr [[TMP2]], ptr [[EXN_SLOT]], align 8, !dbg [[DBG17]]
// CHECK-NEXT:    [[TMP3:%.*]] = extractvalue { ptr, i32 } [[TMP1]], 1, !dbg [[DBG17]]
// CHECK-NEXT:    store i32 [[TMP3]], ptr [[EHSELECTOR_SLOT]], align 4, !dbg [[DBG17]]
// CHECK-NEXT:    br label [[CATCH_DISPATCH:%.*]], !dbg [[DBG17]]
// CHECK:       catch.dispatch:
// CHECK-NEXT:    [[SEL:%.*]] = load i32, ptr [[EHSELECTOR_SLOT]], align 4, !dbg [[DBG16]]
// CHECK-NEXT:    [[TMP4:%.*]] = call i32 @llvm.eh.typeid.for(ptr @_ZTIi) #[[ATTR1]], !dbg [[DBG16]]
// CHECK-NEXT:    [[MATCHES:%.*]] = icmp eq i32 [[SEL]], [[TMP4]], !dbg [[DBG16]]
// CHECK-NEXT:    br i1 [[MATCHES]], label [[CATCH:%.*]], label [[TERMINATE_HANDLER:%.*]], !dbg [[DBG16]]
// CHECK:       catch:
// CHECK-NEXT:    [[EXN:%.*]] = load ptr, ptr [[EXN_SLOT]], align 8, !dbg [[DBG16]]
// CHECK-NEXT:    [[TMP5:%.*]] = call ptr @__cxa_begin_catch(ptr [[EXN]]) #[[ATTR1]], !dbg [[DBG16]]
// CHECK-NEXT:    [[TMP6:%.*]] = load i32, ptr [[TMP5]], align 4, !dbg [[DBG16]]
// CHECK-NEXT:    store i32 [[TMP6]], ptr [[E]], align 4, !dbg [[DBG16]]
// CHECK-NEXT:    call void @__cxa_end_catch() #[[ATTR1]], !dbg [[DBG18:![0-9]+]]
// CHECK-NEXT:    br label [[TRY_CONT]], !dbg [[DBG18]]
// CHECK:       try.cont:
// CHECK-NEXT:    call void @llvm.directive.region.exit(token [[TMP0]]), !dbg [[DBG19:![0-9]+]]
// CHECK-NEXT:    [[TMP7:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OSS"([5 x i8] c"TASK\00") ], !dbg [[DBG20:![0-9]+]]
// CHECK-NEXT:    [[N:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[EXN_SLOT4:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[EHSELECTOR_SLOT5:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[E12:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[EXCEPTION2:%.*]] = call ptr @__cxa_allocate_exception(i64 4) #[[ATTR1]], !dbg [[DBG21:![0-9]+]]
// CHECK-NEXT:    store i32 1, ptr [[EXCEPTION2]], align 16, !dbg [[DBG21]]
// CHECK-NEXT:    invoke void @__cxa_throw(ptr [[EXCEPTION2]], ptr @_ZTIi, ptr null)
// CHECK-NEXT:    to label [[INVOKE_CONT6:%.*]] unwind label [[LPAD3:%.*]], !dbg [[DBG21]]
// CHECK:       invoke.cont6:
// CHECK-NEXT:    br label [[THROW_CONT7:%.*]], !dbg [[DBG21]]
// CHECK:       throw.cont7:
// CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[N]], align 4, !dbg [[DBG22:![0-9]+]]
// CHECK-NEXT:    [[INC:%.*]] = add nsw i32 [[TMP8]], 1, !dbg [[DBG22]]
// CHECK-NEXT:    store i32 [[INC]], ptr [[N]], align 4, !dbg [[DBG22]]
// CHECK-NEXT:    br label [[TRY_CONT14:%.*]], !dbg [[DBG23:![0-9]+]]
// CHECK:       terminate.handler:
// CHECK-NEXT:    [[EXN1:%.*]] = load ptr, ptr [[EXN_SLOT]], align 8, !dbg [[DBG16]]
// CHECK-NEXT:    call void @__clang_call_terminate(ptr [[EXN1]]) #[[ATTR4]], !dbg [[DBG16]]
// CHECK-NEXT:    unreachable, !dbg [[DBG16]]
// CHECK:       lpad3:
// CHECK-NEXT:    [[TMP9:%.*]] = landingpad { ptr, i32 }
// CHECK-NEXT:    catch ptr @_ZTIi
// CHECK-NEXT:    catch ptr null, !dbg [[DBG17]]
// CHECK-NEXT:    [[TMP10:%.*]] = extractvalue { ptr, i32 } [[TMP9]], 0, !dbg [[DBG17]]
// CHECK-NEXT:    store ptr [[TMP10]], ptr [[EXN_SLOT4]], align 8, !dbg [[DBG17]]
// CHECK-NEXT:    [[TMP11:%.*]] = extractvalue { ptr, i32 } [[TMP9]], 1, !dbg [[DBG17]]
// CHECK-NEXT:    store i32 [[TMP11]], ptr [[EHSELECTOR_SLOT5]], align 4, !dbg [[DBG17]]
// CHECK-NEXT:    br label [[CATCH_DISPATCH8:%.*]], !dbg [[DBG17]]
// CHECK:       catch.dispatch8:
// CHECK-NEXT:    [[SEL9:%.*]] = load i32, ptr [[EHSELECTOR_SLOT5]], align 4, !dbg [[DBG23]]
// CHECK-NEXT:    [[TMP12:%.*]] = call i32 @llvm.eh.typeid.for(ptr @_ZTIi) #[[ATTR1]], !dbg [[DBG23]]
// CHECK-NEXT:    [[MATCHES10:%.*]] = icmp eq i32 [[SEL9]], [[TMP12]], !dbg [[DBG23]]
// CHECK-NEXT:    br i1 [[MATCHES10]], label [[CATCH11:%.*]], label [[TERMINATE_HANDLER16:%.*]], !dbg [[DBG23]]
// CHECK:       catch11:
// CHECK-NEXT:    [[EXN13:%.*]] = load ptr, ptr [[EXN_SLOT4]], align 8, !dbg [[DBG23]]
// CHECK-NEXT:    [[TMP13:%.*]] = call ptr @__cxa_begin_catch(ptr [[EXN13]]) #[[ATTR1]], !dbg [[DBG23]]
// CHECK-NEXT:    [[TMP14:%.*]] = load i32, ptr [[TMP13]], align 4, !dbg [[DBG23]]
// CHECK-NEXT:    store i32 [[TMP14]], ptr [[E12]], align 4, !dbg [[DBG23]]
// CHECK-NEXT:    call void @__cxa_end_catch() #[[ATTR1]], !dbg [[DBG24:![0-9]+]]
// CHECK-NEXT:    br label [[TRY_CONT14]], !dbg [[DBG24]]
// CHECK:       try.cont14:
// CHECK-NEXT:    call void @llvm.directive.region.exit(token [[TMP7]]), !dbg [[DBG25:![0-9]+]]
// CHECK-NEXT:    ret void, !dbg [[DBG17]]
// CHECK:       terminate.handler16:
// CHECK-NEXT:    [[EXN15:%.*]] = load ptr, ptr [[EXN_SLOT4]], align 8, !dbg [[DBG23]]
// CHECK-NEXT:    call void @__clang_call_terminate(ptr [[EXN15]]) #[[ATTR4]], !dbg [[DBG23]]
// CHECK-NEXT:    unreachable, !dbg [[DBG23]]
//
void foo2() {
    #pragma oss task
    {
        try {
            throw 1;
        } catch (int e) {
        }
    }
    #pragma oss task
    {
        int n;
        try {
            throw 1;
            n++;
        } catch (int e) {
        }
    }
}

// Each task has its own exn.slot, ehselector.slot, and all it's exception
// handling BB



