// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py UTC_ARGS: --function-signature --include-generated-funcs
// RUN: %clang_cc1 -x c++ -verify -fompss-2 -disable-llvm-passes -ferror-limit 100 %s -S -emit-llvm -o - | FileCheck %s
// expected-no-diagnostics

struct S {
    int x;
    S();
    // ~S();
};

void foo() {
    S s;
    #pragma oss task private(s)
    {}
    #pragma oss task firstprivate(s)
    {}
}


// CHECK-LABEL: define {{[^@]+}}@_Z3foov
// CHECK-SAME: () #[[ATTR0:[0-9]+]] !dbg [[DBG5:![0-9]+]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[S:%.*]] = alloca [[STRUCT_S:%.*]], align 4
// CHECK-NEXT:    call void @_ZN1SC1Ev(ptr noundef nonnull align 4 dereferenceable(4) [[S]]), !dbg [[DBG9:![0-9]+]]
// CHECK-NEXT:    [[TMP0:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OSS"([5 x i8] c"TASK\00"), "QUAL.OSS.PRIVATE"(ptr [[S]], [[STRUCT_S]] undef), "QUAL.OSS.INIT"(ptr [[S]], ptr @oss_ctor_ZN1SC1Ev) ], !dbg [[DBG10:![0-9]+]]
// CHECK-NEXT:    call void @llvm.directive.region.exit(token [[TMP0]]), !dbg [[DBG11:![0-9]+]]
// CHECK-NEXT:    [[TMP1:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OSS"([5 x i8] c"TASK\00"), "QUAL.OSS.FIRSTPRIVATE"(ptr [[S]], [[STRUCT_S]] undef), "QUAL.OSS.COPY"(ptr [[S]], ptr @oss_copy_ctor_ZN1SC1ERKS_) ], !dbg [[DBG12:![0-9]+]]
// CHECK-NEXT:    call void @llvm.directive.region.exit(token [[TMP1]]), !dbg [[DBG13:![0-9]+]]
// CHECK-NEXT:    ret void, !dbg [[DBG14:![0-9]+]]
//
//
// CHECK-LABEL: define {{[^@]+}}@oss_ctor_ZN1SC1Ev
// CHECK-SAME: (ptr noundef [[TMP0:%.*]], i64 noundef [[TMP1:%.*]]) #[[ATTR3:[0-9]+]] !dbg [[DBG15:![0-9]+]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[DOTADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[DOTADDR1:%.*]] = alloca i64, align 8
// CHECK-NEXT:    store ptr [[TMP0]], ptr [[DOTADDR]], align 8
// CHECK-NEXT:    store i64 [[TMP1]], ptr [[DOTADDR1]], align 8
// CHECK-NEXT:    [[TMP2:%.*]] = load ptr, ptr [[DOTADDR]], align 8, !dbg [[DBG16:![0-9]+]]
// CHECK-NEXT:    [[TMP3:%.*]] = load i64, ptr [[DOTADDR1]], align 8, !dbg [[DBG16]]
// CHECK-NEXT:    [[ARRAYCTOR_DST_END:%.*]] = getelementptr inbounds [[STRUCT_S:%.*]], ptr [[TMP2]], i64 [[TMP3]], !dbg [[DBG16]]
// CHECK-NEXT:    br label [[ARRAYCTOR_LOOP:%.*]], !dbg [[DBG16]]
// CHECK:       arrayctor.loop:
// CHECK-NEXT:    [[ARRAYCTOR_DST_CUR:%.*]] = phi ptr [ [[TMP2]], [[ENTRY:%.*]] ], [ [[ARRAYCTOR_DST_NEXT:%.*]], [[ARRAYCTOR_LOOP]] ], !dbg [[DBG16]]
// CHECK-NEXT:    call void @_ZN1SC1Ev(ptr noundef nonnull align 4 dereferenceable(4) [[ARRAYCTOR_DST_CUR]]), !dbg [[DBG17:![0-9]+]]
// CHECK-NEXT:    [[ARRAYCTOR_DST_NEXT]] = getelementptr inbounds [[STRUCT_S]], ptr [[ARRAYCTOR_DST_CUR]], i64 1, !dbg [[DBG16]]
// CHECK-NEXT:    [[ARRAYCTOR_DONE:%.*]] = icmp eq ptr [[ARRAYCTOR_DST_NEXT]], [[ARRAYCTOR_DST_END]], !dbg [[DBG16]]
// CHECK-NEXT:    br i1 [[ARRAYCTOR_DONE]], label [[ARRAYCTOR_CONT:%.*]], label [[ARRAYCTOR_LOOP]], !dbg [[DBG16]]
// CHECK:       arrayctor.cont:
// CHECK-NEXT:    ret void, !dbg [[DBG17]]
//
//
// CHECK-LABEL: define {{[^@]+}}@_ZN1SC1ERKS_
// CHECK-SAME: (ptr noundef nonnull align 4 dereferenceable(4) [[THIS:%.*]], ptr noundef nonnull align 4 dereferenceable(4) [[TMP0:%.*]]) unnamed_addr #[[ATTR4:[0-9]+]] comdat align 2 !dbg [[DBG19:![0-9]+]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[DOTADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 8
// CHECK-NEXT:    store ptr [[TMP0]], ptr [[DOTADDR]], align 8
// CHECK-NEXT:    [[THIS1:%.*]] = load ptr, ptr [[THIS_ADDR]], align 8
// CHECK-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[DOTADDR]], align 8, !dbg [[DBG20:![0-9]+]]
// CHECK-NEXT:    call void @llvm.memcpy.p0.p0.i64(ptr align 4 [[THIS1]], ptr align 4 [[TMP1]], i64 4, i1 false), !dbg [[DBG20]]
// CHECK-NEXT:    ret void, !dbg [[DBG20]]
//
//
// CHECK-LABEL: define {{[^@]+}}@oss_copy_ctor_ZN1SC1ERKS_
// CHECK-SAME: (ptr noundef [[TMP0:%.*]], ptr noundef [[TMP1:%.*]], i64 noundef [[TMP2:%.*]]) #[[ATTR3]] !dbg [[DBG21:![0-9]+]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[DOTADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[DOTADDR1:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[DOTADDR2:%.*]] = alloca i64, align 8
// CHECK-NEXT:    store ptr [[TMP0]], ptr [[DOTADDR]], align 8
// CHECK-NEXT:    store ptr [[TMP1]], ptr [[DOTADDR1]], align 8
// CHECK-NEXT:    store i64 [[TMP2]], ptr [[DOTADDR2]], align 8
// CHECK-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[DOTADDR]], align 8, !dbg [[DBG22:![0-9]+]]
// CHECK-NEXT:    [[TMP4:%.*]] = load ptr, ptr [[DOTADDR1]], align 8, !dbg [[DBG22]]
// CHECK-NEXT:    [[TMP5:%.*]] = load i64, ptr [[DOTADDR2]], align 8, !dbg [[DBG22]]
// CHECK-NEXT:    [[ARRAYCTOR_DST_END:%.*]] = getelementptr inbounds [[STRUCT_S:%.*]], ptr [[TMP4]], i64 [[TMP5]], !dbg [[DBG22]]
// CHECK-NEXT:    br label [[ARRAYCTOR_LOOP:%.*]], !dbg [[DBG22]]
// CHECK:       arrayctor.loop:
// CHECK-NEXT:    [[ARRAYCTOR_DST_CUR:%.*]] = phi ptr [ [[TMP4]], [[ENTRY:%.*]] ], [ [[ARRAYCTOR_DST_NEXT:%.*]], [[ARRAYCTOR_LOOP]] ], !dbg [[DBG22]]
// CHECK-NEXT:    [[ARRAYCTOR_SRC_CUR:%.*]] = phi ptr [ [[TMP3]], [[ENTRY]] ], [ [[ARRAYCTOR_SRC_NEXT:%.*]], [[ARRAYCTOR_LOOP]] ], !dbg [[DBG22]]
// CHECK-NEXT:    call void @llvm.memcpy.p0.p0.i64(ptr align 4 [[ARRAYCTOR_DST_CUR]], ptr align 4 [[ARRAYCTOR_SRC_CUR]], i64 4, i1 false), !dbg [[DBG23:![0-9]+]]
// CHECK-NEXT:    [[ARRAYCTOR_DST_NEXT]] = getelementptr inbounds [[STRUCT_S]], ptr [[ARRAYCTOR_DST_CUR]], i64 1, !dbg [[DBG22]]
// CHECK-NEXT:    [[ARRAYCTOR_SRC_NEXT]] = getelementptr inbounds [[STRUCT_S]], ptr [[ARRAYCTOR_SRC_CUR]], i64 1, !dbg [[DBG22]]
// CHECK-NEXT:    [[ARRAYCTOR_DONE:%.*]] = icmp eq ptr [[ARRAYCTOR_DST_NEXT]], [[ARRAYCTOR_DST_END]], !dbg [[DBG22]]
// CHECK-NEXT:    br i1 [[ARRAYCTOR_DONE]], label [[ARRAYCTOR_CONT:%.*]], label [[ARRAYCTOR_LOOP]], !dbg [[DBG22]]
// CHECK:       arrayctor.cont:
// CHECK-NEXT:    ret void, !dbg [[DBG23]]
//
