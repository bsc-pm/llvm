// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py UTC_ARGS: --function-signature --include-generated-funcs
// RUN: %clang_cc1 -triple x86_64-gnu-linux -verify -fompss-2 -disable-llvm-passes -ferror-limit 100 %s -emit-llvm -o - | FileCheck %s --check-prefixes=LIN64
// RUN: %clang_cc1 -triple ppc64 -verify -fompss-2 -disable-llvm-passes -ferror-limit 100 %s -emit-llvm -o - | FileCheck %s --check-prefixes=PPC64
// RUN: %clang_cc1 -triple aarch64 -verify -fompss-2 -disable-llvm-passes -ferror-limit 100 %s -emit-llvm -o - | FileCheck %s --check-prefixes=AARCH64
// expected-no-diagnostics

struct Foo {
    ~Foo() { }
};

void foo()
{
    #pragma oss task
    {
        int n;
        while (1) {
                Foo f;
            goto l;
        }
l:      n++; // to put something in the label
    }
    #pragma oss taskwait
}


// LIN64-LABEL: define {{[^@]+}}@_Z3foov
// LIN64-SAME: () #[[ATTR0:[0-9]+]] !dbg [[DBG5:![0-9]+]] {
// LIN64-NEXT:  entry:
// LIN64-NEXT:    [[TMP0:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OSS"([5 x i8] c"TASK\00") ], !dbg [[DBG9:![0-9]+]]
// LIN64-NEXT:    [[N:%.*]] = alloca i32, align 4
// LIN64-NEXT:    [[TMP:%.*]] = alloca i1, align 1
// LIN64-NEXT:    [[F:%.*]] = alloca [[STRUCT_FOO:%.*]], align 1
// LIN64-NEXT:    [[CLEANUP_DEST_SLOT:%.*]] = alloca i32, align 4
// LIN64-NEXT:    br label [[WHILE_COND:%.*]], !dbg [[DBG10:![0-9]+]]
// LIN64:       while.cond:
// LIN64-NEXT:    store i1 true, ptr [[TMP]], align 1, !dbg [[DBG10]]
// LIN64-NEXT:    [[TMP1:%.*]] = load i1, ptr [[TMP]], align 1, !dbg [[DBG10]]
// LIN64-NEXT:    br i1 [[TMP1]], label [[WHILE_BODY:%.*]], label [[WHILE_END:%.*]], !dbg [[DBG10]]
// LIN64:       while.body:
// LIN64-NEXT:    store i32 4, ptr [[CLEANUP_DEST_SLOT]], align 4
// LIN64-NEXT:    call void @_ZN3FooD1Ev(ptr noundef nonnull align 1 dereferenceable(1) [[F]]) #[[ATTR1:[0-9]+]], !dbg [[DBG11:![0-9]+]]
// LIN64-NEXT:    [[CLEANUP_DEST:%.*]] = load i32, ptr [[CLEANUP_DEST_SLOT]], align 4
// LIN64-NEXT:    switch i32 [[CLEANUP_DEST]], label [[UNREACHABLE:%.*]] [
// LIN64-NEXT:      i32 4, label [[L:%.*]]
// LIN64-NEXT:    ]
// LIN64:       while.end:
// LIN64-NEXT:    br label [[L]], !dbg [[DBG10]]
// LIN64:       l:
// LIN64-NEXT:    [[TMP2:%.*]] = load i32, ptr [[N]], align 4, !dbg [[DBG12:![0-9]+]]
// LIN64-NEXT:    [[INC:%.*]] = add nsw i32 [[TMP2]], 1, !dbg [[DBG12]]
// LIN64-NEXT:    store i32 [[INC]], ptr [[N]], align 4, !dbg [[DBG12]]
// LIN64-NEXT:    call void @llvm.directive.region.exit(token [[TMP0]]), !dbg [[DBG13:![0-9]+]]
// LIN64-NEXT:    [[TMP3:%.*]] = call i1 @llvm.directive.marker() [ "DIR.OSS"([9 x i8] c"TASKWAIT\00") ], !dbg [[DBG14:![0-9]+]]
// LIN64-NEXT:    ret void, !dbg [[DBG15:![0-9]+]]
// LIN64:       unreachable:
// LIN64-NEXT:    unreachable
//
//
// LIN64-LABEL: define {{[^@]+}}@_ZN3FooD1Ev
// LIN64-SAME: (ptr noundef nonnull align 1 dereferenceable(1) [[THIS:%.*]]) unnamed_addr #[[ATTR0]] comdat align 2 !dbg [[DBG16:![0-9]+]] {
// LIN64-NEXT:  entry:
// LIN64-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 8
// LIN64-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 8
// LIN64-NEXT:    [[THIS1:%.*]] = load ptr, ptr [[THIS_ADDR]], align 8
// LIN64-NEXT:    call void @_ZN3FooD2Ev(ptr noundef nonnull align 1 dereferenceable(1) [[THIS1]]) #[[ATTR1]], !dbg [[DBG17:![0-9]+]]
// LIN64-NEXT:    ret void, !dbg [[DBG18:![0-9]+]]
//
//
// LIN64-LABEL: define {{[^@]+}}@_ZN3FooD2Ev
// LIN64-SAME: (ptr noundef nonnull align 1 dereferenceable(1) [[THIS:%.*]]) unnamed_addr #[[ATTR0]] comdat align 2 !dbg [[DBG19:![0-9]+]] {
// LIN64-NEXT:  entry:
// LIN64-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 8
// LIN64-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 8
// LIN64-NEXT:    [[THIS1:%.*]] = load ptr, ptr [[THIS_ADDR]], align 8
// LIN64-NEXT:    ret void, !dbg [[DBG20:![0-9]+]]
//
//
// PPC64-LABEL: define {{[^@]+}}@_Z3foov
// PPC64-SAME: () #[[ATTR0:[0-9]+]] !dbg [[DBG5:![0-9]+]] {
// PPC64-NEXT:  entry:
// PPC64-NEXT:    [[TMP0:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OSS"([5 x i8] c"TASK\00") ], !dbg [[DBG9:![0-9]+]]
// PPC64-NEXT:    [[N:%.*]] = alloca i32, align 4
// PPC64-NEXT:    [[TMP:%.*]] = alloca i1, align 1
// PPC64-NEXT:    [[F:%.*]] = alloca [[STRUCT_FOO:%.*]], align 1
// PPC64-NEXT:    [[CLEANUP_DEST_SLOT:%.*]] = alloca i32, align 4
// PPC64-NEXT:    br label [[WHILE_COND:%.*]], !dbg [[DBG10:![0-9]+]]
// PPC64:       while.cond:
// PPC64-NEXT:    store i1 true, ptr [[TMP]], align 1, !dbg [[DBG10]]
// PPC64-NEXT:    [[TMP1:%.*]] = load i1, ptr [[TMP]], align 1, !dbg [[DBG10]]
// PPC64-NEXT:    br i1 [[TMP1]], label [[WHILE_BODY:%.*]], label [[WHILE_END:%.*]], !dbg [[DBG10]]
// PPC64:       while.body:
// PPC64-NEXT:    store i32 4, ptr [[CLEANUP_DEST_SLOT]], align 4
// PPC64-NEXT:    call void @_ZN3FooD1Ev(ptr noundef nonnull align 1 dereferenceable(1) [[F]]) #[[ATTR1:[0-9]+]], !dbg [[DBG11:![0-9]+]]
// PPC64-NEXT:    [[CLEANUP_DEST:%.*]] = load i32, ptr [[CLEANUP_DEST_SLOT]], align 4
// PPC64-NEXT:    switch i32 [[CLEANUP_DEST]], label [[UNREACHABLE:%.*]] [
// PPC64-NEXT:      i32 4, label [[L:%.*]]
// PPC64-NEXT:    ]
// PPC64:       while.end:
// PPC64-NEXT:    br label [[L]], !dbg [[DBG10]]
// PPC64:       l:
// PPC64-NEXT:    [[TMP2:%.*]] = load i32, ptr [[N]], align 4, !dbg [[DBG12:![0-9]+]]
// PPC64-NEXT:    [[INC:%.*]] = add nsw i32 [[TMP2]], 1, !dbg [[DBG12]]
// PPC64-NEXT:    store i32 [[INC]], ptr [[N]], align 4, !dbg [[DBG12]]
// PPC64-NEXT:    call void @llvm.directive.region.exit(token [[TMP0]]), !dbg [[DBG13:![0-9]+]]
// PPC64-NEXT:    [[TMP3:%.*]] = call i1 @llvm.directive.marker() [ "DIR.OSS"([9 x i8] c"TASKWAIT\00") ], !dbg [[DBG14:![0-9]+]]
// PPC64-NEXT:    ret void, !dbg [[DBG15:![0-9]+]]
// PPC64:       unreachable:
// PPC64-NEXT:    unreachable
//
//
// PPC64-LABEL: define {{[^@]+}}@_ZN3FooD1Ev
// PPC64-SAME: (ptr noundef nonnull align 1 dereferenceable(1) [[THIS:%.*]]) unnamed_addr #[[ATTR0]] comdat !dbg [[DBG16:![0-9]+]] {
// PPC64-NEXT:  entry:
// PPC64-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 8
// PPC64-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 8
// PPC64-NEXT:    [[THIS1:%.*]] = load ptr, ptr [[THIS_ADDR]], align 8
// PPC64-NEXT:    call void @_ZN3FooD2Ev(ptr noundef nonnull align 1 dereferenceable(1) [[THIS1]]) #[[ATTR1]], !dbg [[DBG17:![0-9]+]]
// PPC64-NEXT:    ret void, !dbg [[DBG18:![0-9]+]]
//
//
// PPC64-LABEL: define {{[^@]+}}@_ZN3FooD2Ev
// PPC64-SAME: (ptr noundef nonnull align 1 dereferenceable(1) [[THIS:%.*]]) unnamed_addr #[[ATTR0]] comdat !dbg [[DBG19:![0-9]+]] {
// PPC64-NEXT:  entry:
// PPC64-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 8
// PPC64-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 8
// PPC64-NEXT:    [[THIS1:%.*]] = load ptr, ptr [[THIS_ADDR]], align 8
// PPC64-NEXT:    ret void, !dbg [[DBG20:![0-9]+]]
//
//
// AARCH64-LABEL: define {{[^@]+}}@_Z3foov
// AARCH64-SAME: () #[[ATTR0:[0-9]+]] !dbg [[DBG5:![0-9]+]] {
// AARCH64-NEXT:  entry:
// AARCH64-NEXT:    [[TMP0:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OSS"([5 x i8] c"TASK\00") ], !dbg [[DBG9:![0-9]+]]
// AARCH64-NEXT:    [[N:%.*]] = alloca i32, align 4
// AARCH64-NEXT:    [[TMP:%.*]] = alloca i1, align 1
// AARCH64-NEXT:    [[F:%.*]] = alloca [[STRUCT_FOO:%.*]], align 1
// AARCH64-NEXT:    [[CLEANUP_DEST_SLOT:%.*]] = alloca i32, align 4
// AARCH64-NEXT:    br label [[WHILE_COND:%.*]], !dbg [[DBG10:![0-9]+]]
// AARCH64:       while.cond:
// AARCH64-NEXT:    store i1 true, ptr [[TMP]], align 1, !dbg [[DBG10]]
// AARCH64-NEXT:    [[TMP1:%.*]] = load i1, ptr [[TMP]], align 1, !dbg [[DBG10]]
// AARCH64-NEXT:    br i1 [[TMP1]], label [[WHILE_BODY:%.*]], label [[WHILE_END:%.*]], !dbg [[DBG10]]
// AARCH64:       while.body:
// AARCH64-NEXT:    store i32 4, ptr [[CLEANUP_DEST_SLOT]], align 4
// AARCH64-NEXT:    call void @_ZN3FooD1Ev(ptr noundef nonnull align 1 dereferenceable(1) [[F]]) #[[ATTR1:[0-9]+]], !dbg [[DBG11:![0-9]+]]
// AARCH64-NEXT:    [[CLEANUP_DEST:%.*]] = load i32, ptr [[CLEANUP_DEST_SLOT]], align 4
// AARCH64-NEXT:    switch i32 [[CLEANUP_DEST]], label [[UNREACHABLE:%.*]] [
// AARCH64-NEXT:      i32 4, label [[L:%.*]]
// AARCH64-NEXT:    ]
// AARCH64:       while.end:
// AARCH64-NEXT:    br label [[L]], !dbg [[DBG10]]
// AARCH64:       l:
// AARCH64-NEXT:    [[TMP2:%.*]] = load i32, ptr [[N]], align 4, !dbg [[DBG12:![0-9]+]]
// AARCH64-NEXT:    [[INC:%.*]] = add nsw i32 [[TMP2]], 1, !dbg [[DBG12]]
// AARCH64-NEXT:    store i32 [[INC]], ptr [[N]], align 4, !dbg [[DBG12]]
// AARCH64-NEXT:    call void @llvm.directive.region.exit(token [[TMP0]]), !dbg [[DBG13:![0-9]+]]
// AARCH64-NEXT:    [[TMP3:%.*]] = call i1 @llvm.directive.marker() [ "DIR.OSS"([9 x i8] c"TASKWAIT\00") ], !dbg [[DBG14:![0-9]+]]
// AARCH64-NEXT:    ret void, !dbg [[DBG15:![0-9]+]]
// AARCH64:       unreachable:
// AARCH64-NEXT:    unreachable
//
//
// AARCH64-LABEL: define {{[^@]+}}@_ZN3FooD1Ev
// AARCH64-SAME: (ptr noundef nonnull align 1 dereferenceable(1) [[THIS:%.*]]) unnamed_addr #[[ATTR0]] comdat !dbg [[DBG16:![0-9]+]] {
// AARCH64-NEXT:  entry:
// AARCH64-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 8
// AARCH64-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 8
// AARCH64-NEXT:    [[THIS1:%.*]] = load ptr, ptr [[THIS_ADDR]], align 8
// AARCH64-NEXT:    call void @_ZN3FooD2Ev(ptr noundef nonnull align 1 dereferenceable(1) [[THIS1]]) #[[ATTR1]], !dbg [[DBG17:![0-9]+]]
// AARCH64-NEXT:    ret void, !dbg [[DBG18:![0-9]+]]
//
//
// AARCH64-LABEL: define {{[^@]+}}@_ZN3FooD2Ev
// AARCH64-SAME: (ptr noundef nonnull align 1 dereferenceable(1) [[THIS:%.*]]) unnamed_addr #[[ATTR0]] comdat !dbg [[DBG19:![0-9]+]] {
// AARCH64-NEXT:  entry:
// AARCH64-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 8
// AARCH64-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 8
// AARCH64-NEXT:    [[THIS1:%.*]] = load ptr, ptr [[THIS_ADDR]], align 8
// AARCH64-NEXT:    ret void, !dbg [[DBG20:![0-9]+]]
//
