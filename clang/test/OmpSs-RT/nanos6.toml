# This file is part of Nanos6 and is licensed under the terms contained in the COPYING file
#
# Copyright (C) 2020-2023 Barcelona Supercomputing Center (BSC)

# The Nanos6 default configuration file. More details about the configuration options and the possible
# values are available on the OmpSs-2 User Guide (https://pm.bsc.es/ftp/ompss-2/doc/user-guide/) or on
# the README.md in the Nanos6 repository (https://github.com/bsc-pm/nanos6)

[version]
	# Choose whether the runtime runs with debug symbols and internal asserts. Enabling this option
	# may produce significant overheads, so production or performance executions should disable this
	# option. Default is false
	debug = false
	# Choose the dependency system implementation. Default is "discrete"
	# Possible values: "discrete", "regions"
	dependencies = "discrete"
	# Choose the instrumentation variant to run. Default is "none"
	# Possible values: "none", "ctf", "ovni", "extrae", "graph", "lint", "stats", "verbose"
	instrument = "verbose"

[turbo]
	# Choose whether enabling floating-point unit optimizations in all Nanos6 threads. Enabling this
	# option can speedup the floating-point computations in user tasks, but may produce imprecise
	# results. It enables flush-to-zero (FZ) and denormals are zero (DAZ) optimizations in Intel®
	# processors. Default is false
	enabled = false
	# Enable a warm-up of the memory allocation arenas for worker threads. This will enable a "warmup"
	# phase when worker threads are first created, which basically implies performing memory allocation.
	# When using Jemalloc, the first memory allocation on each thread may incur performance penalties,
	# and for some Linux kernel versions it will serialize the initialization of workers. This has negative
	# effects on application performance, since the application will start running while workers are
	# performing the first memory allocation.
	# This option will prevent this effect. The initialization time of the runtime will be higher, but
	# once the "main" starts everything will be ready. Default is true
	warmup = true

[scheduler]
	# Choose the task scheduling policy. Default is "fifo"
	# Possible values: "fifo", "lifo"
	policy = "fifo"
	# Probability of enabling the immediate successor feature to improve cache data reutilization between
	# successor tasks. If enabled, when a CPU finishes a task it starts executing the successor task
	# (computed through their data dependencies). Default is 0.75
	immediate_successor = 0.75
	# Indicate whether the scheduler should consider task priorities defined by the user in the
	# task's priority clause. Default is true
	priority = true

[cpumanager]
	# The underlying policy of the CPU manager for the handling of CPUs. Default is "default", which
	# corresponds to "hybrid"
	# Possible values: "default", "idle", "busy", "hybrid", "lewi", "greedy"
	policy = "default"
	# The maximum number of iterations to busy wait for before idling. Default is "240000". Only
	# works for the 'hybrid' policy. This number will be divided by the number of active CPUs to
	# obtain a "busy_iters per CPU" metric for each individual CPU to busy-wait for
	busy_iters = 240000
	# The CPUs that should be in sponge mode. A sponge CPU is a CPU that the runtime system has available
	# but it does not execute any task (or runtime code) on it. Such CPUs are useful to reduce the system
	# noise. The runtime leaves these CPUs free (without consuming CPU time) so that the system can schedule
	# other threads and interruptions on them.
	# The option accepts a list of CPU system identifiers that must be in sponge mode. The user is responsible
	# for ensuring the runtime can progress with the specified set of sponge CPUs. If DLB is enabled, this
	# option is ignored.
	# As an example, sponge_cpus = [ 2, 8 ] would leave the CPUs with system id 2 and 8 free to absorb noise.
	# By default, there are no sponge CPUs, and the runtime uses all CPUs from the process CPU mask
	sponge_cpus = [ ]

[throttle]
	# Enable throttle to stop creating tasks when certain conditions are met. Default is false
	enabled = false
	# Maximum number of child tasks that can be created before throttling. Default is 5000000
	tasks = 5000000
	# Maximum memory pressure (percent of max_memory) before throttling. Default is 70 (%)
	pressure = 70 # %
	# Maximum memory that can be used by the runtime. Default is "0", which equals half of system memory
	max_memory = "0"
	# Evaluation interval (us). Each time this amount of time is elapsed, the throttle system queries
	# the memory allocator statistics and evaluates the current memory pressure. A higher interval
	# results in less accurate pressure estimation, but a lower interval introduces noticeable overhead,
	# as reading memory statistics requires a global lock on the allocator to aggregate per-thread
	# statistics. Default is 1000
	polling_period_us = 1000

[numa]
	# Enable NUMA tracking of task data. NUMA tracking consists of annotating the NUMA location
	# of data to be later scheduled based on this information. When using "auto" this feature is
	# enabled in the first allocation done using the Nanos6 NUMA API. Default is "auto"
	# Possible values: "auto", "on", "off"
	tracking = "auto"
	# Indicate whether should print the NUMA bitmask of each NUMA wildcards
	report = false
	# Use the page auto-discovery mechanism to detect the system's page size
	# Default is true, which is useful in systems with THP enabled
	# Set to false will use the default page size, which is arch-dependent
	discover_pagesize = true

[hardware_counters]
	# Enable the verbose mode of hardware counters, printing a small summary of metrics at the
	# end of the execution. Default is false
	verbose = false
	# The verbose file's name. Default is "nanos6-output-hwcounters.txt"
	verbose_file = "nanos6-output-hwcounters.txt"
	[hardware_counters.rapl]
		# Enable the RAPL backend of the hardware counters module for runtime-wise energy
		# metrics. Default is false
		enabled = false

[monitoring]
	# Indicate whether enabling the Monitoring of tasks and CPUs, which allows the usage of
	# prediction-based policies. Disabled by default
	enabled = false
	# Indicate whether enabling the "Wisdom" mechanism of Monitoring, saving normalized metrics for
	# future executions and loading previously saved metrics when the runtime initializes. Default
	# is false
	wisdom = false
	# Enable the verbose mode of Monitoring, which prints a detailed summary of task type metrics
	# at the end of the execution. Default is true
	verbose = true
	# The verbose file's name. Default is "output-monitoring.txt"
	verbose_file = "output-monitoring.txt"
	# The prediction rate at which CPU usage predictions are infered. Default is once every 100µs
	cpuusage_prediction_rate = 100 # µs
	# The number of samples (window) of the normalized exponential moving average for predictions
	# Default is 20
	rolling_window = 20

[devices]

[instrument]
	[instrument.stats]
		# The outfile file for emitting the statistics. Default is the standard error
		output_file = "/dev/stderr"

[misc]
	# Stack size of threads created by the runtime. Default is 8M
	stack_size = "8M"

[loader]
	# Enable verbose output of the loader, to debug dynamic linking problems. Default is false
	verbose = false
	# Choose whether to print a warning when there is any invalid NANOS6 environment variables
	# defined when running a program. Default is true
	warn_envars = true
	# Path to the nanos6 libraries. Default is none
	# library_path = "path/to/nanos6/lib"
	# Prefix for the report printing all the runtime variables. Default is none
	# report_prefix = "#"
