; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --function-signature --include-generated-funcs
; RUN: opt %s -passes=ompss-2 -S | FileCheck %s
; ModuleID = 'collapse_multidep_iter_dep.ll'
source_filename = "collapse_multidep_iter_dep.ll"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Checking we use lowerbound only to compute the dependency

; int array[50];
; int main() {
;     #pragma oss taskloop collapse(2) in( { array[i + j + k], k=0;j } )
;     for (int i = 0; i < 10; ++i) {
;         for (int j = 0; j < 10; ++j) {
;         }
;     }
; }

%struct._depend_unpack_t = type { i32, i32, i32, i32 }
%struct._depend_unpack_t.0 = type { ptr, i64, i64, i64 }

@array = global [50 x i32] zeroinitializer, align 16

; Function Attrs: noinline nounwind optnone
define dso_local i32 @main() #0 !dbg !5 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store i32 0, ptr %i, align 4, !dbg !9
  store i32 0, ptr %j, align 4, !dbg !10
  store i32 0, ptr %k, align 4, !dbg !11
  %0 = call token @llvm.directive.region.entry() [ "DIR.OSS"([9 x i8] c"TASKLOOP\00"), "QUAL.OSS.SHARED"(ptr @array, [50 x i32] undef), "QUAL.OSS.PRIVATE"(ptr %i, i32 undef), "QUAL.OSS.PRIVATE"(ptr %j, i32 undef), "QUAL.OSS.PRIVATE"(ptr %k, i32 undef), "QUAL.OSS.LOOP.IND.VAR"(ptr %i, ptr %j), "QUAL.OSS.LOOP.LOWER.BOUND"(ptr @compute_lb, ptr @compute_lb.1), "QUAL.OSS.LOOP.UPPER.BOUND"(ptr @compute_ub, ptr @compute_ub.2), "QUAL.OSS.LOOP.STEP"(ptr @compute_step, ptr @compute_step.3), "QUAL.OSS.LOOP.TYPE"(i64 0, i64 1, i64 1, i64 1, i64 1, i64 0, i64 1, i64 1, i64 1, i64 1), "QUAL.OSS.MULTIDEP.RANGE.IN"(ptr %k, ptr @compute_dep, ptr %k, ptr %j, ptr @array, [28 x i8] c"{ array[i + j + k], k=0;j }\00", ptr @compute_dep.4, ptr %i, ptr %j, ptr %k, ptr @array) ], !dbg !12
  call void @llvm.directive.region.exit(token %0), !dbg !13
  ret i32 0, !dbg !14
}

; Function Attrs: nounwind
declare token @llvm.directive.region.entry() #1

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token) #1

define internal i32 @compute_lb() #2 !dbg !15 {
entry:
  ret i32 0, !dbg !16
}

define internal i32 @compute_ub() #2 !dbg !18 {
entry:
  ret i32 10, !dbg !19
}

define internal i32 @compute_step() #2 !dbg !21 {
entry:
  ret i32 1, !dbg !22
}

define internal i32 @compute_lb.1() #2 !dbg !24 {
entry:
  ret i32 0, !dbg !25
}

define internal i32 @compute_ub.2() #2 !dbg !27 {
entry:
  ret i32 10, !dbg !28
}

define internal i32 @compute_step.3() #2 !dbg !30 {
entry:
  ret i32 1, !dbg !31
}

define internal %struct._depend_unpack_t @compute_dep(ptr %k, ptr %j, i64 %0) #2 !dbg !33 {
entry:
  %retval = alloca %struct._depend_unpack_t, align 4
  %k.addr = alloca ptr, align 8
  %j.addr = alloca ptr, align 8
  %.addr = alloca i64, align 8
  store ptr %k, ptr %k.addr, align 8
  store ptr %j, ptr %j.addr, align 8
  store i64 %0, ptr %.addr, align 8
  switch i64 %0, label %3 [
    i64 0, label %4
  ]

1:                                                ; preds = %4, %3
  %2 = load %struct._depend_unpack_t, ptr %retval, align 4, !dbg !34
  ret %struct._depend_unpack_t %2, !dbg !34

3:                                                ; preds = %entry
  br label %1

4:                                                ; preds = %entry
  %5 = load i32, ptr %k, align 4, !dbg !36
  %6 = load i32, ptr %j, align 4, !dbg !34
  %7 = add i32 0, %6
  %8 = add i32 %7, -1
  %9 = getelementptr inbounds %struct._depend_unpack_t, ptr %retval, i32 0, i32 0
  store i32 0, ptr %9, align 4
  %10 = getelementptr inbounds %struct._depend_unpack_t, ptr %retval, i32 0, i32 1
  store i32 %5, ptr %10, align 4
  %11 = getelementptr inbounds %struct._depend_unpack_t, ptr %retval, i32 0, i32 2
  store i32 %8, ptr %11, align 4
  %12 = getelementptr inbounds %struct._depend_unpack_t, ptr %retval, i32 0, i32 3
  store i32 1, ptr %12, align 4
  br label %1
}

define internal %struct._depend_unpack_t.0 @compute_dep.4(ptr %i, ptr %j, ptr %k, ptr %array) #2 !dbg !37 {
entry:
  %retval = alloca %struct._depend_unpack_t.0, align 8
  %i.addr = alloca ptr, align 8
  %j.addr = alloca ptr, align 8
  %k.addr = alloca ptr, align 8
  %array.addr = alloca ptr, align 8
  store ptr %i, ptr %i.addr, align 8
  store ptr %j, ptr %j.addr, align 8
  store ptr %k, ptr %k.addr, align 8
  store ptr %array, ptr %array.addr, align 8
  %0 = load i32, ptr %i, align 4, !dbg !38
  %1 = load i32, ptr %j, align 4, !dbg !40
  %add = add nsw i32 %0, %1, !dbg !41
  %2 = load i32, ptr %k, align 4, !dbg !42
  %add1 = add nsw i32 %add, %2, !dbg !43
  %3 = sext i32 %add1 to i64
  %4 = add i64 %3, 1
  %arraydecay = getelementptr inbounds [50 x i32], ptr %array, i64 0, i64 0, !dbg !44
  %5 = mul i64 %3, 4
  %6 = mul i64 %4, 4
  %7 = getelementptr inbounds %struct._depend_unpack_t.0, ptr %retval, i32 0, i32 0
  store ptr %arraydecay, ptr %7, align 8
  %8 = getelementptr inbounds %struct._depend_unpack_t.0, ptr %retval, i32 0, i32 1
  store i64 200, ptr %8, align 8
  %9 = getelementptr inbounds %struct._depend_unpack_t.0, ptr %retval, i32 0, i32 2
  store i64 %5, ptr %9, align 8
  %10 = getelementptr inbounds %struct._depend_unpack_t.0, ptr %retval, i32 0, i32 3
  store i64 %6, ptr %10, align 8
  %11 = load %struct._depend_unpack_t.0, ptr %retval, align 8, !dbg !44
  ret %struct._depend_unpack_t.0 %11, !dbg !44
}

attributes #0 = { noinline nounwind optnone "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
attributes #1 = { nounwind }
attributes #2 = { "min-legal-vector-width"="0" }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "", isOptimized: false, runtimeVersion: 0, emissionKind: NoDebug, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "<stdin>", directory: "")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 1, !"wchar_size", i32 4}
!4 = !{!""}
!5 = distinct !DISubprogram(name: "main", scope: !6, file: !6, line: 2, type: !7, scopeLine: 2, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !8)
!6 = !DIFile(filename: "collapse_multidep_iter_dep.ll", directory: "")
!7 = !DISubroutineType(types: !8)
!8 = !{}
!9 = !DILocation(line: 4, column: 14, scope: !5)
!10 = !DILocation(line: 5, column: 18, scope: !5)
!11 = !DILocation(line: 3, column: 62, scope: !5)
!12 = !DILocation(line: 5, column: 14, scope: !5)
!13 = !DILocation(line: 6, column: 9, scope: !5)
!14 = !DILocation(line: 8, column: 1, scope: !5)
!15 = distinct !DISubprogram(linkageName: "compute_lb", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!16 = !DILocation(line: 4, column: 18, scope: !17)
!17 = !DILexicalBlockFile(scope: !15, file: !6, discriminator: 0)
!18 = distinct !DISubprogram(linkageName: "compute_ub", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!19 = !DILocation(line: 4, column: 25, scope: !20)
!20 = !DILexicalBlockFile(scope: !18, file: !6, discriminator: 0)
!21 = distinct !DISubprogram(linkageName: "compute_step", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!22 = !DILocation(line: 4, column: 29, scope: !23)
!23 = !DILexicalBlockFile(scope: !21, file: !6, discriminator: 0)
!24 = distinct !DISubprogram(linkageName: "compute_lb.1", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!25 = !DILocation(line: 5, column: 22, scope: !26)
!26 = !DILexicalBlockFile(scope: !24, file: !6, discriminator: 0)
!27 = distinct !DISubprogram(linkageName: "compute_ub.2", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!28 = !DILocation(line: 5, column: 29, scope: !29)
!29 = !DILexicalBlockFile(scope: !27, file: !6, discriminator: 0)
!30 = distinct !DISubprogram(linkageName: "compute_step.3", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!31 = !DILocation(line: 5, column: 33, scope: !32)
!32 = !DILexicalBlockFile(scope: !30, file: !6, discriminator: 0)
!33 = distinct !DISubprogram(linkageName: "compute_dep", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!34 = !DILocation(line: 3, column: 66, scope: !35)
!35 = !DILexicalBlockFile(scope: !33, file: !6, discriminator: 0)
!36 = !DILocation(line: 3, column: 62, scope: !35)
!37 = distinct !DISubprogram(linkageName: "compute_dep.4", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!38 = !DILocation(line: 3, column: 50, scope: !39)
!39 = !DILexicalBlockFile(scope: !37, file: !6, discriminator: 0)
!40 = !DILocation(line: 3, column: 54, scope: !39)
!41 = !DILocation(line: 3, column: 52, scope: !39)
!42 = !DILocation(line: 3, column: 58, scope: !39)
!43 = !DILocation(line: 3, column: 56, scope: !39)
!44 = !DILocation(line: 3, column: 44, scope: !39)
; CHECK-LABEL: define {{[^@]+}}@main
; CHECK-SAME: () #[[ATTR0:[0-9]+]] !dbg [[DBG5:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[I:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[J:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[K:%.*]] = alloca i32, align 4
; CHECK-NEXT:    store i32 0, ptr [[I]], align 4, !dbg [[DBG9:![0-9]+]]
; CHECK-NEXT:    store i32 0, ptr [[J]], align 4, !dbg [[DBG10:![0-9]+]]
; CHECK-NEXT:    store i32 0, ptr [[K]], align 4, !dbg [[DBG11:![0-9]+]]
; CHECK-NEXT:    [[TMP0:%.*]] = alloca ptr, align 8, !dbg [[DBG12:![0-9]+]]
; CHECK-NEXT:    [[TMP1:%.*]] = alloca ptr, align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[NUM_DEPS:%.*]] = alloca i64, align 8, !dbg [[DBG12]]
; CHECK-NEXT:    br label [[FINAL_COND:%.*]], !dbg [[DBG12]]
; CHECK:       codeRepl:
; CHECK-NEXT:    store i64 -1, ptr [[NUM_DEPS]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP2:%.*]] = load i64, ptr [[NUM_DEPS]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP3:%.*]] = call i32 @compute_lb(), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP4:%.*]] = call i32 @compute_ub(), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP5:%.*]] = call i32 @compute_step(), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP6:%.*]] = sub i32 [[TMP4]], [[TMP3]], !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP7:%.*]] = sub i32 [[TMP6]], 1, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP8:%.*]] = sdiv i32 [[TMP7]], [[TMP5]], !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP9:%.*]] = add i32 [[TMP8]], 1, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP10:%.*]] = sext i32 [[TMP9]] to i64, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP11:%.*]] = sub i32 [[TMP4]], 1, !dbg [[DBG12]]
; CHECK-NEXT:    store i32 [[TMP3]], ptr [[I]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP12:%.*]] = call i32 @compute_lb.1(), !dbg [[DBG12]]
; CHECK-NEXT:    store i32 [[TMP11]], ptr [[I]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP13:%.*]] = call i32 @compute_ub.2(), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP14:%.*]] = call i32 @compute_step.3(), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP15:%.*]] = sub i32 [[TMP13]], [[TMP12]], !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP16:%.*]] = sub i32 [[TMP15]], 1, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP17:%.*]] = sdiv i32 [[TMP16]], [[TMP14]], !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP18:%.*]] = add i32 [[TMP17]], 1, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP19:%.*]] = sext i32 [[TMP18]] to i64, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP20:%.*]] = mul i64 1, [[TMP10]], !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP21:%.*]] = mul i64 [[TMP20]], [[TMP19]], !dbg [[DBG12]]
; CHECK-NEXT:    call void @nanos6_create_loop(ptr @task_info_var_main, ptr @task_invocation_info_main, ptr null, i64 32, ptr [[TMP0]], ptr [[TMP1]], i64 4, i64 [[TMP2]], i64 0, i64 [[TMP21]], i64 0, i64 0), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP22:%.*]] = load ptr, ptr [[TMP0]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[ARGS_END:%.*]] = getelementptr i8, ptr [[TMP22]], i64 32, !dbg [[DBG12]]
; CHECK-NEXT:    [[GEP_ARRAY:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN:%.*]], ptr [[TMP22]], i32 0, i32 0, !dbg [[DBG12]]
; CHECK-NEXT:    store ptr @array, ptr [[GEP_ARRAY]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP23:%.*]] = load ptr, ptr [[TMP1]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    call void @nanos6_submit_task(ptr [[TMP23]]), !dbg [[DBG12]]
; CHECK-NEXT:    br label [[FOR_END7:%.*]], !dbg [[DBG12]]
; CHECK:       final.end:
; CHECK-NEXT:    ret i32 0, !dbg [[DBG13:![0-9]+]]
; CHECK:       final.then:
; CHECK-NEXT:    [[TMP24:%.*]] = call i32 @compute_lb(), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP25:%.*]] = call i32 @compute_ub(), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP26:%.*]] = call i32 @compute_step(), !dbg [[DBG12]]
; CHECK-NEXT:    store i32 [[TMP24]], ptr [[I]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    br label [[FOR_COND1:%.*]], !dbg [[DBG12]]
; CHECK:       for.cond1:
; CHECK-NEXT:    [[TMP27:%.*]] = load i32, ptr [[I]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP28:%.*]] = icmp slt i32 [[TMP27]], [[TMP25]], !dbg [[DBG12]]
; CHECK-NEXT:    br i1 [[TMP28]], label [[TMP29:%.*]], label [[FOR_END3:%.*]], !dbg [[DBG12]]
; CHECK:       29:
; CHECK-NEXT:    br label [[TMP30:%.*]], !dbg [[DBG12]]
; CHECK:       30:
; CHECK-NEXT:    br label [[FOR_BODY2:%.*]], !dbg [[DBG12]]
; CHECK:       for.body2:
; CHECK-NEXT:    [[TMP31:%.*]] = call i32 @compute_lb.1(), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP32:%.*]] = call i32 @compute_ub.2(), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP33:%.*]] = call i32 @compute_step.3(), !dbg [[DBG12]]
; CHECK-NEXT:    store i32 [[TMP31]], ptr [[J]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    br label [[FOR_COND:%.*]], !dbg [[DBG12]]
; CHECK:       for.cond:
; CHECK-NEXT:    [[TMP34:%.*]] = load i32, ptr [[J]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP35:%.*]] = icmp slt i32 [[TMP34]], [[TMP32]], !dbg [[DBG12]]
; CHECK-NEXT:    br i1 [[TMP35]], label [[TMP36:%.*]], label [[FOR_END:%.*]], !dbg [[DBG12]]
; CHECK:       36:
; CHECK-NEXT:    br label [[TMP37:%.*]], !dbg [[DBG12]]
; CHECK:       37:
; CHECK-NEXT:    br label [[FOR_BODY:%.*]], !dbg [[DBG12]]
; CHECK:       for.body:
; CHECK-NEXT:    br label [[FOR_INCR:%.*]], !dbg [[DBG13]]
; CHECK:       for.end:
; CHECK-NEXT:    br label [[FOR_INCR4:%.*]], !dbg [[DBG12]]
; CHECK:       for.incr:
; CHECK-NEXT:    [[TMP38:%.*]] = load i32, ptr [[J]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP39:%.*]] = add i32 [[TMP38]], [[TMP33]], !dbg [[DBG12]]
; CHECK-NEXT:    store i32 [[TMP39]], ptr [[J]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    br label [[FOR_COND]], !dbg [[DBG12]]
; CHECK:       for.end3:
; CHECK-NEXT:    br label [[FINAL_END:%.*]], !dbg [[DBG12]]
; CHECK:       for.incr4:
; CHECK-NEXT:    [[TMP40:%.*]] = load i32, ptr [[I]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP41:%.*]] = add i32 [[TMP40]], [[TMP26]], !dbg [[DBG12]]
; CHECK-NEXT:    store i32 [[TMP41]], ptr [[I]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    br label [[FOR_COND1]], !dbg [[DBG12]]
; CHECK:       final.cond:
; CHECK-NEXT:    [[TMP42:%.*]] = call i32 @nanos6_in_final(), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP43:%.*]] = icmp ne i32 [[TMP42]], 0, !dbg [[DBG12]]
; CHECK-NEXT:    br i1 [[TMP43]], label [[FINAL_THEN:%.*]], label [[CODEREPL:%.*]], !dbg [[DBG12]]
; CHECK:       for.end7:
; CHECK-NEXT:    br label [[FINAL_END]], !dbg [[DBG12]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_lb
; CHECK-SAME: () #[[ATTR2:[0-9]+]] !dbg [[DBG14:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret i32 0, !dbg [[DBG15:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_ub
; CHECK-SAME: () #[[ATTR2]] !dbg [[DBG17:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret i32 10, !dbg [[DBG18:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_step
; CHECK-SAME: () #[[ATTR2]] !dbg [[DBG20:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret i32 1, !dbg [[DBG21:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_lb.1
; CHECK-SAME: () #[[ATTR2]] !dbg [[DBG23:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret i32 0, !dbg [[DBG24:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_ub.2
; CHECK-SAME: () #[[ATTR2]] !dbg [[DBG26:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret i32 10, !dbg [[DBG27:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_step.3
; CHECK-SAME: () #[[ATTR2]] !dbg [[DBG29:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret i32 1, !dbg [[DBG30:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_dep
; CHECK-SAME: (ptr [[K:%.*]], ptr [[J:%.*]], i64 [[TMP0:%.*]]) #[[ATTR2]] !dbg [[DBG32:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[RETVAL:%.*]] = alloca [[STRUCT__DEPEND_UNPACK_T:%.*]], align 4
; CHECK-NEXT:    [[K_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    [[J_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    [[DOTADDR:%.*]] = alloca i64, align 8
; CHECK-NEXT:    store ptr [[K]], ptr [[K_ADDR]], align 8
; CHECK-NEXT:    store ptr [[J]], ptr [[J_ADDR]], align 8
; CHECK-NEXT:    store i64 [[TMP0]], ptr [[DOTADDR]], align 8
; CHECK-NEXT:    switch i64 [[TMP0]], label [[TMP3:%.*]] [
; CHECK-NEXT:    i64 0, label [[TMP4:%.*]]
; CHECK-NEXT:    ]
; CHECK:       1:
; CHECK-NEXT:    [[TMP2:%.*]] = load [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], align 4, !dbg [[DBG33:![0-9]+]]
; CHECK-NEXT:    ret [[STRUCT__DEPEND_UNPACK_T]] [[TMP2]], !dbg [[DBG33]]
; CHECK:       3:
; CHECK-NEXT:    br label [[TMP1:%.*]]
; CHECK:       4:
; CHECK-NEXT:    [[TMP5:%.*]] = load i32, ptr [[K]], align 4, !dbg [[DBG35:![0-9]+]]
; CHECK-NEXT:    [[TMP6:%.*]] = load i32, ptr [[J]], align 4, !dbg [[DBG33]]
; CHECK-NEXT:    [[TMP7:%.*]] = add i32 0, [[TMP6]]
; CHECK-NEXT:    [[TMP8:%.*]] = add i32 [[TMP7]], -1
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], i32 0, i32 0
; CHECK-NEXT:    store i32 0, ptr [[TMP9]], align 4
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], i32 0, i32 1
; CHECK-NEXT:    store i32 [[TMP5]], ptr [[TMP10]], align 4
; CHECK-NEXT:    [[TMP11:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], i32 0, i32 2
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP11]], align 4
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], i32 0, i32 3
; CHECK-NEXT:    store i32 1, ptr [[TMP12]], align 4
; CHECK-NEXT:    br label [[TMP1]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_dep.4
; CHECK-SAME: (ptr [[I:%.*]], ptr [[J:%.*]], ptr [[K:%.*]], ptr [[ARRAY:%.*]]) #[[ATTR2]] !dbg [[DBG36:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[RETVAL:%.*]] = alloca [[STRUCT__DEPEND_UNPACK_T_0:%.*]], align 8
; CHECK-NEXT:    [[I_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    [[J_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    [[K_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    [[ARRAY_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr [[I]], ptr [[I_ADDR]], align 8
; CHECK-NEXT:    store ptr [[J]], ptr [[J_ADDR]], align 8
; CHECK-NEXT:    store ptr [[K]], ptr [[K_ADDR]], align 8
; CHECK-NEXT:    store ptr [[ARRAY]], ptr [[ARRAY_ADDR]], align 8
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[I]], align 4, !dbg [[DBG37:![0-9]+]]
; CHECK-NEXT:    [[TMP1:%.*]] = load i32, ptr [[J]], align 4, !dbg [[DBG39:![0-9]+]]
; CHECK-NEXT:    [[ADD:%.*]] = add nsw i32 [[TMP0]], [[TMP1]], !dbg [[DBG40:![0-9]+]]
; CHECK-NEXT:    [[TMP2:%.*]] = load i32, ptr [[K]], align 4, !dbg [[DBG41:![0-9]+]]
; CHECK-NEXT:    [[ADD1:%.*]] = add nsw i32 [[ADD]], [[TMP2]], !dbg [[DBG42:![0-9]+]]
; CHECK-NEXT:    [[TMP3:%.*]] = sext i32 [[ADD1]] to i64
; CHECK-NEXT:    [[TMP4:%.*]] = add i64 [[TMP3]], 1
; CHECK-NEXT:    [[ARRAYDECAY:%.*]] = getelementptr inbounds [50 x i32], ptr [[ARRAY]], i64 0, i64 0, !dbg [[DBG43:![0-9]+]]
; CHECK-NEXT:    [[TMP5:%.*]] = mul i64 [[TMP3]], 4
; CHECK-NEXT:    [[TMP6:%.*]] = mul i64 [[TMP4]], 4
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_0]], ptr [[RETVAL]], i32 0, i32 0
; CHECK-NEXT:    store ptr [[ARRAYDECAY]], ptr [[TMP7]], align 8
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_0]], ptr [[RETVAL]], i32 0, i32 1
; CHECK-NEXT:    store i64 200, ptr [[TMP8]], align 8
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_0]], ptr [[RETVAL]], i32 0, i32 2
; CHECK-NEXT:    store i64 [[TMP5]], ptr [[TMP9]], align 8
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_0]], ptr [[RETVAL]], i32 0, i32 3
; CHECK-NEXT:    store i64 [[TMP6]], ptr [[TMP10]], align 8
; CHECK-NEXT:    [[TMP11:%.*]] = load [[STRUCT__DEPEND_UNPACK_T_0]], ptr [[RETVAL]], align 8, !dbg [[DBG43]]
; CHECK-NEXT:    ret [[STRUCT__DEPEND_UNPACK_T_0]] [[TMP11]], !dbg [[DBG43]]
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_unpacked_task_region_main
; CHECK-SAME: (ptr [[ARRAY:%.*]], ptr [[I:%.*]], ptr [[J:%.*]], ptr [[K:%.*]], ptr [[LOOP_BOUNDS:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) !dbg [[DBG44:![0-9]+]] {
; CHECK-NEXT:  newFuncRoot:
; CHECK-NEXT:    br label [[TMP0:%.*]], !dbg [[DBG45:![0-9]+]]
; CHECK:       0:
; CHECK-NEXT:    [[LB_GEP:%.*]] = getelementptr [[NANOS6_LOOP_BOUNDS_T:%.*]], ptr [[LOOP_BOUNDS]], i32 0, i32 0, !dbg [[DBG45]]
; CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr [[LB_GEP]], align 8, !dbg [[DBG45]]
; CHECK-NEXT:    [[UB_GEP:%.*]] = getelementptr [[NANOS6_LOOP_BOUNDS_T]], ptr [[LOOP_BOUNDS]], i32 0, i32 1, !dbg [[DBG45]]
; CHECK-NEXT:    [[TMP2:%.*]] = load i64, ptr [[UB_GEP]], align 8, !dbg [[DBG45]]
; CHECK-NEXT:    [[TMP3:%.*]] = call i32 @compute_lb(), !dbg [[DBG45]]
; CHECK-NEXT:    [[TMP4:%.*]] = call i32 @compute_ub(), !dbg [[DBG45]]
; CHECK-NEXT:    [[TMP5:%.*]] = call i32 @compute_step(), !dbg [[DBG45]]
; CHECK-NEXT:    [[TMP6:%.*]] = sub i32 [[TMP4]], [[TMP3]], !dbg [[DBG45]]
; CHECK-NEXT:    [[TMP7:%.*]] = sub i32 [[TMP6]], 1, !dbg [[DBG45]]
; CHECK-NEXT:    [[TMP8:%.*]] = sdiv i32 [[TMP7]], [[TMP5]], !dbg [[DBG45]]
; CHECK-NEXT:    [[TMP9:%.*]] = add i32 [[TMP8]], 1, !dbg [[DBG45]]
; CHECK-NEXT:    [[TMP10:%.*]] = sext i32 [[TMP9]] to i64, !dbg [[DBG45]]
; CHECK-NEXT:    [[TMP11:%.*]] = sub i32 [[TMP4]], 1, !dbg [[DBG45]]
; CHECK-NEXT:    store i32 [[TMP3]], ptr [[I]], align 4, !dbg [[DBG45]]
; CHECK-NEXT:    [[TMP12:%.*]] = call i32 @compute_lb.1(), !dbg [[DBG45]]
; CHECK-NEXT:    store i32 [[TMP11]], ptr [[I]], align 4, !dbg [[DBG45]]
; CHECK-NEXT:    [[TMP13:%.*]] = call i32 @compute_ub.2(), !dbg [[DBG45]]
; CHECK-NEXT:    [[TMP14:%.*]] = call i32 @compute_step.3(), !dbg [[DBG45]]
; CHECK-NEXT:    [[TMP15:%.*]] = sub i32 [[TMP13]], [[TMP12]], !dbg [[DBG45]]
; CHECK-NEXT:    [[TMP16:%.*]] = sub i32 [[TMP15]], 1, !dbg [[DBG45]]
; CHECK-NEXT:    [[TMP17:%.*]] = sdiv i32 [[TMP16]], [[TMP14]], !dbg [[DBG45]]
; CHECK-NEXT:    [[TMP18:%.*]] = add i32 [[TMP17]], 1, !dbg [[DBG45]]
; CHECK-NEXT:    [[TMP19:%.*]] = sext i32 [[TMP18]] to i64, !dbg [[DBG45]]
; CHECK-NEXT:    [[TMP20:%.*]] = sext i32 [[TMP3]] to i64, !dbg [[DBG45]]
; CHECK-NEXT:    [[TMP21:%.*]] = sext i32 [[TMP4]] to i64, !dbg [[DBG45]]
; CHECK-NEXT:    [[LOOP:%.*]] = alloca i64, align 8, !dbg [[DBG45]]
; CHECK-NEXT:    store i64 [[TMP1]], ptr [[LOOP]], align 8, !dbg [[DBG45]]
; CHECK-NEXT:    br label [[FOR_COND5:%.*]], !dbg [[DBG45]]
; CHECK:       for.cond5:
; CHECK-NEXT:    [[TMP22:%.*]] = load i64, ptr [[LOOP]], align 8, !dbg [[DBG45]]
; CHECK-NEXT:    [[TMP23:%.*]] = icmp ult i64 [[TMP22]], [[TMP2]], !dbg [[DBG45]]
; CHECK-NEXT:    br i1 [[TMP23]], label [[TMP24:%.*]], label [[DOTEXITSTUB:%.*]], !dbg [[DBG45]]
; CHECK:       24:
; CHECK-NEXT:    [[TMP25:%.*]] = load i64, ptr [[LOOP]], align 8, !dbg [[DBG45]]
; CHECK-NEXT:    [[TMP26:%.*]] = mul i64 1, [[TMP19]], !dbg [[DBG45]]
; CHECK-NEXT:    [[TMP27:%.*]] = udiv i64 [[TMP25]], [[TMP26]], !dbg [[DBG45]]
; CHECK-NEXT:    [[TMP28:%.*]] = sext i32 [[TMP5]] to i64, !dbg [[DBG45]]
; CHECK-NEXT:    [[TMP29:%.*]] = mul i64 [[TMP27]], [[TMP28]], !dbg [[DBG45]]
; CHECK-NEXT:    [[TMP30:%.*]] = sext i32 [[TMP3]] to i64, !dbg [[DBG45]]
; CHECK-NEXT:    [[TMP31:%.*]] = add i64 [[TMP29]], [[TMP30]], !dbg [[DBG45]]
; CHECK-NEXT:    [[TMP32:%.*]] = mul i64 [[TMP27]], [[TMP26]], !dbg [[DBG45]]
; CHECK-NEXT:    [[TMP33:%.*]] = sub i64 [[TMP25]], [[TMP32]], !dbg [[DBG45]]
; CHECK-NEXT:    [[TMP34:%.*]] = trunc i64 [[TMP31]] to i32, !dbg [[DBG45]]
; CHECK-NEXT:    store i32 [[TMP34]], ptr [[I]], align 4, !dbg [[DBG45]]
; CHECK-NEXT:    br label [[TMP35:%.*]], !dbg [[DBG45]]
; CHECK:       35:
; CHECK-NEXT:    [[TMP36:%.*]] = udiv i64 [[TMP33]], 1, !dbg [[DBG45]]
; CHECK-NEXT:    [[TMP37:%.*]] = sext i32 [[TMP14]] to i64, !dbg [[DBG45]]
; CHECK-NEXT:    [[TMP38:%.*]] = mul i64 [[TMP36]], [[TMP37]], !dbg [[DBG45]]
; CHECK-NEXT:    [[TMP39:%.*]] = sext i32 [[TMP12]] to i64, !dbg [[DBG45]]
; CHECK-NEXT:    [[TMP40:%.*]] = add i64 [[TMP38]], [[TMP39]], !dbg [[DBG45]]
; CHECK-NEXT:    [[TMP41:%.*]] = mul i64 [[TMP36]], 1, !dbg [[DBG45]]
; CHECK-NEXT:    [[TMP42:%.*]] = sub i64 [[TMP33]], [[TMP41]], !dbg [[DBG45]]
; CHECK-NEXT:    [[TMP43:%.*]] = trunc i64 [[TMP40]] to i32, !dbg [[DBG45]]
; CHECK-NEXT:    store i32 [[TMP43]], ptr [[J]], align 4, !dbg [[DBG45]]
; CHECK-NEXT:    br label [[FOR_BODY6:%.*]], !dbg [[DBG45]]
; CHECK:       for.body6:
; CHECK-NEXT:    br label [[FOR_INCR8:%.*]], !dbg [[DBG46:![0-9]+]]
; CHECK:       for.incr8:
; CHECK-NEXT:    [[TMP44:%.*]] = load i64, ptr [[LOOP]], align 8, !dbg [[DBG45]]
; CHECK-NEXT:    [[TMP45:%.*]] = add i64 [[TMP44]], 1, !dbg [[DBG45]]
; CHECK-NEXT:    store i64 [[TMP45]], ptr [[LOOP]], align 8, !dbg [[DBG45]]
; CHECK-NEXT:    br label [[FOR_COND5]], !dbg [[DBG45]]
; CHECK:       .exitStub:
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_task_region_main
; CHECK-SAME: (ptr [[TASK_ARGS:%.*]], ptr [[LOOP_BOUNDS:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_ARRAY:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN:%.*]], ptr [[TASK_ARGS]], i32 0, i32 0
; CHECK-NEXT:    [[LOAD_GEP_ARRAY:%.*]] = load ptr, ptr [[GEP_ARRAY]], align 8
; CHECK-NEXT:    [[GEP_I:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN]], ptr [[TASK_ARGS]], i32 0, i32 1
; CHECK-NEXT:    [[GEP_J:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN]], ptr [[TASK_ARGS]], i32 0, i32 2
; CHECK-NEXT:    [[GEP_K:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN]], ptr [[TASK_ARGS]], i32 0, i32 3
; CHECK-NEXT:    [[TLATE_LOAD_GEP_ARRAY:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr [[LOAD_GEP_ARRAY]], ptr [[TLATE_LOAD_GEP_ARRAY]], align 8
; CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[TLATE_LOAD_GEP_ARRAY]], align 8
; CHECK-NEXT:    [[TMP1:%.*]] = icmp ne ptr [[ADDRESS_TRANSLATION_TABLE]], null
; CHECK-NEXT:    br i1 [[TMP1]], label [[TMP2:%.*]], label [[TMP8:%.*]]
; CHECK:       2:
; CHECK-NEXT:    [[LOCAL_LOOKUP_ARRAY:%.*]] = getelementptr [[NANOS6_ADDRESS_TRANSLATION_ENTRY_T:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE]], i32 0, i32 0
; CHECK-NEXT:    [[TMP3:%.*]] = load i64, ptr [[LOCAL_LOOKUP_ARRAY]], align 8
; CHECK-NEXT:    [[DEVICE_LOOKUP_ARRAY:%.*]] = getelementptr [[NANOS6_ADDRESS_TRANSLATION_ENTRY_T]], ptr [[ADDRESS_TRANSLATION_TABLE]], i32 0, i32 1
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[DEVICE_LOOKUP_ARRAY]], align 8
; CHECK-NEXT:    [[TMP5:%.*]] = sub i64 0, [[TMP3]]
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[TMP0]], i64 [[TMP5]]
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[TMP6]], i64 [[TMP4]]
; CHECK-NEXT:    store ptr [[TMP7]], ptr [[TLATE_LOAD_GEP_ARRAY]], align 8
; CHECK-NEXT:    br label [[TMP8]]
; CHECK:       8:
; CHECK-NEXT:    [[TMP9:%.*]] = load ptr, ptr [[TLATE_LOAD_GEP_ARRAY]], align 8
; CHECK-NEXT:    call void @nanos6_unpacked_task_region_main(ptr [[TMP9]], ptr [[GEP_I]], ptr [[GEP_J]], ptr [[GEP_K]], ptr [[LOOP_BOUNDS]], ptr [[ADDRESS_TRANSLATION_TABLE]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_unpacked_deps_main
; CHECK-SAME: (ptr [[ARRAY:%.*]], ptr [[I:%.*]], ptr [[J:%.*]], ptr [[K:%.*]], ptr [[LOOP_BOUNDS:%.*]], ptr [[HANDLER:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[LB_GEP:%.*]] = getelementptr [[NANOS6_LOOP_BOUNDS_T:%.*]], ptr [[LOOP_BOUNDS]], i32 0, i32 0
; CHECK-NEXT:    [[TMP0:%.*]] = load i64, ptr [[LB_GEP]], align 8
; CHECK-NEXT:    [[LB:%.*]] = trunc i64 [[TMP0]] to i32
; CHECK-NEXT:    [[UB_GEP:%.*]] = getelementptr [[NANOS6_LOOP_BOUNDS_T]], ptr [[LOOP_BOUNDS]], i32 0, i32 1
; CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr [[UB_GEP]], align 8
; CHECK-NEXT:    [[TMP2:%.*]] = trunc i64 [[TMP1]] to i32
; CHECK-NEXT:    [[UB:%.*]] = sub i32 [[TMP2]], 1
; CHECK-NEXT:    [[TMP3:%.*]] = call i32 @compute_lb()
; CHECK-NEXT:    [[TMP4:%.*]] = call i32 @compute_ub()
; CHECK-NEXT:    [[TMP5:%.*]] = call i32 @compute_step()
; CHECK-NEXT:    [[TMP6:%.*]] = sub i32 [[TMP4]], [[TMP3]]
; CHECK-NEXT:    [[TMP7:%.*]] = sub i32 [[TMP6]], 1
; CHECK-NEXT:    [[TMP8:%.*]] = sdiv i32 [[TMP7]], [[TMP5]]
; CHECK-NEXT:    [[TMP9:%.*]] = add i32 [[TMP8]], 1
; CHECK-NEXT:    [[TMP10:%.*]] = sext i32 [[TMP9]] to i64
; CHECK-NEXT:    [[TMP11:%.*]] = sub i32 [[TMP4]], 1
; CHECK-NEXT:    store i32 [[TMP3]], ptr [[I]], align 4
; CHECK-NEXT:    [[TMP12:%.*]] = call i32 @compute_lb.1()
; CHECK-NEXT:    store i32 [[TMP11]], ptr [[I]], align 4
; CHECK-NEXT:    [[TMP13:%.*]] = call i32 @compute_ub.2()
; CHECK-NEXT:    [[TMP14:%.*]] = call i32 @compute_step.3()
; CHECK-NEXT:    [[TMP15:%.*]] = sub i32 [[TMP13]], [[TMP12]]
; CHECK-NEXT:    [[TMP16:%.*]] = sub i32 [[TMP15]], 1
; CHECK-NEXT:    [[TMP17:%.*]] = sdiv i32 [[TMP16]], [[TMP14]]
; CHECK-NEXT:    [[TMP18:%.*]] = add i32 [[TMP17]], 1
; CHECK-NEXT:    [[TMP19:%.*]] = sext i32 [[TMP18]] to i64
; CHECK-NEXT:    [[I_LB:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[I_UB:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[TMP20:%.*]] = mul i64 1, [[TMP19]]
; CHECK-NEXT:    [[TMP21:%.*]] = sext i32 [[LB]] to i64
; CHECK-NEXT:    [[TMP22:%.*]] = udiv i64 [[TMP21]], [[TMP20]]
; CHECK-NEXT:    [[TMP23:%.*]] = sext i32 [[TMP5]] to i64
; CHECK-NEXT:    [[TMP24:%.*]] = mul i64 [[TMP22]], [[TMP23]]
; CHECK-NEXT:    [[TMP25:%.*]] = sext i32 [[TMP3]] to i64
; CHECK-NEXT:    [[TMP26:%.*]] = add i64 [[TMP24]], [[TMP25]]
; CHECK-NEXT:    [[TMP27:%.*]] = mul i64 [[TMP22]], [[TMP20]]
; CHECK-NEXT:    [[TMP28:%.*]] = sext i32 [[LB]] to i64
; CHECK-NEXT:    [[TMP29:%.*]] = sub i64 [[TMP28]], [[TMP27]]
; CHECK-NEXT:    [[TMP30:%.*]] = trunc i64 [[TMP26]] to i32
; CHECK-NEXT:    store i32 [[TMP30]], ptr [[I_LB]], align 4
; CHECK-NEXT:    [[TMP31:%.*]] = mul i64 1, [[TMP19]]
; CHECK-NEXT:    [[TMP32:%.*]] = sext i32 [[UB]] to i64
; CHECK-NEXT:    [[TMP33:%.*]] = udiv i64 [[TMP32]], [[TMP31]]
; CHECK-NEXT:    [[TMP34:%.*]] = sext i32 [[TMP5]] to i64
; CHECK-NEXT:    [[TMP35:%.*]] = mul i64 [[TMP33]], [[TMP34]]
; CHECK-NEXT:    [[TMP36:%.*]] = sext i32 [[TMP3]] to i64
; CHECK-NEXT:    [[TMP37:%.*]] = add i64 [[TMP35]], [[TMP36]]
; CHECK-NEXT:    [[TMP38:%.*]] = mul i64 [[TMP33]], [[TMP31]]
; CHECK-NEXT:    [[TMP39:%.*]] = sext i32 [[UB]] to i64
; CHECK-NEXT:    [[TMP40:%.*]] = sub i64 [[TMP39]], [[TMP38]]
; CHECK-NEXT:    [[TMP41:%.*]] = trunc i64 [[TMP37]] to i32
; CHECK-NEXT:    store i32 [[TMP41]], ptr [[I_UB]], align 4
; CHECK-NEXT:    [[J_LB:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[J_UB:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[TMP42:%.*]] = udiv i64 [[TMP29]], 1
; CHECK-NEXT:    [[TMP43:%.*]] = sext i32 [[TMP14]] to i64
; CHECK-NEXT:    [[TMP44:%.*]] = mul i64 [[TMP42]], [[TMP43]]
; CHECK-NEXT:    [[TMP45:%.*]] = sext i32 [[TMP12]] to i64
; CHECK-NEXT:    [[TMP46:%.*]] = add i64 [[TMP44]], [[TMP45]]
; CHECK-NEXT:    [[TMP47:%.*]] = mul i64 [[TMP42]], 1
; CHECK-NEXT:    [[TMP48:%.*]] = sub i64 [[TMP29]], [[TMP47]]
; CHECK-NEXT:    [[TMP49:%.*]] = trunc i64 [[TMP46]] to i32
; CHECK-NEXT:    store i32 [[TMP49]], ptr [[J_LB]], align 4
; CHECK-NEXT:    [[TMP50:%.*]] = udiv i64 [[TMP40]], 1
; CHECK-NEXT:    [[TMP51:%.*]] = sext i32 [[TMP14]] to i64
; CHECK-NEXT:    [[TMP52:%.*]] = mul i64 [[TMP50]], [[TMP51]]
; CHECK-NEXT:    [[TMP53:%.*]] = sext i32 [[TMP12]] to i64
; CHECK-NEXT:    [[TMP54:%.*]] = add i64 [[TMP52]], [[TMP53]]
; CHECK-NEXT:    [[TMP55:%.*]] = mul i64 [[TMP50]], 1
; CHECK-NEXT:    [[TMP56:%.*]] = sub i64 [[TMP40]], [[TMP55]]
; CHECK-NEXT:    [[TMP57:%.*]] = trunc i64 [[TMP54]] to i32
; CHECK-NEXT:    store i32 [[TMP57]], ptr [[J_UB]], align 4
; CHECK-NEXT:    [[K_REMAP:%.*]] = alloca i32, align 4
; CHECK-NEXT:    br label [[TMP58:%.*]]
; CHECK:       58:
; CHECK-NEXT:    store i32 0, ptr [[K]], align 4
; CHECK-NEXT:    [[TMP59:%.*]] = call [[STRUCT__DEPEND_UNPACK_T:%.*]] @compute_dep(ptr [[K]], ptr [[J_LB]], i64 0)
; CHECK-NEXT:    [[TMP60:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T]] [[TMP59]], 0
; CHECK-NEXT:    [[TMP61:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T]] [[TMP59]], 2
; CHECK-NEXT:    [[TMP62:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T]] [[TMP59]], 3
; CHECK-NEXT:    store i32 [[TMP60]], ptr [[K]], align 4
; CHECK-NEXT:    br label [[FOR_COND:%.*]]
; CHECK:       for.cond:
; CHECK-NEXT:    [[TMP63:%.*]] = load i32, ptr [[K]], align 4
; CHECK-NEXT:    [[TMP64:%.*]] = icmp sle i32 [[TMP63]], [[TMP61]]
; CHECK-NEXT:    br i1 [[TMP64]], label [[FOR_BODY:%.*]], label [[TMP73:%.*]]
; CHECK:       for.body:
; CHECK-NEXT:    [[TMP65:%.*]] = call [[STRUCT__DEPEND_UNPACK_T]] @compute_dep(ptr [[K]], ptr [[J_LB]], i64 0)
; CHECK-NEXT:    [[TMP66:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T]] [[TMP65]], 1
; CHECK-NEXT:    store i32 [[TMP66]], ptr [[K_REMAP]], align 4
; CHECK-NEXT:    [[TMP67:%.*]] = call [[STRUCT__DEPEND_UNPACK_T_0:%.*]] @compute_dep.4(ptr [[I_LB]], ptr [[J_LB]], ptr [[K_REMAP]], ptr [[ARRAY]])
; CHECK-NEXT:    [[TMP68:%.*]] = call [[STRUCT__DEPEND_UNPACK_T_0]] @compute_dep.4(ptr [[I_LB]], ptr [[J_LB]], ptr [[K_REMAP]], ptr [[ARRAY]])
; CHECK-NEXT:    [[TMP69:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_0]] [[TMP67]], 0
; CHECK-NEXT:    [[TMP70:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_0]] [[TMP67]], 1
; CHECK-NEXT:    [[TMP71:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_0]] [[TMP67]], 2
; CHECK-NEXT:    [[TMP72:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_0]] [[TMP68]], 3
; CHECK-NEXT:    call void @nanos6_register_region_read_depinfo1(ptr [[HANDLER]], i32 0, ptr @[[GLOB1:[0-9]+]], ptr [[TMP69]], i64 [[TMP70]], i64 [[TMP71]], i64 [[TMP72]])
; CHECK-NEXT:    br label [[FOR_INCR:%.*]]
; CHECK:       73:
; CHECK-NEXT:    ret void
; CHECK:       for.incr:
; CHECK-NEXT:    [[TMP74:%.*]] = load i32, ptr [[K]], align 4
; CHECK-NEXT:    [[TMP75:%.*]] = add i32 [[TMP74]], [[TMP62]]
; CHECK-NEXT:    store i32 [[TMP75]], ptr [[K]], align 4
; CHECK-NEXT:    br label [[FOR_COND]]
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_deps_main
; CHECK-SAME: (ptr [[TASK_ARGS:%.*]], ptr [[LOOP_BOUNDS:%.*]], ptr [[HANDLER:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_ARRAY:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN:%.*]], ptr [[TASK_ARGS]], i32 0, i32 0
; CHECK-NEXT:    [[LOAD_GEP_ARRAY:%.*]] = load ptr, ptr [[GEP_ARRAY]], align 8
; CHECK-NEXT:    [[GEP_I:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN]], ptr [[TASK_ARGS]], i32 0, i32 1
; CHECK-NEXT:    [[GEP_J:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN]], ptr [[TASK_ARGS]], i32 0, i32 2
; CHECK-NEXT:    [[GEP_K:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN]], ptr [[TASK_ARGS]], i32 0, i32 3
; CHECK-NEXT:    call void @nanos6_unpacked_deps_main(ptr [[LOAD_GEP_ARRAY]], ptr [[GEP_I]], ptr [[GEP_J]], ptr [[GEP_K]], ptr [[LOOP_BOUNDS]], ptr [[HANDLER]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_constructor_register_task_info() {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @nanos6_register_task_info(ptr @task_info_var_main)
; CHECK-NEXT:    ret void
;
