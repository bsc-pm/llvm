; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --function-signature --include-generated-funcs
; RUN: opt %s -passes=ompss-2 -S | FileCheck %s
; ModuleID = 'multideps.ll'
source_filename = "multideps.ll"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; int v[10][10];
; int main() {
;     #pragma oss task out( { v[i][j], i = {0, 1, 2}, j = i:10-1 } )
;     {}
; }

%struct._depend_unpack_t = type { i32, i32, i32, i32, i32, i32, i32, i32 }
%struct._depend_unpack_t.0 = type { ptr, i64, i64, i64, i64, i64, i64 }

@v = global [10 x [10 x i32]] zeroinitializer, align 16
@__const.main.discrete.array = private unnamed_addr constant [3 x i32] [i32 0, i32 1, i32 2], align 4

; Function Attrs: noinline nounwind optnone
define dso_local i32 @main() #0 !dbg !5 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 0, ptr %i, align 4, !dbg !9
  %0 = load i32, ptr %i, align 4, !dbg !10
  store i32 %0, ptr %j, align 4, !dbg !11
  %1 = call token @llvm.directive.region.entry() [ "DIR.OSS"([5 x i8] c"TASK\00"), "QUAL.OSS.SHARED"(ptr @v, [10 x [10 x i32]] undef), "QUAL.OSS.PRIVATE"(ptr %i, i32 undef), "QUAL.OSS.PRIVATE"(ptr %j, i32 undef), "QUAL.OSS.MULTIDEP.RANGE.OUT"(ptr %i, ptr %j, ptr @compute_dep, ptr %i, ptr %j, ptr @v, [39 x i8] c"{ v[i][j], i = {0, 1, 2}, j = i:10-1 }\00", ptr @compute_dep.1, ptr %i, ptr %j, ptr @v) ], !dbg !12
  call void @llvm.directive.region.exit(token %1), !dbg !13
  ret i32 0, !dbg !14
}

; Function Attrs: nounwind
declare token @llvm.directive.region.entry() #1

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token) #1

define internal %struct._depend_unpack_t @compute_dep(ptr %i, ptr %j, i64 %0) #2 !dbg !15 {
entry:
  %retval = alloca %struct._depend_unpack_t, align 4
  %i.addr = alloca ptr, align 8
  %j.addr = alloca ptr, align 8
  %.addr = alloca i64, align 8
  %discrete.array = alloca [3 x i32], align 4
  store ptr %i, ptr %i.addr, align 8
  store ptr %j, ptr %j.addr, align 8
  store i64 %0, ptr %.addr, align 8
  switch i64 %0, label %3 [
    i64 0, label %4
    i64 1, label %11
  ]

1:                                                ; preds = %11, %4, %3
  %2 = load %struct._depend_unpack_t, ptr %retval, align 4, !dbg !16
  ret %struct._depend_unpack_t %2, !dbg !16

3:                                                ; preds = %entry
  br label %1

4:                                                ; preds = %entry
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %discrete.array, ptr align 4 @__const.main.discrete.array, i64 12, i1 false), !dbg !18
  %5 = load i32, ptr %i, align 4, !dbg !19
  %discreteidx = getelementptr [3 x i32], ptr %discrete.array, i32 0, i32 %5
  %6 = load i32, ptr %discreteidx, align 4
  %7 = getelementptr inbounds %struct._depend_unpack_t, ptr %retval, i32 0, i32 0
  store i32 0, ptr %7, align 4
  %8 = getelementptr inbounds %struct._depend_unpack_t, ptr %retval, i32 0, i32 1
  store i32 %6, ptr %8, align 4
  %9 = getelementptr inbounds %struct._depend_unpack_t, ptr %retval, i32 0, i32 2
  store i32 2, ptr %9, align 4
  %10 = getelementptr inbounds %struct._depend_unpack_t, ptr %retval, i32 0, i32 3
  store i32 1, ptr %10, align 4
  br label %1

11:                                               ; preds = %entry
  %12 = load i32, ptr %i, align 4, !dbg !20
  %13 = load i32, ptr %j, align 4, !dbg !21
  %14 = getelementptr inbounds %struct._depend_unpack_t, ptr %retval, i32 0, i32 4
  store i32 %12, ptr %14, align 4
  %15 = getelementptr inbounds %struct._depend_unpack_t, ptr %retval, i32 0, i32 5
  store i32 %13, ptr %15, align 4
  %16 = getelementptr inbounds %struct._depend_unpack_t, ptr %retval, i32 0, i32 6
  store i32 9, ptr %16, align 4
  %17 = getelementptr inbounds %struct._depend_unpack_t, ptr %retval, i32 0, i32 7
  store i32 1, ptr %17, align 4
  br label %1
}

; Function Attrs: argmemonly nofree nounwind willreturn
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #3

define internal %struct._depend_unpack_t.0 @compute_dep.1(ptr %i, ptr %j, ptr %v) #2 !dbg !22 {
entry:
  %retval = alloca %struct._depend_unpack_t.0, align 8
  %i.addr = alloca ptr, align 8
  %j.addr = alloca ptr, align 8
  %v.addr = alloca ptr, align 8
  store ptr %i, ptr %i.addr, align 8
  store ptr %j, ptr %j.addr, align 8
  store ptr %v, ptr %v.addr, align 8
  %0 = load i32, ptr %j, align 4, !dbg !23
  %1 = sext i32 %0 to i64
  %2 = add i64 %1, 1
  %3 = load i32, ptr %i, align 4, !dbg !25
  %4 = sext i32 %3 to i64
  %5 = add i64 %4, 1
  %arraydecay = getelementptr inbounds [10 x [10 x i32]], ptr %v, i64 0, i64 0, !dbg !26
  %6 = mul i64 %1, 4
  %7 = mul i64 %2, 4
  %8 = getelementptr inbounds %struct._depend_unpack_t.0, ptr %retval, i32 0, i32 0
  store ptr %arraydecay, ptr %8, align 8
  %9 = getelementptr inbounds %struct._depend_unpack_t.0, ptr %retval, i32 0, i32 1
  store i64 40, ptr %9, align 8
  %10 = getelementptr inbounds %struct._depend_unpack_t.0, ptr %retval, i32 0, i32 2
  store i64 %6, ptr %10, align 8
  %11 = getelementptr inbounds %struct._depend_unpack_t.0, ptr %retval, i32 0, i32 3
  store i64 %7, ptr %11, align 8
  %12 = getelementptr inbounds %struct._depend_unpack_t.0, ptr %retval, i32 0, i32 4
  store i64 10, ptr %12, align 8
  %13 = getelementptr inbounds %struct._depend_unpack_t.0, ptr %retval, i32 0, i32 5
  store i64 %4, ptr %13, align 8
  %14 = getelementptr inbounds %struct._depend_unpack_t.0, ptr %retval, i32 0, i32 6
  store i64 %5, ptr %14, align 8
  %15 = load %struct._depend_unpack_t.0, ptr %retval, align 8, !dbg !26
  ret %struct._depend_unpack_t.0 %15, !dbg !26
}

attributes #0 = { noinline nounwind optnone "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
attributes #1 = { nounwind }
attributes #2 = { "min-legal-vector-width"="0" }
attributes #3 = { argmemonly nofree nounwind willreturn }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "", isOptimized: false, runtimeVersion: 0, emissionKind: NoDebug, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "<stdin>", directory: "")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 1, !"wchar_size", i32 4}
!4 = !{!""}
!5 = distinct !DISubprogram(name: "main", scope: !6, file: !6, line: 2, type: !7, scopeLine: 2, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !8)
!6 = !DIFile(filename: "multideps.ll", directory: "")
!7 = !DISubroutineType(types: !8)
!8 = !{}
!9 = !DILocation(line: 3, column: 38, scope: !5)
!10 = !DILocation(line: 3, column: 57, scope: !5)
!11 = !DILocation(line: 3, column: 53, scope: !5)
!12 = !DILocation(line: 3, column: 13, scope: !5)
!13 = !DILocation(line: 4, column: 6, scope: !5)
!14 = !DILocation(line: 5, column: 1, scope: !5)
!15 = distinct !DISubprogram(linkageName: "compute_dep", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!16 = !DILocation(line: 3, column: 62, scope: !17)
!17 = !DILexicalBlockFile(scope: !15, file: !6, discriminator: 0)
!18 = !DILocation(line: 0, scope: !15)
!19 = !DILocation(line: 3, column: 38, scope: !17)
!20 = !DILocation(line: 3, column: 57, scope: !17)
!21 = !DILocation(line: 3, column: 53, scope: !17)
!22 = distinct !DISubprogram(linkageName: "compute_dep.1", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!23 = !DILocation(line: 3, column: 34, scope: !24)
!24 = !DILexicalBlockFile(scope: !22, file: !6, discriminator: 0)
!25 = !DILocation(line: 3, column: 31, scope: !24)
!26 = !DILocation(line: 3, column: 29, scope: !24)
; CHECK-LABEL: define {{[^@]+}}@main
; CHECK-SAME: () #[[ATTR0:[0-9]+]] !dbg [[DBG5:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[I:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[J:%.*]] = alloca i32, align 4
; CHECK-NEXT:    store i32 0, ptr [[I]], align 4, !dbg [[DBG9:![0-9]+]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[I]], align 4, !dbg [[DBG10:![0-9]+]]
; CHECK-NEXT:    store i32 [[TMP0]], ptr [[J]], align 4, !dbg [[DBG11:![0-9]+]]
; CHECK-NEXT:    [[TMP1:%.*]] = alloca ptr, align 8, !dbg [[DBG12:![0-9]+]]
; CHECK-NEXT:    [[TMP2:%.*]] = alloca ptr, align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[NUM_DEPS:%.*]] = alloca i64, align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[I_REMAP:%.*]] = alloca i32, align 4, !dbg [[DBG12]]
; CHECK-NEXT:    [[J_REMAP:%.*]] = alloca i32, align 4, !dbg [[DBG12]]
; CHECK-NEXT:    br label [[FINAL_COND:%.*]], !dbg [[DBG12]]
; CHECK:       codeRepl:
; CHECK-NEXT:    store i64 0, ptr [[NUM_DEPS]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    br label [[TMP3:%.*]], !dbg [[DBG12]]
; CHECK:       3:
; CHECK-NEXT:    store i32 0, ptr [[I]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP4:%.*]] = call [[STRUCT__DEPEND_UNPACK_T:%.*]] @compute_dep(ptr [[I]], ptr [[J]], i64 0), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP5:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T]] [[TMP4]], 0, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP6:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T]] [[TMP4]], 2, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP7:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T]] [[TMP4]], 3, !dbg [[DBG12]]
; CHECK-NEXT:    store i32 [[TMP5]], ptr [[I]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    br label [[FOR_COND:%.*]], !dbg [[DBG12]]
; CHECK:       for.cond:
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[I]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP9:%.*]] = icmp sle i32 [[TMP8]], [[TMP6]], !dbg [[DBG12]]
; CHECK-NEXT:    br i1 [[TMP9]], label [[FOR_BODY:%.*]], label [[TMP22:%.*]], !dbg [[DBG12]]
; CHECK:       for.body:
; CHECK-NEXT:    [[TMP10:%.*]] = call [[STRUCT__DEPEND_UNPACK_T]] @compute_dep(ptr [[I]], ptr [[J]], i64 0), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP11:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T]] [[TMP10]], 1, !dbg [[DBG12]]
; CHECK-NEXT:    store i32 [[TMP11]], ptr [[I_REMAP]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    store i32 0, ptr [[J]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP12:%.*]] = call [[STRUCT__DEPEND_UNPACK_T]] @compute_dep(ptr [[I_REMAP]], ptr [[J]], i64 1), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP13:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T]] [[TMP12]], 4, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP14:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T]] [[TMP12]], 6, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP15:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T]] [[TMP12]], 7, !dbg [[DBG12]]
; CHECK-NEXT:    store i32 [[TMP13]], ptr [[J]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    br label [[FOR_COND1:%.*]], !dbg [[DBG12]]
; CHECK:       for.cond1:
; CHECK-NEXT:    [[TMP16:%.*]] = load i32, ptr [[J]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP17:%.*]] = icmp sle i32 [[TMP16]], [[TMP14]], !dbg [[DBG12]]
; CHECK-NEXT:    br i1 [[TMP17]], label [[FOR_BODY2:%.*]], label [[FOR_INCR:%.*]], !dbg [[DBG12]]
; CHECK:       for.body2:
; CHECK-NEXT:    [[TMP18:%.*]] = call [[STRUCT__DEPEND_UNPACK_T]] @compute_dep(ptr [[I_REMAP]], ptr [[J]], i64 1), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP19:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T]] [[TMP18]], 5, !dbg [[DBG12]]
; CHECK-NEXT:    store i32 [[TMP19]], ptr [[J_REMAP]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP20:%.*]] = load i64, ptr [[NUM_DEPS]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP21:%.*]] = add i64 [[TMP20]], 1, !dbg [[DBG12]]
; CHECK-NEXT:    store i64 [[TMP21]], ptr [[NUM_DEPS]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    br label [[FOR_INCR3:%.*]], !dbg [[DBG12]]
; CHECK:       22:
; CHECK-NEXT:    [[TMP23:%.*]] = load i64, ptr [[NUM_DEPS]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    call void @nanos6_create_task(ptr @task_info_var_main, ptr @task_invocation_info_main, ptr null, i64 16, ptr [[TMP1]], ptr [[TMP2]], i64 0, i64 [[TMP23]]), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP24:%.*]] = load ptr, ptr [[TMP1]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[ARGS_END:%.*]] = getelementptr i8, ptr [[TMP24]], i64 16, !dbg [[DBG12]]
; CHECK-NEXT:    [[GEP_V:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN:%.*]], ptr [[TMP24]], i32 0, i32 0, !dbg [[DBG12]]
; CHECK-NEXT:    store ptr @v, ptr [[GEP_V]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP25:%.*]] = load ptr, ptr [[TMP2]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    call void @nanos6_submit_task(ptr [[TMP25]]), !dbg [[DBG12]]
; CHECK-NEXT:    br label [[FINAL_END:%.*]], !dbg [[DBG12]]
; CHECK:       final.end:
; CHECK-NEXT:    ret i32 0, !dbg [[DBG13:![0-9]+]]
; CHECK:       final.then:
; CHECK-NEXT:    br label [[FINAL_END]], !dbg [[DBG13]]
; CHECK:       final.cond:
; CHECK-NEXT:    [[TMP26:%.*]] = call i32 @nanos6_in_final(), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP27:%.*]] = icmp ne i32 [[TMP26]], 0, !dbg [[DBG12]]
; CHECK-NEXT:    br i1 [[TMP27]], label [[FINAL_THEN:%.*]], label [[CODEREPL:%.*]], !dbg [[DBG12]]
; CHECK:       for.incr:
; CHECK-NEXT:    [[TMP28:%.*]] = load i32, ptr [[I]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP29:%.*]] = add i32 [[TMP28]], [[TMP7]], !dbg [[DBG12]]
; CHECK-NEXT:    store i32 [[TMP29]], ptr [[I]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    br label [[FOR_COND]], !dbg [[DBG12]]
; CHECK:       for.incr3:
; CHECK-NEXT:    [[TMP30:%.*]] = load i32, ptr [[J]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP31:%.*]] = add i32 [[TMP30]], [[TMP15]], !dbg [[DBG12]]
; CHECK-NEXT:    store i32 [[TMP31]], ptr [[J]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    br label [[FOR_COND1]], !dbg [[DBG12]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_dep
; CHECK-SAME: (ptr [[I:%.*]], ptr [[J:%.*]], i64 [[TMP0:%.*]]) #[[ATTR2:[0-9]+]] !dbg [[DBG14:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[RETVAL:%.*]] = alloca [[STRUCT__DEPEND_UNPACK_T:%.*]], align 4
; CHECK-NEXT:    [[I_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    [[J_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    [[DOTADDR:%.*]] = alloca i64, align 8
; CHECK-NEXT:    [[DISCRETE_ARRAY:%.*]] = alloca [3 x i32], align 4
; CHECK-NEXT:    store ptr [[I]], ptr [[I_ADDR]], align 8
; CHECK-NEXT:    store ptr [[J]], ptr [[J_ADDR]], align 8
; CHECK-NEXT:    store i64 [[TMP0]], ptr [[DOTADDR]], align 8
; CHECK-NEXT:    switch i64 [[TMP0]], label [[TMP3:%.*]] [
; CHECK-NEXT:    i64 0, label [[TMP4:%.*]]
; CHECK-NEXT:    i64 1, label [[TMP11:%.*]]
; CHECK-NEXT:    ]
; CHECK:       1:
; CHECK-NEXT:    [[TMP2:%.*]] = load [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], align 4, !dbg [[DBG15:![0-9]+]]
; CHECK-NEXT:    ret [[STRUCT__DEPEND_UNPACK_T]] [[TMP2]], !dbg [[DBG15]]
; CHECK:       3:
; CHECK-NEXT:    br label [[TMP1:%.*]]
; CHECK:       4:
; CHECK-NEXT:    call void @llvm.memcpy.p0.p0.i64(ptr align 4 [[DISCRETE_ARRAY]], ptr align 4 @__const.main.discrete.array, i64 12, i1 false), !dbg [[DBG17:![0-9]+]]
; CHECK-NEXT:    [[TMP5:%.*]] = load i32, ptr [[I]], align 4, !dbg [[DBG18:![0-9]+]]
; CHECK-NEXT:    [[DISCRETEIDX:%.*]] = getelementptr [3 x i32], ptr [[DISCRETE_ARRAY]], i32 0, i32 [[TMP5]]
; CHECK-NEXT:    [[TMP6:%.*]] = load i32, ptr [[DISCRETEIDX]], align 4
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], i32 0, i32 0
; CHECK-NEXT:    store i32 0, ptr [[TMP7]], align 4
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], i32 0, i32 1
; CHECK-NEXT:    store i32 [[TMP6]], ptr [[TMP8]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], i32 0, i32 2
; CHECK-NEXT:    store i32 2, ptr [[TMP9]], align 4
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], i32 0, i32 3
; CHECK-NEXT:    store i32 1, ptr [[TMP10]], align 4
; CHECK-NEXT:    br label [[TMP1]]
; CHECK:       11:
; CHECK-NEXT:    [[TMP12:%.*]] = load i32, ptr [[I]], align 4, !dbg [[DBG19:![0-9]+]]
; CHECK-NEXT:    [[TMP13:%.*]] = load i32, ptr [[J]], align 4, !dbg [[DBG20:![0-9]+]]
; CHECK-NEXT:    [[TMP14:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], i32 0, i32 4
; CHECK-NEXT:    store i32 [[TMP12]], ptr [[TMP14]], align 4
; CHECK-NEXT:    [[TMP15:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], i32 0, i32 5
; CHECK-NEXT:    store i32 [[TMP13]], ptr [[TMP15]], align 4
; CHECK-NEXT:    [[TMP16:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], i32 0, i32 6
; CHECK-NEXT:    store i32 9, ptr [[TMP16]], align 4
; CHECK-NEXT:    [[TMP17:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], i32 0, i32 7
; CHECK-NEXT:    store i32 1, ptr [[TMP17]], align 4
; CHECK-NEXT:    br label [[TMP1]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_dep.1
; CHECK-SAME: (ptr [[I:%.*]], ptr [[J:%.*]], ptr [[V:%.*]]) #[[ATTR2]] !dbg [[DBG21:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[RETVAL:%.*]] = alloca [[STRUCT__DEPEND_UNPACK_T_0:%.*]], align 8
; CHECK-NEXT:    [[I_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    [[J_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    [[V_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr [[I]], ptr [[I_ADDR]], align 8
; CHECK-NEXT:    store ptr [[J]], ptr [[J_ADDR]], align 8
; CHECK-NEXT:    store ptr [[V]], ptr [[V_ADDR]], align 8
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[J]], align 4, !dbg [[DBG22:![0-9]+]]
; CHECK-NEXT:    [[TMP1:%.*]] = sext i32 [[TMP0]] to i64
; CHECK-NEXT:    [[TMP2:%.*]] = add i64 [[TMP1]], 1
; CHECK-NEXT:    [[TMP3:%.*]] = load i32, ptr [[I]], align 4, !dbg [[DBG24:![0-9]+]]
; CHECK-NEXT:    [[TMP4:%.*]] = sext i32 [[TMP3]] to i64
; CHECK-NEXT:    [[TMP5:%.*]] = add i64 [[TMP4]], 1
; CHECK-NEXT:    [[ARRAYDECAY:%.*]] = getelementptr inbounds [10 x [10 x i32]], ptr [[V]], i64 0, i64 0, !dbg [[DBG25:![0-9]+]]
; CHECK-NEXT:    [[TMP6:%.*]] = mul i64 [[TMP1]], 4
; CHECK-NEXT:    [[TMP7:%.*]] = mul i64 [[TMP2]], 4
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_0]], ptr [[RETVAL]], i32 0, i32 0
; CHECK-NEXT:    store ptr [[ARRAYDECAY]], ptr [[TMP8]], align 8
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_0]], ptr [[RETVAL]], i32 0, i32 1
; CHECK-NEXT:    store i64 40, ptr [[TMP9]], align 8
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_0]], ptr [[RETVAL]], i32 0, i32 2
; CHECK-NEXT:    store i64 [[TMP6]], ptr [[TMP10]], align 8
; CHECK-NEXT:    [[TMP11:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_0]], ptr [[RETVAL]], i32 0, i32 3
; CHECK-NEXT:    store i64 [[TMP7]], ptr [[TMP11]], align 8
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_0]], ptr [[RETVAL]], i32 0, i32 4
; CHECK-NEXT:    store i64 10, ptr [[TMP12]], align 8
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_0]], ptr [[RETVAL]], i32 0, i32 5
; CHECK-NEXT:    store i64 [[TMP4]], ptr [[TMP13]], align 8
; CHECK-NEXT:    [[TMP14:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_0]], ptr [[RETVAL]], i32 0, i32 6
; CHECK-NEXT:    store i64 [[TMP5]], ptr [[TMP14]], align 8
; CHECK-NEXT:    [[TMP15:%.*]] = load [[STRUCT__DEPEND_UNPACK_T_0]], ptr [[RETVAL]], align 8, !dbg [[DBG25]]
; CHECK-NEXT:    ret [[STRUCT__DEPEND_UNPACK_T_0]] [[TMP15]], !dbg [[DBG25]]
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_unpacked_task_region_main
; CHECK-SAME: (ptr [[V:%.*]], ptr [[I:%.*]], ptr [[J:%.*]], ptr [[DEVICE_ENV:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) !dbg [[DBG26:![0-9]+]] {
; CHECK-NEXT:  newFuncRoot:
; CHECK-NEXT:    br label [[TMP0:%.*]], !dbg [[DBG27:![0-9]+]]
; CHECK:       0:
; CHECK-NEXT:    br label [[DOTEXITSTUB:%.*]], !dbg [[DBG28:![0-9]+]]
; CHECK:       .exitStub:
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_task_region_main
; CHECK-SAME: (ptr [[TASK_ARGS:%.*]], ptr [[DEVICE_ENV:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_V:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN:%.*]], ptr [[TASK_ARGS]], i32 0, i32 0
; CHECK-NEXT:    [[LOAD_GEP_V:%.*]] = load ptr, ptr [[GEP_V]], align 8
; CHECK-NEXT:    [[GEP_I:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN]], ptr [[TASK_ARGS]], i32 0, i32 1
; CHECK-NEXT:    [[GEP_J:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN]], ptr [[TASK_ARGS]], i32 0, i32 2
; CHECK-NEXT:    [[TLATE_LOAD_GEP_V:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr [[LOAD_GEP_V]], ptr [[TLATE_LOAD_GEP_V]], align 8
; CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[TLATE_LOAD_GEP_V]], align 8
; CHECK-NEXT:    [[TMP1:%.*]] = icmp ne ptr [[ADDRESS_TRANSLATION_TABLE]], null
; CHECK-NEXT:    br i1 [[TMP1]], label [[TMP2:%.*]], label [[TMP8:%.*]]
; CHECK:       2:
; CHECK-NEXT:    [[LOCAL_LOOKUP_V:%.*]] = getelementptr [[NANOS6_ADDRESS_TRANSLATION_ENTRY_T:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE]], i32 0, i32 0
; CHECK-NEXT:    [[TMP3:%.*]] = load i64, ptr [[LOCAL_LOOKUP_V]], align 8
; CHECK-NEXT:    [[DEVICE_LOOKUP_V:%.*]] = getelementptr [[NANOS6_ADDRESS_TRANSLATION_ENTRY_T]], ptr [[ADDRESS_TRANSLATION_TABLE]], i32 0, i32 1
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[DEVICE_LOOKUP_V]], align 8
; CHECK-NEXT:    [[TMP5:%.*]] = sub i64 0, [[TMP3]]
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[TMP0]], i64 [[TMP5]]
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[TMP6]], i64 [[TMP4]]
; CHECK-NEXT:    store ptr [[TMP7]], ptr [[TLATE_LOAD_GEP_V]], align 8
; CHECK-NEXT:    br label [[TMP8]]
; CHECK:       8:
; CHECK-NEXT:    [[TMP9:%.*]] = load ptr, ptr [[TLATE_LOAD_GEP_V]], align 8
; CHECK-NEXT:    call void @nanos6_unpacked_task_region_main(ptr [[TMP9]], ptr [[GEP_I]], ptr [[GEP_J]], ptr [[DEVICE_ENV]], ptr [[ADDRESS_TRANSLATION_TABLE]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_unpacked_deps_main
; CHECK-SAME: (ptr [[V:%.*]], ptr [[I:%.*]], ptr [[J:%.*]], ptr [[LOOP_BOUNDS:%.*]], ptr [[HANDLER:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[I_REMAP:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[J_REMAP:%.*]] = alloca i32, align 4
; CHECK-NEXT:    br label [[TMP0:%.*]]
; CHECK:       0:
; CHECK-NEXT:    store i32 0, ptr [[I]], align 4
; CHECK-NEXT:    [[TMP1:%.*]] = call [[STRUCT__DEPEND_UNPACK_T:%.*]] @compute_dep(ptr [[I]], ptr [[J]], i64 0)
; CHECK-NEXT:    [[TMP2:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T]] [[TMP1]], 0
; CHECK-NEXT:    [[TMP3:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T]] [[TMP1]], 2
; CHECK-NEXT:    [[TMP4:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T]] [[TMP1]], 3
; CHECK-NEXT:    store i32 [[TMP2]], ptr [[I]], align 4
; CHECK-NEXT:    br label [[FOR_COND:%.*]]
; CHECK:       for.cond:
; CHECK-NEXT:    [[TMP5:%.*]] = load i32, ptr [[I]], align 4
; CHECK-NEXT:    [[TMP6:%.*]] = icmp sle i32 [[TMP5]], [[TMP3]]
; CHECK-NEXT:    br i1 [[TMP6]], label [[FOR_BODY:%.*]], label [[TMP26:%.*]]
; CHECK:       for.body:
; CHECK-NEXT:    [[TMP7:%.*]] = call [[STRUCT__DEPEND_UNPACK_T]] @compute_dep(ptr [[I]], ptr [[J]], i64 0)
; CHECK-NEXT:    [[TMP8:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T]] [[TMP7]], 1
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[I_REMAP]], align 4
; CHECK-NEXT:    store i32 0, ptr [[J]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = call [[STRUCT__DEPEND_UNPACK_T]] @compute_dep(ptr [[I_REMAP]], ptr [[J]], i64 1)
; CHECK-NEXT:    [[TMP10:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T]] [[TMP9]], 4
; CHECK-NEXT:    [[TMP11:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T]] [[TMP9]], 6
; CHECK-NEXT:    [[TMP12:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T]] [[TMP9]], 7
; CHECK-NEXT:    store i32 [[TMP10]], ptr [[J]], align 4
; CHECK-NEXT:    br label [[FOR_COND1:%.*]]
; CHECK:       for.cond1:
; CHECK-NEXT:    [[TMP13:%.*]] = load i32, ptr [[J]], align 4
; CHECK-NEXT:    [[TMP14:%.*]] = icmp sle i32 [[TMP13]], [[TMP11]]
; CHECK-NEXT:    br i1 [[TMP14]], label [[FOR_BODY2:%.*]], label [[FOR_INCR:%.*]]
; CHECK:       for.body2:
; CHECK-NEXT:    [[TMP15:%.*]] = call [[STRUCT__DEPEND_UNPACK_T]] @compute_dep(ptr [[I_REMAP]], ptr [[J]], i64 1)
; CHECK-NEXT:    [[TMP16:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T]] [[TMP15]], 5
; CHECK-NEXT:    store i32 [[TMP16]], ptr [[J_REMAP]], align 4
; CHECK-NEXT:    [[TMP17:%.*]] = call [[STRUCT__DEPEND_UNPACK_T_0:%.*]] @compute_dep.1(ptr [[I_REMAP]], ptr [[J_REMAP]], ptr [[V]])
; CHECK-NEXT:    [[TMP18:%.*]] = call [[STRUCT__DEPEND_UNPACK_T_0]] @compute_dep.1(ptr [[I_REMAP]], ptr [[J_REMAP]], ptr [[V]])
; CHECK-NEXT:    [[TMP19:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_0]] [[TMP17]], 0
; CHECK-NEXT:    [[TMP20:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_0]] [[TMP17]], 1
; CHECK-NEXT:    [[TMP21:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_0]] [[TMP17]], 2
; CHECK-NEXT:    [[TMP22:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_0]] [[TMP18]], 3
; CHECK-NEXT:    [[TMP23:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_0]] [[TMP17]], 4
; CHECK-NEXT:    [[TMP24:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_0]] [[TMP17]], 5
; CHECK-NEXT:    [[TMP25:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_0]] [[TMP18]], 6
; CHECK-NEXT:    call void @nanos6_register_region_write_depinfo2(ptr [[HANDLER]], i32 0, ptr @[[GLOB1:[0-9]+]], ptr [[TMP19]], i64 [[TMP20]], i64 [[TMP21]], i64 [[TMP22]], i64 [[TMP23]], i64 [[TMP24]], i64 [[TMP25]])
; CHECK-NEXT:    br label [[FOR_INCR3:%.*]]
; CHECK:       26:
; CHECK-NEXT:    ret void
; CHECK:       for.incr:
; CHECK-NEXT:    [[TMP27:%.*]] = load i32, ptr [[I]], align 4
; CHECK-NEXT:    [[TMP28:%.*]] = add i32 [[TMP27]], [[TMP4]]
; CHECK-NEXT:    store i32 [[TMP28]], ptr [[I]], align 4
; CHECK-NEXT:    br label [[FOR_COND]]
; CHECK:       for.incr3:
; CHECK-NEXT:    [[TMP29:%.*]] = load i32, ptr [[J]], align 4
; CHECK-NEXT:    [[TMP30:%.*]] = add i32 [[TMP29]], [[TMP12]]
; CHECK-NEXT:    store i32 [[TMP30]], ptr [[J]], align 4
; CHECK-NEXT:    br label [[FOR_COND1]]
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_deps_main
; CHECK-SAME: (ptr [[TASK_ARGS:%.*]], ptr [[LOOP_BOUNDS:%.*]], ptr [[HANDLER:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_V:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN:%.*]], ptr [[TASK_ARGS]], i32 0, i32 0
; CHECK-NEXT:    [[LOAD_GEP_V:%.*]] = load ptr, ptr [[GEP_V]], align 8
; CHECK-NEXT:    [[GEP_I:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN]], ptr [[TASK_ARGS]], i32 0, i32 1
; CHECK-NEXT:    [[GEP_J:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN]], ptr [[TASK_ARGS]], i32 0, i32 2
; CHECK-NEXT:    call void @nanos6_unpacked_deps_main(ptr [[LOAD_GEP_V]], ptr [[GEP_I]], ptr [[GEP_J]], ptr [[LOOP_BOUNDS]], ptr [[HANDLER]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_constructor_register_task_info() {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @nanos6_register_task_info(ptr @task_info_var_main)
; CHECK-NEXT:    ret void
;
