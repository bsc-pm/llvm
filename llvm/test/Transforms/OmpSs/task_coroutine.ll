; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --function-signature --include-generated-funcs
; RUN: opt %s -passes=ompss-2 -S | FileCheck %s
; ModuleID = 'task_coroutine.ll'
source_filename = "task_coroutine.ll"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; #include "Inputs/std-coroutine.h"
; struct oss_coroutine {
;   struct promise_type {
;           oss_coroutine get_return_object() { return oss_coroutine{std::coroutine_handle<promise_type>::from_promise(*this)}; }
;           std::suspend_never initial_suspend() { return {}; }
;           std::suspend_always final_suspend() noexcept { return {}; }
;           void return_void() {}
;           void unhandled_exception() {}
;   };
;   std::coroutine_handle<> handle;
; };
; #pragma oss task
; oss_coroutine kk2() {
;   co_return;
; }
; int main() {
;   kk2();
; }

%"struct.oss_coroutine::promise_type" = type { i8 }
%struct.oss_coroutine = type { i8 }
%"struct.std::suspend_never" = type { i8 }
%"struct.std::suspend_always" = type { i8 }
%"struct.std::coroutine_handle.0" = type { i8 }
%"struct.std::coroutine_handle" = type { i8 }

$_ZN13oss_coroutine12promise_type17get_return_objectEv = comdat any

$_ZN13oss_coroutine12promise_type15initial_suspendEv = comdat any

$_ZNSt13suspend_never11await_readyEv = comdat any

$_ZNSt13suspend_never13await_suspendESt16coroutine_handleIvE = comdat any

$_ZNSt13suspend_never12await_resumeEv = comdat any

$_ZN13oss_coroutine12promise_type11return_voidEv = comdat any

$_ZN13oss_coroutine12promise_type19unhandled_exceptionEv = comdat any

$__clang_call_terminate = comdat any

$_ZN13oss_coroutine12promise_type13final_suspendEv = comdat any

$_ZNSt14suspend_always11await_readyEv = comdat any

$_ZNSt14suspend_always13await_suspendESt16coroutine_handleIvE = comdat any

$_ZNSt14suspend_always12await_resumeEv = comdat any

@0 = external global i64
@1 = external global i64
@2 = external global i64

; Function Attrs: mustprogress noinline optnone presplitcoroutine uwtable
define dso_local void @_Z3kk2v() #0 personality ptr @__gxx_personality_v0 !dbg !7 {
entry:
  %__promise = alloca %"struct.oss_coroutine::promise_type", align 1
  %exn.slot = alloca ptr, align 8
  %ehselector.slot = alloca i32, align 4
  %undef.agg.tmp = alloca %struct.oss_coroutine, align 1
  %ref.tmp = alloca %"struct.std::suspend_never", align 1
  %undef.agg.tmp3 = alloca %"struct.std::suspend_never", align 1
  %ref.tmp12 = alloca %"struct.std::suspend_always", align 1
  %undef.agg.tmp13 = alloca %"struct.std::suspend_always", align 1
  %0 = bitcast ptr %__promise to ptr
  %1 = call token @llvm.coro.id(i32 16, ptr %0, ptr null, ptr null), !dbg !11
  %2 = call i1 @llvm.coro.alloc(token %1), !dbg !11
  br i1 %2, label %coro.alloc, label %coro.init, !dbg !11

coro.alloc:                                       ; preds = %entry
  %3 = call i64 @llvm.coro.size.i64(), !dbg !12
  %4 = call i64 @llvm.coro.size.storage.i64.i64(i64 %3, ptr @0), !dbg !12
  %call = call noalias noundef nonnull ptr @_Znwm(i64 noundef %3) #16, !dbg !12
  br label %coro.init, !dbg !11

coro.init:                                        ; preds = %coro.alloc, %entry
  %5 = phi ptr [ null, %entry ], [ %call, %coro.alloc ], !dbg !11
  %6 = call ptr @llvm.coro.begin(token %1, ptr %5), !dbg !11
  call void @llvm.lifetime.start.p0(i64 1, ptr %__promise) #2, !dbg !12
  invoke void @_ZN13oss_coroutine12promise_type17get_return_objectEv(ptr noundef nonnull align 1 dereferenceable(1) %__promise)
  to label %invoke.cont unwind label %lpad, !dbg !12

invoke.cont:                                      ; preds = %coro.init
  call void @llvm.lifetime.start.p0(i64 1, ptr %ref.tmp) #2, !dbg !12
  invoke void @_ZN13oss_coroutine12promise_type15initial_suspendEv(ptr noundef nonnull align 1 dereferenceable(1) %__promise)
  to label %invoke.cont2 unwind label %lpad1, !dbg !12

invoke.cont2:                                     ; preds = %invoke.cont
  %call4 = call noundef zeroext i1 @_ZNSt13suspend_never11await_readyEv(ptr noundef nonnull align 1 dereferenceable(1) %ref.tmp) #2, !dbg !12
  br i1 %call4, label %init.ready, label %init.suspend, !dbg !12

init.suspend:                                     ; preds = %invoke.cont2
  %7 = call token @llvm.coro.save(ptr null), !dbg !12
  call void @llvm.coro.await.suspend.void(ptr %ref.tmp, ptr %6, ptr @_Z3kk2v.__await_suspend_wrapper__init) #2, !dbg !12
  %8 = call i8 @llvm.coro.suspend(token %7, i1 false), !dbg !12
  switch i8 %8, label %coro.ret [
  i8 0, label %init.ready
  i8 1, label %init.cleanup
  ], !dbg !12

init.cleanup:                                     ; preds = %init.suspend
  br label %cleanup, !dbg !12

lpad:                                             ; preds = %coro.init
  %9 = landingpad { ptr, i32 }
  cleanup, !dbg !13
  %10 = extractvalue { ptr, i32 } %9, 0, !dbg !13
  store ptr %10, ptr %exn.slot, align 8, !dbg !13
  %11 = extractvalue { ptr, i32 } %9, 1, !dbg !13
  store i32 %11, ptr %ehselector.slot, align 4, !dbg !13
  br label %ehcleanup20, !dbg !13

lpad1:                                            ; preds = %invoke.cont
  %12 = landingpad { ptr, i32 }
  cleanup, !dbg !13
  %13 = extractvalue { ptr, i32 } %12, 0, !dbg !13
  store ptr %13, ptr %exn.slot, align 8, !dbg !13
  %14 = extractvalue { ptr, i32 } %12, 1, !dbg !13
  store i32 %14, ptr %ehselector.slot, align 4, !dbg !13
  call void @llvm.lifetime.end.p0(i64 1, ptr %ref.tmp) #2, !dbg !12
  br label %ehcleanup, !dbg !12

init.ready:                                       ; preds = %init.suspend, %invoke.cont2
  call void @_ZNSt13suspend_never12await_resumeEv(ptr noundef nonnull align 1 dereferenceable(1) %ref.tmp) #2, !dbg !12
  br label %cleanup, !dbg !12

cleanup:                                          ; preds = %init.ready, %init.cleanup
  %cleanup.dest.slot.0 = phi i32 [ 0, %init.ready ], [ 2, %init.cleanup ]
  call void @llvm.lifetime.end.p0(i64 1, ptr %ref.tmp) #2, !dbg !12
  switch i32 %cleanup.dest.slot.0, label %cleanup19 [
  i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  invoke void @_ZN13oss_coroutine12promise_type11return_voidEv(ptr noundef nonnull align 1 dereferenceable(1) %__promise)
  to label %invoke.cont6 unwind label %lpad5, !dbg !14

invoke.cont6:                                     ; preds = %cleanup.cont
  br label %coro.final, !dbg !14

lpad5:                                            ; preds = %cleanup.cont
  %15 = landingpad { ptr, i32 }
  catch ptr null, !dbg !13
  %16 = extractvalue { ptr, i32 } %15, 0, !dbg !13
  store ptr %16, ptr %exn.slot, align 8, !dbg !13
  %17 = extractvalue { ptr, i32 } %15, 1, !dbg !13
  store i32 %17, ptr %ehselector.slot, align 4, !dbg !13
  br label %catch, !dbg !13

catch:                                            ; preds = %lpad5
  %exn = load ptr, ptr %exn.slot, align 8, !dbg !13
  %18 = call ptr @__cxa_begin_catch(ptr %exn) #2, !dbg !13
  invoke void @_ZN13oss_coroutine12promise_type19unhandled_exceptionEv(ptr noundef nonnull align 1 dereferenceable(1) %__promise)
  to label %invoke.cont8 unwind label %lpad7, !dbg !12

invoke.cont8:                                     ; preds = %catch
  invoke void @__cxa_end_catch()
  to label %invoke.cont10 unwind label %lpad9, !dbg !12

invoke.cont10:                                    ; preds = %invoke.cont8
  br label %try.cont, !dbg !12

try.cont:                                         ; preds = %invoke.cont10
  br label %coro.final, !dbg !12

coro.final:                                       ; preds = %try.cont, %invoke.cont6
  call void @llvm.lifetime.start.p0(i64 1, ptr %ref.tmp12) #2, !dbg !12
  call void @_ZN13oss_coroutine12promise_type13final_suspendEv(ptr noundef nonnull align 1 dereferenceable(1) %__promise) #2, !dbg !12
  %call14 = call noundef zeroext i1 @_ZNSt14suspend_always11await_readyEv(ptr noundef nonnull align 1 dereferenceable(1) %ref.tmp12) #2, !dbg !12
  br i1 %call14, label %final.ready, label %final.suspend, !dbg !12

final.suspend:                                    ; preds = %coro.final
  %19 = call token @llvm.coro.save(ptr null), !dbg !12
  call void @llvm.coro.await.suspend.void(ptr %ref.tmp12, ptr %6, ptr @_Z3kk2v.__await_suspend_wrapper__final) #2, !dbg !12
  %20 = call i8 @llvm.coro.suspend(token %19, i1 true), !dbg !12
  switch i8 %20, label %coro.ret [
  i8 0, label %final.ready
  i8 1, label %final.cleanup
  ], !dbg !12

final.cleanup:                                    ; preds = %final.suspend
  br label %cleanup15, !dbg !12

lpad7:                                            ; preds = %catch
  %21 = landingpad { ptr, i32 }
  cleanup, !dbg !13
  %22 = extractvalue { ptr, i32 } %21, 0, !dbg !13
  store ptr %22, ptr %exn.slot, align 8, !dbg !13
  %23 = extractvalue { ptr, i32 } %21, 1, !dbg !13
  store i32 %23, ptr %ehselector.slot, align 4, !dbg !13
  invoke void @__cxa_end_catch()
  to label %invoke.cont11 unwind label %terminate.lpad, !dbg !12

lpad9:                                            ; preds = %invoke.cont8
  %24 = landingpad { ptr, i32 }
  cleanup, !dbg !13
  %25 = extractvalue { ptr, i32 } %24, 0, !dbg !13
  store ptr %25, ptr %exn.slot, align 8, !dbg !13
  %26 = extractvalue { ptr, i32 } %24, 1, !dbg !13
  store i32 %26, ptr %ehselector.slot, align 4, !dbg !13
  br label %ehcleanup, !dbg !13

invoke.cont11:                                    ; preds = %lpad7
  br label %ehcleanup, !dbg !12

final.ready:                                      ; preds = %final.suspend, %coro.final
  call void @_ZNSt14suspend_always12await_resumeEv(ptr noundef nonnull align 1 dereferenceable(1) %ref.tmp12) #2, !dbg !12
  br label %cleanup15, !dbg !12

cleanup15:                                        ; preds = %final.ready, %final.cleanup
  %cleanup.dest.slot.1 = phi i32 [ 0, %final.ready ], [ 2, %final.cleanup ]
  call void @llvm.lifetime.end.p0(i64 1, ptr %ref.tmp12) #2, !dbg !12
  switch i32 %cleanup.dest.slot.1, label %cleanup19 [
  i32 0, label %cleanup.cont17
  ]

cleanup.cont17:                                   ; preds = %cleanup15
  br label %cleanup19, !dbg !12

cleanup19:                                        ; preds = %cleanup.cont17, %cleanup15, %cleanup
  %cleanup.dest.slot.2 = phi i32 [ %cleanup.dest.slot.0, %cleanup ], [ %cleanup.dest.slot.1, %cleanup15 ], [ 0, %cleanup.cont17 ], !dbg !12
  call void @llvm.lifetime.end.p0(i64 1, ptr %__promise) #2, !dbg !12
  %27 = call ptr @llvm.coro.free(token %1, ptr %6), !dbg !12
  %28 = icmp ne ptr %27, null, !dbg !12
  br i1 %28, label %coro.free, label %after.coro.free, !dbg !12

coro.free:                                        ; preds = %cleanup19
  %29 = call i64 @llvm.coro.size.i64(), !dbg !12
  %30 = call i64 @llvm.coro.size.storage.i64.i64(i64 %29, ptr @1), !dbg !12
  call void @_ZdlPvm(ptr noundef %27, i64 noundef %29) #2, !dbg !12
  br label %after.coro.free, !dbg !12

after.coro.free:                                  ; preds = %cleanup19, %coro.free
  switch i32 %cleanup.dest.slot.2, label %unreachable [
  i32 0, label %cleanup.cont23
  i32 2, label %coro.ret
  ]

cleanup.cont23:                                   ; preds = %after.coro.free
  br label %coro.ret, !dbg !12

coro.ret:                                         ; preds = %cleanup.cont23, %after.coro.free, %final.suspend, %init.suspend
  %31 = call i1 @llvm.coro.end(ptr null, i1 false, token none), !dbg !12
  ret void, !dbg !12

ehcleanup:                                        ; preds = %invoke.cont11, %lpad9, %lpad1
  %32 = call i1 @llvm.coro.end(ptr null, i1 true, token none), !dbg !12
  br i1 %32, label %eh.resume, label %cleanup.cont18, !dbg !12

cleanup.cont18:                                   ; preds = %ehcleanup
  br label %ehcleanup20, !dbg !12

ehcleanup20:                                      ; preds = %cleanup.cont18, %lpad
  call void @llvm.lifetime.end.p0(i64 1, ptr %__promise) #2, !dbg !12
  %33 = call ptr @llvm.coro.free(token %1, ptr %6), !dbg !12
  %34 = icmp ne ptr %33, null, !dbg !12
  br i1 %34, label %coro.free25, label %after.coro.free26, !dbg !12

coro.free25:                                      ; preds = %ehcleanup20
  %35 = call i64 @llvm.coro.size.i64(), !dbg !12
  %36 = call i64 @llvm.coro.size.storage.i64.i64(i64 %35, ptr @2), !dbg !12
  call void @_ZdlPvm(ptr noundef %33, i64 noundef %35) #2, !dbg !12
  br label %after.coro.free26, !dbg !12

after.coro.free26:                                ; preds = %ehcleanup20, %coro.free25
  br label %eh.resume, !dbg !12

eh.resume:                                        ; preds = %after.coro.free26, %ehcleanup
  %exn27 = load ptr, ptr %exn.slot, align 8, !dbg !12
  %sel = load i32, ptr %ehselector.slot, align 4, !dbg !12
  %lpad.val = insertvalue { ptr, i32 } poison, ptr %exn27, 0, !dbg !12
  %lpad.val28 = insertvalue { ptr, i32 } %lpad.val, i32 %sel, 1, !dbg !12
  resume { ptr, i32 } %lpad.val28, !dbg !12

terminate.lpad:                                   ; preds = %lpad7
  %37 = landingpad { ptr, i32 }
  catch ptr null, !dbg !12
  %38 = extractvalue { ptr, i32 } %37, 0, !dbg !12
  call void @__clang_call_terminate(ptr %38) #17, !dbg !12
  unreachable, !dbg !12

unreachable:                                      ; preds = %after.coro.free
  unreachable
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: read)
declare token @llvm.coro.id(i32, ptr readnone, ptr nocapture readonly, ptr) #1

; Function Attrs: nounwind
declare i1 @llvm.coro.alloc(token) #2

; Function Attrs: nobuiltin allocsize(0)
declare dso_local noundef nonnull ptr @_Znwm(i64 noundef) #3

; Function Attrs: nounwind memory(none)
declare i64 @llvm.coro.size.i64() #4

; Function Attrs: nounwind memory(none)
declare i64 @llvm.coro.size.storage.i64.i64(i64, ptr) #4

; Function Attrs: nounwind
declare ptr @llvm.coro.begin(token, ptr writeonly) #2

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #5

; Function Attrs: mustprogress noinline optnone uwtable
define linkonce_odr dso_local void @_ZN13oss_coroutine12promise_type17get_return_objectEv(ptr noundef nonnull align 1 dereferenceable(1) %this) #6 comdat align 2 !dbg !15 {
entry:
  %retval = alloca %struct.oss_coroutine, align 1
  %this.addr = alloca ptr, align 8
  %agg.tmp = alloca %"struct.std::coroutine_handle.0", align 1
  %undef.agg.tmp = alloca %"struct.std::coroutine_handle.0", align 1
  store ptr %this, ptr %this.addr, align 8
  %this1 = load ptr, ptr %this.addr, align 8
  call void @_ZNSt16coroutine_handleIN13oss_coroutine12promise_typeEE12from_promiseERS1_(ptr noundef nonnull align 1 dereferenceable(1) %this1), !dbg !16
  call void @_ZNSt16coroutine_handleIvEC1IN13oss_coroutine12promise_typeEEES_IT_E(ptr noundef nonnull align 1 dereferenceable(1) %retval) #2, !dbg !16
  ret void, !dbg !17
}

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define linkonce_odr dso_local void @_ZN13oss_coroutine12promise_type15initial_suspendEv(ptr noundef nonnull align 1 dereferenceable(1) %this) #7 comdat align 2 !dbg !18 {
entry:
  %this.addr = alloca ptr, align 8
  store ptr %this, ptr %this.addr, align 8
  %this1 = load ptr, ptr %this.addr, align 8
  ret void, !dbg !19
}

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define linkonce_odr dso_local noundef zeroext i1 @_ZNSt13suspend_never11await_readyEv(ptr noundef nonnull align 1 dereferenceable(1) %this) #7 comdat align 2 !dbg !20 {
entry:
  %this.addr = alloca ptr, align 8
  store ptr %this, ptr %this.addr, align 8
  %this1 = load ptr, ptr %this.addr, align 8
  ret i1 true, !dbg !22
}

; Function Attrs: nomerge nounwind
declare token @llvm.coro.save(ptr) #8

; Function Attrs: alwaysinline mustprogress
define private void @_Z3kk2v.__await_suspend_wrapper__init(ptr noundef nonnull %0, ptr noundef %1) #9 !dbg !23 {
entry:
  %.addr = alloca ptr, align 8
  %.addr1 = alloca ptr, align 8
  %agg.tmp = alloca %"struct.std::coroutine_handle", align 1
  %agg.tmp2 = alloca %"struct.std::coroutine_handle.0", align 1
  %undef.agg.tmp = alloca %"struct.std::coroutine_handle.0", align 1
  store ptr %0, ptr %.addr, align 8
  store ptr %1, ptr %.addr1, align 8
  %2 = load ptr, ptr %.addr, align 8
  %3 = load ptr, ptr %.addr1, align 8
  call void @_ZNSt16coroutine_handleIN13oss_coroutine12promise_typeEE12from_addressEPv(ptr noundef %3) #2, !dbg !24
  call void @_ZNSt16coroutine_handleIvEC1IN13oss_coroutine12promise_typeEEES_IT_E(ptr noundef nonnull align 1 dereferenceable(1) %agg.tmp) #2, !dbg !24
  call void @_ZNSt13suspend_never13await_suspendESt16coroutine_handleIvE(ptr noundef nonnull align 1 dereferenceable(1) %2) #2, !dbg !24
  ret void, !dbg !24
}

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define linkonce_odr dso_local void @_ZNSt13suspend_never13await_suspendESt16coroutine_handleIvE(ptr noundef nonnull align 1 dereferenceable(1) %this) #7 comdat align 2 !dbg !25 {
entry:
  %0 = alloca %"struct.std::coroutine_handle", align 1
  %this.addr = alloca ptr, align 8
  store ptr %this, ptr %this.addr, align 8
  %this1 = load ptr, ptr %this.addr, align 8
  ret void, !dbg !26
}

; Function Attrs: nounwind
declare dso_local void @_ZNSt16coroutine_handleIN13oss_coroutine12promise_typeEE12from_addressEPv(ptr noundef) #10

; Function Attrs: nounwind
declare dso_local void @_ZNSt16coroutine_handleIvEC1IN13oss_coroutine12promise_typeEEES_IT_E(ptr noundef nonnull align 1 dereferenceable(1)) unnamed_addr #10

declare void @llvm.coro.await.suspend.void(ptr, ptr, ptr)

; Function Attrs: nounwind
declare i8 @llvm.coro.suspend(token, i1) #2

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define linkonce_odr dso_local void @_ZNSt13suspend_never12await_resumeEv(ptr noundef nonnull align 1 dereferenceable(1) %this) #7 comdat align 2 !dbg !27 {
entry:
  %this.addr = alloca ptr, align 8
  store ptr %this, ptr %this.addr, align 8
  %this1 = load ptr, ptr %this.addr, align 8
  ret void, !dbg !28
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #5

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define linkonce_odr dso_local void @_ZN13oss_coroutine12promise_type11return_voidEv(ptr noundef nonnull align 1 dereferenceable(1) %this) #7 comdat align 2 !dbg !29 {
entry:
  %this.addr = alloca ptr, align 8
  store ptr %this, ptr %this.addr, align 8
  %this1 = load ptr, ptr %this.addr, align 8
  ret void, !dbg !30
}

declare dso_local ptr @__cxa_begin_catch(ptr)

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define linkonce_odr dso_local void @_ZN13oss_coroutine12promise_type19unhandled_exceptionEv(ptr noundef nonnull align 1 dereferenceable(1) %this) #7 comdat align 2 !dbg !31 {
entry:
  %this.addr = alloca ptr, align 8
  store ptr %this, ptr %this.addr, align 8
  %this1 = load ptr, ptr %this.addr, align 8
  ret void, !dbg !32
}

declare dso_local void @__cxa_end_catch()

; Function Attrs: noinline noreturn nounwind uwtable
define linkonce_odr hidden void @__clang_call_terminate(ptr noundef %0) #11 comdat {
  %2 = call ptr @__cxa_begin_catch(ptr %0) #2
  call void @_ZSt9terminatev() #17
  unreachable
}

declare dso_local void @_ZSt9terminatev()

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define linkonce_odr dso_local void @_ZN13oss_coroutine12promise_type13final_suspendEv(ptr noundef nonnull align 1 dereferenceable(1) %this) #7 comdat align 2 !dbg !33 {
entry:
  %this.addr = alloca ptr, align 8
  store ptr %this, ptr %this.addr, align 8
  %this1 = load ptr, ptr %this.addr, align 8
  ret void, !dbg !34
}

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define linkonce_odr dso_local noundef zeroext i1 @_ZNSt14suspend_always11await_readyEv(ptr noundef nonnull align 1 dereferenceable(1) %this) #7 comdat align 2 !dbg !35 {
entry:
  %this.addr = alloca ptr, align 8
  store ptr %this, ptr %this.addr, align 8
  %this1 = load ptr, ptr %this.addr, align 8
  ret i1 false, !dbg !36
}

; Function Attrs: alwaysinline mustprogress
define private void @_Z3kk2v.__await_suspend_wrapper__final(ptr noundef nonnull %0, ptr noundef %1) #9 !dbg !37 {
entry:
  %.addr = alloca ptr, align 8
  %.addr1 = alloca ptr, align 8
  %agg.tmp = alloca %"struct.std::coroutine_handle", align 1
  %agg.tmp2 = alloca %"struct.std::coroutine_handle.0", align 1
  %undef.agg.tmp = alloca %"struct.std::coroutine_handle.0", align 1
  store ptr %0, ptr %.addr, align 8
  store ptr %1, ptr %.addr1, align 8
  %2 = load ptr, ptr %.addr, align 8
  %3 = load ptr, ptr %.addr1, align 8
  call void @_ZNSt16coroutine_handleIN13oss_coroutine12promise_typeEE12from_addressEPv(ptr noundef %3) #2, !dbg !38
  call void @_ZNSt16coroutine_handleIvEC1IN13oss_coroutine12promise_typeEEES_IT_E(ptr noundef nonnull align 1 dereferenceable(1) %agg.tmp) #2, !dbg !38
  call void @_ZNSt14suspend_always13await_suspendESt16coroutine_handleIvE(ptr noundef nonnull align 1 dereferenceable(1) %2) #2, !dbg !38
  ret void, !dbg !38
}

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define linkonce_odr dso_local void @_ZNSt14suspend_always13await_suspendESt16coroutine_handleIvE(ptr noundef nonnull align 1 dereferenceable(1) %this) #7 comdat align 2 !dbg !39 {
entry:
  %0 = alloca %"struct.std::coroutine_handle", align 1
  %this.addr = alloca ptr, align 8
  store ptr %this, ptr %this.addr, align 8
  %this1 = load ptr, ptr %this.addr, align 8
  ret void, !dbg !40
}

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define linkonce_odr dso_local void @_ZNSt14suspend_always12await_resumeEv(ptr noundef nonnull align 1 dereferenceable(1) %this) #7 comdat align 2 !dbg !41 {
entry:
  %this.addr = alloca ptr, align 8
  store ptr %this, ptr %this.addr, align 8
  %this1 = load ptr, ptr %this.addr, align 8
  ret void, !dbg !42
}

; Function Attrs: nounwind
declare i1 @llvm.coro.end(ptr, i1, token) #2

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPvm(ptr noundef, i64 noundef) #12

; Function Attrs: nounwind memory(argmem: read)
declare ptr @llvm.coro.free(token, ptr nocapture readonly) #13

; Function Attrs: mustprogress noinline norecurse nounwind optnone uwtable
define dso_local noundef i32 @main() #14 personality ptr @__gxx_personality_v0 !dbg !43 {
entry:
  %handle = alloca %struct.oss_coroutine, align 1
  store ptr null, ptr %handle, align 1, !dbg !44
  %0 = call token @llvm.directive.region.entry() [ "DIR.OSS"([5 x i8] c"TASK\00"), "QUAL.OSS.DEVICE.DEVFUNC"([8 x i8] c"_Z3kk2v\00"), "QUAL.OSS.DECL.SOURCE"([23 x i8] c"task_coroutine.ll:17:1\00"), "QUAL.OSS.CORO.HANDLE"(ptr %handle), "QUAL.OSS.CORO.SIZE.STORE"(ptr @2), "QUAL.OSS.FIRSTPRIVATE"(ptr %handle, %struct.oss_coroutine undef) ], !dbg !44
  %undef.agg.tmp = alloca %struct.oss_coroutine, align 1
  invoke void @_Z3kk2v()
  to label %invoke.cont unwind label %terminate.lpad, !dbg !44

invoke.cont:                                      ; preds = %entry
  call void @llvm.directive.region.exit(token %0), !dbg !44
  ret i32 0, !dbg !45

terminate.lpad:                                   ; preds = %entry
  %1 = landingpad { ptr, i32 }
  catch ptr null, !dbg !44
  %2 = extractvalue { ptr, i32 } %1, 0, !dbg !44
  call void @__clang_call_terminate(ptr %2) #17, !dbg !44
  unreachable, !dbg !44
}

; Function Attrs: nounwind
declare token @llvm.directive.region.entry() #2

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token) #2

declare dso_local void @_ZNSt16coroutine_handleIN13oss_coroutine12promise_typeEE12from_promiseERS1_(ptr noundef nonnull align 1 dereferenceable(1)) #15

attributes #0 = { mustprogress noinline optnone presplitcoroutine uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind willreturn memory(argmem: read) }
attributes #2 = { nounwind }
attributes #3 = { nobuiltin allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind memory(none) }
attributes #5 = { nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #6 = { mustprogress noinline optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #7 = { mustprogress noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #8 = { nomerge nounwind }
attributes #9 = { alwaysinline mustprogress "min-legal-vector-width"="0" }
attributes #10 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #11 = { noinline noreturn nounwind uwtable "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #12 = { nobuiltin nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #13 = { nounwind memory(argmem: read) }
attributes #14 = { mustprogress noinline norecurse nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #15 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #16 = { allocsize(0) }
attributes #17 = { noreturn nounwind }

!llvm.dbg.cu = !{!0}
!llvm.linker.options = !{}
!llvm.module.flags = !{!2, !3, !4, !5}
!llvm.ident = !{!6}

!0 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus_14, file: !1, producer: "", isOptimized: false, runtimeVersion: 0, emissionKind: NoDebug, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "task_coroutine.ll", directory: "/home/rpenacob/llvm-mono-1/clang/test/OmpSs/IR")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 1, !"wchar_size", i32 4}
!4 = !{i32 7, !"uwtable", i32 2}
!5 = !{i32 7, !"frame-pointer", i32 2}
!6 = !{!""}
!7 = distinct !DISubprogram(name: "kk2", scope: !8, file: !8, line: 18, type: !9, scopeLine: 18, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!8 = !DIFile(filename: "task_coroutine.ll", directory: "/home/rpenacob/llvm-mono-1/clang/test/OmpSs/IR")
!9 = !DISubroutineType(types: !10)
!10 = !{}
!11 = !DILocation(line: 18, column: 21, scope: !7)
!12 = !DILocation(line: 18, column: 15, scope: !7)
!13 = !DILocation(line: 20, column: 1, scope: !7)
!14 = !DILocation(line: 19, column: 3, scope: !7)
!15 = distinct !DISubprogram(name: "get_return_object", scope: !8, file: !8, line: 8, type: !9, scopeLine: 8, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!16 = !DILocation(line: 8, column: 68, scope: !15)
!17 = !DILocation(line: 8, column: 47, scope: !15)
!18 = distinct !DISubprogram(name: "initial_suspend", scope: !8, file: !8, line: 9, type: !9, scopeLine: 9, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!19 = !DILocation(line: 9, column: 50, scope: !18)
!20 = distinct !DISubprogram(name: "await_ready", scope: !21, file: !21, line: 41, type: !9, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!21 = !DIFile(filename: "Inputs/std-coroutine.h", directory: "/home/rpenacob/llvm-mono-1/clang/test/OmpSs/IR")
!22 = !DILocation(line: 41, column: 33, scope: !20)
!23 = distinct !DISubprogram(linkageName: "_Z3kk2v.__await_suspend_wrapper__init", scope: !8, file: !8, type: !9, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0)
!24 = !DILocation(line: 18, column: 15, scope: !23)
!25 = distinct !DISubprogram(name: "await_suspend", scope: !21, file: !21, line: 42, type: !9, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!26 = !DILocation(line: 42, column: 52, scope: !25)
!27 = distinct !DISubprogram(name: "await_resume", scope: !21, file: !21, line: 43, type: !9, scopeLine: 43, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!28 = !DILocation(line: 43, column: 33, scope: !27)
!29 = distinct !DISubprogram(name: "return_void", scope: !8, file: !8, line: 11, type: !9, scopeLine: 11, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!30 = !DILocation(line: 11, column: 31, scope: !29)
!31 = distinct !DISubprogram(name: "unhandled_exception", scope: !8, file: !8, line: 12, type: !9, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!32 = !DILocation(line: 12, column: 39, scope: !31)
!33 = distinct !DISubprogram(name: "final_suspend", scope: !8, file: !8, line: 10, type: !9, scopeLine: 10, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!34 = !DILocation(line: 10, column: 58, scope: !33)
!35 = distinct !DISubprogram(name: "await_ready", scope: !21, file: !21, line: 35, type: !9, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!36 = !DILocation(line: 35, column: 33, scope: !35)
!37 = distinct !DISubprogram(linkageName: "_Z3kk2v.__await_suspend_wrapper__final", scope: !8, file: !8, type: !9, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0)
!38 = !DILocation(line: 18, column: 15, scope: !37)
!39 = distinct !DISubprogram(name: "await_suspend", scope: !21, file: !21, line: 36, type: !9, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!40 = !DILocation(line: 36, column: 52, scope: !39)
!41 = distinct !DISubprogram(name: "await_resume", scope: !21, file: !21, line: 37, type: !9, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!42 = !DILocation(line: 37, column: 33, scope: !41)
!43 = distinct !DISubprogram(name: "main", scope: !8, file: !8, line: 22, type: !9, scopeLine: 22, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!44 = !DILocation(line: 23, column: 3, scope: !43)
!45 = !DILocation(line: 24, column: 1, scope: !43)
; CHECK-LABEL: define {{[^@]+}}@_Z3kk2v
; CHECK-SAME: () #[[ATTR0:[0-9]+]] personality ptr @__gxx_personality_v0 !dbg [[DBG7:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[__PROMISE:%.*]] = alloca %"struct.oss_coroutine::promise_type", align 1
; CHECK-NEXT:    [[EXN_SLOT:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    [[EHSELECTOR_SLOT:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[UNDEF_AGG_TMP:%.*]] = alloca [[STRUCT_OSS_COROUTINE:%.*]], align 1
; CHECK-NEXT:    [[REF_TMP:%.*]] = alloca %"struct.std::suspend_never", align 1
; CHECK-NEXT:    [[UNDEF_AGG_TMP3:%.*]] = alloca %"struct.std::suspend_never", align 1
; CHECK-NEXT:    [[REF_TMP12:%.*]] = alloca %"struct.std::suspend_always", align 1
; CHECK-NEXT:    [[UNDEF_AGG_TMP13:%.*]] = alloca %"struct.std::suspend_always", align 1
; CHECK-NEXT:    [[TMP0:%.*]] = bitcast ptr [[__PROMISE]] to ptr
; CHECK-NEXT:    [[TMP1:%.*]] = call token @llvm.coro.id(i32 16, ptr [[TMP0]], ptr null, ptr null), !dbg [[DBG10:![0-9]+]]
; CHECK-NEXT:    [[TMP2:%.*]] = call i1 @llvm.coro.alloc(token [[TMP1]]), !dbg [[DBG10]]
; CHECK-NEXT:    br i1 [[TMP2]], label [[CORO_ALLOC:%.*]], label [[CORO_INIT:%.*]], !dbg [[DBG10]]
; CHECK:       coro.alloc:
; CHECK-NEXT:    [[TMP3:%.*]] = call i64 @llvm.coro.size.i64(), !dbg [[DBG11:![0-9]+]]
; CHECK-NEXT:    [[TMP4:%.*]] = call i64 @llvm.coro.size.storage.i64.i64(i64 [[TMP3]], ptr @[[GLOB0:[0-9]+]]), !dbg [[DBG11]]
; CHECK-NEXT:    [[CALL:%.*]] = call noalias noundef nonnull ptr @_Znwm(i64 noundef [[TMP3]]) #[[ATTR17:[0-9]+]], !dbg [[DBG11]]
; CHECK-NEXT:    br label [[CORO_INIT]], !dbg [[DBG10]]
; CHECK:       coro.init:
; CHECK-NEXT:    [[TMP5:%.*]] = phi ptr [ null, [[ENTRY:%.*]] ], [ [[CALL]], [[CORO_ALLOC]] ], !dbg [[DBG10]]
; CHECK-NEXT:    [[TMP6:%.*]] = call ptr @llvm.coro.begin(token [[TMP1]], ptr [[TMP5]]), !dbg [[DBG10]]
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 1, ptr [[__PROMISE]]) #[[ATTR2:[0-9]+]], !dbg [[DBG11]]
; CHECK-NEXT:    invoke void @_ZN13oss_coroutine12promise_type17get_return_objectEv(ptr noundef nonnull align 1 dereferenceable(1) [[__PROMISE]])
; CHECK-NEXT:            to label [[INVOKE_CONT:%.*]] unwind label [[LPAD:%.*]], !dbg [[DBG11]]
; CHECK:       invoke.cont:
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 1, ptr [[REF_TMP]]) #[[ATTR2]], !dbg [[DBG11]]
; CHECK-NEXT:    invoke void @_ZN13oss_coroutine12promise_type15initial_suspendEv(ptr noundef nonnull align 1 dereferenceable(1) [[__PROMISE]])
; CHECK-NEXT:            to label [[INVOKE_CONT2:%.*]] unwind label [[LPAD1:%.*]], !dbg [[DBG11]]
; CHECK:       invoke.cont2:
; CHECK-NEXT:    [[CALL4:%.*]] = call noundef zeroext i1 @_ZNSt13suspend_never11await_readyEv(ptr noundef nonnull align 1 dereferenceable(1) [[REF_TMP]]) #[[ATTR2]], !dbg [[DBG11]]
; CHECK-NEXT:    br i1 [[CALL4]], label [[INIT_READY:%.*]], label [[INIT_SUSPEND:%.*]], !dbg [[DBG11]]
; CHECK:       init.suspend:
; CHECK-NEXT:    [[TMP7:%.*]] = call token @llvm.coro.save(ptr null), !dbg [[DBG11]]
; CHECK-NEXT:    call void @llvm.coro.await.suspend.void(ptr [[REF_TMP]], ptr [[TMP6]], ptr @_Z3kk2v.__await_suspend_wrapper__init) #[[ATTR2]], !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP8:%.*]] = call i8 @llvm.coro.suspend(token [[TMP7]], i1 false), !dbg [[DBG11]]
; CHECK-NEXT:    switch i8 [[TMP8]], label [[CORO_RET:%.*]] [
; CHECK-NEXT:      i8 0, label [[INIT_READY]]
; CHECK-NEXT:      i8 1, label [[INIT_CLEANUP:%.*]]
; CHECK-NEXT:    ], !dbg [[DBG11]]
; CHECK:       init.cleanup:
; CHECK-NEXT:    br label [[CLEANUP:%.*]], !dbg [[DBG11]]
; CHECK:       lpad:
; CHECK-NEXT:    [[TMP9:%.*]] = landingpad { ptr, i32 }
; CHECK-NEXT:            cleanup, !dbg [[DBG12:![0-9]+]]
; CHECK-NEXT:    [[TMP10:%.*]] = extractvalue { ptr, i32 } [[TMP9]], 0, !dbg [[DBG12]]
; CHECK-NEXT:    store ptr [[TMP10]], ptr [[EXN_SLOT]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP11:%.*]] = extractvalue { ptr, i32 } [[TMP9]], 1, !dbg [[DBG12]]
; CHECK-NEXT:    store i32 [[TMP11]], ptr [[EHSELECTOR_SLOT]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    br label [[EHCLEANUP20:%.*]], !dbg [[DBG12]]
; CHECK:       lpad1:
; CHECK-NEXT:    [[TMP12:%.*]] = landingpad { ptr, i32 }
; CHECK-NEXT:            cleanup, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP13:%.*]] = extractvalue { ptr, i32 } [[TMP12]], 0, !dbg [[DBG12]]
; CHECK-NEXT:    store ptr [[TMP13]], ptr [[EXN_SLOT]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP14:%.*]] = extractvalue { ptr, i32 } [[TMP12]], 1, !dbg [[DBG12]]
; CHECK-NEXT:    store i32 [[TMP14]], ptr [[EHSELECTOR_SLOT]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 1, ptr [[REF_TMP]]) #[[ATTR2]], !dbg [[DBG11]]
; CHECK-NEXT:    br label [[EHCLEANUP:%.*]], !dbg [[DBG11]]
; CHECK:       init.ready:
; CHECK-NEXT:    call void @_ZNSt13suspend_never12await_resumeEv(ptr noundef nonnull align 1 dereferenceable(1) [[REF_TMP]]) #[[ATTR2]], !dbg [[DBG11]]
; CHECK-NEXT:    br label [[CLEANUP]], !dbg [[DBG11]]
; CHECK:       cleanup:
; CHECK-NEXT:    [[CLEANUP_DEST_SLOT_0:%.*]] = phi i32 [ 0, [[INIT_READY]] ], [ 2, [[INIT_CLEANUP]] ]
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 1, ptr [[REF_TMP]]) #[[ATTR2]], !dbg [[DBG11]]
; CHECK-NEXT:    switch i32 [[CLEANUP_DEST_SLOT_0]], label [[CLEANUP19:%.*]] [
; CHECK-NEXT:      i32 0, label [[CLEANUP_CONT:%.*]]
; CHECK-NEXT:    ]
; CHECK:       cleanup.cont:
; CHECK-NEXT:    invoke void @_ZN13oss_coroutine12promise_type11return_voidEv(ptr noundef nonnull align 1 dereferenceable(1) [[__PROMISE]])
; CHECK-NEXT:            to label [[INVOKE_CONT6:%.*]] unwind label [[LPAD5:%.*]], !dbg [[DBG13:![0-9]+]]
; CHECK:       invoke.cont6:
; CHECK-NEXT:    br label [[CORO_FINAL:%.*]], !dbg [[DBG13]]
; CHECK:       lpad5:
; CHECK-NEXT:    [[TMP15:%.*]] = landingpad { ptr, i32 }
; CHECK-NEXT:            catch ptr null, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP16:%.*]] = extractvalue { ptr, i32 } [[TMP15]], 0, !dbg [[DBG12]]
; CHECK-NEXT:    store ptr [[TMP16]], ptr [[EXN_SLOT]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP17:%.*]] = extractvalue { ptr, i32 } [[TMP15]], 1, !dbg [[DBG12]]
; CHECK-NEXT:    store i32 [[TMP17]], ptr [[EHSELECTOR_SLOT]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    br label [[CATCH:%.*]], !dbg [[DBG12]]
; CHECK:       catch:
; CHECK-NEXT:    [[EXN:%.*]] = load ptr, ptr [[EXN_SLOT]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP18:%.*]] = call ptr @__cxa_begin_catch(ptr [[EXN]]) #[[ATTR2]], !dbg [[DBG12]]
; CHECK-NEXT:    invoke void @_ZN13oss_coroutine12promise_type19unhandled_exceptionEv(ptr noundef nonnull align 1 dereferenceable(1) [[__PROMISE]])
; CHECK-NEXT:            to label [[INVOKE_CONT8:%.*]] unwind label [[LPAD7:%.*]], !dbg [[DBG11]]
; CHECK:       invoke.cont8:
; CHECK-NEXT:    invoke void @__cxa_end_catch()
; CHECK-NEXT:            to label [[INVOKE_CONT10:%.*]] unwind label [[LPAD9:%.*]], !dbg [[DBG11]]
; CHECK:       invoke.cont10:
; CHECK-NEXT:    br label [[TRY_CONT:%.*]], !dbg [[DBG11]]
; CHECK:       try.cont:
; CHECK-NEXT:    br label [[CORO_FINAL]], !dbg [[DBG11]]
; CHECK:       coro.final:
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 1, ptr [[REF_TMP12]]) #[[ATTR2]], !dbg [[DBG11]]
; CHECK-NEXT:    call void @_ZN13oss_coroutine12promise_type13final_suspendEv(ptr noundef nonnull align 1 dereferenceable(1) [[__PROMISE]]) #[[ATTR2]], !dbg [[DBG11]]
; CHECK-NEXT:    [[CALL14:%.*]] = call noundef zeroext i1 @_ZNSt14suspend_always11await_readyEv(ptr noundef nonnull align 1 dereferenceable(1) [[REF_TMP12]]) #[[ATTR2]], !dbg [[DBG11]]
; CHECK-NEXT:    br i1 [[CALL14]], label [[FINAL_READY:%.*]], label [[FINAL_SUSPEND:%.*]], !dbg [[DBG11]]
; CHECK:       final.suspend:
; CHECK-NEXT:    [[TMP19:%.*]] = call token @llvm.coro.save(ptr null), !dbg [[DBG11]]
; CHECK-NEXT:    call void @llvm.coro.await.suspend.void(ptr [[REF_TMP12]], ptr [[TMP6]], ptr @_Z3kk2v.__await_suspend_wrapper__final) #[[ATTR2]], !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP20:%.*]] = call i8 @llvm.coro.suspend(token [[TMP19]], i1 true), !dbg [[DBG11]]
; CHECK-NEXT:    switch i8 [[TMP20]], label [[CORO_RET]] [
; CHECK-NEXT:      i8 0, label [[FINAL_READY]]
; CHECK-NEXT:      i8 1, label [[FINAL_CLEANUP:%.*]]
; CHECK-NEXT:    ], !dbg [[DBG11]]
; CHECK:       final.cleanup:
; CHECK-NEXT:    br label [[CLEANUP15:%.*]], !dbg [[DBG11]]
; CHECK:       lpad7:
; CHECK-NEXT:    [[TMP21:%.*]] = landingpad { ptr, i32 }
; CHECK-NEXT:            cleanup, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP22:%.*]] = extractvalue { ptr, i32 } [[TMP21]], 0, !dbg [[DBG12]]
; CHECK-NEXT:    store ptr [[TMP22]], ptr [[EXN_SLOT]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP23:%.*]] = extractvalue { ptr, i32 } [[TMP21]], 1, !dbg [[DBG12]]
; CHECK-NEXT:    store i32 [[TMP23]], ptr [[EHSELECTOR_SLOT]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    invoke void @__cxa_end_catch()
; CHECK-NEXT:            to label [[INVOKE_CONT11:%.*]] unwind label [[TERMINATE_LPAD:%.*]], !dbg [[DBG11]]
; CHECK:       lpad9:
; CHECK-NEXT:    [[TMP24:%.*]] = landingpad { ptr, i32 }
; CHECK-NEXT:            cleanup, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP25:%.*]] = extractvalue { ptr, i32 } [[TMP24]], 0, !dbg [[DBG12]]
; CHECK-NEXT:    store ptr [[TMP25]], ptr [[EXN_SLOT]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP26:%.*]] = extractvalue { ptr, i32 } [[TMP24]], 1, !dbg [[DBG12]]
; CHECK-NEXT:    store i32 [[TMP26]], ptr [[EHSELECTOR_SLOT]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    br label [[EHCLEANUP]], !dbg [[DBG12]]
; CHECK:       invoke.cont11:
; CHECK-NEXT:    br label [[EHCLEANUP]], !dbg [[DBG11]]
; CHECK:       final.ready:
; CHECK-NEXT:    call void @_ZNSt14suspend_always12await_resumeEv(ptr noundef nonnull align 1 dereferenceable(1) [[REF_TMP12]]) #[[ATTR2]], !dbg [[DBG11]]
; CHECK-NEXT:    br label [[CLEANUP15]], !dbg [[DBG11]]
; CHECK:       cleanup15:
; CHECK-NEXT:    [[CLEANUP_DEST_SLOT_1:%.*]] = phi i32 [ 0, [[FINAL_READY]] ], [ 2, [[FINAL_CLEANUP]] ]
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 1, ptr [[REF_TMP12]]) #[[ATTR2]], !dbg [[DBG11]]
; CHECK-NEXT:    switch i32 [[CLEANUP_DEST_SLOT_1]], label [[CLEANUP19]] [
; CHECK-NEXT:      i32 0, label [[CLEANUP_CONT17:%.*]]
; CHECK-NEXT:    ]
; CHECK:       cleanup.cont17:
; CHECK-NEXT:    br label [[CLEANUP19]], !dbg [[DBG11]]
; CHECK:       cleanup19:
; CHECK-NEXT:    [[CLEANUP_DEST_SLOT_2:%.*]] = phi i32 [ [[CLEANUP_DEST_SLOT_0]], [[CLEANUP]] ], [ [[CLEANUP_DEST_SLOT_1]], [[CLEANUP15]] ], [ 0, [[CLEANUP_CONT17]] ], !dbg [[DBG11]]
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 1, ptr [[__PROMISE]]) #[[ATTR2]], !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP27:%.*]] = call ptr @llvm.coro.free(token [[TMP1]], ptr [[TMP6]]), !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP28:%.*]] = icmp ne ptr [[TMP27]], null, !dbg [[DBG11]]
; CHECK-NEXT:    br i1 [[TMP28]], label [[CORO_FREE:%.*]], label [[AFTER_CORO_FREE:%.*]], !dbg [[DBG11]]
; CHECK:       coro.free:
; CHECK-NEXT:    [[TMP29:%.*]] = call i64 @llvm.coro.size.i64(), !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP30:%.*]] = call i64 @llvm.coro.size.storage.i64.i64(i64 [[TMP29]], ptr @[[GLOB1:[0-9]+]]), !dbg [[DBG11]]
; CHECK-NEXT:    call void @_ZdlPvm(ptr noundef [[TMP27]], i64 noundef [[TMP29]]) #[[ATTR2]], !dbg [[DBG11]]
; CHECK-NEXT:    br label [[AFTER_CORO_FREE]], !dbg [[DBG11]]
; CHECK:       after.coro.free:
; CHECK-NEXT:    switch i32 [[CLEANUP_DEST_SLOT_2]], label [[UNREACHABLE:%.*]] [
; CHECK-NEXT:      i32 0, label [[CLEANUP_CONT23:%.*]]
; CHECK-NEXT:      i32 2, label [[CORO_RET]]
; CHECK-NEXT:    ]
; CHECK:       cleanup.cont23:
; CHECK-NEXT:    br label [[CORO_RET]], !dbg [[DBG11]]
; CHECK:       coro.ret:
; CHECK-NEXT:    [[TMP31:%.*]] = call i1 @llvm.coro.end(ptr null, i1 false, token none), !dbg [[DBG11]]
; CHECK-NEXT:    ret void, !dbg [[DBG11]]
; CHECK:       ehcleanup:
; CHECK-NEXT:    [[TMP32:%.*]] = call i1 @llvm.coro.end(ptr null, i1 true, token none), !dbg [[DBG11]]
; CHECK-NEXT:    br i1 [[TMP32]], label [[EH_RESUME:%.*]], label [[CLEANUP_CONT18:%.*]], !dbg [[DBG11]]
; CHECK:       cleanup.cont18:
; CHECK-NEXT:    br label [[EHCLEANUP20]], !dbg [[DBG11]]
; CHECK:       ehcleanup20:
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 1, ptr [[__PROMISE]]) #[[ATTR2]], !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP33:%.*]] = call ptr @llvm.coro.free(token [[TMP1]], ptr [[TMP6]]), !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP34:%.*]] = icmp ne ptr [[TMP33]], null, !dbg [[DBG11]]
; CHECK-NEXT:    br i1 [[TMP34]], label [[CORO_FREE25:%.*]], label [[AFTER_CORO_FREE26:%.*]], !dbg [[DBG11]]
; CHECK:       coro.free25:
; CHECK-NEXT:    [[TMP35:%.*]] = call i64 @llvm.coro.size.i64(), !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP36:%.*]] = call i64 @llvm.coro.size.storage.i64.i64(i64 [[TMP35]], ptr @[[GLOB2:[0-9]+]]), !dbg [[DBG11]]
; CHECK-NEXT:    call void @_ZdlPvm(ptr noundef [[TMP33]], i64 noundef [[TMP35]]) #[[ATTR2]], !dbg [[DBG11]]
; CHECK-NEXT:    br label [[AFTER_CORO_FREE26]], !dbg [[DBG11]]
; CHECK:       after.coro.free26:
; CHECK-NEXT:    br label [[EH_RESUME]], !dbg [[DBG11]]
; CHECK:       eh.resume:
; CHECK-NEXT:    [[EXN27:%.*]] = load ptr, ptr [[EXN_SLOT]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[SEL:%.*]] = load i32, ptr [[EHSELECTOR_SLOT]], align 4, !dbg [[DBG11]]
; CHECK-NEXT:    [[LPAD_VAL:%.*]] = insertvalue { ptr, i32 } poison, ptr [[EXN27]], 0, !dbg [[DBG11]]
; CHECK-NEXT:    [[LPAD_VAL28:%.*]] = insertvalue { ptr, i32 } [[LPAD_VAL]], i32 [[SEL]], 1, !dbg [[DBG11]]
; CHECK-NEXT:    resume { ptr, i32 } [[LPAD_VAL28]], !dbg [[DBG11]]
; CHECK:       terminate.lpad:
; CHECK-NEXT:    [[TMP37:%.*]] = landingpad { ptr, i32 }
; CHECK-NEXT:            catch ptr null, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP38:%.*]] = extractvalue { ptr, i32 } [[TMP37]], 0, !dbg [[DBG11]]
; CHECK-NEXT:    call void @__clang_call_terminate(ptr [[TMP38]]) #[[ATTR18:[0-9]+]], !dbg [[DBG11]]
; CHECK-NEXT:    unreachable, !dbg [[DBG11]]
; CHECK:       unreachable:
; CHECK-NEXT:    unreachable
;
;
; CHECK-LABEL: define {{[^@]+}}@_ZN13oss_coroutine12promise_type17get_return_objectEv
; CHECK-SAME: (ptr noundef nonnull align 1 dereferenceable(1) [[THIS:%.*]]) #[[ATTR6:[0-9]+]] comdat align 2 !dbg [[DBG14:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[RETVAL:%.*]] = alloca [[STRUCT_OSS_COROUTINE:%.*]], align 1
; CHECK-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    [[AGG_TMP:%.*]] = alloca %"struct.std::coroutine_handle.0", align 1
; CHECK-NEXT:    [[UNDEF_AGG_TMP:%.*]] = alloca %"struct.std::coroutine_handle.0", align 1
; CHECK-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 8
; CHECK-NEXT:    [[THIS1:%.*]] = load ptr, ptr [[THIS_ADDR]], align 8
; CHECK-NEXT:    call void @_ZNSt16coroutine_handleIN13oss_coroutine12promise_typeEE12from_promiseERS1_(ptr noundef nonnull align 1 dereferenceable(1) [[THIS1]]), !dbg [[DBG15:![0-9]+]]
; CHECK-NEXT:    call void @_ZNSt16coroutine_handleIvEC1IN13oss_coroutine12promise_typeEEES_IT_E(ptr noundef nonnull align 1 dereferenceable(1) [[RETVAL]]) #[[ATTR2]], !dbg [[DBG15]]
; CHECK-NEXT:    ret void, !dbg [[DBG16:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@_ZN13oss_coroutine12promise_type15initial_suspendEv
; CHECK-SAME: (ptr noundef nonnull align 1 dereferenceable(1) [[THIS:%.*]]) #[[ATTR7:[0-9]+]] comdat align 2 !dbg [[DBG17:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 8
; CHECK-NEXT:    [[THIS1:%.*]] = load ptr, ptr [[THIS_ADDR]], align 8
; CHECK-NEXT:    ret void, !dbg [[DBG18:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@_ZNSt13suspend_never11await_readyEv
; CHECK-SAME: (ptr noundef nonnull align 1 dereferenceable(1) [[THIS:%.*]]) #[[ATTR7]] comdat align 2 !dbg [[DBG19:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 8
; CHECK-NEXT:    [[THIS1:%.*]] = load ptr, ptr [[THIS_ADDR]], align 8
; CHECK-NEXT:    ret i1 true, !dbg [[DBG21:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@_Z3kk2v.__await_suspend_wrapper__init
; CHECK-SAME: (ptr noundef nonnull [[TMP0:%.*]], ptr noundef [[TMP1:%.*]]) #[[ATTR9:[0-9]+]] !dbg [[DBG22:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[DOTADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    [[DOTADDR1:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    [[AGG_TMP:%.*]] = alloca %"struct.std::coroutine_handle", align 1
; CHECK-NEXT:    [[AGG_TMP2:%.*]] = alloca %"struct.std::coroutine_handle.0", align 1
; CHECK-NEXT:    [[UNDEF_AGG_TMP:%.*]] = alloca %"struct.std::coroutine_handle.0", align 1
; CHECK-NEXT:    store ptr [[TMP0]], ptr [[DOTADDR]], align 8
; CHECK-NEXT:    store ptr [[TMP1]], ptr [[DOTADDR1]], align 8
; CHECK-NEXT:    [[TMP2:%.*]] = load ptr, ptr [[DOTADDR]], align 8
; CHECK-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[DOTADDR1]], align 8
; CHECK-NEXT:    call void @_ZNSt16coroutine_handleIN13oss_coroutine12promise_typeEE12from_addressEPv(ptr noundef [[TMP3]]) #[[ATTR2]], !dbg [[DBG23:![0-9]+]]
; CHECK-NEXT:    call void @_ZNSt16coroutine_handleIvEC1IN13oss_coroutine12promise_typeEEES_IT_E(ptr noundef nonnull align 1 dereferenceable(1) [[AGG_TMP]]) #[[ATTR2]], !dbg [[DBG23]]
; CHECK-NEXT:    call void @_ZNSt13suspend_never13await_suspendESt16coroutine_handleIvE(ptr noundef nonnull align 1 dereferenceable(1) [[TMP2]]) #[[ATTR2]], !dbg [[DBG23]]
; CHECK-NEXT:    ret void, !dbg [[DBG23]]
;
;
; CHECK-LABEL: define {{[^@]+}}@_ZNSt13suspend_never13await_suspendESt16coroutine_handleIvE
; CHECK-SAME: (ptr noundef nonnull align 1 dereferenceable(1) [[THIS:%.*]]) #[[ATTR7]] comdat align 2 !dbg [[DBG24:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = alloca %"struct.std::coroutine_handle", align 1
; CHECK-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 8
; CHECK-NEXT:    [[THIS1:%.*]] = load ptr, ptr [[THIS_ADDR]], align 8
; CHECK-NEXT:    ret void, !dbg [[DBG25:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@_ZNSt13suspend_never12await_resumeEv
; CHECK-SAME: (ptr noundef nonnull align 1 dereferenceable(1) [[THIS:%.*]]) #[[ATTR7]] comdat align 2 !dbg [[DBG26:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 8
; CHECK-NEXT:    [[THIS1:%.*]] = load ptr, ptr [[THIS_ADDR]], align 8
; CHECK-NEXT:    ret void, !dbg [[DBG27:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@_ZN13oss_coroutine12promise_type11return_voidEv
; CHECK-SAME: (ptr noundef nonnull align 1 dereferenceable(1) [[THIS:%.*]]) #[[ATTR7]] comdat align 2 !dbg [[DBG28:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 8
; CHECK-NEXT:    [[THIS1:%.*]] = load ptr, ptr [[THIS_ADDR]], align 8
; CHECK-NEXT:    ret void, !dbg [[DBG29:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@_ZN13oss_coroutine12promise_type19unhandled_exceptionEv
; CHECK-SAME: (ptr noundef nonnull align 1 dereferenceable(1) [[THIS:%.*]]) #[[ATTR7]] comdat align 2 !dbg [[DBG30:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 8
; CHECK-NEXT:    [[THIS1:%.*]] = load ptr, ptr [[THIS_ADDR]], align 8
; CHECK-NEXT:    ret void, !dbg [[DBG31:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@__clang_call_terminate
; CHECK-SAME: (ptr noundef [[TMP0:%.*]]) #[[ATTR11:[0-9]+]] comdat {
; CHECK-NEXT:    [[TMP2:%.*]] = call ptr @__cxa_begin_catch(ptr [[TMP0]]) #[[ATTR2]]
; CHECK-NEXT:    call void @_ZSt9terminatev() #[[ATTR18]]
; CHECK-NEXT:    unreachable
;
;
; CHECK-LABEL: define {{[^@]+}}@_ZN13oss_coroutine12promise_type13final_suspendEv
; CHECK-SAME: (ptr noundef nonnull align 1 dereferenceable(1) [[THIS:%.*]]) #[[ATTR7]] comdat align 2 !dbg [[DBG32:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 8
; CHECK-NEXT:    [[THIS1:%.*]] = load ptr, ptr [[THIS_ADDR]], align 8
; CHECK-NEXT:    ret void, !dbg [[DBG33:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@_ZNSt14suspend_always11await_readyEv
; CHECK-SAME: (ptr noundef nonnull align 1 dereferenceable(1) [[THIS:%.*]]) #[[ATTR7]] comdat align 2 !dbg [[DBG34:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 8
; CHECK-NEXT:    [[THIS1:%.*]] = load ptr, ptr [[THIS_ADDR]], align 8
; CHECK-NEXT:    ret i1 false, !dbg [[DBG35:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@_Z3kk2v.__await_suspend_wrapper__final
; CHECK-SAME: (ptr noundef nonnull [[TMP0:%.*]], ptr noundef [[TMP1:%.*]]) #[[ATTR9]] !dbg [[DBG36:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[DOTADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    [[DOTADDR1:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    [[AGG_TMP:%.*]] = alloca %"struct.std::coroutine_handle", align 1
; CHECK-NEXT:    [[AGG_TMP2:%.*]] = alloca %"struct.std::coroutine_handle.0", align 1
; CHECK-NEXT:    [[UNDEF_AGG_TMP:%.*]] = alloca %"struct.std::coroutine_handle.0", align 1
; CHECK-NEXT:    store ptr [[TMP0]], ptr [[DOTADDR]], align 8
; CHECK-NEXT:    store ptr [[TMP1]], ptr [[DOTADDR1]], align 8
; CHECK-NEXT:    [[TMP2:%.*]] = load ptr, ptr [[DOTADDR]], align 8
; CHECK-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[DOTADDR1]], align 8
; CHECK-NEXT:    call void @_ZNSt16coroutine_handleIN13oss_coroutine12promise_typeEE12from_addressEPv(ptr noundef [[TMP3]]) #[[ATTR2]], !dbg [[DBG37:![0-9]+]]
; CHECK-NEXT:    call void @_ZNSt16coroutine_handleIvEC1IN13oss_coroutine12promise_typeEEES_IT_E(ptr noundef nonnull align 1 dereferenceable(1) [[AGG_TMP]]) #[[ATTR2]], !dbg [[DBG37]]
; CHECK-NEXT:    call void @_ZNSt14suspend_always13await_suspendESt16coroutine_handleIvE(ptr noundef nonnull align 1 dereferenceable(1) [[TMP2]]) #[[ATTR2]], !dbg [[DBG37]]
; CHECK-NEXT:    ret void, !dbg [[DBG37]]
;
;
; CHECK-LABEL: define {{[^@]+}}@_ZNSt14suspend_always13await_suspendESt16coroutine_handleIvE
; CHECK-SAME: (ptr noundef nonnull align 1 dereferenceable(1) [[THIS:%.*]]) #[[ATTR7]] comdat align 2 !dbg [[DBG38:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = alloca %"struct.std::coroutine_handle", align 1
; CHECK-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 8
; CHECK-NEXT:    [[THIS1:%.*]] = load ptr, ptr [[THIS_ADDR]], align 8
; CHECK-NEXT:    ret void, !dbg [[DBG39:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@_ZNSt14suspend_always12await_resumeEv
; CHECK-SAME: (ptr noundef nonnull align 1 dereferenceable(1) [[THIS:%.*]]) #[[ATTR7]] comdat align 2 !dbg [[DBG40:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 8
; CHECK-NEXT:    [[THIS1:%.*]] = load ptr, ptr [[THIS_ADDR]], align 8
; CHECK-NEXT:    ret void, !dbg [[DBG41:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@main
; CHECK-SAME: () #[[ATTR14:[0-9]+]] personality ptr @__gxx_personality_v0 !dbg [[DBG42:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[HANDLE:%.*]] = alloca [[STRUCT_OSS_COROUTINE:%.*]], align 1
; CHECK-NEXT:    store ptr null, ptr [[HANDLE]], align 1, !dbg [[DBG43:![0-9]+]]
; CHECK-NEXT:    [[UNDEF_AGG_TMP_CLONE:%.*]] = alloca [[STRUCT_OSS_COROUTINE]], align 1
; CHECK-NEXT:    [[TMP0:%.*]] = alloca ptr, align 8, !dbg [[DBG43]]
; CHECK-NEXT:    [[TMP1:%.*]] = alloca ptr, align 8, !dbg [[DBG43]]
; CHECK-NEXT:    [[NUM_DEPS:%.*]] = alloca i64, align 8, !dbg [[DBG43]]
; CHECK-NEXT:    br label [[FINAL_COND:%.*]], !dbg [[DBG43]]
; CHECK:       codeRepl:
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 8, ptr [[TMP0]]), !dbg [[DBG43]]
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 8, ptr [[TMP1]]), !dbg [[DBG43]]
; CHECK-NEXT:    [[TMP2:%.*]] = load i64, ptr @[[GLOB2]], align 8, !dbg [[DBG43]]
; CHECK-NEXT:    [[TMP3:%.*]] = add nuw i64 16, [[TMP2]], !dbg [[DBG43]]
; CHECK-NEXT:    store i64 0, ptr [[NUM_DEPS]], align 8, !dbg [[DBG43]]
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[NUM_DEPS]], align 8, !dbg [[DBG43]]
; CHECK-NEXT:    call void @nanos6_create_task(ptr @task_info_var_main, ptr @task_invocation_info_main, ptr null, i64 [[TMP3]], ptr [[TMP0]], ptr [[TMP1]], i64 0, i64 [[TMP4]]), !dbg [[DBG43]]
; CHECK-NEXT:    [[TMP5:%.*]] = load ptr, ptr [[TMP0]], align 8, !dbg [[DBG43]]
; CHECK-NEXT:    [[ARGS_END:%.*]] = getelementptr i8, ptr [[TMP5]], i64 16, !dbg [[DBG43]]
; CHECK-NEXT:    [[GEP_HANDLE:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN:%.*]], ptr [[TMP5]], i32 0, i32 0, !dbg [[DBG43]]
; CHECK-NEXT:    call void @llvm.memcpy.p0.p0.i64(ptr align 8 [[GEP_HANDLE]], ptr align 8 [[HANDLE]], i64 1, i1 false), !dbg [[DBG43]]
; CHECK-NEXT:    [[TMP6:%.*]] = load ptr, ptr [[TMP1]], align 8, !dbg [[DBG43]]
; CHECK-NEXT:    call void @nanos6_submit_task(ptr [[TMP6]]), !dbg [[DBG43]]
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 8, ptr [[TMP0]]), !dbg [[DBG43]]
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 8, ptr [[TMP1]]), !dbg [[DBG43]]
; CHECK-NEXT:    br label [[FINAL_END:%.*]], !dbg [[DBG43]]
; CHECK:       final.end:
; CHECK-NEXT:    ret i32 0, !dbg [[DBG44:![0-9]+]]
; CHECK:       final.then:
; CHECK-NEXT:    invoke void @_Z3kk2v()
; CHECK-NEXT:            to label [[INVOKE_CONT_CLONE:%.*]] unwind label [[TERMINATE_LPAD_CLONE:%.*]], !dbg [[DBG43]]
; CHECK:       invoke.cont.clone:
; CHECK-NEXT:    br label [[FINAL_END]], !dbg [[DBG44]]
; CHECK:       terminate.lpad.clone:
; CHECK-NEXT:    [[TMP7:%.*]] = landingpad { ptr, i32 }
; CHECK-NEXT:            catch ptr null, !dbg [[DBG43]]
; CHECK-NEXT:    [[TMP8:%.*]] = extractvalue { ptr, i32 } [[TMP7]], 0, !dbg [[DBG43]]
; CHECK-NEXT:    call void @__clang_call_terminate(ptr [[TMP8]]) #[[ATTR18]], !dbg [[DBG43]]
; CHECK-NEXT:    unreachable, !dbg [[DBG43]]
; CHECK:       final.cond:
; CHECK-NEXT:    [[TMP9:%.*]] = call i32 @nanos6_in_final(), !dbg [[DBG43]]
; CHECK-NEXT:    [[TMP10:%.*]] = icmp ne i32 [[TMP9]], 0, !dbg [[DBG43]]
; CHECK-NEXT:    br i1 [[TMP10]], label [[FINAL_THEN:%.*]], label [[CODEREPL:%.*]], !dbg [[DBG43]]
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_constructor_check_version() {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @nanos6_check_version(i64 1, ptr @nanos6_versions, ptr @[[GLOB3:[0-9]+]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_unpacked_task_region_main
; CHECK-SAME: (ptr [[HANDLE:%.*]], ptr [[DEVICE_ENV:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) personality ptr @__gxx_personality_v0 !dbg [[DBG45:![0-9]+]] {
; CHECK-NEXT:  newFuncRoot:
; CHECK-NEXT:    [[UNDEF_AGG_TMP:%.*]] = alloca [[STRUCT_OSS_COROUTINE:%.*]], align 1
; CHECK-NEXT:    br label [[TMP0:%.*]], !dbg [[DBG46:![0-9]+]]
; CHECK:       0:
; CHECK-NEXT:    invoke void @_Z3kk2v()
; CHECK-NEXT:            to label [[INVOKE_CONT:%.*]] unwind label [[TERMINATE_LPAD:%.*]], !dbg [[DBG46]]
; CHECK:       invoke.cont:
; CHECK-NEXT:    br label [[DOTEXITSTUB:%.*]], !dbg [[DBG47:![0-9]+]]
; CHECK:       terminate.lpad:
; CHECK-NEXT:    [[TMP1:%.*]] = landingpad { ptr, i32 }
; CHECK-NEXT:            catch ptr null, !dbg [[DBG46]]
; CHECK-NEXT:    [[TMP2:%.*]] = extractvalue { ptr, i32 } [[TMP1]], 0, !dbg [[DBG46]]
; CHECK-NEXT:    call void @__clang_call_terminate(ptr [[TMP2]]) #[[ATTR18]], !dbg [[DBG46]]
; CHECK-NEXT:    unreachable, !dbg [[DBG46]]
; CHECK:       .exitStub:
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_task_region_main
; CHECK-SAME: (ptr [[TASK_ARGS:%.*]], ptr [[DEVICE_ENV:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_HANDLE:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN:%.*]], ptr [[TASK_ARGS]], i32 0, i32 0
; CHECK-NEXT:    [[TMP0:%.*]] = icmp ne ptr [[ADDRESS_TRANSLATION_TABLE]], null
; CHECK-NEXT:    br i1 [[TMP0]], label [[TLATE_IF:%.*]], label [[TLATE_END:%.*]]
; CHECK:       end:
; CHECK-NEXT:    call void @nanos6_unpacked_task_region_main(ptr [[GEP_HANDLE]], ptr [[DEVICE_ENV]], ptr [[ADDRESS_TRANSLATION_TABLE]])
; CHECK-NEXT:    ret void
; CHECK:       tlate.if:
; CHECK-NEXT:    br label [[TLATE_END]]
; CHECK:       tlate.end:
; CHECK-NEXT:    br label [[END:%.*]]
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_constructor_register_task_info() {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @nanos6_register_task_info(ptr @task_info_var_main)
; CHECK-NEXT:    ret void
;
