; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --function-signature --include-generated-funcs
; RUN: opt %s -passes=ompss-2 -S | FileCheck %s
; ModuleID = 'loop.ll'
source_filename = "loop.ll"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !6 {
entry:
  %retval = alloca i32, align 4
  store i32 0, ptr %retval, align 4
  %0 = call token @llvm.directive.region.entry() [ "DIR.OSS"([5 x i8] c"TASK\00") ], !dbg !8
  %i = alloca i32, align 4
  store i32 0, ptr %i, align 4, !dbg !9
  br label %for.cond, !dbg !10

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, ptr %i, align 4, !dbg !11
  %cmp = icmp slt i32 %1, 10, !dbg !12
  br i1 %cmp, label %for.body, label %for.end, !dbg !13

for.body:                                         ; preds = %for.cond
  br label %for.inc, !dbg !14

for.inc:                                          ; preds = %for.body
  %2 = load i32, ptr %i, align 4, !dbg !15
  %inc = add nsw i32 %2, 1, !dbg !15
  store i32 %inc, ptr %i, align 4, !dbg !15
  br label %for.cond, !dbg !13, !llvm.loop !16

for.end:                                          ; preds = %for.cond
  call void @llvm.directive.region.exit(token %0), !dbg !17
  %3 = load i32, ptr %retval, align 4, !dbg !18
  ret i32 %3, !dbg !18
}


; Function Attrs: nounwind
declare token @llvm.directive.region.entry() #1

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3, !4}
!llvm.ident = !{!5}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "human", isOptimized: false, runtimeVersion: 0, emissionKind: NoDebug, enums: !2, nameTableKind: None)
!1 = !DIFile(filename: "loop.ll", directory: "")
!2 = !{}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = !{i32 1, !"wchar_size", i32 4}
!5 = !{!""}
!6 = distinct !DISubprogram(name: "main", scope: !1, file: !1, line: 2, type: !7, scopeLine: 2, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!7 = !DISubroutineType(types: !2)
!8 = !DILocation(line: 3, column: 13, scope: !6)
!9 = !DILocation(line: 5, column: 18, scope: !6)
!10 = !DILocation(line: 5, column: 14, scope: !6)
!11 = !DILocation(line: 5, column: 25, scope: !6)
!12 = !DILocation(line: 5, column: 27, scope: !6)
!13 = !DILocation(line: 5, column: 9, scope: !6)
!14 = !DILocation(line: 6, column: 10, scope: !6)
!15 = !DILocation(line: 5, column: 33, scope: !6)
!16 = distinct !{!16, !13, !14}
!17 = !DILocation(line: 7, column: 5, scope: !6)
!18 = !DILocation(line: 8, column: 1, scope: !6)


; CHECK-LABEL: define {{[^@]+}}@main
; CHECK-SAME: () #[[ATTR0:[0-9]+]] !dbg [[DBG6:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[RETVAL:%.*]] = alloca i32, align 4
; CHECK-NEXT:    store i32 0, ptr [[RETVAL]], align 4
; CHECK-NEXT:    [[TMP0:%.*]] = alloca ptr, align 8, !dbg [[DBG8:![0-9]+]]
; CHECK-NEXT:    [[TMP1:%.*]] = alloca ptr, align 8, !dbg [[DBG8]]
; CHECK-NEXT:    [[NUM_DEPS:%.*]] = alloca i64, align 8, !dbg [[DBG8]]
; CHECK-NEXT:    br label [[FINAL_COND:%.*]], !dbg [[DBG8]]
; CHECK:       codeRepl:
; CHECK-NEXT:    store i64 0, ptr [[NUM_DEPS]], align 8, !dbg [[DBG8]]
; CHECK-NEXT:    [[TMP2:%.*]] = load i64, ptr [[NUM_DEPS]], align 8, !dbg [[DBG8]]
; CHECK-NEXT:    call void @nanos6_create_task(ptr @task_info_var_main, ptr @task_invocation_info_main, ptr null, i64 0, ptr [[TMP0]], ptr [[TMP1]], i64 0, i64 [[TMP2]]), !dbg [[DBG8]]
; CHECK-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[TMP0]], align 8, !dbg [[DBG8]]
; CHECK-NEXT:    [[ARGS_END:%.*]] = getelementptr i8, ptr [[TMP3]], i64 0, !dbg [[DBG8]]
; CHECK-NEXT:    [[TMP4:%.*]] = load ptr, ptr [[TMP1]], align 8, !dbg [[DBG8]]
; CHECK-NEXT:    call void @nanos6_submit_task(ptr [[TMP4]]), !dbg [[DBG8]]
; CHECK-NEXT:    br label [[FINAL_END:%.*]], !dbg [[DBG8]]
; CHECK:       final.end:
; CHECK-NEXT:    [[TMP5:%.*]] = load i32, ptr [[RETVAL]], align 4, !dbg [[DBG9:![0-9]+]]
; CHECK-NEXT:    ret i32 [[TMP5]], !dbg [[DBG9]]
; CHECK:       final.then:
; CHECK-NEXT:    [[I_CLONE:%.*]] = alloca i32, align 4, !dbg [[DBG8]]
; CHECK-NEXT:    store i32 0, ptr [[I_CLONE]], align 4, !dbg [[DBG10:![0-9]+]]
; CHECK-NEXT:    br label [[FOR_COND_CLONE:%.*]], !dbg [[DBG11:![0-9]+]]
; CHECK:       for.cond.clone:
; CHECK-NEXT:    [[TMP6:%.*]] = load i32, ptr [[I_CLONE]], align 4, !dbg [[DBG12:![0-9]+]]
; CHECK-NEXT:    [[CMP_CLONE:%.*]] = icmp slt i32 [[TMP6]], 10, !dbg [[DBG13:![0-9]+]]
; CHECK-NEXT:    br i1 [[CMP_CLONE]], label [[FOR_BODY_CLONE:%.*]], label [[FOR_END_CLONE:%.*]], !dbg [[DBG14:![0-9]+]]
; CHECK:       for.body.clone:
; CHECK-NEXT:    br label [[FOR_INC_CLONE:%.*]], !dbg [[DBG15:![0-9]+]]
; CHECK:       for.end.clone:
; CHECK-NEXT:    br label [[FINAL_END]], !dbg [[DBG9]]
; CHECK:       for.inc.clone:
; CHECK-NEXT:    [[TMP7:%.*]] = load i32, ptr [[I_CLONE]], align 4, !dbg [[DBG16:![0-9]+]]
; CHECK-NEXT:    [[INC_CLONE:%.*]] = add nsw i32 [[TMP7]], 1, !dbg [[DBG16]]
; CHECK-NEXT:    store i32 [[INC_CLONE]], ptr [[I_CLONE]], align 4, !dbg [[DBG16]]
; CHECK-NEXT:    br label [[FOR_COND_CLONE]], !dbg [[DBG14]], !llvm.loop [[LOOP17:![0-9]+]]
; CHECK:       final.cond:
; CHECK-NEXT:    [[TMP8:%.*]] = call i32 @nanos6_in_final(), !dbg [[DBG8]]
; CHECK-NEXT:    [[TMP9:%.*]] = icmp ne i32 [[TMP8]], 0, !dbg [[DBG8]]
; CHECK-NEXT:    br i1 [[TMP9]], label [[FINAL_THEN:%.*]], label [[CODEREPL:%.*]], !dbg [[DBG8]]
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_unpacked_task_region_main
; CHECK-SAME: (ptr [[DEVICE_ENV:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) !dbg [[DBG18:![0-9]+]] {
; CHECK-NEXT:  newFuncRoot:
; CHECK-NEXT:    br label [[TMP0:%.*]], !dbg [[DBG19:![0-9]+]]
; CHECK:       0:
; CHECK-NEXT:    [[I:%.*]] = alloca i32, align 4
; CHECK-NEXT:    store i32 0, ptr [[I]], align 4, !dbg [[DBG20:![0-9]+]]
; CHECK-NEXT:    br label [[FOR_COND:%.*]], !dbg [[DBG21:![0-9]+]]
; CHECK:       for.cond:
; CHECK-NEXT:    [[TMP1:%.*]] = load i32, ptr [[I]], align 4, !dbg [[DBG22:![0-9]+]]
; CHECK-NEXT:    [[CMP:%.*]] = icmp slt i32 [[TMP1]], 10, !dbg [[DBG23:![0-9]+]]
; CHECK-NEXT:    br i1 [[CMP]], label [[FOR_BODY:%.*]], label [[FOR_END:%.*]], !dbg [[DBG24:![0-9]+]]
; CHECK:       for.body:
; CHECK-NEXT:    br label [[FOR_INC:%.*]], !dbg [[DBG25:![0-9]+]]
; CHECK:       for.end:
; CHECK-NEXT:    br label [[DOTEXITSTUB:%.*]], !dbg [[DBG26:![0-9]+]]
; CHECK:       for.inc:
; CHECK-NEXT:    [[TMP2:%.*]] = load i32, ptr [[I]], align 4, !dbg [[DBG27:![0-9]+]]
; CHECK-NEXT:    [[INC:%.*]] = add nsw i32 [[TMP2]], 1, !dbg [[DBG27]]
; CHECK-NEXT:    store i32 [[INC]], ptr [[I]], align 4, !dbg [[DBG27]]
; CHECK-NEXT:    br label [[FOR_COND]], !dbg [[DBG24]], !llvm.loop [[LOOP28:![0-9]+]]
; CHECK:       .exitStub:
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_task_region_main
; CHECK-SAME: (ptr [[TASK_ARGS:%.*]], ptr [[DEVICE_ENV:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = icmp ne ptr [[ADDRESS_TRANSLATION_TABLE]], null
; CHECK-NEXT:    br i1 [[TMP0]], label [[TMP1:%.*]], label [[TMP2:%.*]]
; CHECK:       1:
; CHECK-NEXT:    br label [[TMP2]]
; CHECK:       2:
; CHECK-NEXT:    call void @nanos6_unpacked_task_region_main(ptr [[DEVICE_ENV]], ptr [[ADDRESS_TRANSLATION_TABLE]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_constructor_register_task_info() {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @nanos6_register_task_info(ptr @task_info_var_main)
; CHECK-NEXT:    ret void
;
