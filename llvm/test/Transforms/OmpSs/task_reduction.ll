; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --function-signature --include-generated-funcs
; RUN: opt %s -passes=ompss-2 -S | FileCheck %s
; ModuleID = 'task_reduction.c'
source_filename = "task_reduction.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; #pragma oss declare reduction(asdf: int : omp_out += omp_in) initializer(omp_priv = 0)
; void foo(int n) {
;     int array[n];
;     #pragma oss task reduction(asdf : n, array)
;     {}
; }
; void foo1(int n) {
;     int array[n];
;     #pragma oss task reduction(+ : n, array)
;     {}
; }
; int main() {
;     foo(3);
;     foo1(3);
; }

%struct._depend_unpack_t = type { ptr, i64, i64, i64 }
%struct._depend_unpack_t.0 = type { ptr, i64, i64, i64 }
%struct._depend_unpack_t.1 = type { ptr, i64, i64, i64 }
%struct._depend_unpack_t.2 = type { ptr, i64, i64, i64 }

; Function Attrs: noinline nounwind optnone
define dso_local void @foo(i32 noundef %n) #0 !dbg !5 {
entry:
  %n.addr = alloca i32, align 4
  %saved_stack = alloca ptr, align 8
  %__vla_expr0 = alloca i64, align 8
  store i32 %n, ptr %n.addr, align 4
  %0 = load i32, ptr %n.addr, align 4, !dbg !9
  %1 = zext i32 %0 to i64, !dbg !10
  %2 = call ptr @llvm.stacksave(), !dbg !10
  store ptr %2, ptr %saved_stack, align 8, !dbg !10
  %vla = alloca i32, i64 %1, align 16, !dbg !10
  store i64 %1, ptr %__vla_expr0, align 8, !dbg !10
  %3 = call token @llvm.directive.region.entry() [ "DIR.OSS"([5 x i8] c"TASK\00"), "QUAL.OSS.SHARED"(ptr %n.addr, i32 undef), "QUAL.OSS.SHARED"(ptr %vla, i32 undef), "QUAL.OSS.VLA.DIMS"(ptr %vla, i64 %1), "QUAL.OSS.CAPTURED"(i64 %1), "QUAL.OSS.DEP.REDUCTION"(i32 -1, ptr %n.addr, [2 x i8] c"n\00", ptr @compute_dep, ptr %n.addr), "QUAL.OSS.DEP.REDUCTION.INIT"(ptr %n.addr, ptr @red_init), "QUAL.OSS.DEP.REDUCTION.COMBINE"(ptr %n.addr, ptr @red_comb), "QUAL.OSS.DEP.REDUCTION"(i32 -1, ptr %vla, [6 x i8] c"array\00", ptr @compute_dep.1, ptr %vla, i64 %1), "QUAL.OSS.DEP.REDUCTION.INIT"(ptr %vla, ptr @red_init), "QUAL.OSS.DEP.REDUCTION.COMBINE"(ptr %vla, ptr @red_comb) ], !dbg !11
  call void @llvm.directive.region.exit(token %3), !dbg !12
  %4 = load ptr, ptr %saved_stack, align 8, !dbg !13
  call void @llvm.stackrestore(ptr %4), !dbg !13
  ret void, !dbg !13
}

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare ptr @llvm.stacksave() #1

; Function Attrs: nounwind
declare token @llvm.directive.region.entry() #2

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token) #2

; Function Attrs: noinline norecurse nounwind
define internal void @red_init(ptr noundef %0, ptr noundef %1, i64 noundef %2) #3 !dbg !14 {
entry:
  %.addr = alloca ptr, align 8
  %.addr1 = alloca ptr, align 8
  %.addr2 = alloca i64, align 8
  store ptr %0, ptr %.addr, align 8
  store ptr %1, ptr %.addr1, align 8
  store i64 %2, ptr %.addr2, align 8
  %3 = load ptr, ptr %.addr, align 8
  %4 = load ptr, ptr %.addr1, align 8
  %5 = load i64, ptr %.addr2, align 8
  %6 = udiv exact i64 %5, 4
  %arrayctor.dst.end = getelementptr inbounds i32, ptr %3, i64 %6
  br label %arrayctor.loop

arrayctor.loop:                                   ; preds = %arrayctor.loop, %entry
  %arrayctor.dst.cur = phi ptr [ %3, %entry ], [ %arrayctor.dst.next, %arrayctor.loop ]
  %arrayctor.src.cur = phi ptr [ %4, %entry ], [ %arrayctor.src.next, %arrayctor.loop ]
  store i32 0, ptr %arrayctor.dst.cur, align 4
  %arrayctor.dst.next = getelementptr inbounds i32, ptr %arrayctor.dst.cur, i64 1
  %arrayctor.src.next = getelementptr inbounds i32, ptr %arrayctor.src.cur, i64 1
  %arrayctor.done = icmp eq ptr %arrayctor.dst.next, %arrayctor.dst.end
  br i1 %arrayctor.done, label %arrayctor.cont, label %arrayctor.loop

arrayctor.cont:                                   ; preds = %arrayctor.loop
  ret void, !dbg !15
}

; Function Attrs: noinline norecurse nounwind
define internal void @red_comb(ptr noundef %0, ptr noundef %1, i64 noundef %2) #3 !dbg !17 {
entry:
  %.addr = alloca ptr, align 8
  %.addr1 = alloca ptr, align 8
  %.addr2 = alloca i64, align 8
  store ptr %0, ptr %.addr, align 8
  store ptr %1, ptr %.addr1, align 8
  store i64 %2, ptr %.addr2, align 8
  %3 = load ptr, ptr %.addr, align 8
  %4 = load ptr, ptr %.addr1, align 8
  %5 = load i64, ptr %.addr2, align 8
  %6 = udiv exact i64 %5, 4
  %arrayctor.dst.end = getelementptr inbounds i32, ptr %3, i64 %6
  br label %arrayctor.loop

arrayctor.loop:                                   ; preds = %arrayctor.loop, %entry
  %arrayctor.dst.cur = phi ptr [ %3, %entry ], [ %arrayctor.dst.next, %arrayctor.loop ]
  %arrayctor.src.cur = phi ptr [ %4, %entry ], [ %arrayctor.src.next, %arrayctor.loop ]
  %7 = load i32, ptr %arrayctor.src.cur, align 4, !dbg !18
  %8 = load i32, ptr %arrayctor.dst.cur, align 4, !dbg !20
  %add = add nsw i32 %8, %7, !dbg !20
  store i32 %add, ptr %arrayctor.dst.cur, align 4, !dbg !20
  %arrayctor.dst.next = getelementptr inbounds i32, ptr %arrayctor.dst.cur, i64 1
  %arrayctor.src.next = getelementptr inbounds i32, ptr %arrayctor.src.cur, i64 1
  %arrayctor.done = icmp eq ptr %arrayctor.dst.next, %arrayctor.dst.end
  br i1 %arrayctor.done, label %arrayctor.cont, label %arrayctor.loop

arrayctor.cont:                                   ; preds = %arrayctor.loop
  ret void, !dbg !21
}

define internal %struct._depend_unpack_t @compute_dep(ptr %n) #4 !dbg !22 {
entry:
  %retval = alloca %struct._depend_unpack_t, align 8
  %n.addr = alloca ptr, align 8
  store ptr %n, ptr %n.addr, align 8
  %0 = getelementptr inbounds %struct._depend_unpack_t, ptr %retval, i32 0, i32 0
  store ptr %n, ptr %0, align 8
  %1 = getelementptr inbounds %struct._depend_unpack_t, ptr %retval, i32 0, i32 1
  store i64 4, ptr %1, align 8
  %2 = getelementptr inbounds %struct._depend_unpack_t, ptr %retval, i32 0, i32 2
  store i64 0, ptr %2, align 8
  %3 = getelementptr inbounds %struct._depend_unpack_t, ptr %retval, i32 0, i32 3
  store i64 4, ptr %3, align 8
  %4 = load %struct._depend_unpack_t, ptr %retval, align 8
  ret %struct._depend_unpack_t %4
}

define internal %struct._depend_unpack_t.0 @compute_dep.1(ptr %array, i64 %0) #4 !dbg !23 {
entry:
  %retval = alloca %struct._depend_unpack_t.0, align 8
  %array.addr = alloca ptr, align 8
  %.addr = alloca i64, align 8
  store ptr %array, ptr %array.addr, align 8
  store i64 %0, ptr %.addr, align 8
  %1 = mul i64 %0, 4
  %2 = mul i64 %0, 4
  %3 = getelementptr inbounds %struct._depend_unpack_t.0, ptr %retval, i32 0, i32 0
  store ptr %array, ptr %3, align 8
  %4 = getelementptr inbounds %struct._depend_unpack_t.0, ptr %retval, i32 0, i32 1
  store i64 %1, ptr %4, align 8
  %5 = getelementptr inbounds %struct._depend_unpack_t.0, ptr %retval, i32 0, i32 2
  store i64 0, ptr %5, align 8
  %6 = getelementptr inbounds %struct._depend_unpack_t.0, ptr %retval, i32 0, i32 3
  store i64 %2, ptr %6, align 8
  %7 = load %struct._depend_unpack_t.0, ptr %retval, align 8
  ret %struct._depend_unpack_t.0 %7
}

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare void @llvm.stackrestore(ptr) #1

; Function Attrs: noinline nounwind optnone
define dso_local void @foo1(i32 noundef %n) #0 !dbg !24 {
entry:
  %n.addr = alloca i32, align 4
  %saved_stack = alloca ptr, align 8
  %__vla_expr0 = alloca i64, align 8
  store i32 %n, ptr %n.addr, align 4
  %0 = load i32, ptr %n.addr, align 4, !dbg !25
  %1 = zext i32 %0 to i64, !dbg !26
  %2 = call ptr @llvm.stacksave(), !dbg !26
  store ptr %2, ptr %saved_stack, align 8, !dbg !26
  %vla = alloca i32, i64 %1, align 16, !dbg !26
  store i64 %1, ptr %__vla_expr0, align 8, !dbg !26
  %3 = call token @llvm.directive.region.entry() [ "DIR.OSS"([5 x i8] c"TASK\00"), "QUAL.OSS.SHARED"(ptr %n.addr, i32 undef), "QUAL.OSS.SHARED"(ptr %vla, i32 undef), "QUAL.OSS.VLA.DIMS"(ptr %vla, i64 %1), "QUAL.OSS.CAPTURED"(i64 %1), "QUAL.OSS.DEP.REDUCTION"(i32 6000, ptr %n.addr, [2 x i8] c"n\00", ptr @compute_dep.4, ptr %n.addr), "QUAL.OSS.DEP.REDUCTION.INIT"(ptr %n.addr, ptr @red_init.2), "QUAL.OSS.DEP.REDUCTION.COMBINE"(ptr %n.addr, ptr @red_comb.3), "QUAL.OSS.DEP.REDUCTION"(i32 6000, ptr %vla, [6 x i8] c"array\00", ptr @compute_dep.5, ptr %vla, i64 %1), "QUAL.OSS.DEP.REDUCTION.INIT"(ptr %vla, ptr @red_init.2), "QUAL.OSS.DEP.REDUCTION.COMBINE"(ptr %vla, ptr @red_comb.3) ], !dbg !27
  call void @llvm.directive.region.exit(token %3), !dbg !28
  %4 = load ptr, ptr %saved_stack, align 8, !dbg !29
  call void @llvm.stackrestore(ptr %4), !dbg !29
  ret void, !dbg !29
}

; Function Attrs: noinline norecurse nounwind
define internal void @red_init.2(ptr noundef %0, ptr noundef %1, i64 noundef %2) #3 !dbg !30 {
entry:
  %.addr = alloca ptr, align 8
  %.addr1 = alloca ptr, align 8
  %.addr2 = alloca i64, align 8
  store ptr %0, ptr %.addr, align 8
  store ptr %1, ptr %.addr1, align 8
  store i64 %2, ptr %.addr2, align 8
  %3 = load ptr, ptr %.addr, align 8
  %4 = load ptr, ptr %.addr1, align 8
  %5 = load i64, ptr %.addr2, align 8
  %6 = udiv exact i64 %5, 4
  %arrayctor.dst.end = getelementptr inbounds i32, ptr %3, i64 %6
  br label %arrayctor.loop

arrayctor.loop:                                   ; preds = %arrayctor.loop, %entry
  %arrayctor.dst.cur = phi ptr [ %3, %entry ], [ %arrayctor.dst.next, %arrayctor.loop ]
  %arrayctor.src.cur = phi ptr [ %4, %entry ], [ %arrayctor.src.next, %arrayctor.loop ]
  store i32 0, ptr %arrayctor.dst.cur, align 4
  %arrayctor.dst.next = getelementptr inbounds i32, ptr %arrayctor.dst.cur, i64 1
  %arrayctor.src.next = getelementptr inbounds i32, ptr %arrayctor.src.cur, i64 1
  %arrayctor.done = icmp eq ptr %arrayctor.dst.next, %arrayctor.dst.end
  br i1 %arrayctor.done, label %arrayctor.cont, label %arrayctor.loop

arrayctor.cont:                                   ; preds = %arrayctor.loop
  ret void, !dbg !31
}

; Function Attrs: noinline norecurse nounwind
define internal void @red_comb.3(ptr noundef %0, ptr noundef %1, i64 noundef %2) #3 !dbg !33 {
entry:
  %.addr = alloca ptr, align 8
  %.addr1 = alloca ptr, align 8
  %.addr2 = alloca i64, align 8
  store ptr %0, ptr %.addr, align 8
  store ptr %1, ptr %.addr1, align 8
  store i64 %2, ptr %.addr2, align 8
  %3 = load ptr, ptr %.addr, align 8
  %4 = load ptr, ptr %.addr1, align 8
  %5 = load i64, ptr %.addr2, align 8
  %6 = udiv exact i64 %5, 4
  %arrayctor.dst.end = getelementptr inbounds i32, ptr %3, i64 %6
  br label %arrayctor.loop

arrayctor.loop:                                   ; preds = %arrayctor.loop, %entry
  %arrayctor.dst.cur = phi ptr [ %3, %entry ], [ %arrayctor.dst.next, %arrayctor.loop ]
  %arrayctor.src.cur = phi ptr [ %4, %entry ], [ %arrayctor.src.next, %arrayctor.loop ]
  %7 = load i32, ptr %arrayctor.dst.cur, align 4, !dbg !34
  %8 = load i32, ptr %arrayctor.src.cur, align 4, !dbg !34
  %add = add nsw i32 %7, %8, !dbg !36
  store i32 %add, ptr %arrayctor.dst.cur, align 4, !dbg !36
  %arrayctor.dst.next = getelementptr inbounds i32, ptr %arrayctor.dst.cur, i64 1
  %arrayctor.src.next = getelementptr inbounds i32, ptr %arrayctor.src.cur, i64 1
  %arrayctor.done = icmp eq ptr %arrayctor.dst.next, %arrayctor.dst.end
  br i1 %arrayctor.done, label %arrayctor.cont, label %arrayctor.loop

arrayctor.cont:                                   ; preds = %arrayctor.loop
  ret void, !dbg !34
}

define internal %struct._depend_unpack_t.1 @compute_dep.4(ptr %n) #4 !dbg !37 {
entry:
  %retval = alloca %struct._depend_unpack_t.1, align 8
  %n.addr = alloca ptr, align 8
  store ptr %n, ptr %n.addr, align 8
  %0 = getelementptr inbounds %struct._depend_unpack_t.1, ptr %retval, i32 0, i32 0
  store ptr %n, ptr %0, align 8
  %1 = getelementptr inbounds %struct._depend_unpack_t.1, ptr %retval, i32 0, i32 1
  store i64 4, ptr %1, align 8
  %2 = getelementptr inbounds %struct._depend_unpack_t.1, ptr %retval, i32 0, i32 2
  store i64 0, ptr %2, align 8
  %3 = getelementptr inbounds %struct._depend_unpack_t.1, ptr %retval, i32 0, i32 3
  store i64 4, ptr %3, align 8
  %4 = load %struct._depend_unpack_t.1, ptr %retval, align 8
  ret %struct._depend_unpack_t.1 %4
}

define internal %struct._depend_unpack_t.2 @compute_dep.5(ptr %array, i64 %0) #4 !dbg !38 {
entry:
  %retval = alloca %struct._depend_unpack_t.2, align 8
  %array.addr = alloca ptr, align 8
  %.addr = alloca i64, align 8
  store ptr %array, ptr %array.addr, align 8
  store i64 %0, ptr %.addr, align 8
  %1 = mul i64 %0, 4
  %2 = mul i64 %0, 4
  %3 = getelementptr inbounds %struct._depend_unpack_t.2, ptr %retval, i32 0, i32 0
  store ptr %array, ptr %3, align 8
  %4 = getelementptr inbounds %struct._depend_unpack_t.2, ptr %retval, i32 0, i32 1
  store i64 %1, ptr %4, align 8
  %5 = getelementptr inbounds %struct._depend_unpack_t.2, ptr %retval, i32 0, i32 2
  store i64 0, ptr %5, align 8
  %6 = getelementptr inbounds %struct._depend_unpack_t.2, ptr %retval, i32 0, i32 3
  store i64 %2, ptr %6, align 8
  %7 = load %struct._depend_unpack_t.2, ptr %retval, align 8
  ret %struct._depend_unpack_t.2 %7
}

; Function Attrs: noinline nounwind optnone
define dso_local i32 @main() #0 !dbg !39 {
entry:
  call void @foo(i32 noundef 3), !dbg !40
  call void @foo1(i32 noundef 3), !dbg !41
  ret i32 0, !dbg !42
}

attributes #0 = { noinline nounwind optnone "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
attributes #1 = { nocallback nofree nosync nounwind willreturn }
attributes #2 = { nounwind }
attributes #3 = { noinline norecurse nounwind "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
attributes #4 = { "min-legal-vector-width"="0" }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "", isOptimized: false, runtimeVersion: 0, emissionKind: NoDebug, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "<stdin>", directory: "")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 1, !"wchar_size", i32 4}
!4 = !{!""}
!5 = distinct !DISubprogram(name: "foo", scope: !6, file: !6, line: 2, type: !7, scopeLine: 2, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !8)
!6 = !DIFile(filename: "task_reduction.ll", directory: "")
!7 = !DISubroutineType(types: !8)
!8 = !{}
!9 = !DILocation(line: 3, column: 15, scope: !5)
!10 = !DILocation(line: 3, column: 5, scope: !5)
!11 = !DILocation(line: 4, column: 13, scope: !5)
!12 = !DILocation(line: 5, column: 6, scope: !5)
!13 = !DILocation(line: 6, column: 1, scope: !5)
!14 = distinct !DISubprogram(linkageName: "red_init", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!15 = !DILocation(line: 1, column: 85, scope: !16)
!16 = !DILexicalBlockFile(scope: !14, file: !6, discriminator: 0)
!17 = distinct !DISubprogram(linkageName: "red_comb", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!18 = !DILocation(line: 1, column: 54, scope: !19)
!19 = !DILexicalBlockFile(scope: !17, file: !6, discriminator: 0)
!20 = !DILocation(line: 1, column: 51, scope: !19)
!21 = !DILocation(line: 1, column: 43, scope: !19)
!22 = distinct !DISubprogram(linkageName: "compute_dep", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!23 = distinct !DISubprogram(linkageName: "compute_dep.1", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!24 = distinct !DISubprogram(name: "foo1", scope: !6, file: !6, line: 7, type: !7, scopeLine: 7, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !8)
!25 = !DILocation(line: 8, column: 15, scope: !24)
!26 = !DILocation(line: 8, column: 5, scope: !24)
!27 = !DILocation(line: 9, column: 13, scope: !24)
!28 = !DILocation(line: 10, column: 6, scope: !24)
!29 = !DILocation(line: 11, column: 1, scope: !24)
!30 = distinct !DISubprogram(linkageName: "red_init.2", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!31 = !DILocation(line: 9, column: 36, scope: !32)
!32 = !DILexicalBlockFile(scope: !30, file: !6, discriminator: 0)
!33 = distinct !DISubprogram(linkageName: "red_comb.3", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!34 = !DILocation(line: 9, column: 36, scope: !35)
!35 = !DILexicalBlockFile(scope: !33, file: !6, discriminator: 0)
!36 = !DILocation(line: 9, column: 32, scope: !35)
!37 = distinct !DISubprogram(linkageName: "compute_dep.4", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!38 = distinct !DISubprogram(linkageName: "compute_dep.5", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!39 = distinct !DISubprogram(name: "main", scope: !6, file: !6, line: 12, type: !7, scopeLine: 12, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !8)
!40 = !DILocation(line: 13, column: 5, scope: !39)
!41 = !DILocation(line: 14, column: 5, scope: !39)
!42 = !DILocation(line: 15, column: 1, scope: !39)
; CHECK-LABEL: define {{[^@]+}}@foo
; CHECK-SAME: (i32 noundef [[N:%.*]]) #[[ATTR0:[0-9]+]] !dbg [[DBG5:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[N_ADDR:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[SAVED_STACK:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    [[__VLA_EXPR0:%.*]] = alloca i64, align 8
; CHECK-NEXT:    store i32 [[N]], ptr [[N_ADDR]], align 4
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[N_ADDR]], align 4, !dbg [[DBG9:![0-9]+]]
; CHECK-NEXT:    [[TMP1:%.*]] = zext i32 [[TMP0]] to i64, !dbg [[DBG10:![0-9]+]]
; CHECK-NEXT:    [[TMP2:%.*]] = call ptr @llvm.stacksave(), !dbg [[DBG10]]
; CHECK-NEXT:    store ptr [[TMP2]], ptr [[SAVED_STACK]], align 8, !dbg [[DBG10]]
; CHECK-NEXT:    [[VLA:%.*]] = alloca i32, i64 [[TMP1]], align 16, !dbg [[DBG10]]
; CHECK-NEXT:    store i64 [[TMP1]], ptr [[__VLA_EXPR0]], align 8, !dbg [[DBG10]]
; CHECK-NEXT:    [[TMP3:%.*]] = alloca ptr, align 8, !dbg [[DBG11:![0-9]+]]
; CHECK-NEXT:    [[TMP4:%.*]] = alloca ptr, align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[NUM_DEPS:%.*]] = alloca i64, align 8, !dbg [[DBG11]]
; CHECK-NEXT:    br label [[FINAL_COND:%.*]], !dbg [[DBG11]]
; CHECK:       codeRepl:
; CHECK-NEXT:    store i64 0, ptr [[NUM_DEPS]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP5:%.*]] = load i64, ptr [[NUM_DEPS]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP6:%.*]] = add i64 [[TMP5]], 1, !dbg [[DBG11]]
; CHECK-NEXT:    store i64 [[TMP6]], ptr [[NUM_DEPS]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP7:%.*]] = load i64, ptr [[NUM_DEPS]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP8:%.*]] = add i64 [[TMP7]], 1, !dbg [[DBG11]]
; CHECK-NEXT:    store i64 [[TMP8]], ptr [[NUM_DEPS]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP9:%.*]] = load i64, ptr [[NUM_DEPS]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    call void @nanos6_create_task(ptr @task_info_var_foo, ptr @task_invocation_info_foo, ptr null, i64 32, ptr [[TMP3]], ptr [[TMP4]], i64 0, i64 [[TMP9]]), !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP10:%.*]] = load ptr, ptr [[TMP3]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[ARGS_END:%.*]] = getelementptr i8, ptr [[TMP10]], i64 32, !dbg [[DBG11]]
; CHECK-NEXT:    [[GEP_N_ADDR:%.*]] = getelementptr [[NANOS6_TASK_ARGS_FOO:%.*]], ptr [[TMP10]], i32 0, i32 0, !dbg [[DBG11]]
; CHECK-NEXT:    store ptr [[N_ADDR]], ptr [[GEP_N_ADDR]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[GEP_VLA:%.*]] = getelementptr [[NANOS6_TASK_ARGS_FOO]], ptr [[TMP10]], i32 0, i32 1, !dbg [[DBG11]]
; CHECK-NEXT:    store ptr [[VLA]], ptr [[GEP_VLA]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[CAPT_GEP_:%.*]] = getelementptr [[NANOS6_TASK_ARGS_FOO]], ptr [[TMP10]], i32 0, i32 2, !dbg [[DBG11]]
; CHECK-NEXT:    store i64 [[TMP1]], ptr [[CAPT_GEP_]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP11:%.*]] = load ptr, ptr [[TMP4]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    call void @nanos6_submit_task(ptr [[TMP11]]), !dbg [[DBG11]]
; CHECK-NEXT:    br label [[FINAL_END:%.*]], !dbg [[DBG11]]
; CHECK:       final.end:
; CHECK-NEXT:    [[TMP12:%.*]] = load ptr, ptr [[SAVED_STACK]], align 8, !dbg [[DBG12:![0-9]+]]
; CHECK-NEXT:    call void @llvm.stackrestore(ptr [[TMP12]]), !dbg [[DBG12]]
; CHECK-NEXT:    ret void, !dbg [[DBG12]]
; CHECK:       final.then:
; CHECK-NEXT:    br label [[FINAL_END]], !dbg [[DBG12]]
; CHECK:       final.cond:
; CHECK-NEXT:    [[TMP13:%.*]] = call i32 @nanos6_in_final(), !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP14:%.*]] = icmp ne i32 [[TMP13]], 0, !dbg [[DBG11]]
; CHECK-NEXT:    br i1 [[TMP14]], label [[FINAL_THEN:%.*]], label [[CODEREPL:%.*]], !dbg [[DBG11]]
;
;
; CHECK-LABEL: define {{[^@]+}}@red_init
; CHECK-SAME: (ptr noundef [[TMP0:%.*]], ptr noundef [[TMP1:%.*]], i64 noundef [[TMP2:%.*]]) #[[ATTR3:[0-9]+]] !dbg [[DBG13:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[DOTADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    [[DOTADDR1:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    [[DOTADDR2:%.*]] = alloca i64, align 8
; CHECK-NEXT:    store ptr [[TMP0]], ptr [[DOTADDR]], align 8
; CHECK-NEXT:    store ptr [[TMP1]], ptr [[DOTADDR1]], align 8
; CHECK-NEXT:    store i64 [[TMP2]], ptr [[DOTADDR2]], align 8
; CHECK-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[DOTADDR]], align 8
; CHECK-NEXT:    [[TMP4:%.*]] = load ptr, ptr [[DOTADDR1]], align 8
; CHECK-NEXT:    [[TMP5:%.*]] = load i64, ptr [[DOTADDR2]], align 8
; CHECK-NEXT:    [[TMP6:%.*]] = udiv exact i64 [[TMP5]], 4
; CHECK-NEXT:    [[ARRAYCTOR_DST_END:%.*]] = getelementptr inbounds i32, ptr [[TMP3]], i64 [[TMP6]]
; CHECK-NEXT:    br label [[ARRAYCTOR_LOOP:%.*]]
; CHECK:       arrayctor.loop:
; CHECK-NEXT:    [[ARRAYCTOR_DST_CUR:%.*]] = phi ptr [ [[TMP3]], [[ENTRY:%.*]] ], [ [[ARRAYCTOR_DST_NEXT:%.*]], [[ARRAYCTOR_LOOP]] ]
; CHECK-NEXT:    [[ARRAYCTOR_SRC_CUR:%.*]] = phi ptr [ [[TMP4]], [[ENTRY]] ], [ [[ARRAYCTOR_SRC_NEXT:%.*]], [[ARRAYCTOR_LOOP]] ]
; CHECK-NEXT:    store i32 0, ptr [[ARRAYCTOR_DST_CUR]], align 4
; CHECK-NEXT:    [[ARRAYCTOR_DST_NEXT]] = getelementptr inbounds i32, ptr [[ARRAYCTOR_DST_CUR]], i64 1
; CHECK-NEXT:    [[ARRAYCTOR_SRC_NEXT]] = getelementptr inbounds i32, ptr [[ARRAYCTOR_SRC_CUR]], i64 1
; CHECK-NEXT:    [[ARRAYCTOR_DONE:%.*]] = icmp eq ptr [[ARRAYCTOR_DST_NEXT]], [[ARRAYCTOR_DST_END]]
; CHECK-NEXT:    br i1 [[ARRAYCTOR_DONE]], label [[ARRAYCTOR_CONT:%.*]], label [[ARRAYCTOR_LOOP]]
; CHECK:       arrayctor.cont:
; CHECK-NEXT:    ret void, !dbg [[DBG14:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@red_comb
; CHECK-SAME: (ptr noundef [[TMP0:%.*]], ptr noundef [[TMP1:%.*]], i64 noundef [[TMP2:%.*]]) #[[ATTR3]] !dbg [[DBG16:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[DOTADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    [[DOTADDR1:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    [[DOTADDR2:%.*]] = alloca i64, align 8
; CHECK-NEXT:    store ptr [[TMP0]], ptr [[DOTADDR]], align 8
; CHECK-NEXT:    store ptr [[TMP1]], ptr [[DOTADDR1]], align 8
; CHECK-NEXT:    store i64 [[TMP2]], ptr [[DOTADDR2]], align 8
; CHECK-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[DOTADDR]], align 8
; CHECK-NEXT:    [[TMP4:%.*]] = load ptr, ptr [[DOTADDR1]], align 8
; CHECK-NEXT:    [[TMP5:%.*]] = load i64, ptr [[DOTADDR2]], align 8
; CHECK-NEXT:    [[TMP6:%.*]] = udiv exact i64 [[TMP5]], 4
; CHECK-NEXT:    [[ARRAYCTOR_DST_END:%.*]] = getelementptr inbounds i32, ptr [[TMP3]], i64 [[TMP6]]
; CHECK-NEXT:    br label [[ARRAYCTOR_LOOP:%.*]]
; CHECK:       arrayctor.loop:
; CHECK-NEXT:    [[ARRAYCTOR_DST_CUR:%.*]] = phi ptr [ [[TMP3]], [[ENTRY:%.*]] ], [ [[ARRAYCTOR_DST_NEXT:%.*]], [[ARRAYCTOR_LOOP]] ]
; CHECK-NEXT:    [[ARRAYCTOR_SRC_CUR:%.*]] = phi ptr [ [[TMP4]], [[ENTRY]] ], [ [[ARRAYCTOR_SRC_NEXT:%.*]], [[ARRAYCTOR_LOOP]] ]
; CHECK-NEXT:    [[TMP7:%.*]] = load i32, ptr [[ARRAYCTOR_SRC_CUR]], align 4, !dbg [[DBG17:![0-9]+]]
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[ARRAYCTOR_DST_CUR]], align 4, !dbg [[DBG19:![0-9]+]]
; CHECK-NEXT:    [[ADD:%.*]] = add nsw i32 [[TMP8]], [[TMP7]], !dbg [[DBG19]]
; CHECK-NEXT:    store i32 [[ADD]], ptr [[ARRAYCTOR_DST_CUR]], align 4, !dbg [[DBG19]]
; CHECK-NEXT:    [[ARRAYCTOR_DST_NEXT]] = getelementptr inbounds i32, ptr [[ARRAYCTOR_DST_CUR]], i64 1
; CHECK-NEXT:    [[ARRAYCTOR_SRC_NEXT]] = getelementptr inbounds i32, ptr [[ARRAYCTOR_SRC_CUR]], i64 1
; CHECK-NEXT:    [[ARRAYCTOR_DONE:%.*]] = icmp eq ptr [[ARRAYCTOR_DST_NEXT]], [[ARRAYCTOR_DST_END]]
; CHECK-NEXT:    br i1 [[ARRAYCTOR_DONE]], label [[ARRAYCTOR_CONT:%.*]], label [[ARRAYCTOR_LOOP]]
; CHECK:       arrayctor.cont:
; CHECK-NEXT:    ret void, !dbg [[DBG20:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_dep
; CHECK-SAME: (ptr [[N:%.*]]) #[[ATTR4:[0-9]+]] !dbg [[DBG21:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[RETVAL:%.*]] = alloca [[STRUCT__DEPEND_UNPACK_T:%.*]], align 8
; CHECK-NEXT:    [[N_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr [[N]], ptr [[N_ADDR]], align 8
; CHECK-NEXT:    [[TMP0:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], i32 0, i32 0
; CHECK-NEXT:    store ptr [[N]], ptr [[TMP0]], align 8
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], i32 0, i32 1
; CHECK-NEXT:    store i64 4, ptr [[TMP1]], align 8
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], i32 0, i32 2
; CHECK-NEXT:    store i64 0, ptr [[TMP2]], align 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], i32 0, i32 3
; CHECK-NEXT:    store i64 4, ptr [[TMP3]], align 8
; CHECK-NEXT:    [[TMP4:%.*]] = load [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], align 8
; CHECK-NEXT:    ret [[STRUCT__DEPEND_UNPACK_T]] [[TMP4]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_dep.1
; CHECK-SAME: (ptr [[ARRAY:%.*]], i64 [[TMP0:%.*]]) #[[ATTR4]] !dbg [[DBG22:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[RETVAL:%.*]] = alloca [[STRUCT__DEPEND_UNPACK_T_0:%.*]], align 8
; CHECK-NEXT:    [[ARRAY_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    [[DOTADDR:%.*]] = alloca i64, align 8
; CHECK-NEXT:    store ptr [[ARRAY]], ptr [[ARRAY_ADDR]], align 8
; CHECK-NEXT:    store i64 [[TMP0]], ptr [[DOTADDR]], align 8
; CHECK-NEXT:    [[TMP1:%.*]] = mul i64 [[TMP0]], 4
; CHECK-NEXT:    [[TMP2:%.*]] = mul i64 [[TMP0]], 4
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_0]], ptr [[RETVAL]], i32 0, i32 0
; CHECK-NEXT:    store ptr [[ARRAY]], ptr [[TMP3]], align 8
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_0]], ptr [[RETVAL]], i32 0, i32 1
; CHECK-NEXT:    store i64 [[TMP1]], ptr [[TMP4]], align 8
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_0]], ptr [[RETVAL]], i32 0, i32 2
; CHECK-NEXT:    store i64 0, ptr [[TMP5]], align 8
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_0]], ptr [[RETVAL]], i32 0, i32 3
; CHECK-NEXT:    store i64 [[TMP2]], ptr [[TMP6]], align 8
; CHECK-NEXT:    [[TMP7:%.*]] = load [[STRUCT__DEPEND_UNPACK_T_0]], ptr [[RETVAL]], align 8
; CHECK-NEXT:    ret [[STRUCT__DEPEND_UNPACK_T_0]] [[TMP7]]
;
;
; CHECK-LABEL: define {{[^@]+}}@foo1
; CHECK-SAME: (i32 noundef [[N:%.*]]) #[[ATTR0]] !dbg [[DBG23:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[N_ADDR:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[SAVED_STACK:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    [[__VLA_EXPR0:%.*]] = alloca i64, align 8
; CHECK-NEXT:    store i32 [[N]], ptr [[N_ADDR]], align 4
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[N_ADDR]], align 4, !dbg [[DBG24:![0-9]+]]
; CHECK-NEXT:    [[TMP1:%.*]] = zext i32 [[TMP0]] to i64, !dbg [[DBG25:![0-9]+]]
; CHECK-NEXT:    [[TMP2:%.*]] = call ptr @llvm.stacksave(), !dbg [[DBG25]]
; CHECK-NEXT:    store ptr [[TMP2]], ptr [[SAVED_STACK]], align 8, !dbg [[DBG25]]
; CHECK-NEXT:    [[VLA:%.*]] = alloca i32, i64 [[TMP1]], align 16, !dbg [[DBG25]]
; CHECK-NEXT:    store i64 [[TMP1]], ptr [[__VLA_EXPR0]], align 8, !dbg [[DBG25]]
; CHECK-NEXT:    [[TMP3:%.*]] = alloca ptr, align 8, !dbg [[DBG26:![0-9]+]]
; CHECK-NEXT:    [[TMP4:%.*]] = alloca ptr, align 8, !dbg [[DBG26]]
; CHECK-NEXT:    [[NUM_DEPS:%.*]] = alloca i64, align 8, !dbg [[DBG26]]
; CHECK-NEXT:    br label [[FINAL_COND:%.*]], !dbg [[DBG26]]
; CHECK:       codeRepl:
; CHECK-NEXT:    store i64 0, ptr [[NUM_DEPS]], align 8, !dbg [[DBG26]]
; CHECK-NEXT:    [[TMP5:%.*]] = load i64, ptr [[NUM_DEPS]], align 8, !dbg [[DBG26]]
; CHECK-NEXT:    [[TMP6:%.*]] = add i64 [[TMP5]], 1, !dbg [[DBG26]]
; CHECK-NEXT:    store i64 [[TMP6]], ptr [[NUM_DEPS]], align 8, !dbg [[DBG26]]
; CHECK-NEXT:    [[TMP7:%.*]] = load i64, ptr [[NUM_DEPS]], align 8, !dbg [[DBG26]]
; CHECK-NEXT:    [[TMP8:%.*]] = add i64 [[TMP7]], 1, !dbg [[DBG26]]
; CHECK-NEXT:    store i64 [[TMP8]], ptr [[NUM_DEPS]], align 8, !dbg [[DBG26]]
; CHECK-NEXT:    [[TMP9:%.*]] = load i64, ptr [[NUM_DEPS]], align 8, !dbg [[DBG26]]
; CHECK-NEXT:    call void @nanos6_create_task(ptr @task_info_var_foo1, ptr @task_invocation_info_foo1, ptr null, i64 32, ptr [[TMP3]], ptr [[TMP4]], i64 0, i64 [[TMP9]]), !dbg [[DBG26]]
; CHECK-NEXT:    [[TMP10:%.*]] = load ptr, ptr [[TMP3]], align 8, !dbg [[DBG26]]
; CHECK-NEXT:    [[ARGS_END:%.*]] = getelementptr i8, ptr [[TMP10]], i64 32, !dbg [[DBG26]]
; CHECK-NEXT:    [[GEP_N_ADDR:%.*]] = getelementptr [[NANOS6_TASK_ARGS_FOO1:%.*]], ptr [[TMP10]], i32 0, i32 0, !dbg [[DBG26]]
; CHECK-NEXT:    store ptr [[N_ADDR]], ptr [[GEP_N_ADDR]], align 8, !dbg [[DBG26]]
; CHECK-NEXT:    [[GEP_VLA:%.*]] = getelementptr [[NANOS6_TASK_ARGS_FOO1]], ptr [[TMP10]], i32 0, i32 1, !dbg [[DBG26]]
; CHECK-NEXT:    store ptr [[VLA]], ptr [[GEP_VLA]], align 8, !dbg [[DBG26]]
; CHECK-NEXT:    [[CAPT_GEP_:%.*]] = getelementptr [[NANOS6_TASK_ARGS_FOO1]], ptr [[TMP10]], i32 0, i32 2, !dbg [[DBG26]]
; CHECK-NEXT:    store i64 [[TMP1]], ptr [[CAPT_GEP_]], align 8, !dbg [[DBG26]]
; CHECK-NEXT:    [[TMP11:%.*]] = load ptr, ptr [[TMP4]], align 8, !dbg [[DBG26]]
; CHECK-NEXT:    call void @nanos6_submit_task(ptr [[TMP11]]), !dbg [[DBG26]]
; CHECK-NEXT:    br label [[FINAL_END:%.*]], !dbg [[DBG26]]
; CHECK:       final.end:
; CHECK-NEXT:    [[TMP12:%.*]] = load ptr, ptr [[SAVED_STACK]], align 8, !dbg [[DBG27:![0-9]+]]
; CHECK-NEXT:    call void @llvm.stackrestore(ptr [[TMP12]]), !dbg [[DBG27]]
; CHECK-NEXT:    ret void, !dbg [[DBG27]]
; CHECK:       final.then:
; CHECK-NEXT:    br label [[FINAL_END]], !dbg [[DBG27]]
; CHECK:       final.cond:
; CHECK-NEXT:    [[TMP13:%.*]] = call i32 @nanos6_in_final(), !dbg [[DBG26]]
; CHECK-NEXT:    [[TMP14:%.*]] = icmp ne i32 [[TMP13]], 0, !dbg [[DBG26]]
; CHECK-NEXT:    br i1 [[TMP14]], label [[FINAL_THEN:%.*]], label [[CODEREPL:%.*]], !dbg [[DBG26]]
;
;
; CHECK-LABEL: define {{[^@]+}}@red_init.2
; CHECK-SAME: (ptr noundef [[TMP0:%.*]], ptr noundef [[TMP1:%.*]], i64 noundef [[TMP2:%.*]]) #[[ATTR3]] !dbg [[DBG28:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[DOTADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    [[DOTADDR1:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    [[DOTADDR2:%.*]] = alloca i64, align 8
; CHECK-NEXT:    store ptr [[TMP0]], ptr [[DOTADDR]], align 8
; CHECK-NEXT:    store ptr [[TMP1]], ptr [[DOTADDR1]], align 8
; CHECK-NEXT:    store i64 [[TMP2]], ptr [[DOTADDR2]], align 8
; CHECK-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[DOTADDR]], align 8
; CHECK-NEXT:    [[TMP4:%.*]] = load ptr, ptr [[DOTADDR1]], align 8
; CHECK-NEXT:    [[TMP5:%.*]] = load i64, ptr [[DOTADDR2]], align 8
; CHECK-NEXT:    [[TMP6:%.*]] = udiv exact i64 [[TMP5]], 4
; CHECK-NEXT:    [[ARRAYCTOR_DST_END:%.*]] = getelementptr inbounds i32, ptr [[TMP3]], i64 [[TMP6]]
; CHECK-NEXT:    br label [[ARRAYCTOR_LOOP:%.*]]
; CHECK:       arrayctor.loop:
; CHECK-NEXT:    [[ARRAYCTOR_DST_CUR:%.*]] = phi ptr [ [[TMP3]], [[ENTRY:%.*]] ], [ [[ARRAYCTOR_DST_NEXT:%.*]], [[ARRAYCTOR_LOOP]] ]
; CHECK-NEXT:    [[ARRAYCTOR_SRC_CUR:%.*]] = phi ptr [ [[TMP4]], [[ENTRY]] ], [ [[ARRAYCTOR_SRC_NEXT:%.*]], [[ARRAYCTOR_LOOP]] ]
; CHECK-NEXT:    store i32 0, ptr [[ARRAYCTOR_DST_CUR]], align 4
; CHECK-NEXT:    [[ARRAYCTOR_DST_NEXT]] = getelementptr inbounds i32, ptr [[ARRAYCTOR_DST_CUR]], i64 1
; CHECK-NEXT:    [[ARRAYCTOR_SRC_NEXT]] = getelementptr inbounds i32, ptr [[ARRAYCTOR_SRC_CUR]], i64 1
; CHECK-NEXT:    [[ARRAYCTOR_DONE:%.*]] = icmp eq ptr [[ARRAYCTOR_DST_NEXT]], [[ARRAYCTOR_DST_END]]
; CHECK-NEXT:    br i1 [[ARRAYCTOR_DONE]], label [[ARRAYCTOR_CONT:%.*]], label [[ARRAYCTOR_LOOP]]
; CHECK:       arrayctor.cont:
; CHECK-NEXT:    ret void, !dbg [[DBG29:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@red_comb.3
; CHECK-SAME: (ptr noundef [[TMP0:%.*]], ptr noundef [[TMP1:%.*]], i64 noundef [[TMP2:%.*]]) #[[ATTR3]] !dbg [[DBG31:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[DOTADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    [[DOTADDR1:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    [[DOTADDR2:%.*]] = alloca i64, align 8
; CHECK-NEXT:    store ptr [[TMP0]], ptr [[DOTADDR]], align 8
; CHECK-NEXT:    store ptr [[TMP1]], ptr [[DOTADDR1]], align 8
; CHECK-NEXT:    store i64 [[TMP2]], ptr [[DOTADDR2]], align 8
; CHECK-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[DOTADDR]], align 8
; CHECK-NEXT:    [[TMP4:%.*]] = load ptr, ptr [[DOTADDR1]], align 8
; CHECK-NEXT:    [[TMP5:%.*]] = load i64, ptr [[DOTADDR2]], align 8
; CHECK-NEXT:    [[TMP6:%.*]] = udiv exact i64 [[TMP5]], 4
; CHECK-NEXT:    [[ARRAYCTOR_DST_END:%.*]] = getelementptr inbounds i32, ptr [[TMP3]], i64 [[TMP6]]
; CHECK-NEXT:    br label [[ARRAYCTOR_LOOP:%.*]]
; CHECK:       arrayctor.loop:
; CHECK-NEXT:    [[ARRAYCTOR_DST_CUR:%.*]] = phi ptr [ [[TMP3]], [[ENTRY:%.*]] ], [ [[ARRAYCTOR_DST_NEXT:%.*]], [[ARRAYCTOR_LOOP]] ]
; CHECK-NEXT:    [[ARRAYCTOR_SRC_CUR:%.*]] = phi ptr [ [[TMP4]], [[ENTRY]] ], [ [[ARRAYCTOR_SRC_NEXT:%.*]], [[ARRAYCTOR_LOOP]] ]
; CHECK-NEXT:    [[TMP7:%.*]] = load i32, ptr [[ARRAYCTOR_DST_CUR]], align 4, !dbg [[DBG32:![0-9]+]]
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[ARRAYCTOR_SRC_CUR]], align 4, !dbg [[DBG32]]
; CHECK-NEXT:    [[ADD:%.*]] = add nsw i32 [[TMP7]], [[TMP8]], !dbg [[DBG34:![0-9]+]]
; CHECK-NEXT:    store i32 [[ADD]], ptr [[ARRAYCTOR_DST_CUR]], align 4, !dbg [[DBG34]]
; CHECK-NEXT:    [[ARRAYCTOR_DST_NEXT]] = getelementptr inbounds i32, ptr [[ARRAYCTOR_DST_CUR]], i64 1
; CHECK-NEXT:    [[ARRAYCTOR_SRC_NEXT]] = getelementptr inbounds i32, ptr [[ARRAYCTOR_SRC_CUR]], i64 1
; CHECK-NEXT:    [[ARRAYCTOR_DONE:%.*]] = icmp eq ptr [[ARRAYCTOR_DST_NEXT]], [[ARRAYCTOR_DST_END]]
; CHECK-NEXT:    br i1 [[ARRAYCTOR_DONE]], label [[ARRAYCTOR_CONT:%.*]], label [[ARRAYCTOR_LOOP]]
; CHECK:       arrayctor.cont:
; CHECK-NEXT:    ret void, !dbg [[DBG32]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_dep.4
; CHECK-SAME: (ptr [[N:%.*]]) #[[ATTR4]] !dbg [[DBG35:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[RETVAL:%.*]] = alloca [[STRUCT__DEPEND_UNPACK_T_1:%.*]], align 8
; CHECK-NEXT:    [[N_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr [[N]], ptr [[N_ADDR]], align 8
; CHECK-NEXT:    [[TMP0:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_1]], ptr [[RETVAL]], i32 0, i32 0
; CHECK-NEXT:    store ptr [[N]], ptr [[TMP0]], align 8
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_1]], ptr [[RETVAL]], i32 0, i32 1
; CHECK-NEXT:    store i64 4, ptr [[TMP1]], align 8
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_1]], ptr [[RETVAL]], i32 0, i32 2
; CHECK-NEXT:    store i64 0, ptr [[TMP2]], align 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_1]], ptr [[RETVAL]], i32 0, i32 3
; CHECK-NEXT:    store i64 4, ptr [[TMP3]], align 8
; CHECK-NEXT:    [[TMP4:%.*]] = load [[STRUCT__DEPEND_UNPACK_T_1]], ptr [[RETVAL]], align 8
; CHECK-NEXT:    ret [[STRUCT__DEPEND_UNPACK_T_1]] [[TMP4]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_dep.5
; CHECK-SAME: (ptr [[ARRAY:%.*]], i64 [[TMP0:%.*]]) #[[ATTR4]] !dbg [[DBG36:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[RETVAL:%.*]] = alloca [[STRUCT__DEPEND_UNPACK_T_2:%.*]], align 8
; CHECK-NEXT:    [[ARRAY_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    [[DOTADDR:%.*]] = alloca i64, align 8
; CHECK-NEXT:    store ptr [[ARRAY]], ptr [[ARRAY_ADDR]], align 8
; CHECK-NEXT:    store i64 [[TMP0]], ptr [[DOTADDR]], align 8
; CHECK-NEXT:    [[TMP1:%.*]] = mul i64 [[TMP0]], 4
; CHECK-NEXT:    [[TMP2:%.*]] = mul i64 [[TMP0]], 4
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_2]], ptr [[RETVAL]], i32 0, i32 0
; CHECK-NEXT:    store ptr [[ARRAY]], ptr [[TMP3]], align 8
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_2]], ptr [[RETVAL]], i32 0, i32 1
; CHECK-NEXT:    store i64 [[TMP1]], ptr [[TMP4]], align 8
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_2]], ptr [[RETVAL]], i32 0, i32 2
; CHECK-NEXT:    store i64 0, ptr [[TMP5]], align 8
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_2]], ptr [[RETVAL]], i32 0, i32 3
; CHECK-NEXT:    store i64 [[TMP2]], ptr [[TMP6]], align 8
; CHECK-NEXT:    [[TMP7:%.*]] = load [[STRUCT__DEPEND_UNPACK_T_2]], ptr [[RETVAL]], align 8
; CHECK-NEXT:    ret [[STRUCT__DEPEND_UNPACK_T_2]] [[TMP7]]
;
;
; CHECK-LABEL: define {{[^@]+}}@main
; CHECK-SAME: () #[[ATTR0]] !dbg [[DBG37:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @foo(i32 noundef 3), !dbg [[DBG38:![0-9]+]]
; CHECK-NEXT:    call void @foo1(i32 noundef 3), !dbg [[DBG39:![0-9]+]]
; CHECK-NEXT:    ret i32 0, !dbg [[DBG40:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_duplicate_foo
; CHECK-SAME: (ptr [[TASK_ARGS_SRC:%.*]], ptr [[TASK_ARGS_DST:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[TASK_ARGS_DST]], align 8
; CHECK-NEXT:    [[ARGS_END:%.*]] = getelementptr i8, ptr [[TMP0]], i64 32
; CHECK-NEXT:    [[GEP_SRC_N_ADDR:%.*]] = getelementptr [[NANOS6_TASK_ARGS_FOO:%.*]], ptr [[TASK_ARGS_SRC]], i32 0, i32 0
; CHECK-NEXT:    [[GEP_DST_N_ADDR:%.*]] = getelementptr [[NANOS6_TASK_ARGS_FOO]], ptr [[TMP0]], i32 0, i32 0
; CHECK-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[GEP_SRC_N_ADDR]], align 8
; CHECK-NEXT:    store ptr [[TMP1]], ptr [[GEP_DST_N_ADDR]], align 8
; CHECK-NEXT:    [[GEP_SRC_VLA:%.*]] = getelementptr [[NANOS6_TASK_ARGS_FOO]], ptr [[TASK_ARGS_SRC]], i32 0, i32 1
; CHECK-NEXT:    [[GEP_DST_VLA:%.*]] = getelementptr [[NANOS6_TASK_ARGS_FOO]], ptr [[TMP0]], i32 0, i32 1
; CHECK-NEXT:    [[TMP2:%.*]] = load ptr, ptr [[GEP_SRC_VLA]], align 8
; CHECK-NEXT:    store ptr [[TMP2]], ptr [[GEP_DST_VLA]], align 8
; CHECK-NEXT:    [[CAPT_GEP_SRC_:%.*]] = getelementptr [[NANOS6_TASK_ARGS_FOO]], ptr [[TASK_ARGS_SRC]], i32 0, i32 2
; CHECK-NEXT:    [[CAPT_GEP_DST_:%.*]] = getelementptr [[NANOS6_TASK_ARGS_FOO]], ptr [[TMP0]], i32 0, i32 2
; CHECK-NEXT:    [[TMP3:%.*]] = load i64, ptr [[CAPT_GEP_SRC_]], align 8
; CHECK-NEXT:    store i64 [[TMP3]], ptr [[CAPT_GEP_DST_]], align 8
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_unpacked_task_region_foo
; CHECK-SAME: (ptr [[N_ADDR:%.*]], ptr [[VLA:%.*]], i64 [[TMP0:%.*]], ptr [[DEVICE_ENV:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) !dbg [[DBG41:![0-9]+]] {
; CHECK-NEXT:  newFuncRoot:
; CHECK-NEXT:    br label [[TMP1:%.*]], !dbg [[DBG42:![0-9]+]]
; CHECK:       1:
; CHECK-NEXT:    br label [[DOTEXITSTUB:%.*]], !dbg [[DBG43:![0-9]+]]
; CHECK:       .exitStub:
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_task_region_foo
; CHECK-SAME: (ptr [[TASK_ARGS:%.*]], ptr [[DEVICE_ENV:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_N_ADDR:%.*]] = getelementptr [[NANOS6_TASK_ARGS_FOO:%.*]], ptr [[TASK_ARGS]], i32 0, i32 0
; CHECK-NEXT:    [[LOAD_GEP_N_ADDR:%.*]] = load ptr, ptr [[GEP_N_ADDR]], align 8
; CHECK-NEXT:    [[GEP_VLA:%.*]] = getelementptr [[NANOS6_TASK_ARGS_FOO]], ptr [[TASK_ARGS]], i32 0, i32 1
; CHECK-NEXT:    [[LOAD_GEP_VLA:%.*]] = load ptr, ptr [[GEP_VLA]], align 8
; CHECK-NEXT:    [[CAPT_GEP:%.*]] = getelementptr [[NANOS6_TASK_ARGS_FOO]], ptr [[TASK_ARGS]], i32 0, i32 2
; CHECK-NEXT:    [[LOAD_CAPT_GEP:%.*]] = load i64, ptr [[CAPT_GEP]], align 8
; CHECK-NEXT:    [[TLATE_LOAD_GEP_N_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr [[LOAD_GEP_N_ADDR]], ptr [[TLATE_LOAD_GEP_N_ADDR]], align 8
; CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[TLATE_LOAD_GEP_N_ADDR]], align 8
; CHECK-NEXT:    [[TLATE_LOAD_GEP_VLA:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr [[LOAD_GEP_VLA]], ptr [[TLATE_LOAD_GEP_VLA]], align 8
; CHECK-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[TLATE_LOAD_GEP_VLA]], align 8
; CHECK-NEXT:    [[TMP2:%.*]] = icmp ne ptr [[ADDRESS_TRANSLATION_TABLE]], null
; CHECK-NEXT:    br i1 [[TMP2]], label [[TMP3:%.*]], label [[TMP14:%.*]]
; CHECK:       3:
; CHECK-NEXT:    [[LOCAL_LOOKUP_N_ADDR:%.*]] = getelementptr [[NANOS6_ADDRESS_TRANSLATION_ENTRY_T:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE]], i32 0, i32 0
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[LOCAL_LOOKUP_N_ADDR]], align 8
; CHECK-NEXT:    [[DEVICE_LOOKUP_N_ADDR:%.*]] = getelementptr [[NANOS6_ADDRESS_TRANSLATION_ENTRY_T]], ptr [[ADDRESS_TRANSLATION_TABLE]], i32 0, i32 1
; CHECK-NEXT:    [[TMP5:%.*]] = load i64, ptr [[DEVICE_LOOKUP_N_ADDR]], align 8
; CHECK-NEXT:    [[TMP6:%.*]] = sub i64 0, [[TMP4]]
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[TMP0]], i64 [[TMP6]]
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[TMP7]], i64 [[TMP5]]
; CHECK-NEXT:    store ptr [[TMP8]], ptr [[TLATE_LOAD_GEP_N_ADDR]], align 8
; CHECK-NEXT:    [[LOCAL_LOOKUP_VLA:%.*]] = getelementptr [[NANOS6_ADDRESS_TRANSLATION_ENTRY_T]], ptr [[ADDRESS_TRANSLATION_TABLE]], i32 1, i32 0
; CHECK-NEXT:    [[TMP9:%.*]] = load i64, ptr [[LOCAL_LOOKUP_VLA]], align 8
; CHECK-NEXT:    [[DEVICE_LOOKUP_VLA:%.*]] = getelementptr [[NANOS6_ADDRESS_TRANSLATION_ENTRY_T]], ptr [[ADDRESS_TRANSLATION_TABLE]], i32 1, i32 1
; CHECK-NEXT:    [[TMP10:%.*]] = load i64, ptr [[DEVICE_LOOKUP_VLA]], align 8
; CHECK-NEXT:    [[TMP11:%.*]] = sub i64 0, [[TMP9]]
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr i8, ptr [[TMP1]], i64 [[TMP11]]
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr [[TMP12]], i64 [[TMP10]]
; CHECK-NEXT:    store ptr [[TMP13]], ptr [[TLATE_LOAD_GEP_VLA]], align 8
; CHECK-NEXT:    br label [[TMP14]]
; CHECK:       14:
; CHECK-NEXT:    [[TMP15:%.*]] = load ptr, ptr [[TLATE_LOAD_GEP_N_ADDR]], align 8
; CHECK-NEXT:    [[TMP16:%.*]] = load ptr, ptr [[TLATE_LOAD_GEP_VLA]], align 8
; CHECK-NEXT:    call void @nanos6_unpacked_task_region_foo(ptr [[TMP15]], ptr [[TMP16]], i64 [[LOAD_CAPT_GEP]], ptr [[DEVICE_ENV]], ptr [[ADDRESS_TRANSLATION_TABLE]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_unpacked_deps_foo
; CHECK-SAME: (ptr [[N_ADDR:%.*]], ptr [[VLA:%.*]], i64 [[TMP0:%.*]], ptr [[LOOP_BOUNDS:%.*]], ptr [[HANDLER:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP1:%.*]] = call [[STRUCT__DEPEND_UNPACK_T:%.*]] @compute_dep(ptr [[N_ADDR]])
; CHECK-NEXT:    [[TMP2:%.*]] = call [[STRUCT__DEPEND_UNPACK_T]] @compute_dep(ptr [[N_ADDR]])
; CHECK-NEXT:    [[TMP3:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T]] [[TMP1]], 0
; CHECK-NEXT:    [[TMP4:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T]] [[TMP1]], 1
; CHECK-NEXT:    [[TMP5:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T]] [[TMP1]], 2
; CHECK-NEXT:    [[TMP6:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T]] [[TMP2]], 3
; CHECK-NEXT:    call void @nanos6_register_region_reduction_depinfo1(i32 -1, i32 0, ptr [[HANDLER]], i32 0, ptr @[[GLOB1:[0-9]+]], ptr [[TMP3]], i64 [[TMP4]], i64 [[TMP5]], i64 [[TMP6]])
; CHECK-NEXT:    [[TMP7:%.*]] = call [[STRUCT__DEPEND_UNPACK_T_0:%.*]] @compute_dep.1(ptr [[VLA]], i64 [[TMP0]])
; CHECK-NEXT:    [[TMP8:%.*]] = call [[STRUCT__DEPEND_UNPACK_T_0]] @compute_dep.1(ptr [[VLA]], i64 [[TMP0]])
; CHECK-NEXT:    [[TMP9:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_0]] [[TMP7]], 0
; CHECK-NEXT:    [[TMP10:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_0]] [[TMP7]], 1
; CHECK-NEXT:    [[TMP11:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_0]] [[TMP7]], 2
; CHECK-NEXT:    [[TMP12:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_0]] [[TMP8]], 3
; CHECK-NEXT:    call void @nanos6_register_region_reduction_depinfo1(i32 -1, i32 0, ptr [[HANDLER]], i32 1, ptr @[[GLOB2:[0-9]+]], ptr [[TMP9]], i64 [[TMP10]], i64 [[TMP11]], i64 [[TMP12]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_deps_foo
; CHECK-SAME: (ptr [[TASK_ARGS:%.*]], ptr [[LOOP_BOUNDS:%.*]], ptr [[HANDLER:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_N_ADDR:%.*]] = getelementptr [[NANOS6_TASK_ARGS_FOO:%.*]], ptr [[TASK_ARGS]], i32 0, i32 0
; CHECK-NEXT:    [[LOAD_GEP_N_ADDR:%.*]] = load ptr, ptr [[GEP_N_ADDR]], align 8
; CHECK-NEXT:    [[GEP_VLA:%.*]] = getelementptr [[NANOS6_TASK_ARGS_FOO]], ptr [[TASK_ARGS]], i32 0, i32 1
; CHECK-NEXT:    [[LOAD_GEP_VLA:%.*]] = load ptr, ptr [[GEP_VLA]], align 8
; CHECK-NEXT:    [[CAPT_GEP:%.*]] = getelementptr [[NANOS6_TASK_ARGS_FOO]], ptr [[TASK_ARGS]], i32 0, i32 2
; CHECK-NEXT:    [[LOAD_CAPT_GEP:%.*]] = load i64, ptr [[CAPT_GEP]], align 8
; CHECK-NEXT:    call void @nanos6_unpacked_deps_foo(ptr [[LOAD_GEP_N_ADDR]], ptr [[LOAD_GEP_VLA]], i64 [[LOAD_CAPT_GEP]], ptr [[LOOP_BOUNDS]], ptr [[HANDLER]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_constructor_register_task_info() {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @nanos6_register_task_info(ptr @task_info_var_foo)
; CHECK-NEXT:    call void @nanos6_register_task_info(ptr @task_info_var_foo1)
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_duplicate_foo1
; CHECK-SAME: (ptr [[TASK_ARGS_SRC:%.*]], ptr [[TASK_ARGS_DST:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[TASK_ARGS_DST]], align 8
; CHECK-NEXT:    [[ARGS_END:%.*]] = getelementptr i8, ptr [[TMP0]], i64 32
; CHECK-NEXT:    [[GEP_SRC_N_ADDR:%.*]] = getelementptr [[NANOS6_TASK_ARGS_FOO1:%.*]], ptr [[TASK_ARGS_SRC]], i32 0, i32 0
; CHECK-NEXT:    [[GEP_DST_N_ADDR:%.*]] = getelementptr [[NANOS6_TASK_ARGS_FOO1]], ptr [[TMP0]], i32 0, i32 0
; CHECK-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[GEP_SRC_N_ADDR]], align 8
; CHECK-NEXT:    store ptr [[TMP1]], ptr [[GEP_DST_N_ADDR]], align 8
; CHECK-NEXT:    [[GEP_SRC_VLA:%.*]] = getelementptr [[NANOS6_TASK_ARGS_FOO1]], ptr [[TASK_ARGS_SRC]], i32 0, i32 1
; CHECK-NEXT:    [[GEP_DST_VLA:%.*]] = getelementptr [[NANOS6_TASK_ARGS_FOO1]], ptr [[TMP0]], i32 0, i32 1
; CHECK-NEXT:    [[TMP2:%.*]] = load ptr, ptr [[GEP_SRC_VLA]], align 8
; CHECK-NEXT:    store ptr [[TMP2]], ptr [[GEP_DST_VLA]], align 8
; CHECK-NEXT:    [[CAPT_GEP_SRC_:%.*]] = getelementptr [[NANOS6_TASK_ARGS_FOO1]], ptr [[TASK_ARGS_SRC]], i32 0, i32 2
; CHECK-NEXT:    [[CAPT_GEP_DST_:%.*]] = getelementptr [[NANOS6_TASK_ARGS_FOO1]], ptr [[TMP0]], i32 0, i32 2
; CHECK-NEXT:    [[TMP3:%.*]] = load i64, ptr [[CAPT_GEP_SRC_]], align 8
; CHECK-NEXT:    store i64 [[TMP3]], ptr [[CAPT_GEP_DST_]], align 8
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_unpacked_task_region_foo1
; CHECK-SAME: (ptr [[N_ADDR:%.*]], ptr [[VLA:%.*]], i64 [[TMP0:%.*]], ptr [[DEVICE_ENV:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) !dbg [[DBG44:![0-9]+]] {
; CHECK-NEXT:  newFuncRoot:
; CHECK-NEXT:    br label [[TMP1:%.*]], !dbg [[DBG45:![0-9]+]]
; CHECK:       1:
; CHECK-NEXT:    br label [[DOTEXITSTUB:%.*]], !dbg [[DBG46:![0-9]+]]
; CHECK:       .exitStub:
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_task_region_foo1
; CHECK-SAME: (ptr [[TASK_ARGS:%.*]], ptr [[DEVICE_ENV:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_N_ADDR:%.*]] = getelementptr [[NANOS6_TASK_ARGS_FOO1:%.*]], ptr [[TASK_ARGS]], i32 0, i32 0
; CHECK-NEXT:    [[LOAD_GEP_N_ADDR:%.*]] = load ptr, ptr [[GEP_N_ADDR]], align 8
; CHECK-NEXT:    [[GEP_VLA:%.*]] = getelementptr [[NANOS6_TASK_ARGS_FOO1]], ptr [[TASK_ARGS]], i32 0, i32 1
; CHECK-NEXT:    [[LOAD_GEP_VLA:%.*]] = load ptr, ptr [[GEP_VLA]], align 8
; CHECK-NEXT:    [[CAPT_GEP:%.*]] = getelementptr [[NANOS6_TASK_ARGS_FOO1]], ptr [[TASK_ARGS]], i32 0, i32 2
; CHECK-NEXT:    [[LOAD_CAPT_GEP:%.*]] = load i64, ptr [[CAPT_GEP]], align 8
; CHECK-NEXT:    [[TLATE_LOAD_GEP_N_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr [[LOAD_GEP_N_ADDR]], ptr [[TLATE_LOAD_GEP_N_ADDR]], align 8
; CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[TLATE_LOAD_GEP_N_ADDR]], align 8
; CHECK-NEXT:    [[TLATE_LOAD_GEP_VLA:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr [[LOAD_GEP_VLA]], ptr [[TLATE_LOAD_GEP_VLA]], align 8
; CHECK-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[TLATE_LOAD_GEP_VLA]], align 8
; CHECK-NEXT:    [[TMP2:%.*]] = icmp ne ptr [[ADDRESS_TRANSLATION_TABLE]], null
; CHECK-NEXT:    br i1 [[TMP2]], label [[TMP3:%.*]], label [[TMP14:%.*]]
; CHECK:       3:
; CHECK-NEXT:    [[LOCAL_LOOKUP_N_ADDR:%.*]] = getelementptr [[NANOS6_ADDRESS_TRANSLATION_ENTRY_T:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE]], i32 0, i32 0
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[LOCAL_LOOKUP_N_ADDR]], align 8
; CHECK-NEXT:    [[DEVICE_LOOKUP_N_ADDR:%.*]] = getelementptr [[NANOS6_ADDRESS_TRANSLATION_ENTRY_T]], ptr [[ADDRESS_TRANSLATION_TABLE]], i32 0, i32 1
; CHECK-NEXT:    [[TMP5:%.*]] = load i64, ptr [[DEVICE_LOOKUP_N_ADDR]], align 8
; CHECK-NEXT:    [[TMP6:%.*]] = sub i64 0, [[TMP4]]
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[TMP0]], i64 [[TMP6]]
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[TMP7]], i64 [[TMP5]]
; CHECK-NEXT:    store ptr [[TMP8]], ptr [[TLATE_LOAD_GEP_N_ADDR]], align 8
; CHECK-NEXT:    [[LOCAL_LOOKUP_VLA:%.*]] = getelementptr [[NANOS6_ADDRESS_TRANSLATION_ENTRY_T]], ptr [[ADDRESS_TRANSLATION_TABLE]], i32 1, i32 0
; CHECK-NEXT:    [[TMP9:%.*]] = load i64, ptr [[LOCAL_LOOKUP_VLA]], align 8
; CHECK-NEXT:    [[DEVICE_LOOKUP_VLA:%.*]] = getelementptr [[NANOS6_ADDRESS_TRANSLATION_ENTRY_T]], ptr [[ADDRESS_TRANSLATION_TABLE]], i32 1, i32 1
; CHECK-NEXT:    [[TMP10:%.*]] = load i64, ptr [[DEVICE_LOOKUP_VLA]], align 8
; CHECK-NEXT:    [[TMP11:%.*]] = sub i64 0, [[TMP9]]
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr i8, ptr [[TMP1]], i64 [[TMP11]]
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr [[TMP12]], i64 [[TMP10]]
; CHECK-NEXT:    store ptr [[TMP13]], ptr [[TLATE_LOAD_GEP_VLA]], align 8
; CHECK-NEXT:    br label [[TMP14]]
; CHECK:       14:
; CHECK-NEXT:    [[TMP15:%.*]] = load ptr, ptr [[TLATE_LOAD_GEP_N_ADDR]], align 8
; CHECK-NEXT:    [[TMP16:%.*]] = load ptr, ptr [[TLATE_LOAD_GEP_VLA]], align 8
; CHECK-NEXT:    call void @nanos6_unpacked_task_region_foo1(ptr [[TMP15]], ptr [[TMP16]], i64 [[LOAD_CAPT_GEP]], ptr [[DEVICE_ENV]], ptr [[ADDRESS_TRANSLATION_TABLE]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_unpacked_deps_foo1
; CHECK-SAME: (ptr [[N_ADDR:%.*]], ptr [[VLA:%.*]], i64 [[TMP0:%.*]], ptr [[LOOP_BOUNDS:%.*]], ptr [[HANDLER:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP1:%.*]] = call [[STRUCT__DEPEND_UNPACK_T_1:%.*]] @compute_dep.4(ptr [[N_ADDR]])
; CHECK-NEXT:    [[TMP2:%.*]] = call [[STRUCT__DEPEND_UNPACK_T_1]] @compute_dep.4(ptr [[N_ADDR]])
; CHECK-NEXT:    [[TMP3:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_1]] [[TMP1]], 0
; CHECK-NEXT:    [[TMP4:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_1]] [[TMP1]], 1
; CHECK-NEXT:    [[TMP5:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_1]] [[TMP1]], 2
; CHECK-NEXT:    [[TMP6:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_1]] [[TMP2]], 3
; CHECK-NEXT:    call void @nanos6_register_region_reduction_depinfo1(i32 6000, i32 0, ptr [[HANDLER]], i32 0, ptr @[[GLOB4:[0-9]+]], ptr [[TMP3]], i64 [[TMP4]], i64 [[TMP5]], i64 [[TMP6]])
; CHECK-NEXT:    [[TMP7:%.*]] = call [[STRUCT__DEPEND_UNPACK_T_2:%.*]] @compute_dep.5(ptr [[VLA]], i64 [[TMP0]])
; CHECK-NEXT:    [[TMP8:%.*]] = call [[STRUCT__DEPEND_UNPACK_T_2]] @compute_dep.5(ptr [[VLA]], i64 [[TMP0]])
; CHECK-NEXT:    [[TMP9:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_2]] [[TMP7]], 0
; CHECK-NEXT:    [[TMP10:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_2]] [[TMP7]], 1
; CHECK-NEXT:    [[TMP11:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_2]] [[TMP7]], 2
; CHECK-NEXT:    [[TMP12:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_2]] [[TMP8]], 3
; CHECK-NEXT:    call void @nanos6_register_region_reduction_depinfo1(i32 6000, i32 0, ptr [[HANDLER]], i32 1, ptr @[[GLOB5:[0-9]+]], ptr [[TMP9]], i64 [[TMP10]], i64 [[TMP11]], i64 [[TMP12]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_deps_foo1
; CHECK-SAME: (ptr [[TASK_ARGS:%.*]], ptr [[LOOP_BOUNDS:%.*]], ptr [[HANDLER:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_N_ADDR:%.*]] = getelementptr [[NANOS6_TASK_ARGS_FOO1:%.*]], ptr [[TASK_ARGS]], i32 0, i32 0
; CHECK-NEXT:    [[LOAD_GEP_N_ADDR:%.*]] = load ptr, ptr [[GEP_N_ADDR]], align 8
; CHECK-NEXT:    [[GEP_VLA:%.*]] = getelementptr [[NANOS6_TASK_ARGS_FOO1]], ptr [[TASK_ARGS]], i32 0, i32 1
; CHECK-NEXT:    [[LOAD_GEP_VLA:%.*]] = load ptr, ptr [[GEP_VLA]], align 8
; CHECK-NEXT:    [[CAPT_GEP:%.*]] = getelementptr [[NANOS6_TASK_ARGS_FOO1]], ptr [[TASK_ARGS]], i32 0, i32 2
; CHECK-NEXT:    [[LOAD_CAPT_GEP:%.*]] = load i64, ptr [[CAPT_GEP]], align 8
; CHECK-NEXT:    call void @nanos6_unpacked_deps_foo1(ptr [[LOAD_GEP_N_ADDR]], ptr [[LOAD_GEP_VLA]], i64 [[LOAD_CAPT_GEP]], ptr [[LOOP_BOUNDS]], ptr [[HANDLER]])
; CHECK-NEXT:    ret void
;
