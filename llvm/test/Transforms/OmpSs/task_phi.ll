; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --function-signature --include-generated-funcs
; RUN: opt %s -passes=ompss-2 -S | FileCheck %s
; ModuleID = 'task_phi.c'
source_filename = "task_phi.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; void fold_if(int a, int b) {
;     #pragma oss task final(1)
;     {
;     int l = a || b;
;     if (l == 3)
;         l++;
;     else l--;
;     }
;     #pragma oss taskwait
; }
; int main() {
;     fold_if(1, 2);
; }

; Function Attrs: noinline nounwind optnone
define dso_local void @fold_if(i32 noundef %a, i32 noundef %b) #0 !dbg !5 {
entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, ptr %a.addr, align 4
  store i32 %b, ptr %b.addr, align 4
  %0 = call token @llvm.directive.region.entry() [ "DIR.OSS"([5 x i8] c"TASK\00"), "QUAL.OSS.FIRSTPRIVATE"(ptr %a.addr, i32 undef), "QUAL.OSS.FIRSTPRIVATE"(ptr %b.addr, i32 undef), "QUAL.OSS.FINAL"(i1 true) ], !dbg !9
  %l = alloca i32, align 4
  %1 = load i32, ptr %a.addr, align 4, !dbg !10
  %tobool = icmp ne i32 %1, 0, !dbg !10
  br i1 %tobool, label %lor.end, label %lor.rhs, !dbg !11

lor.rhs:                                          ; preds = %entry
  %2 = load i32, ptr %b.addr, align 4, !dbg !12
  %tobool1 = icmp ne i32 %2, 0, !dbg !11
  br label %lor.end, !dbg !11

lor.end:                                          ; preds = %lor.rhs, %entry
  %3 = phi i1 [ true, %entry ], [ %tobool1, %lor.rhs ]
  %lor.ext = zext i1 %3 to i32, !dbg !11
  store i32 %lor.ext, ptr %l, align 4, !dbg !13
  %4 = load i32, ptr %l, align 4, !dbg !14
  %cmp = icmp eq i32 %4, 3, !dbg !15
  br i1 %cmp, label %if.then, label %if.else, !dbg !14

if.then:                                          ; preds = %lor.end
  %5 = load i32, ptr %l, align 4, !dbg !16
  %inc = add nsw i32 %5, 1, !dbg !16
  store i32 %inc, ptr %l, align 4, !dbg !16
  br label %if.end, !dbg !17

if.else:                                          ; preds = %lor.end
  %6 = load i32, ptr %l, align 4, !dbg !18
  %dec = add nsw i32 %6, -1, !dbg !18
  store i32 %dec, ptr %l, align 4, !dbg !18
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  call void @llvm.directive.region.exit(token %0), !dbg !19
  %7 = call i1 @llvm.directive.marker() [ "DIR.OSS"([9 x i8] c"TASKWAIT\00") ], !dbg !20
  ret void, !dbg !21
}

; Function Attrs: nounwind
declare token @llvm.directive.region.entry() #1

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token) #1

; Function Attrs: nounwind
declare i1 @llvm.directive.marker() #1

; Function Attrs: noinline nounwind optnone
define dso_local i32 @main() #0 !dbg !22 {
entry:
  call void @fold_if(i32 noundef 1, i32 noundef 2), !dbg !23
  ret i32 0, !dbg !24
}

attributes #0 = { noinline nounwind optnone "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
attributes #1 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "", isOptimized: false, runtimeVersion: 0, emissionKind: NoDebug, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "<stdin>", directory: "")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 1, !"wchar_size", i32 4}
!4 = !{!""}
!5 = distinct !DISubprogram(name: "fold_if", scope: !6, file: !6, line: 1, type: !7, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !8)
!6 = !DIFile(filename: "task_phi.ll", directory: "")
!7 = !DISubroutineType(types: !8)
!8 = !{}
!9 = !DILocation(line: 2, column: 13, scope: !5)
!10 = !DILocation(line: 4, column: 13, scope: !5)
!11 = !DILocation(line: 4, column: 15, scope: !5)
!12 = !DILocation(line: 4, column: 18, scope: !5)
!13 = !DILocation(line: 4, column: 9, scope: !5)
!14 = !DILocation(line: 5, column: 9, scope: !5)
!15 = !DILocation(line: 5, column: 11, scope: !5)
!16 = !DILocation(line: 6, column: 10, scope: !5)
!17 = !DILocation(line: 6, column: 9, scope: !5)
!18 = !DILocation(line: 7, column: 11, scope: !5)
!19 = !DILocation(line: 8, column: 5, scope: !5)
!20 = !DILocation(line: 9, column: 13, scope: !5)
!21 = !DILocation(line: 10, column: 1, scope: !5)
!22 = distinct !DISubprogram(name: "main", scope: !6, file: !6, line: 11, type: !7, scopeLine: 11, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !8)
!23 = !DILocation(line: 12, column: 5, scope: !22)
!24 = !DILocation(line: 13, column: 1, scope: !22)
; CHECK-LABEL: define {{[^@]+}}@fold_if
; CHECK-SAME: (i32 noundef [[A:%.*]], i32 noundef [[B:%.*]]) #[[ATTR0:[0-9]+]] !dbg [[DBG5:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[A_ADDR:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[B_ADDR:%.*]] = alloca i32, align 4
; CHECK-NEXT:    store i32 [[A]], ptr [[A_ADDR]], align 4
; CHECK-NEXT:    store i32 [[B]], ptr [[B_ADDR]], align 4
; CHECK-NEXT:    [[TMP0:%.*]] = alloca ptr, align 8, !dbg [[DBG9:![0-9]+]]
; CHECK-NEXT:    [[TMP1:%.*]] = alloca ptr, align 8, !dbg [[DBG9]]
; CHECK-NEXT:    [[NUM_DEPS:%.*]] = alloca i64, align 8, !dbg [[DBG9]]
; CHECK-NEXT:    br label [[FINAL_COND:%.*]], !dbg [[DBG9]]
; CHECK:       codeRepl:
; CHECK-NEXT:    store i64 0, ptr [[NUM_DEPS]], align 8, !dbg [[DBG9]]
; CHECK-NEXT:    [[TMP2:%.*]] = load i64, ptr [[NUM_DEPS]], align 8, !dbg [[DBG9]]
; CHECK-NEXT:    call void @nanos6_create_task(ptr @task_info_var_fold_if, ptr @task_invocation_info_fold_if, ptr null, i64 16, ptr [[TMP0]], ptr [[TMP1]], i64 1, i64 [[TMP2]]), !dbg [[DBG9]]
; CHECK-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[TMP0]], align 8, !dbg [[DBG9]]
; CHECK-NEXT:    [[ARGS_END:%.*]] = getelementptr i8, ptr [[TMP3]], i64 16, !dbg [[DBG9]]
; CHECK-NEXT:    [[GEP_A_ADDR:%.*]] = getelementptr [[NANOS6_TASK_ARGS_FOLD_IF:%.*]], ptr [[TMP3]], i32 0, i32 0, !dbg [[DBG9]]
; CHECK-NEXT:    call void @llvm.memcpy.p0.p0.i64(ptr align 4 [[GEP_A_ADDR]], ptr align 4 [[A_ADDR]], i64 4, i1 false), !dbg [[DBG9]]
; CHECK-NEXT:    [[GEP_B_ADDR:%.*]] = getelementptr [[NANOS6_TASK_ARGS_FOLD_IF]], ptr [[TMP3]], i32 0, i32 1, !dbg [[DBG9]]
; CHECK-NEXT:    call void @llvm.memcpy.p0.p0.i64(ptr align 4 [[GEP_B_ADDR]], ptr align 4 [[B_ADDR]], i64 4, i1 false), !dbg [[DBG9]]
; CHECK-NEXT:    [[TMP4:%.*]] = load ptr, ptr [[TMP1]], align 8, !dbg [[DBG9]]
; CHECK-NEXT:    call void @nanos6_submit_task(ptr [[TMP4]]), !dbg [[DBG9]]
; CHECK-NEXT:    br label [[FINAL_END:%.*]], !dbg [[DBG9]]
; CHECK:       final.end:
; CHECK-NEXT:    call void @nanos6_taskwait(ptr @[[GLOB1:[0-9]+]]), !dbg [[DBG10:![0-9]+]]
; CHECK-NEXT:    ret void, !dbg [[DBG11:![0-9]+]]
; CHECK:       final.then:
; CHECK-NEXT:    [[L_CLONE:%.*]] = alloca i32, align 4, !dbg [[DBG9]]
; CHECK-NEXT:    [[TMP5:%.*]] = load i32, ptr [[A_ADDR]], align 4, !dbg [[DBG12:![0-9]+]]
; CHECK-NEXT:    [[TOBOOL_CLONE:%.*]] = icmp ne i32 [[TMP5]], 0, !dbg [[DBG12]]
; CHECK-NEXT:    br i1 [[TOBOOL_CLONE]], label [[LOR_END_CLONE:%.*]], label [[LOR_RHS_CLONE:%.*]], !dbg [[DBG13:![0-9]+]]
; CHECK:       lor.end.clone:
; CHECK-NEXT:    [[TMP6:%.*]] = phi i1 [ true, [[FINAL_THEN:%.*]] ], [ [[TOBOOL1_CLONE:%.*]], [[LOR_RHS_CLONE]] ]
; CHECK-NEXT:    [[LOR_EXT_CLONE:%.*]] = zext i1 [[TMP6]] to i32, !dbg [[DBG13]]
; CHECK-NEXT:    store i32 [[LOR_EXT_CLONE]], ptr [[L_CLONE]], align 4, !dbg [[DBG14:![0-9]+]]
; CHECK-NEXT:    [[TMP7:%.*]] = load i32, ptr [[L_CLONE]], align 4, !dbg [[DBG15:![0-9]+]]
; CHECK-NEXT:    [[CMP_CLONE:%.*]] = icmp eq i32 [[TMP7]], 3, !dbg [[DBG16:![0-9]+]]
; CHECK-NEXT:    br i1 [[CMP_CLONE]], label [[IF_THEN_CLONE:%.*]], label [[IF_ELSE_CLONE:%.*]], !dbg [[DBG15]]
; CHECK:       lor.rhs.clone:
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[B_ADDR]], align 4, !dbg [[DBG17:![0-9]+]]
; CHECK-NEXT:    [[TOBOOL1_CLONE]] = icmp ne i32 [[TMP8]], 0, !dbg [[DBG13]]
; CHECK-NEXT:    br label [[LOR_END_CLONE]], !dbg [[DBG13]]
; CHECK:       if.then.clone:
; CHECK-NEXT:    [[TMP9:%.*]] = load i32, ptr [[L_CLONE]], align 4, !dbg [[DBG18:![0-9]+]]
; CHECK-NEXT:    [[INC_CLONE:%.*]] = add nsw i32 [[TMP9]], 1, !dbg [[DBG18]]
; CHECK-NEXT:    store i32 [[INC_CLONE]], ptr [[L_CLONE]], align 4, !dbg [[DBG18]]
; CHECK-NEXT:    br label [[IF_END_CLONE:%.*]], !dbg [[DBG19:![0-9]+]]
; CHECK:       if.else.clone:
; CHECK-NEXT:    [[TMP10:%.*]] = load i32, ptr [[L_CLONE]], align 4, !dbg [[DBG20:![0-9]+]]
; CHECK-NEXT:    [[DEC_CLONE:%.*]] = add nsw i32 [[TMP10]], -1, !dbg [[DBG20]]
; CHECK-NEXT:    store i32 [[DEC_CLONE]], ptr [[L_CLONE]], align 4, !dbg [[DBG20]]
; CHECK-NEXT:    br label [[IF_END_CLONE]]
; CHECK:       if.end.clone:
; CHECK-NEXT:    br label [[FINAL_END]], !dbg [[DBG10]]
; CHECK:       final.cond:
; CHECK-NEXT:    [[TMP11:%.*]] = call i32 @nanos6_in_final(), !dbg [[DBG9]]
; CHECK-NEXT:    [[TMP12:%.*]] = icmp ne i32 [[TMP11]], 0, !dbg [[DBG9]]
; CHECK-NEXT:    br i1 [[TMP12]], label [[FINAL_THEN]], label [[CODEREPL:%.*]], !dbg [[DBG9]]
;
;
; CHECK-LABEL: define {{[^@]+}}@main
; CHECK-SAME: () #[[ATTR0]] !dbg [[DBG21:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @fold_if(i32 noundef 1, i32 noundef 2), !dbg [[DBG22:![0-9]+]]
; CHECK-NEXT:    ret i32 0, !dbg [[DBG23:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_unpacked_task_region_fold_if
; CHECK-SAME: (ptr [[A_ADDR:%.*]], ptr [[B_ADDR:%.*]], ptr [[DEVICE_ENV:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) !dbg [[DBG24:![0-9]+]] {
; CHECK-NEXT:  newFuncRoot:
; CHECK-NEXT:    br label [[TMP0:%.*]], !dbg [[DBG25:![0-9]+]]
; CHECK:       0:
; CHECK-NEXT:    [[L:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[TMP1:%.*]] = load i32, ptr [[A_ADDR]], align 4, !dbg [[DBG26:![0-9]+]]
; CHECK-NEXT:    [[TOBOOL:%.*]] = icmp ne i32 [[TMP1]], 0, !dbg [[DBG26]]
; CHECK-NEXT:    br i1 [[TOBOOL]], label [[LOR_END:%.*]], label [[LOR_RHS:%.*]], !dbg [[DBG27:![0-9]+]]
; CHECK:       lor.end:
; CHECK-NEXT:    [[TMP2:%.*]] = phi i1 [ true, [[TMP0]] ], [ [[TOBOOL1:%.*]], [[LOR_RHS]] ]
; CHECK-NEXT:    [[LOR_EXT:%.*]] = zext i1 [[TMP2]] to i32, !dbg [[DBG27]]
; CHECK-NEXT:    store i32 [[LOR_EXT]], ptr [[L]], align 4, !dbg [[DBG28:![0-9]+]]
; CHECK-NEXT:    [[TMP3:%.*]] = load i32, ptr [[L]], align 4, !dbg [[DBG29:![0-9]+]]
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i32 [[TMP3]], 3, !dbg [[DBG30:![0-9]+]]
; CHECK-NEXT:    br i1 [[CMP]], label [[IF_THEN:%.*]], label [[IF_ELSE:%.*]], !dbg [[DBG29]]
; CHECK:       lor.rhs:
; CHECK-NEXT:    [[TMP4:%.*]] = load i32, ptr [[B_ADDR]], align 4, !dbg [[DBG31:![0-9]+]]
; CHECK-NEXT:    [[TOBOOL1]] = icmp ne i32 [[TMP4]], 0, !dbg [[DBG27]]
; CHECK-NEXT:    br label [[LOR_END]], !dbg [[DBG27]]
; CHECK:       if.then:
; CHECK-NEXT:    [[TMP5:%.*]] = load i32, ptr [[L]], align 4, !dbg [[DBG32:![0-9]+]]
; CHECK-NEXT:    [[INC:%.*]] = add nsw i32 [[TMP5]], 1, !dbg [[DBG32]]
; CHECK-NEXT:    store i32 [[INC]], ptr [[L]], align 4, !dbg [[DBG32]]
; CHECK-NEXT:    br label [[IF_END:%.*]], !dbg [[DBG33:![0-9]+]]
; CHECK:       if.else:
; CHECK-NEXT:    [[TMP6:%.*]] = load i32, ptr [[L]], align 4, !dbg [[DBG34:![0-9]+]]
; CHECK-NEXT:    [[DEC:%.*]] = add nsw i32 [[TMP6]], -1, !dbg [[DBG34]]
; CHECK-NEXT:    store i32 [[DEC]], ptr [[L]], align 4, !dbg [[DBG34]]
; CHECK-NEXT:    br label [[IF_END]]
; CHECK:       if.end:
; CHECK-NEXT:    br label [[DOTEXITSTUB:%.*]], !dbg [[DBG35:![0-9]+]]
; CHECK:       .exitStub:
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_task_region_fold_if
; CHECK-SAME: (ptr [[TASK_ARGS:%.*]], ptr [[DEVICE_ENV:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_A_ADDR:%.*]] = getelementptr [[NANOS6_TASK_ARGS_FOLD_IF:%.*]], ptr [[TASK_ARGS]], i32 0, i32 0
; CHECK-NEXT:    [[GEP_B_ADDR:%.*]] = getelementptr [[NANOS6_TASK_ARGS_FOLD_IF]], ptr [[TASK_ARGS]], i32 0, i32 1
; CHECK-NEXT:    [[TMP0:%.*]] = icmp ne ptr [[ADDRESS_TRANSLATION_TABLE]], null
; CHECK-NEXT:    br i1 [[TMP0]], label [[TMP1:%.*]], label [[TMP2:%.*]]
; CHECK:       1:
; CHECK-NEXT:    br label [[TMP2]]
; CHECK:       2:
; CHECK-NEXT:    call void @nanos6_unpacked_task_region_fold_if(ptr [[GEP_A_ADDR]], ptr [[GEP_B_ADDR]], ptr [[DEVICE_ENV]], ptr [[ADDRESS_TRANSLATION_TABLE]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_constructor_register_task_info() {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @nanos6_register_task_info(ptr @task_info_var_fold_if)
; CHECK-NEXT:    ret void
;
