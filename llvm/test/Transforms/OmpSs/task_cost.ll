; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --function-signature --include-generated-funcs
; RUN: opt %s -passes=ompss-2 -S | FileCheck %s
; ModuleID = 'task_cost.ll'
source_filename = "task_cost.ll"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; template<typename T> T foo() { return T(); }
; void bar(int n) {
;     int vla[n];
;     #pragma oss task cost(foo<int>())
;     {}
;     #pragma oss task cost(n)
;     {}
;     #pragma oss task cost(vla[1])
;     {}
; }

$_Z3fooIiET_v = comdat any

; Function Attrs: mustprogress noinline nounwind optnone
define dso_local void @_Z3bari(i32 noundef %n) #0 !dbg !5 {
entry:
  %n.addr = alloca i32, align 4
  %saved_stack = alloca ptr, align 8
  %__vla_expr0 = alloca i64, align 8
  store i32 %n, ptr %n.addr, align 4
  %0 = load i32, ptr %n.addr, align 4, !dbg !9
  %1 = zext i32 %0 to i64, !dbg !10
  %2 = call ptr @llvm.stacksave(), !dbg !10
  store ptr %2, ptr %saved_stack, align 8, !dbg !10
  %vla = alloca i32, i64 %1, align 16, !dbg !10
  store i64 %1, ptr %__vla_expr0, align 8, !dbg !10
  %3 = call token @llvm.directive.region.entry() [ "DIR.OSS"([5 x i8] c"TASK\00"), "QUAL.OSS.COST"(ptr @compute_cost) ], !dbg !11
  call void @llvm.directive.region.exit(token %3), !dbg !12
  %4 = call token @llvm.directive.region.entry() [ "DIR.OSS"([5 x i8] c"TASK\00"), "QUAL.OSS.FIRSTPRIVATE"(ptr %n.addr, i32 undef), "QUAL.OSS.COST"(ptr @compute_cost.1, ptr %n.addr) ], !dbg !13
  call void @llvm.directive.region.exit(token %4), !dbg !14
  %5 = call token @llvm.directive.region.entry() [ "DIR.OSS"([5 x i8] c"TASK\00"), "QUAL.OSS.FIRSTPRIVATE"(ptr %vla, i32 undef), "QUAL.OSS.VLA.DIMS"(ptr %vla, i64 %1), "QUAL.OSS.COST"(ptr @compute_cost.2, ptr %vla, i64 %1), "QUAL.OSS.CAPTURED"(i64 %1) ], !dbg !15
  call void @llvm.directive.region.exit(token %5), !dbg !16
  %6 = load ptr, ptr %saved_stack, align 8, !dbg !17
  call void @llvm.stackrestore(ptr %6), !dbg !17
  ret void, !dbg !17
}

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare ptr @llvm.stacksave() #1

; Function Attrs: nounwind
declare token @llvm.directive.region.entry() #2

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token) #2

define internal i32 @compute_cost() #3 !dbg !18 {
entry:
  %call = call noundef i32 @_Z3fooIiET_v(), !dbg !19
  ret i32 %call, !dbg !19
}

; Function Attrs: mustprogress noinline nounwind optnone
define linkonce_odr noundef i32 @_Z3fooIiET_v() #0 comdat !dbg !21 {
entry:
  ret i32 0, !dbg !22
}

define internal i32 @compute_cost.1(ptr %n) #3 !dbg !23 {
entry:
  %n.addr = alloca ptr, align 8
  store ptr %n, ptr %n.addr, align 8
  %0 = load i32, ptr %n, align 4, !dbg !24
  ret i32 %0, !dbg !24
}

define internal i32 @compute_cost.2(ptr %vla, i64 %0) #3 !dbg !26 {
entry:
  %vla.addr = alloca ptr, align 8
  %.addr = alloca i64, align 8
  store ptr %vla, ptr %vla.addr, align 8
  store i64 %0, ptr %.addr, align 8
  %arrayidx = getelementptr inbounds i32, ptr %vla, i64 1, !dbg !27
  %1 = load i32, ptr %arrayidx, align 4, !dbg !27
  ret i32 %1, !dbg !29
}

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare void @llvm.stackrestore(ptr) #1

attributes #0 = { mustprogress noinline nounwind optnone "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
attributes #1 = { nocallback nofree nosync nounwind willreturn }
attributes #2 = { nounwind }
attributes #3 = { "min-legal-vector-width"="0" }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus_14, file: !1, producer: "", isOptimized: false, runtimeVersion: 0, emissionKind: NoDebug, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "<stdin>", directory: "")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 1, !"wchar_size", i32 4}
!4 = !{!""}
!5 = distinct !DISubprogram(name: "bar", scope: !6, file: !6, line: 2, type: !7, scopeLine: 2, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !8)
!6 = !DIFile(filename: "task_cost.ll", directory: "")
!7 = !DISubroutineType(types: !8)
!8 = !{}
!9 = !DILocation(line: 3, column: 14, scope: !5)
!10 = !DILocation(line: 3, column: 6, scope: !5)
!11 = !DILocation(line: 4, column: 14, scope: !5)
!12 = !DILocation(line: 5, column: 7, scope: !5)
!13 = !DILocation(line: 6, column: 14, scope: !5)
!14 = !DILocation(line: 7, column: 7, scope: !5)
!15 = !DILocation(line: 8, column: 14, scope: !5)
!16 = !DILocation(line: 9, column: 7, scope: !5)
!17 = !DILocation(line: 10, column: 2, scope: !5)
!18 = distinct !DISubprogram(linkageName: "compute_cost", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!19 = !DILocation(line: 4, column: 28, scope: !20)
!20 = !DILexicalBlockFile(scope: !18, file: !6, discriminator: 0)
!21 = distinct !DISubprogram(name: "foo<int>", scope: !6, file: !6, line: 1, type: !7, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !8)
!22 = !DILocation(line: 1, column: 33, scope: !21)
!23 = distinct !DISubprogram(linkageName: "compute_cost.1", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!24 = !DILocation(line: 6, column: 28, scope: !25)
!25 = !DILexicalBlockFile(scope: !23, file: !6, discriminator: 0)
!26 = distinct !DISubprogram(linkageName: "compute_cost.2", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!27 = !DILocation(line: 8, column: 28, scope: !28)
!28 = !DILexicalBlockFile(scope: !26, file: !6, discriminator: 0)
!29 = !DILocation(line: 8, column: 32, scope: !28)
; CHECK-LABEL: define {{[^@]+}}@_Z3bari
; CHECK-SAME: (i32 noundef [[N:%.*]]) #[[ATTR0:[0-9]+]] !dbg [[DBG5:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[N_ADDR:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[SAVED_STACK:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    [[__VLA_EXPR0:%.*]] = alloca i64, align 8
; CHECK-NEXT:    store i32 [[N]], ptr [[N_ADDR]], align 4
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[N_ADDR]], align 4, !dbg [[DBG9:![0-9]+]]
; CHECK-NEXT:    [[TMP1:%.*]] = zext i32 [[TMP0]] to i64, !dbg [[DBG10:![0-9]+]]
; CHECK-NEXT:    [[TMP2:%.*]] = call ptr @llvm.stacksave(), !dbg [[DBG10]]
; CHECK-NEXT:    store ptr [[TMP2]], ptr [[SAVED_STACK]], align 8, !dbg [[DBG10]]
; CHECK-NEXT:    [[VLA:%.*]] = alloca i32, i64 [[TMP1]], align 16, !dbg [[DBG10]]
; CHECK-NEXT:    store i64 [[TMP1]], ptr [[__VLA_EXPR0]], align 8, !dbg [[DBG10]]
; CHECK-NEXT:    [[TMP3:%.*]] = alloca ptr, align 8, !dbg [[DBG11:![0-9]+]]
; CHECK-NEXT:    [[TMP4:%.*]] = alloca ptr, align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[NUM_DEPS:%.*]] = alloca i64, align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP5:%.*]] = alloca ptr, align 8, !dbg [[DBG12:![0-9]+]]
; CHECK-NEXT:    [[TMP6:%.*]] = alloca ptr, align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[NUM_DEPS5:%.*]] = alloca i64, align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP7:%.*]] = alloca ptr, align 8, !dbg [[DBG13:![0-9]+]]
; CHECK-NEXT:    [[TMP8:%.*]] = alloca ptr, align 8, !dbg [[DBG13]]
; CHECK-NEXT:    [[NUM_DEPS11:%.*]] = alloca i64, align 8, !dbg [[DBG13]]
; CHECK-NEXT:    br label [[FINAL_COND:%.*]], !dbg [[DBG11]]
; CHECK:       codeRepl:
; CHECK-NEXT:    store i64 0, ptr [[NUM_DEPS]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP9:%.*]] = load i64, ptr [[NUM_DEPS]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    call void @nanos6_create_task(ptr @task_info_var__Z3bari, ptr @task_invocation_info__Z3bari, ptr null, i64 0, ptr [[TMP3]], ptr [[TMP4]], i64 0, i64 [[TMP9]]), !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP10:%.*]] = load ptr, ptr [[TMP3]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[ARGS_END:%.*]] = getelementptr i8, ptr [[TMP10]], i64 0, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP11:%.*]] = load ptr, ptr [[TMP4]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    call void @nanos6_submit_task(ptr [[TMP11]]), !dbg [[DBG11]]
; CHECK-NEXT:    br label [[FINAL_END:%.*]], !dbg [[DBG11]]
; CHECK:       final.end:
; CHECK-NEXT:    br label [[FINAL_COND2:%.*]], !dbg [[DBG12]]
; CHECK:       codeRepl4:
; CHECK-NEXT:    store i64 0, ptr [[NUM_DEPS5]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP12:%.*]] = load i64, ptr [[NUM_DEPS5]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    call void @nanos6_create_task(ptr @task_info_var__Z3bari.12, ptr @task_invocation_info__Z3bari.8, ptr null, i64 16, ptr [[TMP5]], ptr [[TMP6]], i64 0, i64 [[TMP12]]), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP13:%.*]] = load ptr, ptr [[TMP5]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[ARGS_END6:%.*]] = getelementptr i8, ptr [[TMP13]], i64 16, !dbg [[DBG12]]
; CHECK-NEXT:    [[GEP_N_ADDR:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3BARI_0:%.*]], ptr [[TMP13]], i32 0, i32 0, !dbg [[DBG12]]
; CHECK-NEXT:    call void @llvm.memcpy.p0.p0.i64(ptr align 4 [[GEP_N_ADDR]], ptr align 4 [[N_ADDR]], i64 4, i1 false), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP14:%.*]] = load ptr, ptr [[TMP6]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    call void @nanos6_submit_task(ptr [[TMP14]]), !dbg [[DBG12]]
; CHECK-NEXT:    br label [[FINAL_END1:%.*]], !dbg [[DBG12]]
; CHECK:       final.end1:
; CHECK-NEXT:    br label [[FINAL_COND8:%.*]], !dbg [[DBG13]]
; CHECK:       codeRepl10:
; CHECK-NEXT:    [[TMP15:%.*]] = mul nuw i64 4, [[TMP1]], !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP16:%.*]] = add nuw i64 0, [[TMP15]], !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP17:%.*]] = add nuw i64 16, [[TMP16]], !dbg [[DBG13]]
; CHECK-NEXT:    store i64 0, ptr [[NUM_DEPS11]], align 8, !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP18:%.*]] = load i64, ptr [[NUM_DEPS11]], align 8, !dbg [[DBG13]]
; CHECK-NEXT:    call void @nanos6_create_task(ptr @task_info_var__Z3bari.24, ptr @task_invocation_info__Z3bari.20, ptr null, i64 [[TMP17]], ptr [[TMP7]], ptr [[TMP8]], i64 0, i64 [[TMP18]]), !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP19:%.*]] = load ptr, ptr [[TMP7]], align 8, !dbg [[DBG13]]
; CHECK-NEXT:    [[ARGS_END12:%.*]] = getelementptr i8, ptr [[TMP19]], i64 16, !dbg [[DBG13]]
; CHECK-NEXT:    [[GEP_VLA:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3BARI_1:%.*]], ptr [[TMP19]], i32 0, i32 0, !dbg [[DBG13]]
; CHECK-NEXT:    store ptr [[ARGS_END12]], ptr [[GEP_VLA]], align 4, !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP20:%.*]] = mul nuw i64 4, [[TMP1]], !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP21:%.*]] = getelementptr i8, ptr [[ARGS_END12]], i64 [[TMP20]], !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP22:%.*]] = mul nuw i64 1, [[TMP1]], !dbg [[DBG13]]
; CHECK-NEXT:    [[GEP_VLA13:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3BARI_1]], ptr [[TMP19]], i32 0, i32 0, !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP23:%.*]] = load ptr, ptr [[GEP_VLA13]], align 8, !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP24:%.*]] = mul nuw i64 [[TMP22]], 4, !dbg [[DBG13]]
; CHECK-NEXT:    call void @llvm.memcpy.p0.p0.i64(ptr align 4 [[TMP23]], ptr align 4 [[VLA]], i64 [[TMP24]], i1 false), !dbg [[DBG13]]
; CHECK-NEXT:    [[CAPT_GEP_:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3BARI_1]], ptr [[TMP19]], i32 0, i32 1, !dbg [[DBG13]]
; CHECK-NEXT:    store i64 [[TMP1]], ptr [[CAPT_GEP_]], align 8, !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP25:%.*]] = load ptr, ptr [[TMP8]], align 8, !dbg [[DBG13]]
; CHECK-NEXT:    call void @nanos6_submit_task(ptr [[TMP25]]), !dbg [[DBG13]]
; CHECK-NEXT:    br label [[FINAL_END7:%.*]], !dbg [[DBG13]]
; CHECK:       final.end7:
; CHECK-NEXT:    [[TMP26:%.*]] = load ptr, ptr [[SAVED_STACK]], align 8, !dbg [[DBG14:![0-9]+]]
; CHECK-NEXT:    call void @llvm.stackrestore(ptr [[TMP26]]), !dbg [[DBG14]]
; CHECK-NEXT:    ret void, !dbg [[DBG14]]
; CHECK:       final.then:
; CHECK-NEXT:    br label [[FINAL_END]], !dbg [[DBG12]]
; CHECK:       final.then3:
; CHECK-NEXT:    br label [[FINAL_END1]], !dbg [[DBG13]]
; CHECK:       final.then9:
; CHECK-NEXT:    br label [[FINAL_END7]], !dbg [[DBG14]]
; CHECK:       final.cond:
; CHECK-NEXT:    [[TMP27:%.*]] = call i32 @nanos6_in_final(), !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP28:%.*]] = icmp ne i32 [[TMP27]], 0, !dbg [[DBG11]]
; CHECK-NEXT:    br i1 [[TMP28]], label [[FINAL_THEN:%.*]], label [[CODEREPL:%.*]], !dbg [[DBG11]]
; CHECK:       final.cond2:
; CHECK-NEXT:    [[TMP29:%.*]] = call i32 @nanos6_in_final(), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP30:%.*]] = icmp ne i32 [[TMP29]], 0, !dbg [[DBG12]]
; CHECK-NEXT:    br i1 [[TMP30]], label [[FINAL_THEN3:%.*]], label [[CODEREPL4:%.*]], !dbg [[DBG12]]
; CHECK:       final.cond8:
; CHECK-NEXT:    [[TMP31:%.*]] = call i32 @nanos6_in_final(), !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP32:%.*]] = icmp ne i32 [[TMP31]], 0, !dbg [[DBG13]]
; CHECK-NEXT:    br i1 [[TMP32]], label [[FINAL_THEN9:%.*]], label [[CODEREPL10:%.*]], !dbg [[DBG13]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_cost
; CHECK-SAME: () #[[ATTR3:[0-9]+]] !dbg [[DBG15:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CALL:%.*]] = call noundef i32 @_Z3fooIiET_v(), !dbg [[DBG16:![0-9]+]]
; CHECK-NEXT:    ret i32 [[CALL]], !dbg [[DBG16]]
;
;
; CHECK-LABEL: define {{[^@]+}}@_Z3fooIiET_v
; CHECK-SAME: () #[[ATTR0]] comdat !dbg [[DBG18:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret i32 0, !dbg [[DBG19:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_cost.1
; CHECK-SAME: (ptr [[N:%.*]]) #[[ATTR3]] !dbg [[DBG20:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[N_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr [[N]], ptr [[N_ADDR]], align 8
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[N]], align 4, !dbg [[DBG21:![0-9]+]]
; CHECK-NEXT:    ret i32 [[TMP0]], !dbg [[DBG21]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_cost.2
; CHECK-SAME: (ptr [[VLA:%.*]], i64 [[TMP0:%.*]]) #[[ATTR3]] !dbg [[DBG23:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[VLA_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    [[DOTADDR:%.*]] = alloca i64, align 8
; CHECK-NEXT:    store ptr [[VLA]], ptr [[VLA_ADDR]], align 8
; CHECK-NEXT:    store i64 [[TMP0]], ptr [[DOTADDR]], align 8
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i32, ptr [[VLA]], i64 1, !dbg [[DBG24:![0-9]+]]
; CHECK-NEXT:    [[TMP1:%.*]] = load i32, ptr [[ARRAYIDX]], align 4, !dbg [[DBG24]]
; CHECK-NEXT:    ret i32 [[TMP1]], !dbg [[DBG26:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_unpacked_task_region__Z3bari
; CHECK-SAME: (ptr [[DEVICE_ENV:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) !dbg [[DBG27:![0-9]+]] {
; CHECK-NEXT:  newFuncRoot:
; CHECK-NEXT:    br label [[TMP0:%.*]], !dbg [[DBG28:![0-9]+]]
; CHECK:       0:
; CHECK-NEXT:    br label [[DOTEXITSTUB:%.*]], !dbg [[DBG29:![0-9]+]]
; CHECK:       .exitStub:
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_task_region__Z3bari
; CHECK-SAME: (ptr [[TASK_ARGS:%.*]], ptr [[DEVICE_ENV:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = icmp ne ptr [[ADDRESS_TRANSLATION_TABLE]], null
; CHECK-NEXT:    br i1 [[TMP0]], label [[TMP1:%.*]], label [[TMP2:%.*]]
; CHECK:       1:
; CHECK-NEXT:    br label [[TMP2]]
; CHECK:       2:
; CHECK-NEXT:    call void @nanos6_unpacked_task_region__Z3bari(ptr [[DEVICE_ENV]], ptr [[ADDRESS_TRANSLATION_TABLE]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_unpacked_constraints__Z3bari
; CHECK-SAME: (ptr [[CONSTRAINTS:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_CONSTRAINTS:%.*]] = getelementptr [[NANOS6_TASK_CONSTRAINTS_T:%.*]], ptr [[CONSTRAINTS]], i32 0, i32 0
; CHECK-NEXT:    [[TMP0:%.*]] = call i32 @compute_cost()
; CHECK-NEXT:    [[TMP1:%.*]] = zext i32 [[TMP0]] to i64
; CHECK-NEXT:    store i64 [[TMP1]], ptr [[GEP_CONSTRAINTS]], align 8
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_constraints__Z3bari
; CHECK-SAME: (ptr [[TASK_ARGS:%.*]], ptr [[CONSTRAINTS:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @nanos6_unpacked_constraints__Z3bari(ptr [[CONSTRAINTS]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_constructor_register_task_info() {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @nanos6_register_task_info(ptr @task_info_var__Z3bari)
; CHECK-NEXT:    call void @nanos6_register_task_info(ptr @task_info_var__Z3bari.12)
; CHECK-NEXT:    call void @nanos6_register_task_info(ptr @task_info_var__Z3bari.24)
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_unpacked_task_region__Z3bari.4
; CHECK-SAME: (ptr [[N_ADDR:%.*]], ptr [[DEVICE_ENV:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) !dbg [[DBG30:![0-9]+]] {
; CHECK-NEXT:  newFuncRoot:
; CHECK-NEXT:    br label [[TMP0:%.*]], !dbg [[DBG31:![0-9]+]]
; CHECK:       0:
; CHECK-NEXT:    br label [[DOTEXITSTUB:%.*]], !dbg [[DBG32:![0-9]+]]
; CHECK:       .exitStub:
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_task_region__Z3bari.5
; CHECK-SAME: (ptr [[TASK_ARGS:%.*]], ptr [[DEVICE_ENV:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_N_ADDR:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3BARI_0:%.*]], ptr [[TASK_ARGS]], i32 0, i32 0
; CHECK-NEXT:    [[TMP0:%.*]] = icmp ne ptr [[ADDRESS_TRANSLATION_TABLE]], null
; CHECK-NEXT:    br i1 [[TMP0]], label [[TMP1:%.*]], label [[TMP2:%.*]]
; CHECK:       1:
; CHECK-NEXT:    br label [[TMP2]]
; CHECK:       2:
; CHECK-NEXT:    call void @nanos6_unpacked_task_region__Z3bari.4(ptr [[GEP_N_ADDR]], ptr [[DEVICE_ENV]], ptr [[ADDRESS_TRANSLATION_TABLE]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_unpacked_constraints__Z3bari.6
; CHECK-SAME: (ptr [[N_ADDR:%.*]], ptr [[CONSTRAINTS:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_CONSTRAINTS:%.*]] = getelementptr [[NANOS6_TASK_CONSTRAINTS_T:%.*]], ptr [[CONSTRAINTS]], i32 0, i32 0
; CHECK-NEXT:    [[TMP0:%.*]] = call i32 @compute_cost.1(ptr [[N_ADDR]])
; CHECK-NEXT:    [[TMP1:%.*]] = zext i32 [[TMP0]] to i64
; CHECK-NEXT:    store i64 [[TMP1]], ptr [[GEP_CONSTRAINTS]], align 8
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_constraints__Z3bari.7
; CHECK-SAME: (ptr [[TASK_ARGS:%.*]], ptr [[CONSTRAINTS:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_N_ADDR:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3BARI_0:%.*]], ptr [[TASK_ARGS]], i32 0, i32 0
; CHECK-NEXT:    call void @nanos6_unpacked_constraints__Z3bari.6(ptr [[GEP_N_ADDR]], ptr [[CONSTRAINTS]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_duplicate__Z3bari
; CHECK-SAME: (ptr [[TASK_ARGS_SRC:%.*]], ptr [[TASK_ARGS_DST:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[TASK_ARGS_DST]], align 8
; CHECK-NEXT:    [[ARGS_END:%.*]] = getelementptr i8, ptr [[TMP0]], i64 16
; CHECK-NEXT:    [[GEP_DST_VLA:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3BARI_1:%.*]], ptr [[TMP0]], i32 0, i32 0
; CHECK-NEXT:    store ptr [[ARGS_END]], ptr [[GEP_DST_VLA]], align 4
; CHECK-NEXT:    [[GEP_DST_:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3BARI_1]], ptr [[TMP0]], i32 0, i32 1
; CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr [[GEP_DST_]], align 8
; CHECK-NEXT:    [[TMP2:%.*]] = mul nuw i64 4, [[TMP1]]
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[ARGS_END]], i64 [[TMP2]]
; CHECK-NEXT:    [[GEP_SRC_:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3BARI_1]], ptr [[TASK_ARGS_SRC]], i32 0, i32 1
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[GEP_SRC_]], align 8
; CHECK-NEXT:    [[TMP5:%.*]] = mul nuw i64 1, [[TMP4]]
; CHECK-NEXT:    [[GEP_SRC_VLA:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3BARI_1]], ptr [[TASK_ARGS_SRC]], i32 0, i32 0
; CHECK-NEXT:    [[GEP_DST_VLA1:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3BARI_1]], ptr [[TMP0]], i32 0, i32 0
; CHECK-NEXT:    [[TMP6:%.*]] = load ptr, ptr [[GEP_SRC_VLA]], align 8
; CHECK-NEXT:    [[TMP7:%.*]] = load ptr, ptr [[GEP_DST_VLA1]], align 8
; CHECK-NEXT:    [[TMP8:%.*]] = mul nuw i64 [[TMP5]], 4
; CHECK-NEXT:    call void @llvm.memcpy.p0.p0.i64(ptr align 4 [[TMP7]], ptr align 4 [[TMP6]], i64 [[TMP8]], i1 false)
; CHECK-NEXT:    [[CAPT_GEP_SRC_:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3BARI_1]], ptr [[TASK_ARGS_SRC]], i32 0, i32 1
; CHECK-NEXT:    [[CAPT_GEP_DST_:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3BARI_1]], ptr [[TMP0]], i32 0, i32 1
; CHECK-NEXT:    [[TMP9:%.*]] = load i64, ptr [[CAPT_GEP_SRC_]], align 8
; CHECK-NEXT:    store i64 [[TMP9]], ptr [[CAPT_GEP_DST_]], align 8
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_unpacked_task_region__Z3bari.16
; CHECK-SAME: (ptr [[VLA:%.*]], i64 [[TMP0:%.*]], ptr [[DEVICE_ENV:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) !dbg [[DBG33:![0-9]+]] {
; CHECK-NEXT:  newFuncRoot:
; CHECK-NEXT:    br label [[TMP1:%.*]], !dbg [[DBG34:![0-9]+]]
; CHECK:       1:
; CHECK-NEXT:    br label [[DOTEXITSTUB:%.*]], !dbg [[DBG35:![0-9]+]]
; CHECK:       .exitStub:
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_task_region__Z3bari.17
; CHECK-SAME: (ptr [[TASK_ARGS:%.*]], ptr [[DEVICE_ENV:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_VLA:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3BARI_1:%.*]], ptr [[TASK_ARGS]], i32 0, i32 0
; CHECK-NEXT:    [[LOAD_GEP_VLA:%.*]] = load ptr, ptr [[GEP_VLA]], align 8
; CHECK-NEXT:    [[CAPT_GEP:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3BARI_1]], ptr [[TASK_ARGS]], i32 0, i32 1
; CHECK-NEXT:    [[LOAD_CAPT_GEP:%.*]] = load i64, ptr [[CAPT_GEP]], align 8
; CHECK-NEXT:    [[TMP0:%.*]] = icmp ne ptr [[ADDRESS_TRANSLATION_TABLE]], null
; CHECK-NEXT:    br i1 [[TMP0]], label [[TMP1:%.*]], label [[TMP2:%.*]]
; CHECK:       1:
; CHECK-NEXT:    br label [[TMP2]]
; CHECK:       2:
; CHECK-NEXT:    call void @nanos6_unpacked_task_region__Z3bari.16(ptr [[LOAD_GEP_VLA]], i64 [[LOAD_CAPT_GEP]], ptr [[DEVICE_ENV]], ptr [[ADDRESS_TRANSLATION_TABLE]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_unpacked_constraints__Z3bari.18
; CHECK-SAME: (ptr [[VLA:%.*]], i64 [[TMP0:%.*]], ptr [[CONSTRAINTS:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_CONSTRAINTS:%.*]] = getelementptr [[NANOS6_TASK_CONSTRAINTS_T:%.*]], ptr [[CONSTRAINTS]], i32 0, i32 0
; CHECK-NEXT:    [[TMP1:%.*]] = call i32 @compute_cost.2(ptr [[VLA]], i64 [[TMP0]])
; CHECK-NEXT:    [[TMP2:%.*]] = zext i32 [[TMP1]] to i64
; CHECK-NEXT:    store i64 [[TMP2]], ptr [[GEP_CONSTRAINTS]], align 8
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_constraints__Z3bari.19
; CHECK-SAME: (ptr [[TASK_ARGS:%.*]], ptr [[CONSTRAINTS:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_VLA:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3BARI_1:%.*]], ptr [[TASK_ARGS]], i32 0, i32 0
; CHECK-NEXT:    [[LOAD_GEP_VLA:%.*]] = load ptr, ptr [[GEP_VLA]], align 8
; CHECK-NEXT:    [[CAPT_GEP:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3BARI_1]], ptr [[TASK_ARGS]], i32 0, i32 1
; CHECK-NEXT:    [[LOAD_CAPT_GEP:%.*]] = load i64, ptr [[CAPT_GEP]], align 8
; CHECK-NEXT:    call void @nanos6_unpacked_constraints__Z3bari.18(ptr [[LOAD_GEP_VLA]], i64 [[LOAD_CAPT_GEP]], ptr [[CONSTRAINTS]])
; CHECK-NEXT:    ret void
;
