; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --function-signature --include-generated-funcs
; RUN: opt %s -passes=ompss-2 -S | FileCheck %s
; ModuleID = 'task_shmem.ll'
source_filename = "task_shmem.ll"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; #pragma oss task device(cuda) ndrange(1, 1, 1) shmem(x)
; void foo(int x);
; int main() {
;   foo(2);
; }

; Function Attrs: noinline nounwind optnone
define dso_local i32 @main() #0 !dbg !5 {
entry:
  %call_arg = alloca i32, align 4
  store i32 2, ptr %call_arg, align 4, !dbg !9
  %0 = load i32, ptr %call_arg, align 4, !dbg !10
  %1 = call token @llvm.directive.region.entry() [ "DIR.OSS"([5 x i8] c"TASK\00"), "QUAL.OSS.FIRSTPRIVATE"(ptr %call_arg, i32 undef), "QUAL.OSS.DEVICE"(i32 1), "QUAL.OSS.DEVICE.DEVFUNC"([4 x i8] c"foo\00"), "QUAL.OSS.DEVICE.NDRANGE"(i32 1, i32 1, i32 1), "QUAL.OSS.DEVICE.SHMEM"(i32 %0), "QUAL.OSS.DEVICE.CALL.ORDER"(ptr %call_arg), "QUAL.OSS.DECL.SOURCE"([18 x i8] c"task_shmem.ll:1:9\00") ], !dbg !11
  call void @llvm.directive.region.exit(token %1), !dbg !11
  ret i32 0, !dbg !12
}

; Function Attrs: nounwind
declare token @llvm.directive.region.entry() #1

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token) #1

attributes #0 = { noinline nounwind optnone "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
attributes #1 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C11, file: !1, producer: "", isOptimized: false, runtimeVersion: 0, emissionKind: NoDebug, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "<stdin>", directory: "")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 1, !"wchar_size", i32 4}
!4 = !{!""}
!5 = distinct !DISubprogram(name: "main", scope: !6, file: !6, line: 4, type: !7, scopeLine: 4, spFlags: DISPFlagDefinition, unit: !0)
!6 = !DIFile(filename: "task_shmem.ll", directory: "")
!7 = !DISubroutineType(types: !8)
!8 = !{}
!9 = !DILocation(line: 5, column: 7, scope: !5)
!10 = !DILocation(line: 1, column: 54, scope: !5)
!11 = !DILocation(line: 5, column: 3, scope: !5)
!12 = !DILocation(line: 6, column: 1, scope: !5)
; CHECK-LABEL: define {{[^@]+}}@main
; CHECK-SAME: () #[[ATTR0:[0-9]+]] !dbg [[DBG5:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CALL_ARG:%.*]] = alloca i32, align 4
; CHECK-NEXT:    store i32 2, ptr [[CALL_ARG]], align 4, !dbg [[DBG9:![0-9]+]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[CALL_ARG]], align 4, !dbg [[DBG10:![0-9]+]]
; CHECK-NEXT:    [[TMP1:%.*]] = alloca ptr, align 8, !dbg [[DBG11:![0-9]+]]
; CHECK-NEXT:    [[TMP2:%.*]] = alloca ptr, align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[NUM_DEPS:%.*]] = alloca i64, align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP3:%.*]] = alloca ptr, align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP4:%.*]] = alloca ptr, align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[NUM_DEPS5:%.*]] = alloca i64, align 8, !dbg [[DBG11]]
; CHECK-NEXT:    br label [[FINAL_COND:%.*]], !dbg [[DBG11]]
; CHECK:       codeRepl4:
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 8, ptr [[TMP3]]), !dbg [[DBG11]]
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 8, ptr [[TMP4]]), !dbg [[DBG11]]
; CHECK-NEXT:    store i64 0, ptr [[NUM_DEPS5]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP5:%.*]] = load i64, ptr [[NUM_DEPS5]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    call void @nanos6_create_task(ptr @task_info_var_main.10, ptr @task_invocation_info_main.6, ptr null, i64 64, ptr [[TMP3]], ptr [[TMP4]], i64 0, i64 [[TMP5]]), !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP6:%.*]] = load ptr, ptr [[TMP3]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[ARGS_END6:%.*]] = getelementptr i8, ptr [[TMP6]], i64 64, !dbg [[DBG11]]
; CHECK-NEXT:    [[GEP_DEV_NDRANGE07:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN_0:%.*]], ptr [[TMP6]], i32 0, i32 0, !dbg [[DBG11]]
; CHECK-NEXT:    store i64 1, ptr [[GEP_DEV_NDRANGE07]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[GEP_DEV_NDRANGE18:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN_0]], ptr [[TMP6]], i32 0, i32 1, !dbg [[DBG11]]
; CHECK-NEXT:    store i64 -1, ptr [[GEP_DEV_NDRANGE18]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[GEP_DEV_NDRANGE29:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN_0]], ptr [[TMP6]], i32 0, i32 2, !dbg [[DBG11]]
; CHECK-NEXT:    store i64 -1, ptr [[GEP_DEV_NDRANGE29]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[GEP_DEV_NDRANGE010:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN_0]], ptr [[TMP6]], i32 0, i32 3, !dbg [[DBG11]]
; CHECK-NEXT:    store i64 1, ptr [[GEP_DEV_NDRANGE010]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[GEP_DEV_NDRANGE111:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN_0]], ptr [[TMP6]], i32 0, i32 4, !dbg [[DBG11]]
; CHECK-NEXT:    store i64 -1, ptr [[GEP_DEV_NDRANGE111]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[GEP_DEV_NDRANGE212:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN_0]], ptr [[TMP6]], i32 0, i32 5, !dbg [[DBG11]]
; CHECK-NEXT:    store i64 -1, ptr [[GEP_DEV_NDRANGE212]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[GEP_DEV_SHM13:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN_0]], ptr [[TMP6]], i32 0, i32 6, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP7:%.*]] = zext i32 [[TMP0]] to i64, !dbg [[DBG11]]
; CHECK-NEXT:    store i64 [[TMP7]], ptr [[GEP_DEV_SHM13]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[GEP_CALL_ARG14:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN_0]], ptr [[TMP6]], i32 0, i32 7, !dbg [[DBG11]]
; CHECK-NEXT:    call void @llvm.memcpy.p0.p0.i64(ptr align 4 [[GEP_CALL_ARG14]], ptr align 4 [[CALL_ARG]], i64 4, i1 false), !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP8:%.*]] = load ptr, ptr [[TMP4]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    call void @nanos6_submit_task(ptr [[TMP8]]), !dbg [[DBG11]]
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 8, ptr [[TMP3]]), !dbg [[DBG11]]
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 8, ptr [[TMP4]]), !dbg [[DBG11]]
; CHECK-NEXT:    br label [[FINAL_END:%.*]], !dbg [[DBG11]]
; CHECK:       final.end:
; CHECK-NEXT:    ret i32 0, !dbg [[DBG12:![0-9]+]]
; CHECK:       codeRepl:
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 8, ptr [[TMP1]]), !dbg [[DBG11]]
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 8, ptr [[TMP2]]), !dbg [[DBG11]]
; CHECK-NEXT:    store i64 0, ptr [[NUM_DEPS]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP9:%.*]] = load i64, ptr [[NUM_DEPS]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    call void @nanos6_create_task(ptr @task_info_var_main, ptr @task_invocation_info_main, ptr null, i64 64, ptr [[TMP1]], ptr [[TMP2]], i64 2, i64 [[TMP9]]), !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP10:%.*]] = load ptr, ptr [[TMP1]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[ARGS_END:%.*]] = getelementptr i8, ptr [[TMP10]], i64 64, !dbg [[DBG11]]
; CHECK-NEXT:    [[GEP_DEV_NDRANGE0:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN:%.*]], ptr [[TMP10]], i32 0, i32 0, !dbg [[DBG11]]
; CHECK-NEXT:    store i64 1, ptr [[GEP_DEV_NDRANGE0]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[GEP_DEV_NDRANGE1:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN]], ptr [[TMP10]], i32 0, i32 1, !dbg [[DBG11]]
; CHECK-NEXT:    store i64 -1, ptr [[GEP_DEV_NDRANGE1]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[GEP_DEV_NDRANGE2:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN]], ptr [[TMP10]], i32 0, i32 2, !dbg [[DBG11]]
; CHECK-NEXT:    store i64 -1, ptr [[GEP_DEV_NDRANGE2]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[GEP_DEV_NDRANGE01:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN]], ptr [[TMP10]], i32 0, i32 3, !dbg [[DBG11]]
; CHECK-NEXT:    store i64 1, ptr [[GEP_DEV_NDRANGE01]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[GEP_DEV_NDRANGE12:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN]], ptr [[TMP10]], i32 0, i32 4, !dbg [[DBG11]]
; CHECK-NEXT:    store i64 -1, ptr [[GEP_DEV_NDRANGE12]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[GEP_DEV_NDRANGE23:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN]], ptr [[TMP10]], i32 0, i32 5, !dbg [[DBG11]]
; CHECK-NEXT:    store i64 -1, ptr [[GEP_DEV_NDRANGE23]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[GEP_DEV_SHM:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN]], ptr [[TMP10]], i32 0, i32 6, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP11:%.*]] = zext i32 [[TMP0]] to i64, !dbg [[DBG11]]
; CHECK-NEXT:    store i64 [[TMP11]], ptr [[GEP_DEV_SHM]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[GEP_CALL_ARG:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN]], ptr [[TMP10]], i32 0, i32 7, !dbg [[DBG11]]
; CHECK-NEXT:    call void @llvm.memcpy.p0.p0.i64(ptr align 4 [[GEP_CALL_ARG]], ptr align 4 [[CALL_ARG]], i64 4, i1 false), !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP12:%.*]] = load ptr, ptr [[TMP2]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    call void @nanos6_submit_task(ptr [[TMP12]]), !dbg [[DBG11]]
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 8, ptr [[TMP1]]), !dbg [[DBG11]]
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 8, ptr [[TMP2]]), !dbg [[DBG11]]
; CHECK-NEXT:    br label [[FINAL_END]], !dbg [[DBG11]]
; CHECK:       final.cond:
; CHECK-NEXT:    [[TMP13:%.*]] = call i32 @nanos6_in_final(), !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP14:%.*]] = icmp ne i32 [[TMP13]], 0, !dbg [[DBG11]]
; CHECK-NEXT:    br i1 [[TMP14]], label [[CODEREPL:%.*]], label [[CODEREPL4:%.*]], !dbg [[DBG11]]
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_constructor_check_version() {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @nanos6_check_version(i64 1, ptr @nanos6_versions, ptr @[[GLOB0:[0-9]+]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_unpacked_task_region_main
; CHECK-SAME: (ptr [[CALL_ARG:%.*]], ptr [[DEVICE_ENV:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) !dbg [[DBG13:![0-9]+]] {
; CHECK-NEXT:  newFuncRoot:
; CHECK-NEXT:    br label [[FINAL_THEN:%.*]], !dbg [[DBG14:![0-9]+]]
; CHECK:       final.then:
; CHECK-NEXT:    br label [[DOTEXITSTUB:%.*]], !dbg [[DBG15:![0-9]+]]
; CHECK:       .exitStub:
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_task_region_main
; CHECK-SAME: (ptr [[TASK_ARGS:%.*]], ptr [[DEVICE_ENV:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_CALL_ARG:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN:%.*]], ptr [[TASK_ARGS]], i32 0, i32 7
; CHECK-NEXT:    [[TMP0:%.*]] = icmp ne ptr [[ADDRESS_TRANSLATION_TABLE]], null
; CHECK-NEXT:    br i1 [[TMP0]], label [[TLATE_IF:%.*]], label [[TLATE_END:%.*]]
; CHECK:       end:
; CHECK-NEXT:    call void @nanos6_unpacked_task_region_main(ptr [[GEP_CALL_ARG]], ptr [[DEVICE_ENV]], ptr [[ADDRESS_TRANSLATION_TABLE]])
; CHECK-NEXT:    ret void
; CHECK:       tlate.if:
; CHECK-NEXT:    br label [[TLATE_END]]
; CHECK:       tlate.end:
; CHECK-NEXT:    br label [[END:%.*]]
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_constructor_register_task_info() {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @nanos6_register_task_info(ptr @task_info_var_main)
; CHECK-NEXT:    call void @nanos6_register_task_info(ptr @task_info_var_main.10)
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_unpacked_task_region_main.4
; CHECK-SAME: (ptr [[CALL_ARG:%.*]], ptr [[DEVICE_ENV:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) !dbg [[DBG16:![0-9]+]] {
; CHECK-NEXT:  newFuncRoot:
; CHECK-NEXT:    br label [[TMP0:%.*]], !dbg [[DBG17:![0-9]+]]
; CHECK:       0:
; CHECK-NEXT:    br label [[DOTEXITSTUB:%.*]], !dbg [[DBG18:![0-9]+]]
; CHECK:       .exitStub:
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_task_region_main.5
; CHECK-SAME: (ptr [[TASK_ARGS:%.*]], ptr [[DEVICE_ENV:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_CALL_ARG:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN_0:%.*]], ptr [[TASK_ARGS]], i32 0, i32 7
; CHECK-NEXT:    [[TMP0:%.*]] = icmp ne ptr [[ADDRESS_TRANSLATION_TABLE]], null
; CHECK-NEXT:    br i1 [[TMP0]], label [[TLATE_IF:%.*]], label [[TLATE_END:%.*]]
; CHECK:       end:
; CHECK-NEXT:    call void @nanos6_unpacked_task_region_main.4(ptr [[GEP_CALL_ARG]], ptr [[DEVICE_ENV]], ptr [[ADDRESS_TRANSLATION_TABLE]])
; CHECK-NEXT:    ret void
; CHECK:       tlate.if:
; CHECK-NEXT:    br label [[TLATE_END]]
; CHECK:       tlate.end:
; CHECK-NEXT:    br label [[END:%.*]]
;
