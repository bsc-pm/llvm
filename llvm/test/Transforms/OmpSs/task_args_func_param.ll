; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --function-signature --include-generated-funcs
; RUN: opt %s -passes=ompss-2 -S | FileCheck %s
; ModuleID = 'task_args_func_param.ll'
source_filename = "task_args_func_param.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; SROA may optimize and make us use the func params directly.

; void foo(int x, int &y) {
;     #pragma oss task cost(x) priority(x) reduction(+: y)
;     {}
; }

%struct._depend_unpack_t = type { ptr, i64, i64, i64 }

; Function Attrs: mustprogress noinline nounwind optnone
define dso_local void @_Z3fooiRi(i32 noundef %x, ptr noundef nonnull align 4 dereferenceable(4) %y) #0 !dbg !5 {
entry:
  %x.addr = alloca i32, align 4
  %y.addr = alloca ptr, align 8
  store i32 %x, ptr %x.addr, align 4
  store ptr %y, ptr %y.addr, align 8
  %0 = load ptr, ptr %y.addr, align 8, !dbg !9
  %1 = call token @llvm.directive.region.entry() [ "DIR.OSS"([5 x i8] c"TASK\00"), "QUAL.OSS.SHARED"(ptr %0, i32 undef), "QUAL.OSS.FIRSTPRIVATE"(ptr %x.addr, i32 undef), "QUAL.OSS.COST"(ptr @compute_cost, ptr %x.addr), "QUAL.OSS.PRIORITY"(ptr @compute_priority, ptr %x.addr), "QUAL.OSS.DEP.REDUCTION"(i32 6000, ptr %0, [2 x i8] c"y\00", ptr @compute_dep, ptr %0), "QUAL.OSS.DEP.REDUCTION.INIT"(ptr %0, ptr @red_init), "QUAL.OSS.DEP.REDUCTION.COMBINE"(ptr %0, ptr @red_comb) ], !dbg !9
  call void @llvm.directive.region.exit(token %1), !dbg !10
  ret void, !dbg !11
}

; Function Attrs: nounwind
declare token @llvm.directive.region.entry() #1

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token) #1

define internal i32 @compute_cost(ptr %x) #2 !dbg !12 {
entry:
  %x.addr = alloca ptr, align 8
  store ptr %x, ptr %x.addr, align 8
  %0 = load i32, ptr %x, align 4, !dbg !13
  ret i32 %0, !dbg !13
}

define internal i32 @compute_priority(ptr %x) #2 !dbg !15 {
entry:
  %x.addr = alloca ptr, align 8
  store ptr %x, ptr %x.addr, align 8
  %0 = load i32, ptr %x, align 4, !dbg !16
  ret i32 %0, !dbg !16
}

; Function Attrs: noinline norecurse nounwind
define internal void @red_init(ptr noundef %0, ptr noundef %1, i64 noundef %2) #3 !dbg !18 {
entry:
  %.addr = alloca ptr, align 8
  %.addr1 = alloca ptr, align 8
  %.addr2 = alloca i64, align 8
  store ptr %0, ptr %.addr, align 8
  store ptr %1, ptr %.addr1, align 8
  store i64 %2, ptr %.addr2, align 8
  %3 = load ptr, ptr %.addr, align 8
  %4 = load ptr, ptr %.addr1, align 8
  %5 = load i64, ptr %.addr2, align 8
  %6 = udiv exact i64 %5, 4
  %arrayctor.dst.end = getelementptr inbounds i32, ptr %3, i64 %6
  br label %arrayctor.loop

arrayctor.loop:                                   ; preds = %arrayctor.loop, %entry
  %arrayctor.dst.cur = phi ptr [ %3, %entry ], [ %arrayctor.dst.next, %arrayctor.loop ]
  %arrayctor.src.cur = phi ptr [ %4, %entry ], [ %arrayctor.src.next, %arrayctor.loop ]
  store i32 0, ptr %arrayctor.dst.cur, align 4
  %arrayctor.dst.next = getelementptr inbounds i32, ptr %arrayctor.dst.cur, i64 1
  %arrayctor.src.next = getelementptr inbounds i32, ptr %arrayctor.src.cur, i64 1
  %arrayctor.done = icmp eq ptr %arrayctor.dst.next, %arrayctor.dst.end
  br i1 %arrayctor.done, label %arrayctor.cont, label %arrayctor.loop

arrayctor.cont:                                   ; preds = %arrayctor.loop
  ret void, !dbg !19
}

; Function Attrs: noinline norecurse nounwind
define internal void @red_comb(ptr noundef %0, ptr noundef %1, i64 noundef %2) #3 !dbg !21 {
entry:
  %.addr = alloca ptr, align 8
  %.addr1 = alloca ptr, align 8
  %.addr2 = alloca i64, align 8
  store ptr %0, ptr %.addr, align 8
  store ptr %1, ptr %.addr1, align 8
  store i64 %2, ptr %.addr2, align 8
  %3 = load ptr, ptr %.addr, align 8
  %4 = load ptr, ptr %.addr1, align 8
  %5 = load i64, ptr %.addr2, align 8
  %6 = udiv exact i64 %5, 4
  %arrayctor.dst.end = getelementptr inbounds i32, ptr %3, i64 %6
  br label %arrayctor.loop

arrayctor.loop:                                   ; preds = %arrayctor.loop, %entry
  %arrayctor.dst.cur = phi ptr [ %3, %entry ], [ %arrayctor.dst.next, %arrayctor.loop ]
  %arrayctor.src.cur = phi ptr [ %4, %entry ], [ %arrayctor.src.next, %arrayctor.loop ]
  %7 = load i32, ptr %arrayctor.dst.cur, align 4, !dbg !22
  %8 = load i32, ptr %arrayctor.src.cur, align 4, !dbg !22
  %add = add nsw i32 %7, %8, !dbg !24
  store i32 %add, ptr %arrayctor.dst.cur, align 4, !dbg !24
  %arrayctor.dst.next = getelementptr inbounds i32, ptr %arrayctor.dst.cur, i64 1
  %arrayctor.src.next = getelementptr inbounds i32, ptr %arrayctor.src.cur, i64 1
  %arrayctor.done = icmp eq ptr %arrayctor.dst.next, %arrayctor.dst.end
  br i1 %arrayctor.done, label %arrayctor.cont, label %arrayctor.loop

arrayctor.cont:                                   ; preds = %arrayctor.loop
  ret void, !dbg !22
}

define internal %struct._depend_unpack_t @compute_dep(ptr %y) #2 !dbg !25 {
entry:
  %retval = alloca %struct._depend_unpack_t, align 8
  %y.addr = alloca ptr, align 8
  store ptr %y, ptr %y.addr, align 8
  %0 = getelementptr inbounds %struct._depend_unpack_t, ptr %retval, i32 0, i32 0
  store ptr %y, ptr %0, align 8
  %1 = getelementptr inbounds %struct._depend_unpack_t, ptr %retval, i32 0, i32 1
  store i64 4, ptr %1, align 8
  %2 = getelementptr inbounds %struct._depend_unpack_t, ptr %retval, i32 0, i32 2
  store i64 0, ptr %2, align 8
  %3 = getelementptr inbounds %struct._depend_unpack_t, ptr %retval, i32 0, i32 3
  store i64 4, ptr %3, align 8
  %4 = load %struct._depend_unpack_t, ptr %retval, align 8
  ret %struct._depend_unpack_t %4
}

attributes #0 = { mustprogress noinline nounwind optnone "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
attributes #1 = { nounwind }
attributes #2 = { "min-legal-vector-width"="0" }
attributes #3 = { noinline norecurse nounwind "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus_14, file: !1, producer: "", isOptimized: false, runtimeVersion: 0, emissionKind: NoDebug, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "<stdin>", directory: "")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 1, !"wchar_size", i32 4}
!4 = !{!""}
!5 = distinct !DISubprogram(name: "foo", scope: !6, file: !6, line: 1, type: !7, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !8)
!6 = !DIFile(filename: "task_args_func_param.ll", directory: "")
!7 = !DISubroutineType(types: !8)
!8 = !{}
!9 = !DILocation(line: 2, column: 13, scope: !5)
!10 = !DILocation(line: 3, column: 6, scope: !5)
!11 = !DILocation(line: 4, column: 1, scope: !5)
!12 = distinct !DISubprogram(linkageName: "compute_cost", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!13 = !DILocation(line: 2, column: 27, scope: !14)
!14 = !DILexicalBlockFile(scope: !12, file: !6, discriminator: 0)
!15 = distinct !DISubprogram(linkageName: "compute_priority", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!16 = !DILocation(line: 2, column: 39, scope: !17)
!17 = !DILexicalBlockFile(scope: !15, file: !6, discriminator: 0)
!18 = distinct !DISubprogram(linkageName: "red_init", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!19 = !DILocation(line: 2, column: 55, scope: !20)
!20 = !DILexicalBlockFile(scope: !18, file: !6, discriminator: 0)
!21 = distinct !DISubprogram(linkageName: "red_comb", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!22 = !DILocation(line: 2, column: 55, scope: !23)
!23 = !DILexicalBlockFile(scope: !21, file: !6, discriminator: 0)
!24 = !DILocation(line: 2, column: 52, scope: !23)
!25 = distinct !DISubprogram(linkageName: "compute_dep", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
; CHECK-LABEL: define {{[^@]+}}@_Z3fooiRi
; CHECK-SAME: (i32 noundef [[X:%.*]], ptr noundef nonnull align 4 dereferenceable(4) [[Y:%.*]]) #[[ATTR0:[0-9]+]] !dbg [[DBG5:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[X_ADDR:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[Y_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store i32 [[X]], ptr [[X_ADDR]], align 4
; CHECK-NEXT:    store ptr [[Y]], ptr [[Y_ADDR]], align 8
; CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[Y_ADDR]], align 8, !dbg [[DBG9:![0-9]+]]
; CHECK-NEXT:    [[TMP1:%.*]] = alloca ptr, align 8, !dbg [[DBG9]]
; CHECK-NEXT:    [[TMP2:%.*]] = alloca ptr, align 8, !dbg [[DBG9]]
; CHECK-NEXT:    [[NUM_DEPS:%.*]] = alloca i64, align 8, !dbg [[DBG9]]
; CHECK-NEXT:    br label [[FINAL_COND:%.*]], !dbg [[DBG9]]
; CHECK:       codeRepl:
; CHECK-NEXT:    store i64 0, ptr [[NUM_DEPS]], align 8, !dbg [[DBG9]]
; CHECK-NEXT:    [[TMP3:%.*]] = load i64, ptr [[NUM_DEPS]], align 8, !dbg [[DBG9]]
; CHECK-NEXT:    [[TMP4:%.*]] = add i64 [[TMP3]], 1, !dbg [[DBG9]]
; CHECK-NEXT:    store i64 [[TMP4]], ptr [[NUM_DEPS]], align 8, !dbg [[DBG9]]
; CHECK-NEXT:    [[TMP5:%.*]] = load i64, ptr [[NUM_DEPS]], align 8, !dbg [[DBG9]]
; CHECK-NEXT:    call void @nanos6_create_task(ptr @task_info_var__Z3fooiRi, ptr @task_invocation_info__Z3fooiRi, ptr null, i64 16, ptr [[TMP1]], ptr [[TMP2]], i64 0, i64 [[TMP5]]), !dbg [[DBG9]]
; CHECK-NEXT:    [[TMP6:%.*]] = load ptr, ptr [[TMP1]], align 8, !dbg [[DBG9]]
; CHECK-NEXT:    [[ARGS_END:%.*]] = getelementptr i8, ptr [[TMP6]], i64 16, !dbg [[DBG9]]
; CHECK-NEXT:    [[GEP_:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3FOOIRI:%.*]], ptr [[TMP6]], i32 0, i32 0, !dbg [[DBG9]]
; CHECK-NEXT:    store ptr [[TMP0]], ptr [[GEP_]], align 8, !dbg [[DBG9]]
; CHECK-NEXT:    [[GEP_X_ADDR:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3FOOIRI]], ptr [[TMP6]], i32 0, i32 1, !dbg [[DBG9]]
; CHECK-NEXT:    call void @llvm.memcpy.p0.p0.i64(ptr align 4 [[GEP_X_ADDR]], ptr align 4 [[X_ADDR]], i64 4, i1 false), !dbg [[DBG9]]
; CHECK-NEXT:    [[TMP7:%.*]] = load ptr, ptr [[TMP2]], align 8, !dbg [[DBG9]]
; CHECK-NEXT:    call void @nanos6_submit_task(ptr [[TMP7]]), !dbg [[DBG9]]
; CHECK-NEXT:    br label [[FINAL_END:%.*]], !dbg [[DBG9]]
; CHECK:       final.end:
; CHECK-NEXT:    ret void, !dbg [[DBG10:![0-9]+]]
; CHECK:       final.then:
; CHECK-NEXT:    br label [[FINAL_END]], !dbg [[DBG10]]
; CHECK:       final.cond:
; CHECK-NEXT:    [[TMP8:%.*]] = call i32 @nanos6_in_final(), !dbg [[DBG9]]
; CHECK-NEXT:    [[TMP9:%.*]] = icmp ne i32 [[TMP8]], 0, !dbg [[DBG9]]
; CHECK-NEXT:    br i1 [[TMP9]], label [[FINAL_THEN:%.*]], label [[CODEREPL:%.*]], !dbg [[DBG9]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_cost
; CHECK-SAME: (ptr [[X:%.*]]) #[[ATTR2:[0-9]+]] !dbg [[DBG11:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[X_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr [[X]], ptr [[X_ADDR]], align 8
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[X]], align 4, !dbg [[DBG12:![0-9]+]]
; CHECK-NEXT:    ret i32 [[TMP0]], !dbg [[DBG12]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_priority
; CHECK-SAME: (ptr [[X:%.*]]) #[[ATTR2]] !dbg [[DBG14:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[X_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr [[X]], ptr [[X_ADDR]], align 8
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[X]], align 4, !dbg [[DBG15:![0-9]+]]
; CHECK-NEXT:    ret i32 [[TMP0]], !dbg [[DBG15]]
;
;
; CHECK-LABEL: define {{[^@]+}}@red_init
; CHECK-SAME: (ptr noundef [[TMP0:%.*]], ptr noundef [[TMP1:%.*]], i64 noundef [[TMP2:%.*]]) #[[ATTR3:[0-9]+]] !dbg [[DBG17:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[DOTADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    [[DOTADDR1:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    [[DOTADDR2:%.*]] = alloca i64, align 8
; CHECK-NEXT:    store ptr [[TMP0]], ptr [[DOTADDR]], align 8
; CHECK-NEXT:    store ptr [[TMP1]], ptr [[DOTADDR1]], align 8
; CHECK-NEXT:    store i64 [[TMP2]], ptr [[DOTADDR2]], align 8
; CHECK-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[DOTADDR]], align 8
; CHECK-NEXT:    [[TMP4:%.*]] = load ptr, ptr [[DOTADDR1]], align 8
; CHECK-NEXT:    [[TMP5:%.*]] = load i64, ptr [[DOTADDR2]], align 8
; CHECK-NEXT:    [[TMP6:%.*]] = udiv exact i64 [[TMP5]], 4
; CHECK-NEXT:    [[ARRAYCTOR_DST_END:%.*]] = getelementptr inbounds i32, ptr [[TMP3]], i64 [[TMP6]]
; CHECK-NEXT:    br label [[ARRAYCTOR_LOOP:%.*]]
; CHECK:       arrayctor.loop:
; CHECK-NEXT:    [[ARRAYCTOR_DST_CUR:%.*]] = phi ptr [ [[TMP3]], [[ENTRY:%.*]] ], [ [[ARRAYCTOR_DST_NEXT:%.*]], [[ARRAYCTOR_LOOP]] ]
; CHECK-NEXT:    [[ARRAYCTOR_SRC_CUR:%.*]] = phi ptr [ [[TMP4]], [[ENTRY]] ], [ [[ARRAYCTOR_SRC_NEXT:%.*]], [[ARRAYCTOR_LOOP]] ]
; CHECK-NEXT:    store i32 0, ptr [[ARRAYCTOR_DST_CUR]], align 4
; CHECK-NEXT:    [[ARRAYCTOR_DST_NEXT]] = getelementptr inbounds i32, ptr [[ARRAYCTOR_DST_CUR]], i64 1
; CHECK-NEXT:    [[ARRAYCTOR_SRC_NEXT]] = getelementptr inbounds i32, ptr [[ARRAYCTOR_SRC_CUR]], i64 1
; CHECK-NEXT:    [[ARRAYCTOR_DONE:%.*]] = icmp eq ptr [[ARRAYCTOR_DST_NEXT]], [[ARRAYCTOR_DST_END]]
; CHECK-NEXT:    br i1 [[ARRAYCTOR_DONE]], label [[ARRAYCTOR_CONT:%.*]], label [[ARRAYCTOR_LOOP]]
; CHECK:       arrayctor.cont:
; CHECK-NEXT:    ret void, !dbg [[DBG18:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@red_comb
; CHECK-SAME: (ptr noundef [[TMP0:%.*]], ptr noundef [[TMP1:%.*]], i64 noundef [[TMP2:%.*]]) #[[ATTR3]] !dbg [[DBG20:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[DOTADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    [[DOTADDR1:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    [[DOTADDR2:%.*]] = alloca i64, align 8
; CHECK-NEXT:    store ptr [[TMP0]], ptr [[DOTADDR]], align 8
; CHECK-NEXT:    store ptr [[TMP1]], ptr [[DOTADDR1]], align 8
; CHECK-NEXT:    store i64 [[TMP2]], ptr [[DOTADDR2]], align 8
; CHECK-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[DOTADDR]], align 8
; CHECK-NEXT:    [[TMP4:%.*]] = load ptr, ptr [[DOTADDR1]], align 8
; CHECK-NEXT:    [[TMP5:%.*]] = load i64, ptr [[DOTADDR2]], align 8
; CHECK-NEXT:    [[TMP6:%.*]] = udiv exact i64 [[TMP5]], 4
; CHECK-NEXT:    [[ARRAYCTOR_DST_END:%.*]] = getelementptr inbounds i32, ptr [[TMP3]], i64 [[TMP6]]
; CHECK-NEXT:    br label [[ARRAYCTOR_LOOP:%.*]]
; CHECK:       arrayctor.loop:
; CHECK-NEXT:    [[ARRAYCTOR_DST_CUR:%.*]] = phi ptr [ [[TMP3]], [[ENTRY:%.*]] ], [ [[ARRAYCTOR_DST_NEXT:%.*]], [[ARRAYCTOR_LOOP]] ]
; CHECK-NEXT:    [[ARRAYCTOR_SRC_CUR:%.*]] = phi ptr [ [[TMP4]], [[ENTRY]] ], [ [[ARRAYCTOR_SRC_NEXT:%.*]], [[ARRAYCTOR_LOOP]] ]
; CHECK-NEXT:    [[TMP7:%.*]] = load i32, ptr [[ARRAYCTOR_DST_CUR]], align 4, !dbg [[DBG21:![0-9]+]]
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[ARRAYCTOR_SRC_CUR]], align 4, !dbg [[DBG21]]
; CHECK-NEXT:    [[ADD:%.*]] = add nsw i32 [[TMP7]], [[TMP8]], !dbg [[DBG23:![0-9]+]]
; CHECK-NEXT:    store i32 [[ADD]], ptr [[ARRAYCTOR_DST_CUR]], align 4, !dbg [[DBG23]]
; CHECK-NEXT:    [[ARRAYCTOR_DST_NEXT]] = getelementptr inbounds i32, ptr [[ARRAYCTOR_DST_CUR]], i64 1
; CHECK-NEXT:    [[ARRAYCTOR_SRC_NEXT]] = getelementptr inbounds i32, ptr [[ARRAYCTOR_SRC_CUR]], i64 1
; CHECK-NEXT:    [[ARRAYCTOR_DONE:%.*]] = icmp eq ptr [[ARRAYCTOR_DST_NEXT]], [[ARRAYCTOR_DST_END]]
; CHECK-NEXT:    br i1 [[ARRAYCTOR_DONE]], label [[ARRAYCTOR_CONT:%.*]], label [[ARRAYCTOR_LOOP]]
; CHECK:       arrayctor.cont:
; CHECK-NEXT:    ret void, !dbg [[DBG21]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_dep
; CHECK-SAME: (ptr [[Y:%.*]]) #[[ATTR2]] !dbg [[DBG24:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[RETVAL:%.*]] = alloca [[STRUCT__DEPEND_UNPACK_T:%.*]], align 8
; CHECK-NEXT:    [[Y_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr [[Y]], ptr [[Y_ADDR]], align 8
; CHECK-NEXT:    [[TMP0:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], i32 0, i32 0
; CHECK-NEXT:    store ptr [[Y]], ptr [[TMP0]], align 8
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], i32 0, i32 1
; CHECK-NEXT:    store i64 4, ptr [[TMP1]], align 8
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], i32 0, i32 2
; CHECK-NEXT:    store i64 0, ptr [[TMP2]], align 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], i32 0, i32 3
; CHECK-NEXT:    store i64 4, ptr [[TMP3]], align 8
; CHECK-NEXT:    [[TMP4:%.*]] = load [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], align 8
; CHECK-NEXT:    ret [[STRUCT__DEPEND_UNPACK_T]] [[TMP4]]
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_unpacked_task_region__Z3fooiRi
; CHECK-SAME: (ptr [[TMP0:%.*]], ptr [[X_ADDR:%.*]], ptr [[DEVICE_ENV:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) !dbg [[DBG25:![0-9]+]] {
; CHECK-NEXT:  newFuncRoot:
; CHECK-NEXT:    br label [[TMP1:%.*]], !dbg [[DBG26:![0-9]+]]
; CHECK:       1:
; CHECK-NEXT:    br label [[DOTEXITSTUB:%.*]], !dbg [[DBG27:![0-9]+]]
; CHECK:       .exitStub:
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_task_region__Z3fooiRi
; CHECK-SAME: (ptr [[TASK_ARGS:%.*]], ptr [[DEVICE_ENV:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3FOOIRI:%.*]], ptr [[TASK_ARGS]], i32 0, i32 0
; CHECK-NEXT:    [[LOAD_GEP_:%.*]] = load ptr, ptr [[GEP_]], align 8
; CHECK-NEXT:    [[GEP_X_ADDR:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3FOOIRI]], ptr [[TASK_ARGS]], i32 0, i32 1
; CHECK-NEXT:    [[TLATE_LOAD_GEP_:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr [[LOAD_GEP_]], ptr [[TLATE_LOAD_GEP_]], align 8
; CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[TLATE_LOAD_GEP_]], align 8
; CHECK-NEXT:    [[TMP1:%.*]] = icmp ne ptr [[ADDRESS_TRANSLATION_TABLE]], null
; CHECK-NEXT:    br i1 [[TMP1]], label [[TMP2:%.*]], label [[TMP8:%.*]]
; CHECK:       2:
; CHECK-NEXT:    [[LOCAL_LOOKUP_:%.*]] = getelementptr [[NANOS6_ADDRESS_TRANSLATION_ENTRY_T:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE]], i32 0, i32 0
; CHECK-NEXT:    [[TMP3:%.*]] = load i64, ptr [[LOCAL_LOOKUP_]], align 8
; CHECK-NEXT:    [[DEVICE_LOOKUP_:%.*]] = getelementptr [[NANOS6_ADDRESS_TRANSLATION_ENTRY_T]], ptr [[ADDRESS_TRANSLATION_TABLE]], i32 0, i32 1
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[DEVICE_LOOKUP_]], align 8
; CHECK-NEXT:    [[TMP5:%.*]] = sub i64 0, [[TMP3]]
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[TMP0]], i64 [[TMP5]]
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[TMP6]], i64 [[TMP4]]
; CHECK-NEXT:    store ptr [[TMP7]], ptr [[TLATE_LOAD_GEP_]], align 8
; CHECK-NEXT:    br label [[TMP8]]
; CHECK:       8:
; CHECK-NEXT:    [[TMP9:%.*]] = load ptr, ptr [[TLATE_LOAD_GEP_]], align 8
; CHECK-NEXT:    call void @nanos6_unpacked_task_region__Z3fooiRi(ptr [[TMP9]], ptr [[GEP_X_ADDR]], ptr [[DEVICE_ENV]], ptr [[ADDRESS_TRANSLATION_TABLE]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_unpacked_deps__Z3fooiRi
; CHECK-SAME: (ptr [[TMP0:%.*]], ptr [[X_ADDR:%.*]], ptr [[LOOP_BOUNDS:%.*]], ptr [[HANDLER:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP1:%.*]] = call [[STRUCT__DEPEND_UNPACK_T:%.*]] @compute_dep(ptr [[TMP0]])
; CHECK-NEXT:    [[TMP2:%.*]] = call [[STRUCT__DEPEND_UNPACK_T]] @compute_dep(ptr [[TMP0]])
; CHECK-NEXT:    [[TMP3:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T]] [[TMP1]], 0
; CHECK-NEXT:    [[TMP4:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T]] [[TMP1]], 1
; CHECK-NEXT:    [[TMP5:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T]] [[TMP1]], 2
; CHECK-NEXT:    [[TMP6:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T]] [[TMP2]], 3
; CHECK-NEXT:    call void @nanos6_register_region_reduction_depinfo1(i32 6000, i32 0, ptr [[HANDLER]], i32 0, ptr @[[GLOB1:[0-9]+]], ptr [[TMP3]], i64 [[TMP4]], i64 [[TMP5]], i64 [[TMP6]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_deps__Z3fooiRi
; CHECK-SAME: (ptr [[TASK_ARGS:%.*]], ptr [[LOOP_BOUNDS:%.*]], ptr [[HANDLER:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3FOOIRI:%.*]], ptr [[TASK_ARGS]], i32 0, i32 0
; CHECK-NEXT:    [[LOAD_GEP_:%.*]] = load ptr, ptr [[GEP_]], align 8
; CHECK-NEXT:    [[GEP_X_ADDR:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3FOOIRI]], ptr [[TASK_ARGS]], i32 0, i32 1
; CHECK-NEXT:    call void @nanos6_unpacked_deps__Z3fooiRi(ptr [[LOAD_GEP_]], ptr [[GEP_X_ADDR]], ptr [[LOOP_BOUNDS]], ptr [[HANDLER]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_unpacked_constraints__Z3fooiRi
; CHECK-SAME: (ptr [[TMP0:%.*]], ptr [[X_ADDR:%.*]], ptr [[CONSTRAINTS:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_CONSTRAINTS:%.*]] = getelementptr [[NANOS6_TASK_CONSTRAINTS_T:%.*]], ptr [[CONSTRAINTS]], i32 0, i32 0
; CHECK-NEXT:    [[TMP1:%.*]] = call i32 @compute_cost(ptr [[X_ADDR]])
; CHECK-NEXT:    [[TMP2:%.*]] = zext i32 [[TMP1]] to i64
; CHECK-NEXT:    store i64 [[TMP2]], ptr [[GEP_CONSTRAINTS]], align 8
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_constraints__Z3fooiRi
; CHECK-SAME: (ptr [[TASK_ARGS:%.*]], ptr [[CONSTRAINTS:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3FOOIRI:%.*]], ptr [[TASK_ARGS]], i32 0, i32 0
; CHECK-NEXT:    [[LOAD_GEP_:%.*]] = load ptr, ptr [[GEP_]], align 8
; CHECK-NEXT:    [[GEP_X_ADDR:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3FOOIRI]], ptr [[TASK_ARGS]], i32 0, i32 1
; CHECK-NEXT:    call void @nanos6_unpacked_constraints__Z3fooiRi(ptr [[LOAD_GEP_]], ptr [[GEP_X_ADDR]], ptr [[CONSTRAINTS]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_unpacked_priority__Z3fooiRi
; CHECK-SAME: (ptr [[TMP0:%.*]], ptr [[X_ADDR:%.*]], ptr [[PRIORITY:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP1:%.*]] = call i32 @compute_priority(ptr [[X_ADDR]])
; CHECK-NEXT:    [[TMP2:%.*]] = sext i32 [[TMP1]] to i64
; CHECK-NEXT:    store i64 [[TMP2]], ptr [[PRIORITY]], align 8
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_priority__Z3fooiRi
; CHECK-SAME: (ptr [[TASK_ARGS:%.*]], ptr [[PRIORITY:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3FOOIRI:%.*]], ptr [[TASK_ARGS]], i32 0, i32 0
; CHECK-NEXT:    [[LOAD_GEP_:%.*]] = load ptr, ptr [[GEP_]], align 8
; CHECK-NEXT:    [[GEP_X_ADDR:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3FOOIRI]], ptr [[TASK_ARGS]], i32 0, i32 1
; CHECK-NEXT:    call void @nanos6_unpacked_priority__Z3fooiRi(ptr [[LOAD_GEP_]], ptr [[GEP_X_ADDR]], ptr [[PRIORITY]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_constructor_register_task_info() {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @nanos6_register_task_info(ptr @task_info_var__Z3fooiRi)
; CHECK-NEXT:    ret void
;
