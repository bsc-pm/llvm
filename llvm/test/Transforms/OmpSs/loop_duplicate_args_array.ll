; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --function-signature --include-generated-funcs
; RUN: opt %s -passes=ompss-2 -S | FileCheck %s
; ModuleID = 'loop_duplicate_args_array.ll'
source_filename = "loop_duplicate_args_array.ll"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; This test checks task_args duplicate shared/private/firstprivate arrays

; struct S {
;     S();
;     S(const S&);
;     ~S();
; };
; void foo() {
;     S s[2];
;     #pragma oss task for shared(s)
;     for (int i = 0; i < 10; ++i) {}
;     #pragma oss task for private(s)
;     for (int i = 0; i < 10; ++i) {}
;     #pragma oss task for firstprivate(s)
;     for (int i = 0; i < 10; ++i) {}
; }

%struct.S = type { i8 }

; Function Attrs: mustprogress noinline nounwind optnone
define dso_local void @_Z3foov() #0 !dbg !5 {
entry:
  %s = alloca [2 x %struct.S], align 1
  %i = alloca i32, align 4
  %i1 = alloca i32, align 4
  %i2 = alloca i32, align 4
  %array.begin = getelementptr inbounds [2 x %struct.S], ptr %s, i32 0, i32 0, !dbg !9
  %arrayctor.end = getelementptr inbounds %struct.S, ptr %array.begin, i64 2, !dbg !9
  br label %arrayctor.loop, !dbg !9

arrayctor.loop:                                   ; preds = %arrayctor.loop, %entry
  %arrayctor.cur = phi ptr [ %array.begin, %entry ], [ %arrayctor.next, %arrayctor.loop ], !dbg !9
  call void @_ZN1SC1Ev(ptr noundef nonnull align 1 dereferenceable(1) %arrayctor.cur), !dbg !9
  %arrayctor.next = getelementptr inbounds %struct.S, ptr %arrayctor.cur, i64 1, !dbg !9
  %arrayctor.done = icmp eq ptr %arrayctor.next, %arrayctor.end, !dbg !9
  br i1 %arrayctor.done, label %arrayctor.cont, label %arrayctor.loop, !dbg !9

arrayctor.cont:                                   ; preds = %arrayctor.loop
  store i32 0, ptr %i, align 4, !dbg !10
  %0 = call token @llvm.directive.region.entry() [ "DIR.OSS"([9 x i8] c"TASK.FOR\00"), "QUAL.OSS.SHARED"(ptr %s, [2 x %struct.S] undef), "QUAL.OSS.PRIVATE"(ptr %i, i32 undef), "QUAL.OSS.LOOP.IND.VAR"(ptr %i), "QUAL.OSS.LOOP.LOWER.BOUND"(ptr @compute_lb), "QUAL.OSS.LOOP.UPPER.BOUND"(ptr @compute_ub), "QUAL.OSS.LOOP.STEP"(ptr @compute_step), "QUAL.OSS.LOOP.TYPE"(i64 0, i64 1, i64 1, i64 1, i64 1) ], !dbg !11
  call void @llvm.directive.region.exit(token %0), !dbg !12
  store i32 0, ptr %i1, align 4, !dbg !13
  %1 = call token @llvm.directive.region.entry() [ "DIR.OSS"([9 x i8] c"TASK.FOR\00"), "QUAL.OSS.PRIVATE"(ptr %s, [2 x %struct.S] undef), "QUAL.OSS.INIT"(ptr %s, ptr @oss_ctor_ZN1SC1Ev), "QUAL.OSS.DEINIT"(ptr %s, ptr @oss_dtor_ZN1SD1Ev), "QUAL.OSS.PRIVATE"(ptr %i1, i32 undef), "QUAL.OSS.LOOP.IND.VAR"(ptr %i1), "QUAL.OSS.LOOP.LOWER.BOUND"(ptr @compute_lb.1), "QUAL.OSS.LOOP.UPPER.BOUND"(ptr @compute_ub.2), "QUAL.OSS.LOOP.STEP"(ptr @compute_step.3), "QUAL.OSS.LOOP.TYPE"(i64 0, i64 1, i64 1, i64 1, i64 1) ], !dbg !14
  call void @llvm.directive.region.exit(token %1), !dbg !15
  store i32 0, ptr %i2, align 4, !dbg !16
  %2 = call token @llvm.directive.region.entry() [ "DIR.OSS"([9 x i8] c"TASK.FOR\00"), "QUAL.OSS.PRIVATE"(ptr %i2, i32 undef), "QUAL.OSS.FIRSTPRIVATE"(ptr %s, [2 x %struct.S] undef), "QUAL.OSS.COPY"(ptr %s, ptr @oss_copy_ctor_ZN1SC1ERKS_), "QUAL.OSS.DEINIT"(ptr %s, ptr @oss_dtor_ZN1SD1Ev), "QUAL.OSS.LOOP.IND.VAR"(ptr %i2), "QUAL.OSS.LOOP.LOWER.BOUND"(ptr @compute_lb.4), "QUAL.OSS.LOOP.UPPER.BOUND"(ptr @compute_ub.5), "QUAL.OSS.LOOP.STEP"(ptr @compute_step.6), "QUAL.OSS.LOOP.TYPE"(i64 0, i64 1, i64 1, i64 1, i64 1) ], !dbg !17
  call void @llvm.directive.region.exit(token %2), !dbg !18
  %array.begin3 = getelementptr inbounds [2 x %struct.S], ptr %s, i32 0, i32 0, !dbg !19
  %3 = getelementptr inbounds %struct.S, ptr %array.begin3, i64 2, !dbg !19
  br label %arraydestroy.body, !dbg !19

arraydestroy.body:                                ; preds = %arraydestroy.body, %arrayctor.cont
  %arraydestroy.elementPast = phi ptr [ %3, %arrayctor.cont ], [ %arraydestroy.element, %arraydestroy.body ], !dbg !19
  %arraydestroy.element = getelementptr inbounds %struct.S, ptr %arraydestroy.elementPast, i64 -1, !dbg !19
  call void @_ZN1SD1Ev(ptr noundef nonnull align 1 dereferenceable(1) %arraydestroy.element) #2, !dbg !19
  %arraydestroy.done = icmp eq ptr %arraydestroy.element, %array.begin3, !dbg !19
  br i1 %arraydestroy.done, label %arraydestroy.done4, label %arraydestroy.body, !dbg !19

arraydestroy.done4:                               ; preds = %arraydestroy.body
  ret void, !dbg !19
}

declare void @_ZN1SC1Ev(ptr noundef nonnull align 1 dereferenceable(1)) unnamed_addr #1

; Function Attrs: nounwind
declare token @llvm.directive.region.entry() #2

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token) #2

define internal i32 @compute_lb() #3 !dbg !20 {
entry:
  ret i32 0, !dbg !21
}

define internal i32 @compute_ub() #3 !dbg !23 {
entry:
  ret i32 10, !dbg !24
}

define internal i32 @compute_step() #3 !dbg !26 {
entry:
  ret i32 1, !dbg !27
}

; Function Attrs: noinline norecurse nounwind
define internal void @oss_ctor_ZN1SC1Ev(ptr noundef %0, i64 noundef %1) #4 !dbg !29 {
entry:
  %.addr = alloca ptr, align 8
  %.addr1 = alloca i64, align 8
  store ptr %0, ptr %.addr, align 8
  store i64 %1, ptr %.addr1, align 8
  %2 = load ptr, ptr %.addr, align 8, !dbg !30
  %3 = load i64, ptr %.addr1, align 8, !dbg !30
  %arrayctor.dst.end = getelementptr inbounds %struct.S, ptr %2, i64 %3, !dbg !30
  br label %arrayctor.loop, !dbg !30

arrayctor.loop:                                   ; preds = %arrayctor.loop, %entry
  %arrayctor.dst.cur = phi ptr [ %2, %entry ], [ %arrayctor.dst.next, %arrayctor.loop ], !dbg !30
  call void @_ZN1SC1Ev(ptr noundef nonnull align 1 dereferenceable(1) %arrayctor.dst.cur), !dbg !31
  %arrayctor.dst.next = getelementptr inbounds %struct.S, ptr %arrayctor.dst.cur, i64 1, !dbg !30
  %arrayctor.done = icmp eq ptr %arrayctor.dst.next, %arrayctor.dst.end, !dbg !30
  br i1 %arrayctor.done, label %arrayctor.cont, label %arrayctor.loop, !dbg !30

arrayctor.cont:                                   ; preds = %arrayctor.loop
  ret void, !dbg !31
}

; Function Attrs: nounwind
declare void @_ZN1SD1Ev(ptr noundef nonnull align 1 dereferenceable(1)) unnamed_addr #5

; Function Attrs: noinline norecurse nounwind
define internal void @oss_dtor_ZN1SD1Ev(ptr noundef %0, i64 noundef %1) #4 !dbg !33 {
entry:
  %.addr = alloca ptr, align 8
  %.addr1 = alloca i64, align 8
  store ptr %0, ptr %.addr, align 8
  store i64 %1, ptr %.addr1, align 8
  %2 = load ptr, ptr %.addr, align 8, !dbg !34
  %3 = load i64, ptr %.addr1, align 8, !dbg !34
  %arraydtor.dst.end = getelementptr inbounds %struct.S, ptr %2, i64 %3, !dbg !34
  br label %arraydtor.loop, !dbg !34

arraydtor.loop:                                   ; preds = %arraydtor.loop, %entry
  %arraydtor.dst.cur = phi ptr [ %2, %entry ], [ %arraydtor.dst.next, %arraydtor.loop ], !dbg !34
  call void @_ZN1SD1Ev(ptr noundef nonnull align 1 dereferenceable(1) %arraydtor.dst.cur) #2, !dbg !34
  %arraydtor.dst.next = getelementptr inbounds %struct.S, ptr %arraydtor.dst.cur, i64 1, !dbg !34
  %arraydtor.done = icmp eq ptr %arraydtor.dst.next, %arraydtor.dst.end, !dbg !34
  br i1 %arraydtor.done, label %arraydtor.cont, label %arraydtor.loop, !dbg !34

arraydtor.cont:                                   ; preds = %arraydtor.loop
  ret void, !dbg !34
}

define internal i32 @compute_lb.1() #3 !dbg !35 {
entry:
  ret i32 0, !dbg !36
}

define internal i32 @compute_ub.2() #3 !dbg !38 {
entry:
  ret i32 10, !dbg !39
}

define internal i32 @compute_step.3() #3 !dbg !41 {
entry:
  ret i32 1, !dbg !42
}

declare void @_ZN1SC1ERKS_(ptr noundef nonnull align 1 dereferenceable(1), ptr noundef nonnull align 1 dereferenceable(1)) unnamed_addr #1

; Function Attrs: noinline norecurse nounwind
define internal void @oss_copy_ctor_ZN1SC1ERKS_(ptr noundef %0, ptr noundef %1, i64 noundef %2) #4 !dbg !44 {
entry:
  %.addr = alloca ptr, align 8
  %.addr1 = alloca ptr, align 8
  %.addr2 = alloca i64, align 8
  store ptr %0, ptr %.addr, align 8
  store ptr %1, ptr %.addr1, align 8
  store i64 %2, ptr %.addr2, align 8
  %3 = load ptr, ptr %.addr, align 8, !dbg !45
  %4 = load ptr, ptr %.addr1, align 8, !dbg !45
  %5 = load i64, ptr %.addr2, align 8, !dbg !45
  %arrayctor.dst.end = getelementptr inbounds %struct.S, ptr %4, i64 %5, !dbg !45
  br label %arrayctor.loop, !dbg !45

arrayctor.loop:                                   ; preds = %arrayctor.loop, %entry
  %arrayctor.dst.cur = phi ptr [ %4, %entry ], [ %arrayctor.dst.next, %arrayctor.loop ], !dbg !45
  %arrayctor.src.cur = phi ptr [ %3, %entry ], [ %arrayctor.src.next, %arrayctor.loop ], !dbg !45
  call void @_ZN1SC1ERKS_(ptr noundef nonnull align 1 dereferenceable(1) %arrayctor.dst.cur, ptr noundef nonnull align 1 dereferenceable(1) %arrayctor.src.cur), !dbg !46
  %arrayctor.dst.next = getelementptr inbounds %struct.S, ptr %arrayctor.dst.cur, i64 1, !dbg !45
  %arrayctor.src.next = getelementptr inbounds %struct.S, ptr %arrayctor.src.cur, i64 1, !dbg !45
  %arrayctor.done = icmp eq ptr %arrayctor.dst.next, %arrayctor.dst.end, !dbg !45
  br i1 %arrayctor.done, label %arrayctor.cont, label %arrayctor.loop, !dbg !45

arrayctor.cont:                                   ; preds = %arrayctor.loop
  ret void, !dbg !46
}

define internal i32 @compute_lb.4() #3 !dbg !48 {
entry:
  ret i32 0, !dbg !49
}

define internal i32 @compute_ub.5() #3 !dbg !51 {
entry:
  ret i32 10, !dbg !52
}

define internal i32 @compute_step.6() #3 !dbg !54 {
entry:
  ret i32 1, !dbg !55
}

attributes #0 = { mustprogress noinline nounwind optnone "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
attributes #1 = { "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
attributes #2 = { nounwind }
attributes #3 = { "min-legal-vector-width"="0" }
attributes #4 = { noinline norecurse nounwind "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
attributes #5 = { nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus_14, file: !1, producer: "", isOptimized: false, runtimeVersion: 0, emissionKind: NoDebug, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "<stdin>", directory: "")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 1, !"wchar_size", i32 4}
!4 = !{!""}
!5 = distinct !DISubprogram(name: "foo", scope: !6, file: !6, line: 7, type: !7, scopeLine: 7, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !8)
!6 = !DIFile(filename: "loop_duplicate_args_array.ll", directory: "")
!7 = !DISubroutineType(types: !8)
!8 = !{}
!9 = !DILocation(line: 8, column: 8, scope: !5)
!10 = !DILocation(line: 10, column: 15, scope: !5)
!11 = !DILocation(line: 10, column: 11, scope: !5)
!12 = !DILocation(line: 10, column: 36, scope: !5)
!13 = !DILocation(line: 12, column: 15, scope: !5)
!14 = !DILocation(line: 12, column: 11, scope: !5)
!15 = !DILocation(line: 12, column: 36, scope: !5)
!16 = !DILocation(line: 14, column: 15, scope: !5)
!17 = !DILocation(line: 14, column: 11, scope: !5)
!18 = !DILocation(line: 14, column: 36, scope: !5)
!19 = !DILocation(line: 15, column: 2, scope: !5)
!20 = distinct !DISubprogram(linkageName: "compute_lb", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!21 = !DILocation(line: 10, column: 19, scope: !22)
!22 = !DILexicalBlockFile(scope: !20, file: !6, discriminator: 0)
!23 = distinct !DISubprogram(linkageName: "compute_ub", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!24 = !DILocation(line: 10, column: 26, scope: !25)
!25 = !DILexicalBlockFile(scope: !23, file: !6, discriminator: 0)
!26 = distinct !DISubprogram(linkageName: "compute_step", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!27 = !DILocation(line: 10, column: 30, scope: !28)
!28 = !DILexicalBlockFile(scope: !26, file: !6, discriminator: 0)
!29 = distinct !DISubprogram(linkageName: "oss_ctor_ZN1SC1Ev", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!30 = !DILocation(line: 0, scope: !29)
!31 = !DILocation(line: 11, column: 35, scope: !32)
!32 = !DILexicalBlockFile(scope: !29, file: !6, discriminator: 0)
!33 = distinct !DISubprogram(linkageName: "oss_dtor_ZN1SD1Ev", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!34 = !DILocation(line: 0, scope: !33)
!35 = distinct !DISubprogram(linkageName: "compute_lb.1", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!36 = !DILocation(line: 12, column: 19, scope: !37)
!37 = !DILexicalBlockFile(scope: !35, file: !6, discriminator: 0)
!38 = distinct !DISubprogram(linkageName: "compute_ub.2", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!39 = !DILocation(line: 12, column: 26, scope: !40)
!40 = !DILexicalBlockFile(scope: !38, file: !6, discriminator: 0)
!41 = distinct !DISubprogram(linkageName: "compute_step.3", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!42 = !DILocation(line: 12, column: 30, scope: !43)
!43 = !DILexicalBlockFile(scope: !41, file: !6, discriminator: 0)
!44 = distinct !DISubprogram(linkageName: "oss_copy_ctor_ZN1SC1ERKS_", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!45 = !DILocation(line: 0, scope: !44)
!46 = !DILocation(line: 13, column: 40, scope: !47)
!47 = !DILexicalBlockFile(scope: !44, file: !6, discriminator: 0)
!48 = distinct !DISubprogram(linkageName: "compute_lb.4", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!49 = !DILocation(line: 14, column: 19, scope: !50)
!50 = !DILexicalBlockFile(scope: !48, file: !6, discriminator: 0)
!51 = distinct !DISubprogram(linkageName: "compute_ub.5", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!52 = !DILocation(line: 14, column: 26, scope: !53)
!53 = !DILexicalBlockFile(scope: !51, file: !6, discriminator: 0)
!54 = distinct !DISubprogram(linkageName: "compute_step.6", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!55 = !DILocation(line: 14, column: 30, scope: !56)
!56 = !DILexicalBlockFile(scope: !54, file: !6, discriminator: 0)
; CHECK-LABEL: define {{[^@]+}}@_Z3foov
; CHECK-SAME: () #[[ATTR0:[0-9]+]] !dbg [[DBG5:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[S:%.*]] = alloca [2 x %struct.S], align 1
; CHECK-NEXT:    [[I:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[I1:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[I2:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[ARRAY_BEGIN:%.*]] = getelementptr inbounds [2 x %struct.S], ptr [[S]], i32 0, i32 0, !dbg [[DBG9:![0-9]+]]
; CHECK-NEXT:    [[ARRAYCTOR_END:%.*]] = getelementptr inbounds [[STRUCT_S:%.*]], ptr [[ARRAY_BEGIN]], i64 2, !dbg [[DBG9]]
; CHECK-NEXT:    [[TMP0:%.*]] = alloca ptr, align 8, !dbg [[DBG10:![0-9]+]]
; CHECK-NEXT:    [[TMP1:%.*]] = alloca ptr, align 8, !dbg [[DBG10]]
; CHECK-NEXT:    [[NUM_DEPS:%.*]] = alloca i64, align 8, !dbg [[DBG10]]
; CHECK-NEXT:    [[TMP2:%.*]] = alloca ptr, align 8, !dbg [[DBG11:![0-9]+]]
; CHECK-NEXT:    [[TMP3:%.*]] = alloca ptr, align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[NUM_DEPS17:%.*]] = alloca i64, align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP4:%.*]] = alloca ptr, align 8, !dbg [[DBG12:![0-9]+]]
; CHECK-NEXT:    [[TMP5:%.*]] = alloca ptr, align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[NUM_DEPS32:%.*]] = alloca i64, align 8, !dbg [[DBG12]]
; CHECK-NEXT:    br label [[ARRAYCTOR_LOOP:%.*]], !dbg [[DBG9]]
; CHECK:       arrayctor.loop:
; CHECK-NEXT:    [[ARRAYCTOR_CUR:%.*]] = phi ptr [ [[ARRAY_BEGIN]], [[ENTRY:%.*]] ], [ [[ARRAYCTOR_NEXT:%.*]], [[ARRAYCTOR_LOOP]] ], !dbg [[DBG9]]
; CHECK-NEXT:    call void @_ZN1SC1Ev(ptr noundef nonnull align 1 dereferenceable(1) [[ARRAYCTOR_CUR]]), !dbg [[DBG9]]
; CHECK-NEXT:    [[ARRAYCTOR_NEXT]] = getelementptr inbounds [[STRUCT_S]], ptr [[ARRAYCTOR_CUR]], i64 1, !dbg [[DBG9]]
; CHECK-NEXT:    [[ARRAYCTOR_DONE:%.*]] = icmp eq ptr [[ARRAYCTOR_NEXT]], [[ARRAYCTOR_END]], !dbg [[DBG9]]
; CHECK-NEXT:    br i1 [[ARRAYCTOR_DONE]], label [[ARRAYCTOR_CONT:%.*]], label [[ARRAYCTOR_LOOP]], !dbg [[DBG9]]
; CHECK:       arrayctor.cont:
; CHECK-NEXT:    store i32 0, ptr [[I]], align 4, !dbg [[DBG13:![0-9]+]]
; CHECK-NEXT:    br label [[FINAL_COND:%.*]], !dbg [[DBG10]]
; CHECK:       codeRepl:
; CHECK-NEXT:    store i64 0, ptr [[NUM_DEPS]], align 8, !dbg [[DBG10]]
; CHECK-NEXT:    [[TMP6:%.*]] = load i64, ptr [[NUM_DEPS]], align 8, !dbg [[DBG10]]
; CHECK-NEXT:    [[TMP7:%.*]] = call i32 @compute_lb(), !dbg [[DBG10]]
; CHECK-NEXT:    [[TMP8:%.*]] = call i32 @compute_ub(), !dbg [[DBG10]]
; CHECK-NEXT:    [[TMP9:%.*]] = call i32 @compute_step(), !dbg [[DBG10]]
; CHECK-NEXT:    [[TMP10:%.*]] = sub i32 [[TMP8]], [[TMP7]], !dbg [[DBG10]]
; CHECK-NEXT:    [[TMP11:%.*]] = sub i32 [[TMP10]], 1, !dbg [[DBG10]]
; CHECK-NEXT:    [[TMP12:%.*]] = sdiv i32 [[TMP11]], [[TMP9]], !dbg [[DBG10]]
; CHECK-NEXT:    [[TMP13:%.*]] = add i32 [[TMP12]], 1, !dbg [[DBG10]]
; CHECK-NEXT:    [[TMP14:%.*]] = sext i32 [[TMP13]] to i64, !dbg [[DBG10]]
; CHECK-NEXT:    [[TMP15:%.*]] = mul i64 1, [[TMP14]], !dbg [[DBG10]]
; CHECK-NEXT:    call void @nanos6_create_loop(ptr @task_info_var__Z3foov, ptr @task_invocation_info__Z3foov, ptr null, i64 16, ptr [[TMP0]], ptr [[TMP1]], i64 8, i64 [[TMP6]], i64 0, i64 [[TMP15]], i64 0, i64 0), !dbg [[DBG10]]
; CHECK-NEXT:    [[TMP16:%.*]] = load ptr, ptr [[TMP0]], align 8, !dbg [[DBG10]]
; CHECK-NEXT:    [[ARGS_END:%.*]] = getelementptr i8, ptr [[TMP16]], i64 16, !dbg [[DBG10]]
; CHECK-NEXT:    [[GEP_S:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3FOOV:%.*]], ptr [[TMP16]], i32 0, i32 0, !dbg [[DBG10]]
; CHECK-NEXT:    store ptr [[S]], ptr [[GEP_S]], align 8, !dbg [[DBG10]]
; CHECK-NEXT:    [[TMP17:%.*]] = load ptr, ptr [[TMP1]], align 8, !dbg [[DBG10]]
; CHECK-NEXT:    call void @nanos6_submit_task(ptr [[TMP17]]), !dbg [[DBG10]]
; CHECK-NEXT:    br label [[FOR_END3:%.*]], !dbg [[DBG10]]
; CHECK:       final.end:
; CHECK-NEXT:    store i32 0, ptr [[I1]], align 4, !dbg [[DBG14:![0-9]+]]
; CHECK-NEXT:    br label [[FINAL_COND10:%.*]], !dbg [[DBG11]]
; CHECK:       codeRepl16:
; CHECK-NEXT:    store i64 0, ptr [[NUM_DEPS17]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP18:%.*]] = load i64, ptr [[NUM_DEPS17]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP19:%.*]] = call i32 @compute_lb.1(), !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP20:%.*]] = call i32 @compute_ub.2(), !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP21:%.*]] = call i32 @compute_step.3(), !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP22:%.*]] = sub i32 [[TMP20]], [[TMP19]], !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP23:%.*]] = sub i32 [[TMP22]], 1, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP24:%.*]] = sdiv i32 [[TMP23]], [[TMP21]], !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP25:%.*]] = add i32 [[TMP24]], 1, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP26:%.*]] = sext i32 [[TMP25]] to i64, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP27:%.*]] = mul i64 1, [[TMP26]], !dbg [[DBG11]]
; CHECK-NEXT:    call void @nanos6_create_loop(ptr @task_info_var__Z3foov.10, ptr @task_invocation_info__Z3foov.6, ptr null, i64 16, ptr [[TMP2]], ptr [[TMP3]], i64 8, i64 [[TMP18]], i64 0, i64 [[TMP27]], i64 0, i64 0), !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP28:%.*]] = load ptr, ptr [[TMP2]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[ARGS_END18:%.*]] = getelementptr i8, ptr [[TMP28]], i64 16, !dbg [[DBG11]]
; CHECK-NEXT:    [[GEP_S19:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3FOOV_0:%.*]], ptr [[TMP28]], i32 0, i32 0, !dbg [[DBG11]]
; CHECK-NEXT:    call void @oss_ctor_ZN1SC1Ev(ptr [[GEP_S19]], i64 2), !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP29:%.*]] = load ptr, ptr [[TMP3]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    call void @nanos6_submit_task(ptr [[TMP29]]), !dbg [[DBG11]]
; CHECK-NEXT:    br label [[FOR_END14:%.*]], !dbg [[DBG11]]
; CHECK:       final.end9:
; CHECK-NEXT:    store i32 0, ptr [[I2]], align 4, !dbg [[DBG15:![0-9]+]]
; CHECK-NEXT:    br label [[FINAL_COND25:%.*]], !dbg [[DBG12]]
; CHECK:       codeRepl31:
; CHECK-NEXT:    store i64 0, ptr [[NUM_DEPS32]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP30:%.*]] = load i64, ptr [[NUM_DEPS32]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP31:%.*]] = call i32 @compute_lb.4(), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP32:%.*]] = call i32 @compute_ub.5(), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP33:%.*]] = call i32 @compute_step.6(), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP34:%.*]] = sub i32 [[TMP32]], [[TMP31]], !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP35:%.*]] = sub i32 [[TMP34]], 1, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP36:%.*]] = sdiv i32 [[TMP35]], [[TMP33]], !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP37:%.*]] = add i32 [[TMP36]], 1, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP38:%.*]] = sext i32 [[TMP37]] to i64, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP39:%.*]] = mul i64 1, [[TMP38]], !dbg [[DBG12]]
; CHECK-NEXT:    call void @nanos6_create_loop(ptr @task_info_var__Z3foov.23, ptr @task_invocation_info__Z3foov.19, ptr null, i64 16, ptr [[TMP4]], ptr [[TMP5]], i64 8, i64 [[TMP30]], i64 0, i64 [[TMP39]], i64 0, i64 0), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP40:%.*]] = load ptr, ptr [[TMP4]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[ARGS_END33:%.*]] = getelementptr i8, ptr [[TMP40]], i64 16, !dbg [[DBG12]]
; CHECK-NEXT:    [[GEP_S34:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3FOOV_1:%.*]], ptr [[TMP40]], i32 0, i32 1, !dbg [[DBG12]]
; CHECK-NEXT:    call void @oss_copy_ctor_ZN1SC1ERKS_(ptr [[S]], ptr [[GEP_S34]], i64 2), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP41:%.*]] = load ptr, ptr [[TMP5]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    call void @nanos6_submit_task(ptr [[TMP41]]), !dbg [[DBG12]]
; CHECK-NEXT:    br label [[FOR_END29:%.*]], !dbg [[DBG12]]
; CHECK:       final.end24:
; CHECK-NEXT:    [[ARRAY_BEGIN3:%.*]] = getelementptr inbounds [2 x %struct.S], ptr [[S]], i32 0, i32 0, !dbg [[DBG16:![0-9]+]]
; CHECK-NEXT:    [[TMP42:%.*]] = getelementptr inbounds [[STRUCT_S]], ptr [[ARRAY_BEGIN3]], i64 2, !dbg [[DBG16]]
; CHECK-NEXT:    br label [[ARRAYDESTROY_BODY:%.*]], !dbg [[DBG16]]
; CHECK:       arraydestroy.body:
; CHECK-NEXT:    [[ARRAYDESTROY_ELEMENTPAST:%.*]] = phi ptr [ [[TMP42]], [[FINAL_END24:%.*]] ], [ [[ARRAYDESTROY_ELEMENT:%.*]], [[ARRAYDESTROY_BODY]] ], !dbg [[DBG16]]
; CHECK-NEXT:    [[ARRAYDESTROY_ELEMENT]] = getelementptr inbounds [[STRUCT_S]], ptr [[ARRAYDESTROY_ELEMENTPAST]], i64 -1, !dbg [[DBG16]]
; CHECK-NEXT:    call void @_ZN1SD1Ev(ptr noundef nonnull align 1 dereferenceable(1) [[ARRAYDESTROY_ELEMENT]]) #[[ATTR2:[0-9]+]], !dbg [[DBG16]]
; CHECK-NEXT:    [[ARRAYDESTROY_DONE:%.*]] = icmp eq ptr [[ARRAYDESTROY_ELEMENT]], [[ARRAY_BEGIN3]], !dbg [[DBG16]]
; CHECK-NEXT:    br i1 [[ARRAYDESTROY_DONE]], label [[ARRAYDESTROY_DONE4:%.*]], label [[ARRAYDESTROY_BODY]], !dbg [[DBG16]]
; CHECK:       arraydestroy.done4:
; CHECK-NEXT:    ret void, !dbg [[DBG16]]
; CHECK:       final.then:
; CHECK-NEXT:    [[TMP43:%.*]] = call i32 @compute_lb(), !dbg [[DBG10]]
; CHECK-NEXT:    [[TMP44:%.*]] = call i32 @compute_ub(), !dbg [[DBG10]]
; CHECK-NEXT:    [[TMP45:%.*]] = call i32 @compute_step(), !dbg [[DBG10]]
; CHECK-NEXT:    store i32 [[TMP43]], ptr [[I]], align 4, !dbg [[DBG10]]
; CHECK-NEXT:    br label [[FOR_COND:%.*]], !dbg [[DBG10]]
; CHECK:       for.cond:
; CHECK-NEXT:    [[TMP46:%.*]] = load i32, ptr [[I]], align 4, !dbg [[DBG10]]
; CHECK-NEXT:    [[TMP47:%.*]] = icmp slt i32 [[TMP46]], [[TMP44]], !dbg [[DBG10]]
; CHECK-NEXT:    br i1 [[TMP47]], label [[TMP48:%.*]], label [[FOR_END:%.*]], !dbg [[DBG10]]
; CHECK:       48:
; CHECK-NEXT:    br label [[FOR_BODY:%.*]], !dbg [[DBG10]]
; CHECK:       for.body:
; CHECK-NEXT:    br label [[FOR_INCR:%.*]], !dbg [[DBG14]]
; CHECK:       final.then11:
; CHECK-NEXT:    [[TMP49:%.*]] = call i32 @compute_lb.1(), !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP50:%.*]] = call i32 @compute_ub.2(), !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP51:%.*]] = call i32 @compute_step.3(), !dbg [[DBG11]]
; CHECK-NEXT:    store i32 [[TMP49]], ptr [[I1]], align 4, !dbg [[DBG11]]
; CHECK-NEXT:    br label [[FOR_COND5:%.*]], !dbg [[DBG11]]
; CHECK:       for.cond5:
; CHECK-NEXT:    [[TMP52:%.*]] = load i32, ptr [[I1]], align 4, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP53:%.*]] = icmp slt i32 [[TMP52]], [[TMP50]], !dbg [[DBG11]]
; CHECK-NEXT:    br i1 [[TMP53]], label [[TMP54:%.*]], label [[FOR_END7:%.*]], !dbg [[DBG11]]
; CHECK:       54:
; CHECK-NEXT:    br label [[FOR_BODY6:%.*]], !dbg [[DBG11]]
; CHECK:       for.body6:
; CHECK-NEXT:    br label [[FOR_INCR8:%.*]], !dbg [[DBG15]]
; CHECK:       final.then26:
; CHECK-NEXT:    [[TMP55:%.*]] = call i32 @compute_lb.4(), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP56:%.*]] = call i32 @compute_ub.5(), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP57:%.*]] = call i32 @compute_step.6(), !dbg [[DBG12]]
; CHECK-NEXT:    store i32 [[TMP55]], ptr [[I2]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    br label [[FOR_COND20:%.*]], !dbg [[DBG12]]
; CHECK:       for.cond20:
; CHECK-NEXT:    [[TMP58:%.*]] = load i32, ptr [[I2]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP59:%.*]] = icmp slt i32 [[TMP58]], [[TMP56]], !dbg [[DBG12]]
; CHECK-NEXT:    br i1 [[TMP59]], label [[TMP60:%.*]], label [[FOR_END22:%.*]], !dbg [[DBG12]]
; CHECK:       60:
; CHECK-NEXT:    br label [[FOR_BODY21:%.*]], !dbg [[DBG12]]
; CHECK:       for.body21:
; CHECK-NEXT:    br label [[FOR_INCR23:%.*]], !dbg [[DBG16]]
; CHECK:       for.end:
; CHECK-NEXT:    br label [[FINAL_END:%.*]], !dbg [[DBG10]]
; CHECK:       for.incr:
; CHECK-NEXT:    [[TMP61:%.*]] = load i32, ptr [[I]], align 4, !dbg [[DBG10]]
; CHECK-NEXT:    [[TMP62:%.*]] = add i32 [[TMP61]], [[TMP45]], !dbg [[DBG10]]
; CHECK-NEXT:    store i32 [[TMP62]], ptr [[I]], align 4, !dbg [[DBG10]]
; CHECK-NEXT:    br label [[FOR_COND]], !dbg [[DBG10]]
; CHECK:       final.cond:
; CHECK-NEXT:    [[TMP63:%.*]] = call i32 @nanos6_in_final(), !dbg [[DBG10]]
; CHECK-NEXT:    [[TMP64:%.*]] = icmp ne i32 [[TMP63]], 0, !dbg [[DBG10]]
; CHECK-NEXT:    br i1 [[TMP64]], label [[FINAL_THEN:%.*]], label [[CODEREPL:%.*]], !dbg [[DBG10]]
; CHECK:       for.end3:
; CHECK-NEXT:    br label [[FINAL_END]], !dbg [[DBG10]]
; CHECK:       for.end7:
; CHECK-NEXT:    br label [[FINAL_END9:%.*]], !dbg [[DBG11]]
; CHECK:       for.incr8:
; CHECK-NEXT:    [[TMP65:%.*]] = load i32, ptr [[I1]], align 4, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP66:%.*]] = add i32 [[TMP65]], [[TMP51]], !dbg [[DBG11]]
; CHECK-NEXT:    store i32 [[TMP66]], ptr [[I1]], align 4, !dbg [[DBG11]]
; CHECK-NEXT:    br label [[FOR_COND5]], !dbg [[DBG11]]
; CHECK:       final.cond10:
; CHECK-NEXT:    [[TMP67:%.*]] = call i32 @nanos6_in_final(), !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP68:%.*]] = icmp ne i32 [[TMP67]], 0, !dbg [[DBG11]]
; CHECK-NEXT:    br i1 [[TMP68]], label [[FINAL_THEN11:%.*]], label [[CODEREPL16:%.*]], !dbg [[DBG11]]
; CHECK:       for.end14:
; CHECK-NEXT:    br label [[FINAL_END9]], !dbg [[DBG11]]
; CHECK:       for.end22:
; CHECK-NEXT:    br label [[FINAL_END24]], !dbg [[DBG12]]
; CHECK:       for.incr23:
; CHECK-NEXT:    [[TMP69:%.*]] = load i32, ptr [[I2]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP70:%.*]] = add i32 [[TMP69]], [[TMP57]], !dbg [[DBG12]]
; CHECK-NEXT:    store i32 [[TMP70]], ptr [[I2]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    br label [[FOR_COND20]], !dbg [[DBG12]]
; CHECK:       final.cond25:
; CHECK-NEXT:    [[TMP71:%.*]] = call i32 @nanos6_in_final(), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP72:%.*]] = icmp ne i32 [[TMP71]], 0, !dbg [[DBG12]]
; CHECK-NEXT:    br i1 [[TMP72]], label [[FINAL_THEN26:%.*]], label [[CODEREPL31:%.*]], !dbg [[DBG12]]
; CHECK:       for.end29:
; CHECK-NEXT:    br label [[FINAL_END24]], !dbg [[DBG12]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_lb
; CHECK-SAME: () #[[ATTR3:[0-9]+]] !dbg [[DBG17:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret i32 0, !dbg [[DBG18:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_ub
; CHECK-SAME: () #[[ATTR3]] !dbg [[DBG20:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret i32 10, !dbg [[DBG21:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_step
; CHECK-SAME: () #[[ATTR3]] !dbg [[DBG23:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret i32 1, !dbg [[DBG24:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@oss_ctor_ZN1SC1Ev
; CHECK-SAME: (ptr noundef [[TMP0:%.*]], i64 noundef [[TMP1:%.*]]) #[[ATTR4:[0-9]+]] !dbg [[DBG26:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[DOTADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    [[DOTADDR1:%.*]] = alloca i64, align 8
; CHECK-NEXT:    store ptr [[TMP0]], ptr [[DOTADDR]], align 8
; CHECK-NEXT:    store i64 [[TMP1]], ptr [[DOTADDR1]], align 8
; CHECK-NEXT:    [[TMP2:%.*]] = load ptr, ptr [[DOTADDR]], align 8, !dbg [[DBG27:![0-9]+]]
; CHECK-NEXT:    [[TMP3:%.*]] = load i64, ptr [[DOTADDR1]], align 8, !dbg [[DBG27]]
; CHECK-NEXT:    [[ARRAYCTOR_DST_END:%.*]] = getelementptr inbounds [[STRUCT_S:%.*]], ptr [[TMP2]], i64 [[TMP3]], !dbg [[DBG27]]
; CHECK-NEXT:    br label [[ARRAYCTOR_LOOP:%.*]], !dbg [[DBG27]]
; CHECK:       arrayctor.loop:
; CHECK-NEXT:    [[ARRAYCTOR_DST_CUR:%.*]] = phi ptr [ [[TMP2]], [[ENTRY:%.*]] ], [ [[ARRAYCTOR_DST_NEXT:%.*]], [[ARRAYCTOR_LOOP]] ], !dbg [[DBG27]]
; CHECK-NEXT:    call void @_ZN1SC1Ev(ptr noundef nonnull align 1 dereferenceable(1) [[ARRAYCTOR_DST_CUR]]), !dbg [[DBG28:![0-9]+]]
; CHECK-NEXT:    [[ARRAYCTOR_DST_NEXT]] = getelementptr inbounds [[STRUCT_S]], ptr [[ARRAYCTOR_DST_CUR]], i64 1, !dbg [[DBG27]]
; CHECK-NEXT:    [[ARRAYCTOR_DONE:%.*]] = icmp eq ptr [[ARRAYCTOR_DST_NEXT]], [[ARRAYCTOR_DST_END]], !dbg [[DBG27]]
; CHECK-NEXT:    br i1 [[ARRAYCTOR_DONE]], label [[ARRAYCTOR_CONT:%.*]], label [[ARRAYCTOR_LOOP]], !dbg [[DBG27]]
; CHECK:       arrayctor.cont:
; CHECK-NEXT:    ret void, !dbg [[DBG28]]
;
;
; CHECK-LABEL: define {{[^@]+}}@oss_dtor_ZN1SD1Ev
; CHECK-SAME: (ptr noundef [[TMP0:%.*]], i64 noundef [[TMP1:%.*]]) #[[ATTR4]] !dbg [[DBG30:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[DOTADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    [[DOTADDR1:%.*]] = alloca i64, align 8
; CHECK-NEXT:    store ptr [[TMP0]], ptr [[DOTADDR]], align 8
; CHECK-NEXT:    store i64 [[TMP1]], ptr [[DOTADDR1]], align 8
; CHECK-NEXT:    [[TMP2:%.*]] = load ptr, ptr [[DOTADDR]], align 8, !dbg [[DBG31:![0-9]+]]
; CHECK-NEXT:    [[TMP3:%.*]] = load i64, ptr [[DOTADDR1]], align 8, !dbg [[DBG31]]
; CHECK-NEXT:    [[ARRAYDTOR_DST_END:%.*]] = getelementptr inbounds [[STRUCT_S:%.*]], ptr [[TMP2]], i64 [[TMP3]], !dbg [[DBG31]]
; CHECK-NEXT:    br label [[ARRAYDTOR_LOOP:%.*]], !dbg [[DBG31]]
; CHECK:       arraydtor.loop:
; CHECK-NEXT:    [[ARRAYDTOR_DST_CUR:%.*]] = phi ptr [ [[TMP2]], [[ENTRY:%.*]] ], [ [[ARRAYDTOR_DST_NEXT:%.*]], [[ARRAYDTOR_LOOP]] ], !dbg [[DBG31]]
; CHECK-NEXT:    call void @_ZN1SD1Ev(ptr noundef nonnull align 1 dereferenceable(1) [[ARRAYDTOR_DST_CUR]]) #[[ATTR2]], !dbg [[DBG31]]
; CHECK-NEXT:    [[ARRAYDTOR_DST_NEXT]] = getelementptr inbounds [[STRUCT_S]], ptr [[ARRAYDTOR_DST_CUR]], i64 1, !dbg [[DBG31]]
; CHECK-NEXT:    [[ARRAYDTOR_DONE:%.*]] = icmp eq ptr [[ARRAYDTOR_DST_NEXT]], [[ARRAYDTOR_DST_END]], !dbg [[DBG31]]
; CHECK-NEXT:    br i1 [[ARRAYDTOR_DONE]], label [[ARRAYDTOR_CONT:%.*]], label [[ARRAYDTOR_LOOP]], !dbg [[DBG31]]
; CHECK:       arraydtor.cont:
; CHECK-NEXT:    ret void, !dbg [[DBG31]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_lb.1
; CHECK-SAME: () #[[ATTR3]] !dbg [[DBG32:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret i32 0, !dbg [[DBG33:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_ub.2
; CHECK-SAME: () #[[ATTR3]] !dbg [[DBG35:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret i32 10, !dbg [[DBG36:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_step.3
; CHECK-SAME: () #[[ATTR3]] !dbg [[DBG38:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret i32 1, !dbg [[DBG39:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@oss_copy_ctor_ZN1SC1ERKS_
; CHECK-SAME: (ptr noundef [[TMP0:%.*]], ptr noundef [[TMP1:%.*]], i64 noundef [[TMP2:%.*]]) #[[ATTR4]] !dbg [[DBG41:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[DOTADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    [[DOTADDR1:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    [[DOTADDR2:%.*]] = alloca i64, align 8
; CHECK-NEXT:    store ptr [[TMP0]], ptr [[DOTADDR]], align 8
; CHECK-NEXT:    store ptr [[TMP1]], ptr [[DOTADDR1]], align 8
; CHECK-NEXT:    store i64 [[TMP2]], ptr [[DOTADDR2]], align 8
; CHECK-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[DOTADDR]], align 8, !dbg [[DBG42:![0-9]+]]
; CHECK-NEXT:    [[TMP4:%.*]] = load ptr, ptr [[DOTADDR1]], align 8, !dbg [[DBG42]]
; CHECK-NEXT:    [[TMP5:%.*]] = load i64, ptr [[DOTADDR2]], align 8, !dbg [[DBG42]]
; CHECK-NEXT:    [[ARRAYCTOR_DST_END:%.*]] = getelementptr inbounds [[STRUCT_S:%.*]], ptr [[TMP4]], i64 [[TMP5]], !dbg [[DBG42]]
; CHECK-NEXT:    br label [[ARRAYCTOR_LOOP:%.*]], !dbg [[DBG42]]
; CHECK:       arrayctor.loop:
; CHECK-NEXT:    [[ARRAYCTOR_DST_CUR:%.*]] = phi ptr [ [[TMP4]], [[ENTRY:%.*]] ], [ [[ARRAYCTOR_DST_NEXT:%.*]], [[ARRAYCTOR_LOOP]] ], !dbg [[DBG42]]
; CHECK-NEXT:    [[ARRAYCTOR_SRC_CUR:%.*]] = phi ptr [ [[TMP3]], [[ENTRY]] ], [ [[ARRAYCTOR_SRC_NEXT:%.*]], [[ARRAYCTOR_LOOP]] ], !dbg [[DBG42]]
; CHECK-NEXT:    call void @_ZN1SC1ERKS_(ptr noundef nonnull align 1 dereferenceable(1) [[ARRAYCTOR_DST_CUR]], ptr noundef nonnull align 1 dereferenceable(1) [[ARRAYCTOR_SRC_CUR]]), !dbg [[DBG43:![0-9]+]]
; CHECK-NEXT:    [[ARRAYCTOR_DST_NEXT]] = getelementptr inbounds [[STRUCT_S]], ptr [[ARRAYCTOR_DST_CUR]], i64 1, !dbg [[DBG42]]
; CHECK-NEXT:    [[ARRAYCTOR_SRC_NEXT]] = getelementptr inbounds [[STRUCT_S]], ptr [[ARRAYCTOR_SRC_CUR]], i64 1, !dbg [[DBG42]]
; CHECK-NEXT:    [[ARRAYCTOR_DONE:%.*]] = icmp eq ptr [[ARRAYCTOR_DST_NEXT]], [[ARRAYCTOR_DST_END]], !dbg [[DBG42]]
; CHECK-NEXT:    br i1 [[ARRAYCTOR_DONE]], label [[ARRAYCTOR_CONT:%.*]], label [[ARRAYCTOR_LOOP]], !dbg [[DBG42]]
; CHECK:       arrayctor.cont:
; CHECK-NEXT:    ret void, !dbg [[DBG43]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_lb.4
; CHECK-SAME: () #[[ATTR3]] !dbg [[DBG45:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret i32 0, !dbg [[DBG46:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_ub.5
; CHECK-SAME: () #[[ATTR3]] !dbg [[DBG48:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret i32 10, !dbg [[DBG49:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_step.6
; CHECK-SAME: () #[[ATTR3]] !dbg [[DBG51:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret i32 1, !dbg [[DBG52:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_unpacked_task_region__Z3foov
; CHECK-SAME: (ptr [[S:%.*]], ptr [[I:%.*]], ptr [[LOOP_BOUNDS:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) !dbg [[DBG54:![0-9]+]] {
; CHECK-NEXT:  newFuncRoot:
; CHECK-NEXT:    br label [[TMP0:%.*]], !dbg [[DBG55:![0-9]+]]
; CHECK:       0:
; CHECK-NEXT:    [[LB_GEP:%.*]] = getelementptr [[NANOS6_LOOP_BOUNDS_T:%.*]], ptr [[LOOP_BOUNDS]], i32 0, i32 0, !dbg [[DBG55]]
; CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr [[LB_GEP]], align 8, !dbg [[DBG55]]
; CHECK-NEXT:    [[LB:%.*]] = trunc i64 [[TMP1]] to i32, !dbg [[DBG55]]
; CHECK-NEXT:    [[UB_GEP:%.*]] = getelementptr [[NANOS6_LOOP_BOUNDS_T]], ptr [[LOOP_BOUNDS]], i32 0, i32 1, !dbg [[DBG55]]
; CHECK-NEXT:    [[TMP2:%.*]] = load i64, ptr [[UB_GEP]], align 8, !dbg [[DBG55]]
; CHECK-NEXT:    [[UB:%.*]] = trunc i64 [[TMP2]] to i32, !dbg [[DBG55]]
; CHECK-NEXT:    [[TMP3:%.*]] = call i32 @compute_lb(), !dbg [[DBG55]]
; CHECK-NEXT:    [[TMP4:%.*]] = call i32 @compute_ub(), !dbg [[DBG55]]
; CHECK-NEXT:    [[TMP5:%.*]] = call i32 @compute_step(), !dbg [[DBG55]]
; CHECK-NEXT:    [[TMP6:%.*]] = sub i32 [[UB]], [[LB]], !dbg [[DBG55]]
; CHECK-NEXT:    [[TMP7:%.*]] = sub i32 [[TMP6]], 1, !dbg [[DBG55]]
; CHECK-NEXT:    [[TMP8:%.*]] = sdiv i32 [[TMP7]], [[TMP5]], !dbg [[DBG55]]
; CHECK-NEXT:    [[TMP9:%.*]] = add i32 [[TMP8]], 1, !dbg [[DBG55]]
; CHECK-NEXT:    [[TMP10:%.*]] = sext i32 [[TMP9]] to i64, !dbg [[DBG55]]
; CHECK-NEXT:    [[LOOP:%.*]] = alloca i32, align 4, !dbg [[DBG55]]
; CHECK-NEXT:    store i32 [[LB]], ptr [[LOOP]], align 4, !dbg [[DBG55]]
; CHECK-NEXT:    br label [[FOR_COND1:%.*]], !dbg [[DBG55]]
; CHECK:       for.cond1:
; CHECK-NEXT:    [[TMP11:%.*]] = load i32, ptr [[LOOP]], align 4, !dbg [[DBG55]]
; CHECK-NEXT:    [[TMP12:%.*]] = icmp slt i32 [[TMP11]], [[UB]], !dbg [[DBG55]]
; CHECK-NEXT:    br i1 [[TMP12]], label [[TMP13:%.*]], label [[DOTEXITSTUB:%.*]], !dbg [[DBG55]]
; CHECK:       13:
; CHECK-NEXT:    [[TMP14:%.*]] = load i32, ptr [[LOOP]], align 4, !dbg [[DBG55]]
; CHECK-NEXT:    [[TMP15:%.*]] = sext i32 [[TMP14]] to i64, !dbg [[DBG55]]
; CHECK-NEXT:    [[TMP16:%.*]] = udiv i64 [[TMP15]], 1, !dbg [[DBG55]]
; CHECK-NEXT:    [[TMP17:%.*]] = sext i32 [[TMP5]] to i64, !dbg [[DBG55]]
; CHECK-NEXT:    [[TMP18:%.*]] = mul i64 [[TMP16]], [[TMP17]], !dbg [[DBG55]]
; CHECK-NEXT:    [[TMP19:%.*]] = sext i32 [[TMP3]] to i64, !dbg [[DBG55]]
; CHECK-NEXT:    [[TMP20:%.*]] = add i64 [[TMP18]], [[TMP19]], !dbg [[DBG55]]
; CHECK-NEXT:    [[TMP21:%.*]] = mul i64 [[TMP16]], 1, !dbg [[DBG55]]
; CHECK-NEXT:    [[TMP22:%.*]] = sext i32 [[TMP14]] to i64, !dbg [[DBG55]]
; CHECK-NEXT:    [[TMP23:%.*]] = sub i64 [[TMP22]], [[TMP21]], !dbg [[DBG55]]
; CHECK-NEXT:    [[TMP24:%.*]] = trunc i64 [[TMP20]] to i32, !dbg [[DBG55]]
; CHECK-NEXT:    store i32 [[TMP24]], ptr [[I]], align 4, !dbg [[DBG55]]
; CHECK-NEXT:    br label [[FOR_BODY2:%.*]], !dbg [[DBG55]]
; CHECK:       for.body2:
; CHECK-NEXT:    br label [[FOR_INCR4:%.*]], !dbg [[DBG56:![0-9]+]]
; CHECK:       for.incr4:
; CHECK-NEXT:    [[TMP25:%.*]] = load i32, ptr [[LOOP]], align 4, !dbg [[DBG55]]
; CHECK-NEXT:    [[TMP26:%.*]] = add i32 [[TMP25]], 1, !dbg [[DBG55]]
; CHECK-NEXT:    store i32 [[TMP26]], ptr [[LOOP]], align 4, !dbg [[DBG55]]
; CHECK-NEXT:    br label [[FOR_COND1]], !dbg [[DBG55]]
; CHECK:       .exitStub:
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_task_region__Z3foov
; CHECK-SAME: (ptr [[TASK_ARGS:%.*]], ptr [[LOOP_BOUNDS:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_S:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3FOOV:%.*]], ptr [[TASK_ARGS]], i32 0, i32 0
; CHECK-NEXT:    [[LOAD_GEP_S:%.*]] = load ptr, ptr [[GEP_S]], align 8
; CHECK-NEXT:    [[GEP_I:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3FOOV]], ptr [[TASK_ARGS]], i32 0, i32 1
; CHECK-NEXT:    [[TMP0:%.*]] = icmp ne ptr [[ADDRESS_TRANSLATION_TABLE]], null
; CHECK-NEXT:    br i1 [[TMP0]], label [[TMP1:%.*]], label [[TMP2:%.*]]
; CHECK:       1:
; CHECK-NEXT:    br label [[TMP2]]
; CHECK:       2:
; CHECK-NEXT:    call void @nanos6_unpacked_task_region__Z3foov(ptr [[LOAD_GEP_S]], ptr [[GEP_I]], ptr [[LOOP_BOUNDS]], ptr [[ADDRESS_TRANSLATION_TABLE]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_constructor_register_task_info() {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @nanos6_register_task_info(ptr @task_info_var__Z3foov)
; CHECK-NEXT:    call void @nanos6_register_task_info(ptr @task_info_var__Z3foov.10)
; CHECK-NEXT:    call void @nanos6_register_task_info(ptr @task_info_var__Z3foov.23)
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_unpacked_destroy__Z3foov
; CHECK-SAME: (ptr [[S:%.*]], ptr [[I1:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @oss_dtor_ZN1SD1Ev(ptr [[S]], i64 2)
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_destroy__Z3foov
; CHECK-SAME: (ptr [[TASK_ARGS:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_S:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3FOOV_0:%.*]], ptr [[TASK_ARGS]], i32 0, i32 0
; CHECK-NEXT:    [[GEP_I1:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3FOOV_0]], ptr [[TASK_ARGS]], i32 0, i32 1
; CHECK-NEXT:    call void @nanos6_unpacked_destroy__Z3foov(ptr [[GEP_S]], ptr [[GEP_I1]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_duplicate__Z3foov
; CHECK-SAME: (ptr [[TASK_ARGS_SRC:%.*]], ptr [[TASK_ARGS_DST:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[TASK_ARGS_DST]], align 8
; CHECK-NEXT:    [[ARGS_END:%.*]] = getelementptr i8, ptr [[TMP0]], i64 16
; CHECK-NEXT:    [[GEP_S:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3FOOV_0:%.*]], ptr [[TMP0]], i32 0, i32 0
; CHECK-NEXT:    call void @oss_ctor_ZN1SC1Ev(ptr [[GEP_S]], i64 2)
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_unpacked_task_region__Z3foov.4
; CHECK-SAME: (ptr [[S:%.*]], ptr [[I1:%.*]], ptr [[LOOP_BOUNDS:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) !dbg [[DBG57:![0-9]+]] {
; CHECK-NEXT:  newFuncRoot:
; CHECK-NEXT:    br label [[TMP0:%.*]], !dbg [[DBG58:![0-9]+]]
; CHECK:       0:
; CHECK-NEXT:    [[LB_GEP:%.*]] = getelementptr [[NANOS6_LOOP_BOUNDS_T:%.*]], ptr [[LOOP_BOUNDS]], i32 0, i32 0, !dbg [[DBG58]]
; CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr [[LB_GEP]], align 8, !dbg [[DBG58]]
; CHECK-NEXT:    [[LB:%.*]] = trunc i64 [[TMP1]] to i32, !dbg [[DBG58]]
; CHECK-NEXT:    [[UB_GEP:%.*]] = getelementptr [[NANOS6_LOOP_BOUNDS_T]], ptr [[LOOP_BOUNDS]], i32 0, i32 1, !dbg [[DBG58]]
; CHECK-NEXT:    [[TMP2:%.*]] = load i64, ptr [[UB_GEP]], align 8, !dbg [[DBG58]]
; CHECK-NEXT:    [[UB:%.*]] = trunc i64 [[TMP2]] to i32, !dbg [[DBG58]]
; CHECK-NEXT:    [[TMP3:%.*]] = call i32 @compute_lb.1(), !dbg [[DBG58]]
; CHECK-NEXT:    [[TMP4:%.*]] = call i32 @compute_ub.2(), !dbg [[DBG58]]
; CHECK-NEXT:    [[TMP5:%.*]] = call i32 @compute_step.3(), !dbg [[DBG58]]
; CHECK-NEXT:    [[TMP6:%.*]] = sub i32 [[UB]], [[LB]], !dbg [[DBG58]]
; CHECK-NEXT:    [[TMP7:%.*]] = sub i32 [[TMP6]], 1, !dbg [[DBG58]]
; CHECK-NEXT:    [[TMP8:%.*]] = sdiv i32 [[TMP7]], [[TMP5]], !dbg [[DBG58]]
; CHECK-NEXT:    [[TMP9:%.*]] = add i32 [[TMP8]], 1, !dbg [[DBG58]]
; CHECK-NEXT:    [[TMP10:%.*]] = sext i32 [[TMP9]] to i64, !dbg [[DBG58]]
; CHECK-NEXT:    [[LOOP:%.*]] = alloca i32, align 4, !dbg [[DBG58]]
; CHECK-NEXT:    store i32 [[LB]], ptr [[LOOP]], align 4, !dbg [[DBG58]]
; CHECK-NEXT:    br label [[FOR_COND12:%.*]], !dbg [[DBG58]]
; CHECK:       for.cond12:
; CHECK-NEXT:    [[TMP11:%.*]] = load i32, ptr [[LOOP]], align 4, !dbg [[DBG58]]
; CHECK-NEXT:    [[TMP12:%.*]] = icmp slt i32 [[TMP11]], [[UB]], !dbg [[DBG58]]
; CHECK-NEXT:    br i1 [[TMP12]], label [[TMP13:%.*]], label [[DOTEXITSTUB:%.*]], !dbg [[DBG58]]
; CHECK:       13:
; CHECK-NEXT:    [[TMP14:%.*]] = load i32, ptr [[LOOP]], align 4, !dbg [[DBG58]]
; CHECK-NEXT:    [[TMP15:%.*]] = sext i32 [[TMP14]] to i64, !dbg [[DBG58]]
; CHECK-NEXT:    [[TMP16:%.*]] = udiv i64 [[TMP15]], 1, !dbg [[DBG58]]
; CHECK-NEXT:    [[TMP17:%.*]] = sext i32 [[TMP5]] to i64, !dbg [[DBG58]]
; CHECK-NEXT:    [[TMP18:%.*]] = mul i64 [[TMP16]], [[TMP17]], !dbg [[DBG58]]
; CHECK-NEXT:    [[TMP19:%.*]] = sext i32 [[TMP3]] to i64, !dbg [[DBG58]]
; CHECK-NEXT:    [[TMP20:%.*]] = add i64 [[TMP18]], [[TMP19]], !dbg [[DBG58]]
; CHECK-NEXT:    [[TMP21:%.*]] = mul i64 [[TMP16]], 1, !dbg [[DBG58]]
; CHECK-NEXT:    [[TMP22:%.*]] = sext i32 [[TMP14]] to i64, !dbg [[DBG58]]
; CHECK-NEXT:    [[TMP23:%.*]] = sub i64 [[TMP22]], [[TMP21]], !dbg [[DBG58]]
; CHECK-NEXT:    [[TMP24:%.*]] = trunc i64 [[TMP20]] to i32, !dbg [[DBG58]]
; CHECK-NEXT:    store i32 [[TMP24]], ptr [[I1]], align 4, !dbg [[DBG58]]
; CHECK-NEXT:    br label [[FOR_BODY13:%.*]], !dbg [[DBG58]]
; CHECK:       for.body13:
; CHECK-NEXT:    br label [[FOR_INCR15:%.*]], !dbg [[DBG59:![0-9]+]]
; CHECK:       for.incr15:
; CHECK-NEXT:    [[TMP25:%.*]] = load i32, ptr [[LOOP]], align 4, !dbg [[DBG58]]
; CHECK-NEXT:    [[TMP26:%.*]] = add i32 [[TMP25]], 1, !dbg [[DBG58]]
; CHECK-NEXT:    store i32 [[TMP26]], ptr [[LOOP]], align 4, !dbg [[DBG58]]
; CHECK-NEXT:    br label [[FOR_COND12]], !dbg [[DBG58]]
; CHECK:       .exitStub:
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_task_region__Z3foov.5
; CHECK-SAME: (ptr [[TASK_ARGS:%.*]], ptr [[LOOP_BOUNDS:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_S:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3FOOV_0:%.*]], ptr [[TASK_ARGS]], i32 0, i32 0
; CHECK-NEXT:    [[GEP_I1:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3FOOV_0]], ptr [[TASK_ARGS]], i32 0, i32 1
; CHECK-NEXT:    [[TMP0:%.*]] = icmp ne ptr [[ADDRESS_TRANSLATION_TABLE]], null
; CHECK-NEXT:    br i1 [[TMP0]], label [[TMP1:%.*]], label [[TMP2:%.*]]
; CHECK:       1:
; CHECK-NEXT:    br label [[TMP2]]
; CHECK:       2:
; CHECK-NEXT:    call void @nanos6_unpacked_task_region__Z3foov.4(ptr [[GEP_S]], ptr [[GEP_I1]], ptr [[LOOP_BOUNDS]], ptr [[ADDRESS_TRANSLATION_TABLE]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_unpacked_destroy__Z3foov.14
; CHECK-SAME: (ptr [[I2:%.*]], ptr [[S:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @oss_dtor_ZN1SD1Ev(ptr [[S]], i64 2)
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_destroy__Z3foov.15
; CHECK-SAME: (ptr [[TASK_ARGS:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_I2:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3FOOV_1:%.*]], ptr [[TASK_ARGS]], i32 0, i32 0
; CHECK-NEXT:    [[GEP_S:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3FOOV_1]], ptr [[TASK_ARGS]], i32 0, i32 1
; CHECK-NEXT:    call void @nanos6_unpacked_destroy__Z3foov.14(ptr [[GEP_I2]], ptr [[GEP_S]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_duplicate__Z3foov.16
; CHECK-SAME: (ptr [[TASK_ARGS_SRC:%.*]], ptr [[TASK_ARGS_DST:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[TASK_ARGS_DST]], align 8
; CHECK-NEXT:    [[ARGS_END:%.*]] = getelementptr i8, ptr [[TMP0]], i64 16
; CHECK-NEXT:    [[GEP_SRC_S:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3FOOV_1:%.*]], ptr [[TASK_ARGS_SRC]], i32 0, i32 1
; CHECK-NEXT:    [[GEP_DST_S:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3FOOV_1]], ptr [[TMP0]], i32 0, i32 1
; CHECK-NEXT:    call void @oss_copy_ctor_ZN1SC1ERKS_(ptr [[GEP_SRC_S]], ptr [[GEP_DST_S]], i64 2)
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_unpacked_task_region__Z3foov.17
; CHECK-SAME: (ptr [[I2:%.*]], ptr [[S:%.*]], ptr [[LOOP_BOUNDS:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) !dbg [[DBG60:![0-9]+]] {
; CHECK-NEXT:  newFuncRoot:
; CHECK-NEXT:    br label [[TMP0:%.*]], !dbg [[DBG61:![0-9]+]]
; CHECK:       0:
; CHECK-NEXT:    [[LB_GEP:%.*]] = getelementptr [[NANOS6_LOOP_BOUNDS_T:%.*]], ptr [[LOOP_BOUNDS]], i32 0, i32 0, !dbg [[DBG61]]
; CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr [[LB_GEP]], align 8, !dbg [[DBG61]]
; CHECK-NEXT:    [[LB:%.*]] = trunc i64 [[TMP1]] to i32, !dbg [[DBG61]]
; CHECK-NEXT:    [[UB_GEP:%.*]] = getelementptr [[NANOS6_LOOP_BOUNDS_T]], ptr [[LOOP_BOUNDS]], i32 0, i32 1, !dbg [[DBG61]]
; CHECK-NEXT:    [[TMP2:%.*]] = load i64, ptr [[UB_GEP]], align 8, !dbg [[DBG61]]
; CHECK-NEXT:    [[UB:%.*]] = trunc i64 [[TMP2]] to i32, !dbg [[DBG61]]
; CHECK-NEXT:    [[TMP3:%.*]] = call i32 @compute_lb.4(), !dbg [[DBG61]]
; CHECK-NEXT:    [[TMP4:%.*]] = call i32 @compute_ub.5(), !dbg [[DBG61]]
; CHECK-NEXT:    [[TMP5:%.*]] = call i32 @compute_step.6(), !dbg [[DBG61]]
; CHECK-NEXT:    [[TMP6:%.*]] = sub i32 [[UB]], [[LB]], !dbg [[DBG61]]
; CHECK-NEXT:    [[TMP7:%.*]] = sub i32 [[TMP6]], 1, !dbg [[DBG61]]
; CHECK-NEXT:    [[TMP8:%.*]] = sdiv i32 [[TMP7]], [[TMP5]], !dbg [[DBG61]]
; CHECK-NEXT:    [[TMP9:%.*]] = add i32 [[TMP8]], 1, !dbg [[DBG61]]
; CHECK-NEXT:    [[TMP10:%.*]] = sext i32 [[TMP9]] to i64, !dbg [[DBG61]]
; CHECK-NEXT:    [[LOOP:%.*]] = alloca i32, align 4, !dbg [[DBG61]]
; CHECK-NEXT:    store i32 [[LB]], ptr [[LOOP]], align 4, !dbg [[DBG61]]
; CHECK-NEXT:    br label [[FOR_COND27:%.*]], !dbg [[DBG61]]
; CHECK:       for.cond27:
; CHECK-NEXT:    [[TMP11:%.*]] = load i32, ptr [[LOOP]], align 4, !dbg [[DBG61]]
; CHECK-NEXT:    [[TMP12:%.*]] = icmp slt i32 [[TMP11]], [[UB]], !dbg [[DBG61]]
; CHECK-NEXT:    br i1 [[TMP12]], label [[TMP13:%.*]], label [[DOTEXITSTUB:%.*]], !dbg [[DBG61]]
; CHECK:       13:
; CHECK-NEXT:    [[TMP14:%.*]] = load i32, ptr [[LOOP]], align 4, !dbg [[DBG61]]
; CHECK-NEXT:    [[TMP15:%.*]] = sext i32 [[TMP14]] to i64, !dbg [[DBG61]]
; CHECK-NEXT:    [[TMP16:%.*]] = udiv i64 [[TMP15]], 1, !dbg [[DBG61]]
; CHECK-NEXT:    [[TMP17:%.*]] = sext i32 [[TMP5]] to i64, !dbg [[DBG61]]
; CHECK-NEXT:    [[TMP18:%.*]] = mul i64 [[TMP16]], [[TMP17]], !dbg [[DBG61]]
; CHECK-NEXT:    [[TMP19:%.*]] = sext i32 [[TMP3]] to i64, !dbg [[DBG61]]
; CHECK-NEXT:    [[TMP20:%.*]] = add i64 [[TMP18]], [[TMP19]], !dbg [[DBG61]]
; CHECK-NEXT:    [[TMP21:%.*]] = mul i64 [[TMP16]], 1, !dbg [[DBG61]]
; CHECK-NEXT:    [[TMP22:%.*]] = sext i32 [[TMP14]] to i64, !dbg [[DBG61]]
; CHECK-NEXT:    [[TMP23:%.*]] = sub i64 [[TMP22]], [[TMP21]], !dbg [[DBG61]]
; CHECK-NEXT:    [[TMP24:%.*]] = trunc i64 [[TMP20]] to i32, !dbg [[DBG61]]
; CHECK-NEXT:    store i32 [[TMP24]], ptr [[I2]], align 4, !dbg [[DBG61]]
; CHECK-NEXT:    br label [[FOR_BODY28:%.*]], !dbg [[DBG61]]
; CHECK:       for.body28:
; CHECK-NEXT:    br label [[FOR_INCR30:%.*]], !dbg [[DBG62:![0-9]+]]
; CHECK:       for.incr30:
; CHECK-NEXT:    [[TMP25:%.*]] = load i32, ptr [[LOOP]], align 4, !dbg [[DBG61]]
; CHECK-NEXT:    [[TMP26:%.*]] = add i32 [[TMP25]], 1, !dbg [[DBG61]]
; CHECK-NEXT:    store i32 [[TMP26]], ptr [[LOOP]], align 4, !dbg [[DBG61]]
; CHECK-NEXT:    br label [[FOR_COND27]], !dbg [[DBG61]]
; CHECK:       .exitStub:
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_task_region__Z3foov.18
; CHECK-SAME: (ptr [[TASK_ARGS:%.*]], ptr [[LOOP_BOUNDS:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_I2:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3FOOV_1:%.*]], ptr [[TASK_ARGS]], i32 0, i32 0
; CHECK-NEXT:    [[GEP_S:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3FOOV_1]], ptr [[TASK_ARGS]], i32 0, i32 1
; CHECK-NEXT:    [[TMP0:%.*]] = icmp ne ptr [[ADDRESS_TRANSLATION_TABLE]], null
; CHECK-NEXT:    br i1 [[TMP0]], label [[TMP1:%.*]], label [[TMP2:%.*]]
; CHECK:       1:
; CHECK-NEXT:    br label [[TMP2]]
; CHECK:       2:
; CHECK-NEXT:    call void @nanos6_unpacked_task_region__Z3foov.17(ptr [[GEP_I2]], ptr [[GEP_S]], ptr [[LOOP_BOUNDS]], ptr [[ADDRESS_TRANSLATION_TABLE]])
; CHECK-NEXT:    ret void
;
