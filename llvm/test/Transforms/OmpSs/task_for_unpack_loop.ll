; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --function-signature --include-generated-funcs
; RUN: opt %s -passes=ompss-2 -S | FileCheck %s
; ModuleID = 'task_for_unpack_loop.ll'
source_filename = "task_for_unpack_loop.ll"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; void foo(int lb, int ub, int step) {
;     #pragma oss task for
;     for (int i = 5; i < 10; i += 1) { i; }
;     #pragma oss task for
;     for (int i = 5; i < 10; i += 3) { i; }
;     #pragma oss task for
;     for (int i = 10; i > 0; i -= 1) { i; }
;     #pragma oss task for
;     for (int i = 10; i > 0; i -= 3) { i; }
; }

; Function Attrs: noinline nounwind optnone
define dso_local void @foo(i32 noundef %lb, i32 noundef %ub, i32 noundef %step) #0 !dbg !5 {
entry:
  %lb.addr = alloca i32, align 4
  %ub.addr = alloca i32, align 4
  %step.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %i1 = alloca i32, align 4
  %i2 = alloca i32, align 4
  %i3 = alloca i32, align 4
  store i32 %lb, ptr %lb.addr, align 4
  store i32 %ub, ptr %ub.addr, align 4
  store i32 %step, ptr %step.addr, align 4
  store i32 5, ptr %i, align 4, !dbg !9
  %0 = call token @llvm.directive.region.entry() [ "DIR.OSS"([9 x i8] c"TASK.FOR\00"), "QUAL.OSS.PRIVATE"(ptr %i, i32 undef), "QUAL.OSS.LOOP.IND.VAR"(ptr %i), "QUAL.OSS.LOOP.LOWER.BOUND"(ptr @compute_lb), "QUAL.OSS.LOOP.UPPER.BOUND"(ptr @compute_ub), "QUAL.OSS.LOOP.STEP"(ptr @compute_step), "QUAL.OSS.LOOP.TYPE"(i64 0, i64 1, i64 1, i64 1, i64 1) ], !dbg !10
  %1 = load i32, ptr %i, align 4, !dbg !11
  call void @llvm.directive.region.exit(token %0), !dbg !12
  store i32 5, ptr %i1, align 4, !dbg !13
  %2 = call token @llvm.directive.region.entry() [ "DIR.OSS"([9 x i8] c"TASK.FOR\00"), "QUAL.OSS.PRIVATE"(ptr %i1, i32 undef), "QUAL.OSS.LOOP.IND.VAR"(ptr %i1), "QUAL.OSS.LOOP.LOWER.BOUND"(ptr @compute_lb.1), "QUAL.OSS.LOOP.UPPER.BOUND"(ptr @compute_ub.2), "QUAL.OSS.LOOP.STEP"(ptr @compute_step.3), "QUAL.OSS.LOOP.TYPE"(i64 0, i64 1, i64 1, i64 1, i64 1) ], !dbg !14
  %3 = load i32, ptr %i1, align 4, !dbg !15
  call void @llvm.directive.region.exit(token %2), !dbg !16
  store i32 10, ptr %i2, align 4, !dbg !17
  %4 = call token @llvm.directive.region.entry() [ "DIR.OSS"([9 x i8] c"TASK.FOR\00"), "QUAL.OSS.PRIVATE"(ptr %i2, i32 undef), "QUAL.OSS.LOOP.IND.VAR"(ptr %i2), "QUAL.OSS.LOOP.LOWER.BOUND"(ptr @compute_lb.4), "QUAL.OSS.LOOP.UPPER.BOUND"(ptr @compute_ub.5), "QUAL.OSS.LOOP.STEP"(ptr @compute_step.6), "QUAL.OSS.LOOP.TYPE"(i64 2, i64 1, i64 1, i64 1, i64 1) ], !dbg !18
  %5 = load i32, ptr %i2, align 4, !dbg !19
  call void @llvm.directive.region.exit(token %4), !dbg !20
  store i32 10, ptr %i3, align 4, !dbg !21
  %6 = call token @llvm.directive.region.entry() [ "DIR.OSS"([9 x i8] c"TASK.FOR\00"), "QUAL.OSS.PRIVATE"(ptr %i3, i32 undef), "QUAL.OSS.LOOP.IND.VAR"(ptr %i3), "QUAL.OSS.LOOP.LOWER.BOUND"(ptr @compute_lb.7), "QUAL.OSS.LOOP.UPPER.BOUND"(ptr @compute_ub.8), "QUAL.OSS.LOOP.STEP"(ptr @compute_step.9), "QUAL.OSS.LOOP.TYPE"(i64 2, i64 1, i64 1, i64 1, i64 1) ], !dbg !22
  %7 = load i32, ptr %i3, align 4, !dbg !23
  call void @llvm.directive.region.exit(token %6), !dbg !24
  ret void, !dbg !25
}

; Function Attrs: nounwind
declare token @llvm.directive.region.entry() #1

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token) #1

define internal i32 @compute_lb() #2 !dbg !26 {
entry:
  ret i32 5, !dbg !27
}

define internal i32 @compute_ub() #2 !dbg !29 {
entry:
  ret i32 10, !dbg !30
}

define internal i32 @compute_step() #2 !dbg !32 {
entry:
  ret i32 1, !dbg !33
}

define internal i32 @compute_lb.1() #2 !dbg !35 {
entry:
  ret i32 5, !dbg !36
}

define internal i32 @compute_ub.2() #2 !dbg !38 {
entry:
  ret i32 10, !dbg !39
}

define internal i32 @compute_step.3() #2 !dbg !41 {
entry:
  ret i32 3, !dbg !42
}

define internal i32 @compute_lb.4() #2 !dbg !44 {
entry:
  ret i32 10, !dbg !45
}

define internal i32 @compute_ub.5() #2 !dbg !47 {
entry:
  ret i32 0, !dbg !48
}

define internal i32 @compute_step.6() #2 !dbg !50 {
entry:
  ret i32 -1, !dbg !51
}

define internal i32 @compute_lb.7() #2 !dbg !53 {
entry:
  ret i32 10, !dbg !54
}

define internal i32 @compute_ub.8() #2 !dbg !56 {
entry:
  ret i32 0, !dbg !57
}

define internal i32 @compute_step.9() #2 !dbg !59 {
entry:
  ret i32 -3, !dbg !60
}

attributes #0 = { noinline nounwind optnone "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
attributes #1 = { nounwind }
attributes #2 = { "min-legal-vector-width"="0" }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "", isOptimized: false, runtimeVersion: 0, emissionKind: NoDebug, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "<stdin>", directory: "")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 1, !"wchar_size", i32 4}
!4 = !{!""}
!5 = distinct !DISubprogram(name: "foo", scope: !6, file: !6, line: 1, type: !7, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !8)
!6 = !DIFile(filename: "task_for_unpack_loop.ll", directory: "")
!7 = !DISubroutineType(types: !8)
!8 = !{}
!9 = !DILocation(line: 3, column: 14, scope: !5)
!10 = !DILocation(line: 3, column: 10, scope: !5)
!11 = !DILocation(line: 3, column: 39, scope: !5)
!12 = !DILocation(line: 3, column: 42, scope: !5)
!13 = !DILocation(line: 5, column: 14, scope: !5)
!14 = !DILocation(line: 5, column: 10, scope: !5)
!15 = !DILocation(line: 5, column: 39, scope: !5)
!16 = !DILocation(line: 5, column: 42, scope: !5)
!17 = !DILocation(line: 7, column: 14, scope: !5)
!18 = !DILocation(line: 7, column: 10, scope: !5)
!19 = !DILocation(line: 7, column: 39, scope: !5)
!20 = !DILocation(line: 7, column: 42, scope: !5)
!21 = !DILocation(line: 9, column: 14, scope: !5)
!22 = !DILocation(line: 9, column: 10, scope: !5)
!23 = !DILocation(line: 9, column: 39, scope: !5)
!24 = !DILocation(line: 9, column: 42, scope: !5)
!25 = !DILocation(line: 10, column: 1, scope: !5)
!26 = distinct !DISubprogram(linkageName: "compute_lb", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!27 = !DILocation(line: 3, column: 18, scope: !28)
!28 = !DILexicalBlockFile(scope: !26, file: !6, discriminator: 0)
!29 = distinct !DISubprogram(linkageName: "compute_ub", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!30 = !DILocation(line: 3, column: 25, scope: !31)
!31 = !DILexicalBlockFile(scope: !29, file: !6, discriminator: 0)
!32 = distinct !DISubprogram(linkageName: "compute_step", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!33 = !DILocation(line: 3, column: 34, scope: !34)
!34 = !DILexicalBlockFile(scope: !32, file: !6, discriminator: 0)
!35 = distinct !DISubprogram(linkageName: "compute_lb.1", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!36 = !DILocation(line: 5, column: 18, scope: !37)
!37 = !DILexicalBlockFile(scope: !35, file: !6, discriminator: 0)
!38 = distinct !DISubprogram(linkageName: "compute_ub.2", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!39 = !DILocation(line: 5, column: 25, scope: !40)
!40 = !DILexicalBlockFile(scope: !38, file: !6, discriminator: 0)
!41 = distinct !DISubprogram(linkageName: "compute_step.3", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!42 = !DILocation(line: 5, column: 34, scope: !43)
!43 = !DILexicalBlockFile(scope: !41, file: !6, discriminator: 0)
!44 = distinct !DISubprogram(linkageName: "compute_lb.4", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!45 = !DILocation(line: 7, column: 18, scope: !46)
!46 = !DILexicalBlockFile(scope: !44, file: !6, discriminator: 0)
!47 = distinct !DISubprogram(linkageName: "compute_ub.5", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!48 = !DILocation(line: 7, column: 26, scope: !49)
!49 = !DILexicalBlockFile(scope: !47, file: !6, discriminator: 0)
!50 = distinct !DISubprogram(linkageName: "compute_step.6", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!51 = !DILocation(line: 7, column: 34, scope: !52)
!52 = !DILexicalBlockFile(scope: !50, file: !6, discriminator: 0)
!53 = distinct !DISubprogram(linkageName: "compute_lb.7", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!54 = !DILocation(line: 9, column: 18, scope: !55)
!55 = !DILexicalBlockFile(scope: !53, file: !6, discriminator: 0)
!56 = distinct !DISubprogram(linkageName: "compute_ub.8", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!57 = !DILocation(line: 9, column: 26, scope: !58)
!58 = !DILexicalBlockFile(scope: !56, file: !6, discriminator: 0)
!59 = distinct !DISubprogram(linkageName: "compute_step.9", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!60 = !DILocation(line: 9, column: 34, scope: !61)
!61 = !DILexicalBlockFile(scope: !59, file: !6, discriminator: 0)
; CHECK-LABEL: define {{[^@]+}}@foo
; CHECK-SAME: (i32 noundef [[LB:%.*]], i32 noundef [[UB:%.*]], i32 noundef [[STEP:%.*]]) #[[ATTR0:[0-9]+]] !dbg [[DBG5:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[LB_ADDR:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[UB_ADDR:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[STEP_ADDR:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[I:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[I1:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[I2:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[I3:%.*]] = alloca i32, align 4
; CHECK-NEXT:    store i32 [[LB]], ptr [[LB_ADDR]], align 4
; CHECK-NEXT:    store i32 [[UB]], ptr [[UB_ADDR]], align 4
; CHECK-NEXT:    store i32 [[STEP]], ptr [[STEP_ADDR]], align 4
; CHECK-NEXT:    store i32 5, ptr [[I]], align 4, !dbg [[DBG9:![0-9]+]]
; CHECK-NEXT:    [[TMP0:%.*]] = alloca ptr, align 8, !dbg [[DBG10:![0-9]+]]
; CHECK-NEXT:    [[TMP1:%.*]] = alloca ptr, align 8, !dbg [[DBG10]]
; CHECK-NEXT:    [[NUM_DEPS:%.*]] = alloca i64, align 8, !dbg [[DBG10]]
; CHECK-NEXT:    [[TMP2:%.*]] = alloca ptr, align 8, !dbg [[DBG11:![0-9]+]]
; CHECK-NEXT:    [[TMP3:%.*]] = alloca ptr, align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[NUM_DEPS21:%.*]] = alloca i64, align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP4:%.*]] = alloca ptr, align 8, !dbg [[DBG12:![0-9]+]]
; CHECK-NEXT:    [[TMP5:%.*]] = alloca ptr, align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[NUM_DEPS37:%.*]] = alloca i64, align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP6:%.*]] = alloca ptr, align 8, !dbg [[DBG13:![0-9]+]]
; CHECK-NEXT:    [[TMP7:%.*]] = alloca ptr, align 8, !dbg [[DBG13]]
; CHECK-NEXT:    [[NUM_DEPS53:%.*]] = alloca i64, align 8, !dbg [[DBG13]]
; CHECK-NEXT:    br label [[FINAL_COND:%.*]], !dbg [[DBG10]]
; CHECK:       codeRepl:
; CHECK-NEXT:    store i64 0, ptr [[NUM_DEPS]], align 8, !dbg [[DBG10]]
; CHECK-NEXT:    [[TMP8:%.*]] = load i64, ptr [[NUM_DEPS]], align 8, !dbg [[DBG10]]
; CHECK-NEXT:    [[TMP9:%.*]] = call i32 @compute_lb(), !dbg [[DBG10]]
; CHECK-NEXT:    [[TMP10:%.*]] = call i32 @compute_ub(), !dbg [[DBG10]]
; CHECK-NEXT:    [[TMP11:%.*]] = call i32 @compute_step(), !dbg [[DBG10]]
; CHECK-NEXT:    [[TMP12:%.*]] = sub i32 [[TMP10]], [[TMP9]], !dbg [[DBG10]]
; CHECK-NEXT:    [[TMP13:%.*]] = sub i32 [[TMP12]], 1, !dbg [[DBG10]]
; CHECK-NEXT:    [[TMP14:%.*]] = sdiv i32 [[TMP13]], [[TMP11]], !dbg [[DBG10]]
; CHECK-NEXT:    [[TMP15:%.*]] = add i32 [[TMP14]], 1, !dbg [[DBG10]]
; CHECK-NEXT:    [[TMP16:%.*]] = sext i32 [[TMP15]] to i64, !dbg [[DBG10]]
; CHECK-NEXT:    [[TMP17:%.*]] = mul i64 1, [[TMP16]], !dbg [[DBG10]]
; CHECK-NEXT:    call void @nanos6_create_loop(ptr @task_info_var_foo, ptr @task_invocation_info_foo, ptr null, i64 16, ptr [[TMP0]], ptr [[TMP1]], i64 8, i64 [[TMP8]], i64 0, i64 [[TMP17]], i64 0, i64 0), !dbg [[DBG10]]
; CHECK-NEXT:    [[TMP18:%.*]] = load ptr, ptr [[TMP0]], align 8, !dbg [[DBG10]]
; CHECK-NEXT:    [[ARGS_END:%.*]] = getelementptr i8, ptr [[TMP18]], i64 16, !dbg [[DBG10]]
; CHECK-NEXT:    [[TMP19:%.*]] = load ptr, ptr [[TMP1]], align 8, !dbg [[DBG10]]
; CHECK-NEXT:    call void @nanos6_submit_task(ptr [[TMP19]]), !dbg [[DBG10]]
; CHECK-NEXT:    br label [[FOR_END3:%.*]], !dbg [[DBG10]]
; CHECK:       final.end:
; CHECK-NEXT:    store i32 5, ptr [[I1]], align 4, !dbg [[DBG14:![0-9]+]]
; CHECK-NEXT:    br label [[FINAL_COND12:%.*]], !dbg [[DBG11]]
; CHECK:       codeRepl18:
; CHECK-NEXT:    store i64 0, ptr [[NUM_DEPS21]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP20:%.*]] = load i64, ptr [[NUM_DEPS21]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP21:%.*]] = call i32 @compute_lb.1(), !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP22:%.*]] = call i32 @compute_ub.2(), !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP23:%.*]] = call i32 @compute_step.3(), !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP24:%.*]] = sub i32 [[TMP22]], [[TMP21]], !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP25:%.*]] = sub i32 [[TMP24]], 1, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP26:%.*]] = sdiv i32 [[TMP25]], [[TMP23]], !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP27:%.*]] = add i32 [[TMP26]], 1, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP28:%.*]] = sext i32 [[TMP27]] to i64, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP29:%.*]] = mul i64 1, [[TMP28]], !dbg [[DBG11]]
; CHECK-NEXT:    call void @nanos6_create_loop(ptr @task_info_var_foo.10, ptr @task_invocation_info_foo.6, ptr null, i64 16, ptr [[TMP2]], ptr [[TMP3]], i64 8, i64 [[TMP20]], i64 0, i64 [[TMP29]], i64 0, i64 0), !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP30:%.*]] = load ptr, ptr [[TMP2]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[ARGS_END22:%.*]] = getelementptr i8, ptr [[TMP30]], i64 16, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP31:%.*]] = load ptr, ptr [[TMP3]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    call void @nanos6_submit_task(ptr [[TMP31]]), !dbg [[DBG11]]
; CHECK-NEXT:    br label [[FOR_END16:%.*]], !dbg [[DBG11]]
; CHECK:       final.end11:
; CHECK-NEXT:    store i32 10, ptr [[I2]], align 4, !dbg [[DBG15:![0-9]+]]
; CHECK-NEXT:    br label [[FINAL_COND28:%.*]], !dbg [[DBG12]]
; CHECK:       codeRepl34:
; CHECK-NEXT:    store i64 0, ptr [[NUM_DEPS37]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP32:%.*]] = load i64, ptr [[NUM_DEPS37]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP33:%.*]] = call i32 @compute_lb.4(), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP34:%.*]] = call i32 @compute_ub.5(), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP35:%.*]] = call i32 @compute_step.6(), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP36:%.*]] = sub i32 [[TMP34]], [[TMP33]], !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP37:%.*]] = add i32 [[TMP36]], 1, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP38:%.*]] = sdiv i32 [[TMP37]], [[TMP35]], !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP39:%.*]] = add i32 [[TMP38]], 1, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP40:%.*]] = sext i32 [[TMP39]] to i64, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP41:%.*]] = mul i64 1, [[TMP40]], !dbg [[DBG12]]
; CHECK-NEXT:    call void @nanos6_create_loop(ptr @task_info_var_foo.20, ptr @task_invocation_info_foo.16, ptr null, i64 16, ptr [[TMP4]], ptr [[TMP5]], i64 8, i64 [[TMP32]], i64 0, i64 [[TMP41]], i64 0, i64 0), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP42:%.*]] = load ptr, ptr [[TMP4]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[ARGS_END38:%.*]] = getelementptr i8, ptr [[TMP42]], i64 16, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP43:%.*]] = load ptr, ptr [[TMP5]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    call void @nanos6_submit_task(ptr [[TMP43]]), !dbg [[DBG12]]
; CHECK-NEXT:    br label [[FOR_END32:%.*]], !dbg [[DBG12]]
; CHECK:       final.end27:
; CHECK-NEXT:    store i32 10, ptr [[I3]], align 4, !dbg [[DBG16:![0-9]+]]
; CHECK-NEXT:    br label [[FINAL_COND44:%.*]], !dbg [[DBG13]]
; CHECK:       codeRepl50:
; CHECK-NEXT:    store i64 0, ptr [[NUM_DEPS53]], align 8, !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP44:%.*]] = load i64, ptr [[NUM_DEPS53]], align 8, !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP45:%.*]] = call i32 @compute_lb.7(), !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP46:%.*]] = call i32 @compute_ub.8(), !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP47:%.*]] = call i32 @compute_step.9(), !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP48:%.*]] = sub i32 [[TMP46]], [[TMP45]], !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP49:%.*]] = add i32 [[TMP48]], 1, !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP50:%.*]] = sdiv i32 [[TMP49]], [[TMP47]], !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP51:%.*]] = add i32 [[TMP50]], 1, !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP52:%.*]] = sext i32 [[TMP51]] to i64, !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP53:%.*]] = mul i64 1, [[TMP52]], !dbg [[DBG13]]
; CHECK-NEXT:    call void @nanos6_create_loop(ptr @task_info_var_foo.30, ptr @task_invocation_info_foo.26, ptr null, i64 16, ptr [[TMP6]], ptr [[TMP7]], i64 8, i64 [[TMP44]], i64 0, i64 [[TMP53]], i64 0, i64 0), !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP54:%.*]] = load ptr, ptr [[TMP6]], align 8, !dbg [[DBG13]]
; CHECK-NEXT:    [[ARGS_END54:%.*]] = getelementptr i8, ptr [[TMP54]], i64 16, !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP55:%.*]] = load ptr, ptr [[TMP7]], align 8, !dbg [[DBG13]]
; CHECK-NEXT:    call void @nanos6_submit_task(ptr [[TMP55]]), !dbg [[DBG13]]
; CHECK-NEXT:    br label [[FOR_END48:%.*]], !dbg [[DBG13]]
; CHECK:       final.end43:
; CHECK-NEXT:    ret void, !dbg [[DBG17:![0-9]+]]
; CHECK:       final.then:
; CHECK-NEXT:    [[TMP56:%.*]] = call i32 @compute_lb(), !dbg [[DBG10]]
; CHECK-NEXT:    [[TMP57:%.*]] = call i32 @compute_ub(), !dbg [[DBG10]]
; CHECK-NEXT:    [[TMP58:%.*]] = call i32 @compute_step(), !dbg [[DBG10]]
; CHECK-NEXT:    store i32 [[TMP56]], ptr [[I]], align 4, !dbg [[DBG10]]
; CHECK-NEXT:    br label [[FOR_COND:%.*]], !dbg [[DBG10]]
; CHECK:       for.cond:
; CHECK-NEXT:    [[TMP59:%.*]] = load i32, ptr [[I]], align 4, !dbg [[DBG10]]
; CHECK-NEXT:    [[TMP60:%.*]] = icmp slt i32 [[TMP59]], [[TMP57]], !dbg [[DBG10]]
; CHECK-NEXT:    br i1 [[TMP60]], label [[TMP61:%.*]], label [[FOR_END:%.*]], !dbg [[DBG10]]
; CHECK:       61:
; CHECK-NEXT:    br label [[FOR_BODY:%.*]], !dbg [[DBG10]]
; CHECK:       for.body:
; CHECK-NEXT:    [[TMP62:%.*]] = load i32, ptr [[I]], align 4, !dbg [[DBG18:![0-9]+]]
; CHECK-NEXT:    br label [[FOR_INCR:%.*]], !dbg [[DBG14]]
; CHECK:       final.then13:
; CHECK-NEXT:    [[TMP63:%.*]] = call i32 @compute_lb.1(), !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP64:%.*]] = call i32 @compute_ub.2(), !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP65:%.*]] = call i32 @compute_step.3(), !dbg [[DBG11]]
; CHECK-NEXT:    store i32 [[TMP63]], ptr [[I1]], align 4, !dbg [[DBG11]]
; CHECK-NEXT:    br label [[FOR_COND7:%.*]], !dbg [[DBG11]]
; CHECK:       for.cond7:
; CHECK-NEXT:    [[TMP66:%.*]] = load i32, ptr [[I1]], align 4, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP67:%.*]] = icmp slt i32 [[TMP66]], [[TMP64]], !dbg [[DBG11]]
; CHECK-NEXT:    br i1 [[TMP67]], label [[TMP68:%.*]], label [[FOR_END9:%.*]], !dbg [[DBG11]]
; CHECK:       68:
; CHECK-NEXT:    br label [[FOR_BODY8:%.*]], !dbg [[DBG11]]
; CHECK:       for.body8:
; CHECK-NEXT:    [[TMP69:%.*]] = load i32, ptr [[I1]], align 4, !dbg [[DBG19:![0-9]+]]
; CHECK-NEXT:    br label [[FOR_INCR10:%.*]], !dbg [[DBG15]]
; CHECK:       final.then29:
; CHECK-NEXT:    [[TMP70:%.*]] = call i32 @compute_lb.4(), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP71:%.*]] = call i32 @compute_ub.5(), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP72:%.*]] = call i32 @compute_step.6(), !dbg [[DBG12]]
; CHECK-NEXT:    store i32 [[TMP70]], ptr [[I2]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    br label [[FOR_COND23:%.*]], !dbg [[DBG12]]
; CHECK:       for.cond23:
; CHECK-NEXT:    [[TMP73:%.*]] = load i32, ptr [[I2]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP74:%.*]] = icmp sgt i32 [[TMP73]], [[TMP71]], !dbg [[DBG12]]
; CHECK-NEXT:    br i1 [[TMP74]], label [[TMP75:%.*]], label [[FOR_END25:%.*]], !dbg [[DBG12]]
; CHECK:       75:
; CHECK-NEXT:    br label [[FOR_BODY24:%.*]], !dbg [[DBG12]]
; CHECK:       for.body24:
; CHECK-NEXT:    [[TMP76:%.*]] = load i32, ptr [[I2]], align 4, !dbg [[DBG20:![0-9]+]]
; CHECK-NEXT:    br label [[FOR_INCR26:%.*]], !dbg [[DBG16]]
; CHECK:       final.then45:
; CHECK-NEXT:    [[TMP77:%.*]] = call i32 @compute_lb.7(), !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP78:%.*]] = call i32 @compute_ub.8(), !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP79:%.*]] = call i32 @compute_step.9(), !dbg [[DBG13]]
; CHECK-NEXT:    store i32 [[TMP77]], ptr [[I3]], align 4, !dbg [[DBG13]]
; CHECK-NEXT:    br label [[FOR_COND39:%.*]], !dbg [[DBG13]]
; CHECK:       for.cond39:
; CHECK-NEXT:    [[TMP80:%.*]] = load i32, ptr [[I3]], align 4, !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP81:%.*]] = icmp sgt i32 [[TMP80]], [[TMP78]], !dbg [[DBG13]]
; CHECK-NEXT:    br i1 [[TMP81]], label [[TMP82:%.*]], label [[FOR_END41:%.*]], !dbg [[DBG13]]
; CHECK:       82:
; CHECK-NEXT:    br label [[FOR_BODY40:%.*]], !dbg [[DBG13]]
; CHECK:       for.body40:
; CHECK-NEXT:    [[TMP83:%.*]] = load i32, ptr [[I3]], align 4, !dbg [[DBG21:![0-9]+]]
; CHECK-NEXT:    br label [[FOR_INCR42:%.*]], !dbg [[DBG17]]
; CHECK:       for.end:
; CHECK-NEXT:    br label [[FINAL_END:%.*]], !dbg [[DBG10]]
; CHECK:       for.incr:
; CHECK-NEXT:    [[TMP84:%.*]] = load i32, ptr [[I]], align 4, !dbg [[DBG10]]
; CHECK-NEXT:    [[TMP85:%.*]] = add i32 [[TMP84]], [[TMP58]], !dbg [[DBG10]]
; CHECK-NEXT:    store i32 [[TMP85]], ptr [[I]], align 4, !dbg [[DBG10]]
; CHECK-NEXT:    br label [[FOR_COND]], !dbg [[DBG10]]
; CHECK:       final.cond:
; CHECK-NEXT:    [[TMP86:%.*]] = call i32 @nanos6_in_final(), !dbg [[DBG10]]
; CHECK-NEXT:    [[TMP87:%.*]] = icmp ne i32 [[TMP86]], 0, !dbg [[DBG10]]
; CHECK-NEXT:    br i1 [[TMP87]], label [[FINAL_THEN:%.*]], label [[CODEREPL:%.*]], !dbg [[DBG10]]
; CHECK:       for.end3:
; CHECK-NEXT:    br label [[FINAL_END]], !dbg [[DBG10]]
; CHECK:       for.end9:
; CHECK-NEXT:    br label [[FINAL_END11:%.*]], !dbg [[DBG11]]
; CHECK:       for.incr10:
; CHECK-NEXT:    [[TMP88:%.*]] = load i32, ptr [[I1]], align 4, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP89:%.*]] = add i32 [[TMP88]], [[TMP65]], !dbg [[DBG11]]
; CHECK-NEXT:    store i32 [[TMP89]], ptr [[I1]], align 4, !dbg [[DBG11]]
; CHECK-NEXT:    br label [[FOR_COND7]], !dbg [[DBG11]]
; CHECK:       final.cond12:
; CHECK-NEXT:    [[TMP90:%.*]] = call i32 @nanos6_in_final(), !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP91:%.*]] = icmp ne i32 [[TMP90]], 0, !dbg [[DBG11]]
; CHECK-NEXT:    br i1 [[TMP91]], label [[FINAL_THEN13:%.*]], label [[CODEREPL18:%.*]], !dbg [[DBG11]]
; CHECK:       for.end16:
; CHECK-NEXT:    br label [[FINAL_END11]], !dbg [[DBG11]]
; CHECK:       for.end25:
; CHECK-NEXT:    br label [[FINAL_END27:%.*]], !dbg [[DBG12]]
; CHECK:       for.incr26:
; CHECK-NEXT:    [[TMP92:%.*]] = load i32, ptr [[I2]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP93:%.*]] = add i32 [[TMP92]], [[TMP72]], !dbg [[DBG12]]
; CHECK-NEXT:    store i32 [[TMP93]], ptr [[I2]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    br label [[FOR_COND23]], !dbg [[DBG12]]
; CHECK:       final.cond28:
; CHECK-NEXT:    [[TMP94:%.*]] = call i32 @nanos6_in_final(), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP95:%.*]] = icmp ne i32 [[TMP94]], 0, !dbg [[DBG12]]
; CHECK-NEXT:    br i1 [[TMP95]], label [[FINAL_THEN29:%.*]], label [[CODEREPL34:%.*]], !dbg [[DBG12]]
; CHECK:       for.end32:
; CHECK-NEXT:    br label [[FINAL_END27]], !dbg [[DBG12]]
; CHECK:       for.end41:
; CHECK-NEXT:    br label [[FINAL_END43:%.*]], !dbg [[DBG13]]
; CHECK:       for.incr42:
; CHECK-NEXT:    [[TMP96:%.*]] = load i32, ptr [[I3]], align 4, !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP97:%.*]] = add i32 [[TMP96]], [[TMP79]], !dbg [[DBG13]]
; CHECK-NEXT:    store i32 [[TMP97]], ptr [[I3]], align 4, !dbg [[DBG13]]
; CHECK-NEXT:    br label [[FOR_COND39]], !dbg [[DBG13]]
; CHECK:       final.cond44:
; CHECK-NEXT:    [[TMP98:%.*]] = call i32 @nanos6_in_final(), !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP99:%.*]] = icmp ne i32 [[TMP98]], 0, !dbg [[DBG13]]
; CHECK-NEXT:    br i1 [[TMP99]], label [[FINAL_THEN45:%.*]], label [[CODEREPL50:%.*]], !dbg [[DBG13]]
; CHECK:       for.end48:
; CHECK-NEXT:    br label [[FINAL_END43]], !dbg [[DBG13]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_lb
; CHECK-SAME: () #[[ATTR2:[0-9]+]] !dbg [[DBG22:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret i32 5, !dbg [[DBG23:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_ub
; CHECK-SAME: () #[[ATTR2]] !dbg [[DBG25:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret i32 10, !dbg [[DBG26:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_step
; CHECK-SAME: () #[[ATTR2]] !dbg [[DBG28:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret i32 1, !dbg [[DBG29:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_lb.1
; CHECK-SAME: () #[[ATTR2]] !dbg [[DBG31:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret i32 5, !dbg [[DBG32:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_ub.2
; CHECK-SAME: () #[[ATTR2]] !dbg [[DBG34:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret i32 10, !dbg [[DBG35:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_step.3
; CHECK-SAME: () #[[ATTR2]] !dbg [[DBG37:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret i32 3, !dbg [[DBG38:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_lb.4
; CHECK-SAME: () #[[ATTR2]] !dbg [[DBG40:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret i32 10, !dbg [[DBG41:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_ub.5
; CHECK-SAME: () #[[ATTR2]] !dbg [[DBG43:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret i32 0, !dbg [[DBG44:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_step.6
; CHECK-SAME: () #[[ATTR2]] !dbg [[DBG46:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret i32 -1, !dbg [[DBG47:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_lb.7
; CHECK-SAME: () #[[ATTR2]] !dbg [[DBG49:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret i32 10, !dbg [[DBG50:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_ub.8
; CHECK-SAME: () #[[ATTR2]] !dbg [[DBG52:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret i32 0, !dbg [[DBG53:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_step.9
; CHECK-SAME: () #[[ATTR2]] !dbg [[DBG55:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret i32 -3, !dbg [[DBG56:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_unpacked_task_region_foo
; CHECK-SAME: (ptr [[I:%.*]], ptr [[LOOP_BOUNDS:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) !dbg [[DBG58:![0-9]+]] {
; CHECK-NEXT:  newFuncRoot:
; CHECK-NEXT:    br label [[TMP0:%.*]], !dbg [[DBG59:![0-9]+]]
; CHECK:       0:
; CHECK-NEXT:    [[LB_GEP:%.*]] = getelementptr [[NANOS6_LOOP_BOUNDS_T:%.*]], ptr [[LOOP_BOUNDS]], i32 0, i32 0, !dbg [[DBG59]]
; CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr [[LB_GEP]], align 8, !dbg [[DBG59]]
; CHECK-NEXT:    [[LB5:%.*]] = trunc i64 [[TMP1]] to i32, !dbg [[DBG59]]
; CHECK-NEXT:    [[UB_GEP:%.*]] = getelementptr [[NANOS6_LOOP_BOUNDS_T]], ptr [[LOOP_BOUNDS]], i32 0, i32 1, !dbg [[DBG59]]
; CHECK-NEXT:    [[TMP2:%.*]] = load i64, ptr [[UB_GEP]], align 8, !dbg [[DBG59]]
; CHECK-NEXT:    [[UB6:%.*]] = trunc i64 [[TMP2]] to i32, !dbg [[DBG59]]
; CHECK-NEXT:    [[TMP3:%.*]] = call i32 @compute_lb(), !dbg [[DBG59]]
; CHECK-NEXT:    [[TMP4:%.*]] = call i32 @compute_ub(), !dbg [[DBG59]]
; CHECK-NEXT:    [[TMP5:%.*]] = call i32 @compute_step(), !dbg [[DBG59]]
; CHECK-NEXT:    [[TMP6:%.*]] = sub i32 [[UB6]], [[LB5]], !dbg [[DBG59]]
; CHECK-NEXT:    [[TMP7:%.*]] = sub i32 [[TMP6]], 1, !dbg [[DBG59]]
; CHECK-NEXT:    [[TMP8:%.*]] = sdiv i32 [[TMP7]], [[TMP5]], !dbg [[DBG59]]
; CHECK-NEXT:    [[TMP9:%.*]] = add i32 [[TMP8]], 1, !dbg [[DBG59]]
; CHECK-NEXT:    [[TMP10:%.*]] = sext i32 [[TMP9]] to i64, !dbg [[DBG59]]
; CHECK-NEXT:    [[LOOP:%.*]] = alloca i32, align 4, !dbg [[DBG59]]
; CHECK-NEXT:    store i32 [[LB5]], ptr [[LOOP]], align 4, !dbg [[DBG59]]
; CHECK-NEXT:    br label [[FOR_COND1:%.*]], !dbg [[DBG59]]
; CHECK:       for.cond1:
; CHECK-NEXT:    [[TMP11:%.*]] = load i32, ptr [[LOOP]], align 4, !dbg [[DBG59]]
; CHECK-NEXT:    [[TMP12:%.*]] = icmp slt i32 [[TMP11]], [[UB6]], !dbg [[DBG59]]
; CHECK-NEXT:    br i1 [[TMP12]], label [[TMP13:%.*]], label [[DOTEXITSTUB:%.*]], !dbg [[DBG59]]
; CHECK:       13:
; CHECK-NEXT:    [[TMP14:%.*]] = load i32, ptr [[LOOP]], align 4, !dbg [[DBG59]]
; CHECK-NEXT:    [[TMP15:%.*]] = sext i32 [[TMP14]] to i64, !dbg [[DBG59]]
; CHECK-NEXT:    [[TMP16:%.*]] = udiv i64 [[TMP15]], 1, !dbg [[DBG59]]
; CHECK-NEXT:    [[TMP17:%.*]] = sext i32 [[TMP5]] to i64, !dbg [[DBG59]]
; CHECK-NEXT:    [[TMP18:%.*]] = mul i64 [[TMP16]], [[TMP17]], !dbg [[DBG59]]
; CHECK-NEXT:    [[TMP19:%.*]] = sext i32 [[TMP3]] to i64, !dbg [[DBG59]]
; CHECK-NEXT:    [[TMP20:%.*]] = add i64 [[TMP18]], [[TMP19]], !dbg [[DBG59]]
; CHECK-NEXT:    [[TMP21:%.*]] = mul i64 [[TMP16]], 1, !dbg [[DBG59]]
; CHECK-NEXT:    [[TMP22:%.*]] = sext i32 [[TMP14]] to i64, !dbg [[DBG59]]
; CHECK-NEXT:    [[TMP23:%.*]] = sub i64 [[TMP22]], [[TMP21]], !dbg [[DBG59]]
; CHECK-NEXT:    [[TMP24:%.*]] = trunc i64 [[TMP20]] to i32, !dbg [[DBG59]]
; CHECK-NEXT:    store i32 [[TMP24]], ptr [[I]], align 4, !dbg [[DBG59]]
; CHECK-NEXT:    br label [[FOR_BODY2:%.*]], !dbg [[DBG59]]
; CHECK:       for.body2:
; CHECK-NEXT:    [[TMP25:%.*]] = load i32, ptr [[I]], align 4, !dbg [[DBG60:![0-9]+]]
; CHECK-NEXT:    br label [[FOR_INCR4:%.*]], !dbg [[DBG61:![0-9]+]]
; CHECK:       for.incr4:
; CHECK-NEXT:    [[TMP26:%.*]] = load i32, ptr [[LOOP]], align 4, !dbg [[DBG59]]
; CHECK-NEXT:    [[TMP27:%.*]] = add i32 [[TMP26]], 1, !dbg [[DBG59]]
; CHECK-NEXT:    store i32 [[TMP27]], ptr [[LOOP]], align 4, !dbg [[DBG59]]
; CHECK-NEXT:    br label [[FOR_COND1]], !dbg [[DBG59]]
; CHECK:       .exitStub:
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_task_region_foo
; CHECK-SAME: (ptr [[TASK_ARGS:%.*]], ptr [[LOOP_BOUNDS:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_I:%.*]] = getelementptr [[NANOS6_TASK_ARGS_FOO:%.*]], ptr [[TASK_ARGS]], i32 0, i32 0
; CHECK-NEXT:    [[TMP0:%.*]] = icmp ne ptr [[ADDRESS_TRANSLATION_TABLE]], null
; CHECK-NEXT:    br i1 [[TMP0]], label [[TMP1:%.*]], label [[TMP2:%.*]]
; CHECK:       1:
; CHECK-NEXT:    br label [[TMP2]]
; CHECK:       2:
; CHECK-NEXT:    call void @nanos6_unpacked_task_region_foo(ptr [[GEP_I]], ptr [[LOOP_BOUNDS]], ptr [[ADDRESS_TRANSLATION_TABLE]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_constructor_register_task_info() {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @nanos6_register_task_info(ptr @task_info_var_foo)
; CHECK-NEXT:    call void @nanos6_register_task_info(ptr @task_info_var_foo.10)
; CHECK-NEXT:    call void @nanos6_register_task_info(ptr @task_info_var_foo.20)
; CHECK-NEXT:    call void @nanos6_register_task_info(ptr @task_info_var_foo.30)
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_unpacked_task_region_foo.4
; CHECK-SAME: (ptr [[I1:%.*]], ptr [[LOOP_BOUNDS:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) !dbg [[DBG62:![0-9]+]] {
; CHECK-NEXT:  newFuncRoot:
; CHECK-NEXT:    br label [[TMP0:%.*]], !dbg [[DBG63:![0-9]+]]
; CHECK:       0:
; CHECK-NEXT:    [[LB_GEP:%.*]] = getelementptr [[NANOS6_LOOP_BOUNDS_T:%.*]], ptr [[LOOP_BOUNDS]], i32 0, i32 0, !dbg [[DBG63]]
; CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr [[LB_GEP]], align 8, !dbg [[DBG63]]
; CHECK-NEXT:    [[LB19:%.*]] = trunc i64 [[TMP1]] to i32, !dbg [[DBG63]]
; CHECK-NEXT:    [[UB_GEP:%.*]] = getelementptr [[NANOS6_LOOP_BOUNDS_T]], ptr [[LOOP_BOUNDS]], i32 0, i32 1, !dbg [[DBG63]]
; CHECK-NEXT:    [[TMP2:%.*]] = load i64, ptr [[UB_GEP]], align 8, !dbg [[DBG63]]
; CHECK-NEXT:    [[UB20:%.*]] = trunc i64 [[TMP2]] to i32, !dbg [[DBG63]]
; CHECK-NEXT:    [[TMP3:%.*]] = call i32 @compute_lb.1(), !dbg [[DBG63]]
; CHECK-NEXT:    [[TMP4:%.*]] = call i32 @compute_ub.2(), !dbg [[DBG63]]
; CHECK-NEXT:    [[TMP5:%.*]] = call i32 @compute_step.3(), !dbg [[DBG63]]
; CHECK-NEXT:    [[TMP6:%.*]] = sub i32 [[UB20]], [[LB19]], !dbg [[DBG63]]
; CHECK-NEXT:    [[TMP7:%.*]] = sub i32 [[TMP6]], 1, !dbg [[DBG63]]
; CHECK-NEXT:    [[TMP8:%.*]] = sdiv i32 [[TMP7]], [[TMP5]], !dbg [[DBG63]]
; CHECK-NEXT:    [[TMP9:%.*]] = add i32 [[TMP8]], 1, !dbg [[DBG63]]
; CHECK-NEXT:    [[TMP10:%.*]] = sext i32 [[TMP9]] to i64, !dbg [[DBG63]]
; CHECK-NEXT:    [[LOOP:%.*]] = alloca i32, align 4, !dbg [[DBG63]]
; CHECK-NEXT:    store i32 [[LB19]], ptr [[LOOP]], align 4, !dbg [[DBG63]]
; CHECK-NEXT:    br label [[FOR_COND14:%.*]], !dbg [[DBG63]]
; CHECK:       for.cond14:
; CHECK-NEXT:    [[TMP11:%.*]] = load i32, ptr [[LOOP]], align 4, !dbg [[DBG63]]
; CHECK-NEXT:    [[TMP12:%.*]] = icmp slt i32 [[TMP11]], [[UB20]], !dbg [[DBG63]]
; CHECK-NEXT:    br i1 [[TMP12]], label [[TMP13:%.*]], label [[DOTEXITSTUB:%.*]], !dbg [[DBG63]]
; CHECK:       13:
; CHECK-NEXT:    [[TMP14:%.*]] = load i32, ptr [[LOOP]], align 4, !dbg [[DBG63]]
; CHECK-NEXT:    [[TMP15:%.*]] = sext i32 [[TMP14]] to i64, !dbg [[DBG63]]
; CHECK-NEXT:    [[TMP16:%.*]] = udiv i64 [[TMP15]], 1, !dbg [[DBG63]]
; CHECK-NEXT:    [[TMP17:%.*]] = sext i32 [[TMP5]] to i64, !dbg [[DBG63]]
; CHECK-NEXT:    [[TMP18:%.*]] = mul i64 [[TMP16]], [[TMP17]], !dbg [[DBG63]]
; CHECK-NEXT:    [[TMP19:%.*]] = sext i32 [[TMP3]] to i64, !dbg [[DBG63]]
; CHECK-NEXT:    [[TMP20:%.*]] = add i64 [[TMP18]], [[TMP19]], !dbg [[DBG63]]
; CHECK-NEXT:    [[TMP21:%.*]] = mul i64 [[TMP16]], 1, !dbg [[DBG63]]
; CHECK-NEXT:    [[TMP22:%.*]] = sext i32 [[TMP14]] to i64, !dbg [[DBG63]]
; CHECK-NEXT:    [[TMP23:%.*]] = sub i64 [[TMP22]], [[TMP21]], !dbg [[DBG63]]
; CHECK-NEXT:    [[TMP24:%.*]] = trunc i64 [[TMP20]] to i32, !dbg [[DBG63]]
; CHECK-NEXT:    store i32 [[TMP24]], ptr [[I1]], align 4, !dbg [[DBG63]]
; CHECK-NEXT:    br label [[FOR_BODY15:%.*]], !dbg [[DBG63]]
; CHECK:       for.body15:
; CHECK-NEXT:    [[TMP25:%.*]] = load i32, ptr [[I1]], align 4, !dbg [[DBG64:![0-9]+]]
; CHECK-NEXT:    br label [[FOR_INCR17:%.*]], !dbg [[DBG65:![0-9]+]]
; CHECK:       for.incr17:
; CHECK-NEXT:    [[TMP26:%.*]] = load i32, ptr [[LOOP]], align 4, !dbg [[DBG63]]
; CHECK-NEXT:    [[TMP27:%.*]] = add i32 [[TMP26]], 1, !dbg [[DBG63]]
; CHECK-NEXT:    store i32 [[TMP27]], ptr [[LOOP]], align 4, !dbg [[DBG63]]
; CHECK-NEXT:    br label [[FOR_COND14]], !dbg [[DBG63]]
; CHECK:       .exitStub:
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_task_region_foo.5
; CHECK-SAME: (ptr [[TASK_ARGS:%.*]], ptr [[LOOP_BOUNDS:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_I1:%.*]] = getelementptr [[NANOS6_TASK_ARGS_FOO_0:%.*]], ptr [[TASK_ARGS]], i32 0, i32 0
; CHECK-NEXT:    [[TMP0:%.*]] = icmp ne ptr [[ADDRESS_TRANSLATION_TABLE]], null
; CHECK-NEXT:    br i1 [[TMP0]], label [[TMP1:%.*]], label [[TMP2:%.*]]
; CHECK:       1:
; CHECK-NEXT:    br label [[TMP2]]
; CHECK:       2:
; CHECK-NEXT:    call void @nanos6_unpacked_task_region_foo.4(ptr [[GEP_I1]], ptr [[LOOP_BOUNDS]], ptr [[ADDRESS_TRANSLATION_TABLE]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_unpacked_task_region_foo.14
; CHECK-SAME: (ptr [[I2:%.*]], ptr [[LOOP_BOUNDS:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) !dbg [[DBG66:![0-9]+]] {
; CHECK-NEXT:  newFuncRoot:
; CHECK-NEXT:    br label [[TMP0:%.*]], !dbg [[DBG67:![0-9]+]]
; CHECK:       0:
; CHECK-NEXT:    [[LB_GEP:%.*]] = getelementptr [[NANOS6_LOOP_BOUNDS_T:%.*]], ptr [[LOOP_BOUNDS]], i32 0, i32 0, !dbg [[DBG67]]
; CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr [[LB_GEP]], align 8, !dbg [[DBG67]]
; CHECK-NEXT:    [[LB35:%.*]] = trunc i64 [[TMP1]] to i32, !dbg [[DBG67]]
; CHECK-NEXT:    [[UB_GEP:%.*]] = getelementptr [[NANOS6_LOOP_BOUNDS_T]], ptr [[LOOP_BOUNDS]], i32 0, i32 1, !dbg [[DBG67]]
; CHECK-NEXT:    [[TMP2:%.*]] = load i64, ptr [[UB_GEP]], align 8, !dbg [[DBG67]]
; CHECK-NEXT:    [[UB36:%.*]] = trunc i64 [[TMP2]] to i32, !dbg [[DBG67]]
; CHECK-NEXT:    [[TMP3:%.*]] = call i32 @compute_lb.4(), !dbg [[DBG67]]
; CHECK-NEXT:    [[TMP4:%.*]] = call i32 @compute_ub.5(), !dbg [[DBG67]]
; CHECK-NEXT:    [[TMP5:%.*]] = call i32 @compute_step.6(), !dbg [[DBG67]]
; CHECK-NEXT:    [[TMP6:%.*]] = sub i32 [[UB36]], [[LB35]], !dbg [[DBG67]]
; CHECK-NEXT:    [[TMP7:%.*]] = add i32 [[TMP6]], 1, !dbg [[DBG67]]
; CHECK-NEXT:    [[TMP8:%.*]] = sdiv i32 [[TMP7]], [[TMP5]], !dbg [[DBG67]]
; CHECK-NEXT:    [[TMP9:%.*]] = add i32 [[TMP8]], 1, !dbg [[DBG67]]
; CHECK-NEXT:    [[TMP10:%.*]] = sext i32 [[TMP9]] to i64, !dbg [[DBG67]]
; CHECK-NEXT:    [[LOOP:%.*]] = alloca i32, align 4, !dbg [[DBG67]]
; CHECK-NEXT:    store i32 [[LB35]], ptr [[LOOP]], align 4, !dbg [[DBG67]]
; CHECK-NEXT:    br label [[FOR_COND30:%.*]], !dbg [[DBG67]]
; CHECK:       for.cond30:
; CHECK-NEXT:    [[TMP11:%.*]] = load i32, ptr [[LOOP]], align 4, !dbg [[DBG67]]
; CHECK-NEXT:    [[TMP12:%.*]] = icmp slt i32 [[TMP11]], [[UB36]], !dbg [[DBG67]]
; CHECK-NEXT:    br i1 [[TMP12]], label [[TMP13:%.*]], label [[DOTEXITSTUB:%.*]], !dbg [[DBG67]]
; CHECK:       13:
; CHECK-NEXT:    [[TMP14:%.*]] = load i32, ptr [[LOOP]], align 4, !dbg [[DBG67]]
; CHECK-NEXT:    [[TMP15:%.*]] = sext i32 [[TMP14]] to i64, !dbg [[DBG67]]
; CHECK-NEXT:    [[TMP16:%.*]] = udiv i64 [[TMP15]], 1, !dbg [[DBG67]]
; CHECK-NEXT:    [[TMP17:%.*]] = sext i32 [[TMP5]] to i64, !dbg [[DBG67]]
; CHECK-NEXT:    [[TMP18:%.*]] = mul i64 [[TMP16]], [[TMP17]], !dbg [[DBG67]]
; CHECK-NEXT:    [[TMP19:%.*]] = sext i32 [[TMP3]] to i64, !dbg [[DBG67]]
; CHECK-NEXT:    [[TMP20:%.*]] = add i64 [[TMP18]], [[TMP19]], !dbg [[DBG67]]
; CHECK-NEXT:    [[TMP21:%.*]] = mul i64 [[TMP16]], 1, !dbg [[DBG67]]
; CHECK-NEXT:    [[TMP22:%.*]] = sext i32 [[TMP14]] to i64, !dbg [[DBG67]]
; CHECK-NEXT:    [[TMP23:%.*]] = sub i64 [[TMP22]], [[TMP21]], !dbg [[DBG67]]
; CHECK-NEXT:    [[TMP24:%.*]] = trunc i64 [[TMP20]] to i32, !dbg [[DBG67]]
; CHECK-NEXT:    store i32 [[TMP24]], ptr [[I2]], align 4, !dbg [[DBG67]]
; CHECK-NEXT:    br label [[FOR_BODY31:%.*]], !dbg [[DBG67]]
; CHECK:       for.body31:
; CHECK-NEXT:    [[TMP25:%.*]] = load i32, ptr [[I2]], align 4, !dbg [[DBG68:![0-9]+]]
; CHECK-NEXT:    br label [[FOR_INCR33:%.*]], !dbg [[DBG69:![0-9]+]]
; CHECK:       for.incr33:
; CHECK-NEXT:    [[TMP26:%.*]] = load i32, ptr [[LOOP]], align 4, !dbg [[DBG67]]
; CHECK-NEXT:    [[TMP27:%.*]] = add i32 [[TMP26]], 1, !dbg [[DBG67]]
; CHECK-NEXT:    store i32 [[TMP27]], ptr [[LOOP]], align 4, !dbg [[DBG67]]
; CHECK-NEXT:    br label [[FOR_COND30]], !dbg [[DBG67]]
; CHECK:       .exitStub:
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_task_region_foo.15
; CHECK-SAME: (ptr [[TASK_ARGS:%.*]], ptr [[LOOP_BOUNDS:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_I2:%.*]] = getelementptr [[NANOS6_TASK_ARGS_FOO_1:%.*]], ptr [[TASK_ARGS]], i32 0, i32 0
; CHECK-NEXT:    [[TMP0:%.*]] = icmp ne ptr [[ADDRESS_TRANSLATION_TABLE]], null
; CHECK-NEXT:    br i1 [[TMP0]], label [[TMP1:%.*]], label [[TMP2:%.*]]
; CHECK:       1:
; CHECK-NEXT:    br label [[TMP2]]
; CHECK:       2:
; CHECK-NEXT:    call void @nanos6_unpacked_task_region_foo.14(ptr [[GEP_I2]], ptr [[LOOP_BOUNDS]], ptr [[ADDRESS_TRANSLATION_TABLE]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_unpacked_task_region_foo.24
; CHECK-SAME: (ptr [[I3:%.*]], ptr [[LOOP_BOUNDS:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) !dbg [[DBG70:![0-9]+]] {
; CHECK-NEXT:  newFuncRoot:
; CHECK-NEXT:    br label [[TMP0:%.*]], !dbg [[DBG71:![0-9]+]]
; CHECK:       0:
; CHECK-NEXT:    [[LB_GEP:%.*]] = getelementptr [[NANOS6_LOOP_BOUNDS_T:%.*]], ptr [[LOOP_BOUNDS]], i32 0, i32 0, !dbg [[DBG71]]
; CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr [[LB_GEP]], align 8, !dbg [[DBG71]]
; CHECK-NEXT:    [[LB51:%.*]] = trunc i64 [[TMP1]] to i32, !dbg [[DBG71]]
; CHECK-NEXT:    [[UB_GEP:%.*]] = getelementptr [[NANOS6_LOOP_BOUNDS_T]], ptr [[LOOP_BOUNDS]], i32 0, i32 1, !dbg [[DBG71]]
; CHECK-NEXT:    [[TMP2:%.*]] = load i64, ptr [[UB_GEP]], align 8, !dbg [[DBG71]]
; CHECK-NEXT:    [[UB52:%.*]] = trunc i64 [[TMP2]] to i32, !dbg [[DBG71]]
; CHECK-NEXT:    [[TMP3:%.*]] = call i32 @compute_lb.7(), !dbg [[DBG71]]
; CHECK-NEXT:    [[TMP4:%.*]] = call i32 @compute_ub.8(), !dbg [[DBG71]]
; CHECK-NEXT:    [[TMP5:%.*]] = call i32 @compute_step.9(), !dbg [[DBG71]]
; CHECK-NEXT:    [[TMP6:%.*]] = sub i32 [[UB52]], [[LB51]], !dbg [[DBG71]]
; CHECK-NEXT:    [[TMP7:%.*]] = add i32 [[TMP6]], 1, !dbg [[DBG71]]
; CHECK-NEXT:    [[TMP8:%.*]] = sdiv i32 [[TMP7]], [[TMP5]], !dbg [[DBG71]]
; CHECK-NEXT:    [[TMP9:%.*]] = add i32 [[TMP8]], 1, !dbg [[DBG71]]
; CHECK-NEXT:    [[TMP10:%.*]] = sext i32 [[TMP9]] to i64, !dbg [[DBG71]]
; CHECK-NEXT:    [[LOOP:%.*]] = alloca i32, align 4, !dbg [[DBG71]]
; CHECK-NEXT:    store i32 [[LB51]], ptr [[LOOP]], align 4, !dbg [[DBG71]]
; CHECK-NEXT:    br label [[FOR_COND46:%.*]], !dbg [[DBG71]]
; CHECK:       for.cond46:
; CHECK-NEXT:    [[TMP11:%.*]] = load i32, ptr [[LOOP]], align 4, !dbg [[DBG71]]
; CHECK-NEXT:    [[TMP12:%.*]] = icmp slt i32 [[TMP11]], [[UB52]], !dbg [[DBG71]]
; CHECK-NEXT:    br i1 [[TMP12]], label [[TMP13:%.*]], label [[DOTEXITSTUB:%.*]], !dbg [[DBG71]]
; CHECK:       13:
; CHECK-NEXT:    [[TMP14:%.*]] = load i32, ptr [[LOOP]], align 4, !dbg [[DBG71]]
; CHECK-NEXT:    [[TMP15:%.*]] = sext i32 [[TMP14]] to i64, !dbg [[DBG71]]
; CHECK-NEXT:    [[TMP16:%.*]] = udiv i64 [[TMP15]], 1, !dbg [[DBG71]]
; CHECK-NEXT:    [[TMP17:%.*]] = sext i32 [[TMP5]] to i64, !dbg [[DBG71]]
; CHECK-NEXT:    [[TMP18:%.*]] = mul i64 [[TMP16]], [[TMP17]], !dbg [[DBG71]]
; CHECK-NEXT:    [[TMP19:%.*]] = sext i32 [[TMP3]] to i64, !dbg [[DBG71]]
; CHECK-NEXT:    [[TMP20:%.*]] = add i64 [[TMP18]], [[TMP19]], !dbg [[DBG71]]
; CHECK-NEXT:    [[TMP21:%.*]] = mul i64 [[TMP16]], 1, !dbg [[DBG71]]
; CHECK-NEXT:    [[TMP22:%.*]] = sext i32 [[TMP14]] to i64, !dbg [[DBG71]]
; CHECK-NEXT:    [[TMP23:%.*]] = sub i64 [[TMP22]], [[TMP21]], !dbg [[DBG71]]
; CHECK-NEXT:    [[TMP24:%.*]] = trunc i64 [[TMP20]] to i32, !dbg [[DBG71]]
; CHECK-NEXT:    store i32 [[TMP24]], ptr [[I3]], align 4, !dbg [[DBG71]]
; CHECK-NEXT:    br label [[FOR_BODY47:%.*]], !dbg [[DBG71]]
; CHECK:       for.body47:
; CHECK-NEXT:    [[TMP25:%.*]] = load i32, ptr [[I3]], align 4, !dbg [[DBG72:![0-9]+]]
; CHECK-NEXT:    br label [[FOR_INCR49:%.*]], !dbg [[DBG73:![0-9]+]]
; CHECK:       for.incr49:
; CHECK-NEXT:    [[TMP26:%.*]] = load i32, ptr [[LOOP]], align 4, !dbg [[DBG71]]
; CHECK-NEXT:    [[TMP27:%.*]] = add i32 [[TMP26]], 1, !dbg [[DBG71]]
; CHECK-NEXT:    store i32 [[TMP27]], ptr [[LOOP]], align 4, !dbg [[DBG71]]
; CHECK-NEXT:    br label [[FOR_COND46]], !dbg [[DBG71]]
; CHECK:       .exitStub:
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_task_region_foo.25
; CHECK-SAME: (ptr [[TASK_ARGS:%.*]], ptr [[LOOP_BOUNDS:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_I3:%.*]] = getelementptr [[NANOS6_TASK_ARGS_FOO_2:%.*]], ptr [[TASK_ARGS]], i32 0, i32 0
; CHECK-NEXT:    [[TMP0:%.*]] = icmp ne ptr [[ADDRESS_TRANSLATION_TABLE]], null
; CHECK-NEXT:    br i1 [[TMP0]], label [[TMP1:%.*]], label [[TMP2:%.*]]
; CHECK:       1:
; CHECK-NEXT:    br label [[TMP2]]
; CHECK:       2:
; CHECK-NEXT:    call void @nanos6_unpacked_task_region_foo.24(ptr [[GEP_I3]], ptr [[LOOP_BOUNDS]], ptr [[ADDRESS_TRANSLATION_TABLE]])
; CHECK-NEXT:    ret void
;
