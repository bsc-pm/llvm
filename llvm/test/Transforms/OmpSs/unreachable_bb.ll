; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --include-generated-funcs --version 2
; RUN: opt %s -passes=ompss-2-pre -S | FileCheck %s
; ModuleID = 'unreachable_bb'
source_filename = "unreachable_bb"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; int main(int argc, char *argv[]) {
;   int sum = 0;
;   #pragma oss task
;   for (int i = 0; i < 10; ++i) {
;     break;
;   }
; }

; From clang 'break' adds a unreachable block 'for.incr'
; This tests verifies we remove it with a previous lowering
; pass that removes these blocks

; Function Attrs: noinline nounwind optnone
define dso_local i32 @main(i32 noundef %argc, ptr noundef %argv) #0 !dbg !5 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca ptr, align 8
  %sum = alloca i32, align 4
  store i32 0, ptr %retval, align 4
  store i32 %argc, ptr %argc.addr, align 4
  store ptr %argv, ptr %argv.addr, align 8
  store i32 0, ptr %sum, align 4, !dbg !9
  %0 = call token @llvm.directive.region.entry() [ "DIR.OSS"([5 x i8] c"TASK\00") ], !dbg !10
  %i = alloca i32, align 4
  store i32 0, ptr %i, align 4, !dbg !11
  br label %for.cond, !dbg !12

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, ptr %i, align 4, !dbg !13
  %cmp = icmp slt i32 %1, 10, !dbg !14
  br i1 %cmp, label %for.body, label %for.end, !dbg !15

for.body:                                         ; preds = %for.cond
  br label %for.end, !dbg !16

for.inc:                                          ; No predecessors!
  %2 = load i32, ptr %i, align 4, !dbg !17
  %inc = add nsw i32 %2, 1, !dbg !17
  store i32 %inc, ptr %i, align 4, !dbg !17
  br label %for.cond, !dbg !15, !llvm.loop !18

for.end:                                          ; preds = %for.body, %for.cond
  call void @llvm.directive.region.exit(token %0), !dbg !19
  %3 = load i32, ptr %retval, align 4, !dbg !21
  ret i32 %3, !dbg !21
}

; Function Attrs: nounwind
declare token @llvm.directive.region.entry() #1

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token) #1

attributes #0 = { noinline nounwind optnone "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
attributes #1 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C11, file: !1, producer: "", isOptimized: false, runtimeVersion: 0, emissionKind: NoDebug, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "<stdin>", directory: "")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 1, !"wchar_size", i32 4}
!4 = !{!""}
!5 = distinct !DISubprogram(name: "main", scope: !6, file: !6, line: 1, type: !7, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!6 = !DIFile(filename: "unreachable_bb", directory: "")
!7 = !DISubroutineType(types: !8)
!8 = !{}
!9 = !DILocation(line: 2, column: 7, scope: !5)
!10 = !DILocation(line: 4, column: 11, scope: !5)
!11 = !DILocation(line: 5, column: 12, scope: !5)
!12 = !DILocation(line: 5, column: 8, scope: !5)
!13 = !DILocation(line: 5, column: 19, scope: !5)
!14 = !DILocation(line: 5, column: 21, scope: !5)
!15 = !DILocation(line: 5, column: 3, scope: !5)
!16 = !DILocation(line: 6, column: 5, scope: !5)
!17 = !DILocation(line: 5, column: 27, scope: !5)
!18 = distinct !{!18, !15, !19, !20}
!19 = !DILocation(line: 7, column: 3, scope: !5)
!20 = !{!"llvm.loop.mustprogress"}
!21 = !DILocation(line: 8, column: 1, scope: !5)
; CHECK-LABEL: define dso_local i32 @main
; CHECK-SAME: (i32 noundef [[ARGC:%.*]], ptr noundef [[ARGV:%.*]]) #[[ATTR0:[0-9]+]] !dbg [[DBG5:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[RETVAL:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[ARGC_ADDR:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[ARGV_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    [[SUM:%.*]] = alloca i32, align 4
; CHECK-NEXT:    store i32 0, ptr [[RETVAL]], align 4
; CHECK-NEXT:    store i32 [[ARGC]], ptr [[ARGC_ADDR]], align 4
; CHECK-NEXT:    store ptr [[ARGV]], ptr [[ARGV_ADDR]], align 8
; CHECK-NEXT:    store i32 0, ptr [[SUM]], align 4, !dbg [[DBG9:![0-9]+]]
; CHECK-NEXT:    [[TMP0:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OSS"([5 x i8] c"TASK\00") ], !dbg [[DBG10:![0-9]+]]
; CHECK-NEXT:    [[I:%.*]] = alloca i32, align 4
; CHECK-NEXT:    store i32 0, ptr [[I]], align 4, !dbg [[DBG11:![0-9]+]]
; CHECK-NEXT:    br label [[FOR_COND:%.*]], !dbg [[DBG12:![0-9]+]]
; CHECK:       for.cond:
; CHECK-NEXT:    [[TMP1:%.*]] = load i32, ptr [[I]], align 4, !dbg [[DBG13:![0-9]+]]
; CHECK-NEXT:    [[CMP:%.*]] = icmp slt i32 [[TMP1]], 10, !dbg [[DBG14:![0-9]+]]
; CHECK-NEXT:    br i1 [[CMP]], label [[FOR_BODY:%.*]], label [[FOR_END:%.*]], !dbg [[DBG15:![0-9]+]]
; CHECK:       for.body:
; CHECK-NEXT:    br label [[FOR_END]], !dbg [[DBG16:![0-9]+]]
; CHECK:       for.end:
; CHECK-NEXT:    call void @llvm.directive.region.exit(token [[TMP0]]), !dbg [[DBG17:![0-9]+]]
; CHECK-NEXT:    [[TMP2:%.*]] = load i32, ptr [[RETVAL]], align 4, !dbg [[DBG18:![0-9]+]]
; CHECK-NEXT:    ret i32 [[TMP2]], !dbg [[DBG18]]
;
