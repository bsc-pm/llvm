; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --function-signature --include-generated-funcs
; RUN: opt %s -passes=ompss-2 -S | FileCheck %s
; ModuleID = 'release.ll'
source_filename = "release.ll"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; int main() {
;     int x;
;     int array[10][10];
;     #pragma oss release in(x, array)
;     #pragma oss task in(x, array)
;     {
;         #pragma oss release in(x, array)
;     }
; }

%struct._depend_unpack_t = type { ptr, i64, i64, i64 }
%struct._depend_unpack_t.0 = type { ptr, i64, i64, i64, i64, i64, i64 }
%struct._depend_unpack_t.1 = type { ptr, i64, i64, i64 }
%struct._depend_unpack_t.2 = type { ptr, i64, i64, i64, i64, i64, i64 }
%struct._depend_unpack_t.3 = type { ptr, i64, i64, i64 }
%struct._depend_unpack_t.4 = type { ptr, i64, i64, i64, i64, i64, i64 }

; Function Attrs: noinline nounwind optnone
define dso_local i32 @main() #0 !dbg !5 {
entry:
  %x = alloca i32, align 4
  %array = alloca [10 x [10 x i32]], align 16
  %0 = call i1 @llvm.directive.marker() [ "DIR.OSS"([8 x i8] c"RELEASE\00"), "QUAL.OSS.DEP.IN"(ptr %x, [2 x i8] c"x\00", ptr @compute_dep, ptr %x), "QUAL.OSS.DEP.IN"(ptr %array, [6 x i8] c"array\00", ptr @compute_dep.1, ptr %array) ], !dbg !9
  %1 = call token @llvm.directive.region.entry() [ "DIR.OSS"([5 x i8] c"TASK\00"), "QUAL.OSS.SHARED"(ptr %x, i32 undef), "QUAL.OSS.SHARED"(ptr %array, [10 x [10 x i32]] undef), "QUAL.OSS.DEP.IN"(ptr %x, [2 x i8] c"x\00", ptr @compute_dep.2, ptr %x), "QUAL.OSS.DEP.IN"(ptr %array, [6 x i8] c"array\00", ptr @compute_dep.3, ptr %array) ], !dbg !10
  %2 = call i1 @llvm.directive.marker() [ "DIR.OSS"([8 x i8] c"RELEASE\00"), "QUAL.OSS.DEP.IN"(ptr %x, [2 x i8] c"x\00", ptr @compute_dep.4, ptr %x), "QUAL.OSS.DEP.IN"(ptr %array, [6 x i8] c"array\00", ptr @compute_dep.5, ptr %array) ], !dbg !11
  call void @llvm.directive.region.exit(token %1), !dbg !12
  ret i32 0, !dbg !13
}

define internal %struct._depend_unpack_t @compute_dep(ptr %x) #1 !dbg !14 {
entry:
  %retval = alloca %struct._depend_unpack_t, align 8
  %x.addr = alloca ptr, align 8
  store ptr %x, ptr %x.addr, align 8
  %0 = getelementptr inbounds %struct._depend_unpack_t, ptr %retval, i32 0, i32 0
  store ptr %x, ptr %0, align 8
  %1 = getelementptr inbounds %struct._depend_unpack_t, ptr %retval, i32 0, i32 1
  store i64 4, ptr %1, align 8
  %2 = getelementptr inbounds %struct._depend_unpack_t, ptr %retval, i32 0, i32 2
  store i64 0, ptr %2, align 8
  %3 = getelementptr inbounds %struct._depend_unpack_t, ptr %retval, i32 0, i32 3
  store i64 4, ptr %3, align 8
  %4 = load %struct._depend_unpack_t, ptr %retval, align 8
  ret %struct._depend_unpack_t %4
}

define internal %struct._depend_unpack_t.0 @compute_dep.1(ptr %array) #1 !dbg !15 {
entry:
  %retval = alloca %struct._depend_unpack_t.0, align 8
  %array.addr = alloca ptr, align 8
  store ptr %array, ptr %array.addr, align 8
  %0 = getelementptr inbounds %struct._depend_unpack_t.0, ptr %retval, i32 0, i32 0
  store ptr %array, ptr %0, align 8
  %1 = getelementptr inbounds %struct._depend_unpack_t.0, ptr %retval, i32 0, i32 1
  store i64 40, ptr %1, align 8
  %2 = getelementptr inbounds %struct._depend_unpack_t.0, ptr %retval, i32 0, i32 2
  store i64 0, ptr %2, align 8
  %3 = getelementptr inbounds %struct._depend_unpack_t.0, ptr %retval, i32 0, i32 3
  store i64 40, ptr %3, align 8
  %4 = getelementptr inbounds %struct._depend_unpack_t.0, ptr %retval, i32 0, i32 4
  store i64 10, ptr %4, align 8
  %5 = getelementptr inbounds %struct._depend_unpack_t.0, ptr %retval, i32 0, i32 5
  store i64 0, ptr %5, align 8
  %6 = getelementptr inbounds %struct._depend_unpack_t.0, ptr %retval, i32 0, i32 6
  store i64 10, ptr %6, align 8
  %7 = load %struct._depend_unpack_t.0, ptr %retval, align 8
  ret %struct._depend_unpack_t.0 %7
}

; Function Attrs: nounwind
declare i1 @llvm.directive.marker() #2

; Function Attrs: nounwind
declare token @llvm.directive.region.entry() #2

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token) #2

define internal %struct._depend_unpack_t.1 @compute_dep.2(ptr %x) #1 !dbg !16 {
entry:
  %retval = alloca %struct._depend_unpack_t.1, align 8
  %x.addr = alloca ptr, align 8
  store ptr %x, ptr %x.addr, align 8
  %0 = getelementptr inbounds %struct._depend_unpack_t.1, ptr %retval, i32 0, i32 0
  store ptr %x, ptr %0, align 8
  %1 = getelementptr inbounds %struct._depend_unpack_t.1, ptr %retval, i32 0, i32 1
  store i64 4, ptr %1, align 8
  %2 = getelementptr inbounds %struct._depend_unpack_t.1, ptr %retval, i32 0, i32 2
  store i64 0, ptr %2, align 8
  %3 = getelementptr inbounds %struct._depend_unpack_t.1, ptr %retval, i32 0, i32 3
  store i64 4, ptr %3, align 8
  %4 = load %struct._depend_unpack_t.1, ptr %retval, align 8
  ret %struct._depend_unpack_t.1 %4
}

define internal %struct._depend_unpack_t.2 @compute_dep.3(ptr %array) #1 !dbg !17 {
entry:
  %retval = alloca %struct._depend_unpack_t.2, align 8
  %array.addr = alloca ptr, align 8
  store ptr %array, ptr %array.addr, align 8
  %0 = getelementptr inbounds %struct._depend_unpack_t.2, ptr %retval, i32 0, i32 0
  store ptr %array, ptr %0, align 8
  %1 = getelementptr inbounds %struct._depend_unpack_t.2, ptr %retval, i32 0, i32 1
  store i64 40, ptr %1, align 8
  %2 = getelementptr inbounds %struct._depend_unpack_t.2, ptr %retval, i32 0, i32 2
  store i64 0, ptr %2, align 8
  %3 = getelementptr inbounds %struct._depend_unpack_t.2, ptr %retval, i32 0, i32 3
  store i64 40, ptr %3, align 8
  %4 = getelementptr inbounds %struct._depend_unpack_t.2, ptr %retval, i32 0, i32 4
  store i64 10, ptr %4, align 8
  %5 = getelementptr inbounds %struct._depend_unpack_t.2, ptr %retval, i32 0, i32 5
  store i64 0, ptr %5, align 8
  %6 = getelementptr inbounds %struct._depend_unpack_t.2, ptr %retval, i32 0, i32 6
  store i64 10, ptr %6, align 8
  %7 = load %struct._depend_unpack_t.2, ptr %retval, align 8
  ret %struct._depend_unpack_t.2 %7
}

define internal %struct._depend_unpack_t.3 @compute_dep.4(ptr %x) #1 !dbg !18 {
entry:
  %retval = alloca %struct._depend_unpack_t.3, align 8
  %x.addr = alloca ptr, align 8
  store ptr %x, ptr %x.addr, align 8
  %0 = getelementptr inbounds %struct._depend_unpack_t.3, ptr %retval, i32 0, i32 0
  store ptr %x, ptr %0, align 8
  %1 = getelementptr inbounds %struct._depend_unpack_t.3, ptr %retval, i32 0, i32 1
  store i64 4, ptr %1, align 8
  %2 = getelementptr inbounds %struct._depend_unpack_t.3, ptr %retval, i32 0, i32 2
  store i64 0, ptr %2, align 8
  %3 = getelementptr inbounds %struct._depend_unpack_t.3, ptr %retval, i32 0, i32 3
  store i64 4, ptr %3, align 8
  %4 = load %struct._depend_unpack_t.3, ptr %retval, align 8
  ret %struct._depend_unpack_t.3 %4
}

define internal %struct._depend_unpack_t.4 @compute_dep.5(ptr %array) #1 !dbg !19 {
entry:
  %retval = alloca %struct._depend_unpack_t.4, align 8
  %array.addr = alloca ptr, align 8
  store ptr %array, ptr %array.addr, align 8
  %0 = getelementptr inbounds %struct._depend_unpack_t.4, ptr %retval, i32 0, i32 0
  store ptr %array, ptr %0, align 8
  %1 = getelementptr inbounds %struct._depend_unpack_t.4, ptr %retval, i32 0, i32 1
  store i64 40, ptr %1, align 8
  %2 = getelementptr inbounds %struct._depend_unpack_t.4, ptr %retval, i32 0, i32 2
  store i64 0, ptr %2, align 8
  %3 = getelementptr inbounds %struct._depend_unpack_t.4, ptr %retval, i32 0, i32 3
  store i64 40, ptr %3, align 8
  %4 = getelementptr inbounds %struct._depend_unpack_t.4, ptr %retval, i32 0, i32 4
  store i64 10, ptr %4, align 8
  %5 = getelementptr inbounds %struct._depend_unpack_t.4, ptr %retval, i32 0, i32 5
  store i64 0, ptr %5, align 8
  %6 = getelementptr inbounds %struct._depend_unpack_t.4, ptr %retval, i32 0, i32 6
  store i64 10, ptr %6, align 8
  %7 = load %struct._depend_unpack_t.4, ptr %retval, align 8
  ret %struct._depend_unpack_t.4 %7
}

attributes #0 = { noinline nounwind optnone "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
attributes #1 = { "min-legal-vector-width"="0" }
attributes #2 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "", isOptimized: false, runtimeVersion: 0, emissionKind: NoDebug, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "<stdin>", directory: "")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 1, !"wchar_size", i32 4}
!4 = !{!""}
!5 = distinct !DISubprogram(name: "main", scope: !6, file: !6, line: 1, type: !7, scopeLine: 1, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !8)
!6 = !DIFile(filename: "release.ll", directory: "")
!7 = !DISubroutineType(types: !8)
!8 = !{}
!9 = !DILocation(line: 4, column: 13, scope: !5)
!10 = !DILocation(line: 5, column: 13, scope: !5)
!11 = !DILocation(line: 7, column: 17, scope: !5)
!12 = !DILocation(line: 8, column: 5, scope: !5)
!13 = !DILocation(line: 9, column: 1, scope: !5)
!14 = distinct !DISubprogram(linkageName: "compute_dep", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!15 = distinct !DISubprogram(linkageName: "compute_dep.1", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!16 = distinct !DISubprogram(linkageName: "compute_dep.2", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!17 = distinct !DISubprogram(linkageName: "compute_dep.3", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!18 = distinct !DISubprogram(linkageName: "compute_dep.4", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!19 = distinct !DISubprogram(linkageName: "compute_dep.5", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
; CHECK-LABEL: define {{[^@]+}}@main
; CHECK-SAME: () #[[ATTR0:[0-9]+]] !dbg [[DBG5:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[X:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[ARRAY:%.*]] = alloca [10 x [10 x i32]], align 16
; CHECK-NEXT:    [[TMP0:%.*]] = call [[STRUCT__DEPEND_UNPACK_T:%.*]] @compute_dep(ptr [[X]]), !dbg [[DBG9:![0-9]+]]
; CHECK-NEXT:    [[TMP1:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T]] [[TMP0]], 0, !dbg [[DBG9]]
; CHECK-NEXT:    [[TMP2:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T]] [[TMP0]], 1, !dbg [[DBG9]]
; CHECK-NEXT:    [[TMP3:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T]] [[TMP0]], 2, !dbg [[DBG9]]
; CHECK-NEXT:    [[TMP4:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T]] [[TMP0]], 3, !dbg [[DBG9]]
; CHECK-NEXT:    call void @nanos6_release_read_1(ptr [[TMP1]], i64 [[TMP2]], i64 [[TMP3]], i64 [[TMP4]]), !dbg [[DBG9]]
; CHECK-NEXT:    [[TMP5:%.*]] = call [[STRUCT__DEPEND_UNPACK_T_0:%.*]] @compute_dep.1(ptr [[ARRAY]]), !dbg [[DBG9]]
; CHECK-NEXT:    [[TMP6:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_0]] [[TMP5]], 0, !dbg [[DBG9]]
; CHECK-NEXT:    [[TMP7:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_0]] [[TMP5]], 1, !dbg [[DBG9]]
; CHECK-NEXT:    [[TMP8:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_0]] [[TMP5]], 2, !dbg [[DBG9]]
; CHECK-NEXT:    [[TMP9:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_0]] [[TMP5]], 3, !dbg [[DBG9]]
; CHECK-NEXT:    [[TMP10:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_0]] [[TMP5]], 4, !dbg [[DBG9]]
; CHECK-NEXT:    [[TMP11:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_0]] [[TMP5]], 5, !dbg [[DBG9]]
; CHECK-NEXT:    [[TMP12:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_0]] [[TMP5]], 6, !dbg [[DBG9]]
; CHECK-NEXT:    call void @nanos6_release_read_2(ptr [[TMP6]], i64 [[TMP7]], i64 [[TMP8]], i64 [[TMP9]], i64 [[TMP10]], i64 [[TMP11]], i64 [[TMP12]]), !dbg [[DBG9]]
; CHECK-NEXT:    [[TMP13:%.*]] = alloca ptr, align 8, !dbg [[DBG10:![0-9]+]]
; CHECK-NEXT:    [[TMP14:%.*]] = alloca ptr, align 8, !dbg [[DBG10]]
; CHECK-NEXT:    [[NUM_DEPS:%.*]] = alloca i64, align 8, !dbg [[DBG10]]
; CHECK-NEXT:    br label [[FINAL_COND:%.*]], !dbg [[DBG10]]
; CHECK:       codeRepl:
; CHECK-NEXT:    store i64 0, ptr [[NUM_DEPS]], align 8, !dbg [[DBG10]]
; CHECK-NEXT:    [[TMP15:%.*]] = load i64, ptr [[NUM_DEPS]], align 8, !dbg [[DBG10]]
; CHECK-NEXT:    [[TMP16:%.*]] = add i64 [[TMP15]], 1, !dbg [[DBG10]]
; CHECK-NEXT:    store i64 [[TMP16]], ptr [[NUM_DEPS]], align 8, !dbg [[DBG10]]
; CHECK-NEXT:    [[TMP17:%.*]] = load i64, ptr [[NUM_DEPS]], align 8, !dbg [[DBG10]]
; CHECK-NEXT:    [[TMP18:%.*]] = add i64 [[TMP17]], 1, !dbg [[DBG10]]
; CHECK-NEXT:    store i64 [[TMP18]], ptr [[NUM_DEPS]], align 8, !dbg [[DBG10]]
; CHECK-NEXT:    [[TMP19:%.*]] = load i64, ptr [[NUM_DEPS]], align 8, !dbg [[DBG10]]
; CHECK-NEXT:    call void @nanos6_create_task(ptr @task_info_var_main, ptr @task_invocation_info_main, ptr null, i64 16, ptr [[TMP13]], ptr [[TMP14]], i64 0, i64 [[TMP19]]), !dbg [[DBG10]]
; CHECK-NEXT:    [[TMP20:%.*]] = load ptr, ptr [[TMP13]], align 8, !dbg [[DBG10]]
; CHECK-NEXT:    [[ARGS_END:%.*]] = getelementptr i8, ptr [[TMP20]], i64 16, !dbg [[DBG10]]
; CHECK-NEXT:    [[GEP_X:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN:%.*]], ptr [[TMP20]], i32 0, i32 0, !dbg [[DBG10]]
; CHECK-NEXT:    store ptr [[X]], ptr [[GEP_X]], align 8, !dbg [[DBG10]]
; CHECK-NEXT:    [[GEP_ARRAY:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN]], ptr [[TMP20]], i32 0, i32 1, !dbg [[DBG10]]
; CHECK-NEXT:    store ptr [[ARRAY]], ptr [[GEP_ARRAY]], align 8, !dbg [[DBG10]]
; CHECK-NEXT:    [[TMP21:%.*]] = load ptr, ptr [[TMP14]], align 8, !dbg [[DBG10]]
; CHECK-NEXT:    call void @nanos6_submit_task(ptr [[TMP21]]), !dbg [[DBG10]]
; CHECK-NEXT:    br label [[FINAL_END:%.*]], !dbg [[DBG10]]
; CHECK:       final.end:
; CHECK-NEXT:    ret i32 0, !dbg [[DBG11:![0-9]+]]
; CHECK:       final.then:
; CHECK-NEXT:    br label [[FINAL_END]], !dbg [[DBG11]]
; CHECK:       final.cond:
; CHECK-NEXT:    [[TMP22:%.*]] = call i32 @nanos6_in_final(), !dbg [[DBG10]]
; CHECK-NEXT:    [[TMP23:%.*]] = icmp ne i32 [[TMP22]], 0, !dbg [[DBG10]]
; CHECK-NEXT:    br i1 [[TMP23]], label [[FINAL_THEN:%.*]], label [[CODEREPL:%.*]], !dbg [[DBG10]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_dep
; CHECK-SAME: (ptr [[X:%.*]]) #[[ATTR1:[0-9]+]] !dbg [[DBG12:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[RETVAL:%.*]] = alloca [[STRUCT__DEPEND_UNPACK_T:%.*]], align 8
; CHECK-NEXT:    [[X_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr [[X]], ptr [[X_ADDR]], align 8
; CHECK-NEXT:    [[TMP0:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], i32 0, i32 0
; CHECK-NEXT:    store ptr [[X]], ptr [[TMP0]], align 8
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], i32 0, i32 1
; CHECK-NEXT:    store i64 4, ptr [[TMP1]], align 8
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], i32 0, i32 2
; CHECK-NEXT:    store i64 0, ptr [[TMP2]], align 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], i32 0, i32 3
; CHECK-NEXT:    store i64 4, ptr [[TMP3]], align 8
; CHECK-NEXT:    [[TMP4:%.*]] = load [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], align 8
; CHECK-NEXT:    ret [[STRUCT__DEPEND_UNPACK_T]] [[TMP4]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_dep.1
; CHECK-SAME: (ptr [[ARRAY:%.*]]) #[[ATTR1]] !dbg [[DBG13:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[RETVAL:%.*]] = alloca [[STRUCT__DEPEND_UNPACK_T_0:%.*]], align 8
; CHECK-NEXT:    [[ARRAY_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr [[ARRAY]], ptr [[ARRAY_ADDR]], align 8
; CHECK-NEXT:    [[TMP0:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_0]], ptr [[RETVAL]], i32 0, i32 0
; CHECK-NEXT:    store ptr [[ARRAY]], ptr [[TMP0]], align 8
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_0]], ptr [[RETVAL]], i32 0, i32 1
; CHECK-NEXT:    store i64 40, ptr [[TMP1]], align 8
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_0]], ptr [[RETVAL]], i32 0, i32 2
; CHECK-NEXT:    store i64 0, ptr [[TMP2]], align 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_0]], ptr [[RETVAL]], i32 0, i32 3
; CHECK-NEXT:    store i64 40, ptr [[TMP3]], align 8
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_0]], ptr [[RETVAL]], i32 0, i32 4
; CHECK-NEXT:    store i64 10, ptr [[TMP4]], align 8
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_0]], ptr [[RETVAL]], i32 0, i32 5
; CHECK-NEXT:    store i64 0, ptr [[TMP5]], align 8
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_0]], ptr [[RETVAL]], i32 0, i32 6
; CHECK-NEXT:    store i64 10, ptr [[TMP6]], align 8
; CHECK-NEXT:    [[TMP7:%.*]] = load [[STRUCT__DEPEND_UNPACK_T_0]], ptr [[RETVAL]], align 8
; CHECK-NEXT:    ret [[STRUCT__DEPEND_UNPACK_T_0]] [[TMP7]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_dep.2
; CHECK-SAME: (ptr [[X:%.*]]) #[[ATTR1]] !dbg [[DBG14:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[RETVAL:%.*]] = alloca [[STRUCT__DEPEND_UNPACK_T_1:%.*]], align 8
; CHECK-NEXT:    [[X_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr [[X]], ptr [[X_ADDR]], align 8
; CHECK-NEXT:    [[TMP0:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_1]], ptr [[RETVAL]], i32 0, i32 0
; CHECK-NEXT:    store ptr [[X]], ptr [[TMP0]], align 8
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_1]], ptr [[RETVAL]], i32 0, i32 1
; CHECK-NEXT:    store i64 4, ptr [[TMP1]], align 8
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_1]], ptr [[RETVAL]], i32 0, i32 2
; CHECK-NEXT:    store i64 0, ptr [[TMP2]], align 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_1]], ptr [[RETVAL]], i32 0, i32 3
; CHECK-NEXT:    store i64 4, ptr [[TMP3]], align 8
; CHECK-NEXT:    [[TMP4:%.*]] = load [[STRUCT__DEPEND_UNPACK_T_1]], ptr [[RETVAL]], align 8
; CHECK-NEXT:    ret [[STRUCT__DEPEND_UNPACK_T_1]] [[TMP4]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_dep.3
; CHECK-SAME: (ptr [[ARRAY:%.*]]) #[[ATTR1]] !dbg [[DBG15:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[RETVAL:%.*]] = alloca [[STRUCT__DEPEND_UNPACK_T_2:%.*]], align 8
; CHECK-NEXT:    [[ARRAY_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr [[ARRAY]], ptr [[ARRAY_ADDR]], align 8
; CHECK-NEXT:    [[TMP0:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_2]], ptr [[RETVAL]], i32 0, i32 0
; CHECK-NEXT:    store ptr [[ARRAY]], ptr [[TMP0]], align 8
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_2]], ptr [[RETVAL]], i32 0, i32 1
; CHECK-NEXT:    store i64 40, ptr [[TMP1]], align 8
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_2]], ptr [[RETVAL]], i32 0, i32 2
; CHECK-NEXT:    store i64 0, ptr [[TMP2]], align 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_2]], ptr [[RETVAL]], i32 0, i32 3
; CHECK-NEXT:    store i64 40, ptr [[TMP3]], align 8
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_2]], ptr [[RETVAL]], i32 0, i32 4
; CHECK-NEXT:    store i64 10, ptr [[TMP4]], align 8
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_2]], ptr [[RETVAL]], i32 0, i32 5
; CHECK-NEXT:    store i64 0, ptr [[TMP5]], align 8
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_2]], ptr [[RETVAL]], i32 0, i32 6
; CHECK-NEXT:    store i64 10, ptr [[TMP6]], align 8
; CHECK-NEXT:    [[TMP7:%.*]] = load [[STRUCT__DEPEND_UNPACK_T_2]], ptr [[RETVAL]], align 8
; CHECK-NEXT:    ret [[STRUCT__DEPEND_UNPACK_T_2]] [[TMP7]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_dep.4
; CHECK-SAME: (ptr [[X:%.*]]) #[[ATTR1]] !dbg [[DBG16:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[RETVAL:%.*]] = alloca [[STRUCT__DEPEND_UNPACK_T_3:%.*]], align 8
; CHECK-NEXT:    [[X_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr [[X]], ptr [[X_ADDR]], align 8
; CHECK-NEXT:    [[TMP0:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_3]], ptr [[RETVAL]], i32 0, i32 0
; CHECK-NEXT:    store ptr [[X]], ptr [[TMP0]], align 8
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_3]], ptr [[RETVAL]], i32 0, i32 1
; CHECK-NEXT:    store i64 4, ptr [[TMP1]], align 8
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_3]], ptr [[RETVAL]], i32 0, i32 2
; CHECK-NEXT:    store i64 0, ptr [[TMP2]], align 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_3]], ptr [[RETVAL]], i32 0, i32 3
; CHECK-NEXT:    store i64 4, ptr [[TMP3]], align 8
; CHECK-NEXT:    [[TMP4:%.*]] = load [[STRUCT__DEPEND_UNPACK_T_3]], ptr [[RETVAL]], align 8
; CHECK-NEXT:    ret [[STRUCT__DEPEND_UNPACK_T_3]] [[TMP4]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_dep.5
; CHECK-SAME: (ptr [[ARRAY:%.*]]) #[[ATTR1]] !dbg [[DBG17:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[RETVAL:%.*]] = alloca [[STRUCT__DEPEND_UNPACK_T_4:%.*]], align 8
; CHECK-NEXT:    [[ARRAY_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr [[ARRAY]], ptr [[ARRAY_ADDR]], align 8
; CHECK-NEXT:    [[TMP0:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_4]], ptr [[RETVAL]], i32 0, i32 0
; CHECK-NEXT:    store ptr [[ARRAY]], ptr [[TMP0]], align 8
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_4]], ptr [[RETVAL]], i32 0, i32 1
; CHECK-NEXT:    store i64 40, ptr [[TMP1]], align 8
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_4]], ptr [[RETVAL]], i32 0, i32 2
; CHECK-NEXT:    store i64 0, ptr [[TMP2]], align 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_4]], ptr [[RETVAL]], i32 0, i32 3
; CHECK-NEXT:    store i64 40, ptr [[TMP3]], align 8
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_4]], ptr [[RETVAL]], i32 0, i32 4
; CHECK-NEXT:    store i64 10, ptr [[TMP4]], align 8
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_4]], ptr [[RETVAL]], i32 0, i32 5
; CHECK-NEXT:    store i64 0, ptr [[TMP5]], align 8
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_4]], ptr [[RETVAL]], i32 0, i32 6
; CHECK-NEXT:    store i64 10, ptr [[TMP6]], align 8
; CHECK-NEXT:    [[TMP7:%.*]] = load [[STRUCT__DEPEND_UNPACK_T_4]], ptr [[RETVAL]], align 8
; CHECK-NEXT:    ret [[STRUCT__DEPEND_UNPACK_T_4]] [[TMP7]]
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_unpacked_task_region_main
; CHECK-SAME: (ptr [[X:%.*]], ptr [[ARRAY:%.*]], ptr [[DEVICE_ENV:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) !dbg [[DBG18:![0-9]+]] {
; CHECK-NEXT:  newFuncRoot:
; CHECK-NEXT:    br label [[TMP0:%.*]], !dbg [[DBG19:![0-9]+]]
; CHECK:       0:
; CHECK-NEXT:    [[TMP1:%.*]] = call [[STRUCT__DEPEND_UNPACK_T_3:%.*]] @compute_dep.4(ptr [[X]]), !dbg [[DBG20:![0-9]+]]
; CHECK-NEXT:    [[TMP2:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_3]] [[TMP1]], 0, !dbg [[DBG20]]
; CHECK-NEXT:    [[TMP3:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_3]] [[TMP1]], 1, !dbg [[DBG20]]
; CHECK-NEXT:    [[TMP4:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_3]] [[TMP1]], 2, !dbg [[DBG20]]
; CHECK-NEXT:    [[TMP5:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_3]] [[TMP1]], 3, !dbg [[DBG20]]
; CHECK-NEXT:    call void @nanos6_release_read_1(ptr [[TMP2]], i64 [[TMP3]], i64 [[TMP4]], i64 [[TMP5]]), !dbg [[DBG20]]
; CHECK-NEXT:    [[TMP6:%.*]] = call [[STRUCT__DEPEND_UNPACK_T_4:%.*]] @compute_dep.5(ptr [[ARRAY]]), !dbg [[DBG20]]
; CHECK-NEXT:    [[TMP7:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_4]] [[TMP6]], 0, !dbg [[DBG20]]
; CHECK-NEXT:    [[TMP8:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_4]] [[TMP6]], 1, !dbg [[DBG20]]
; CHECK-NEXT:    [[TMP9:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_4]] [[TMP6]], 2, !dbg [[DBG20]]
; CHECK-NEXT:    [[TMP10:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_4]] [[TMP6]], 3, !dbg [[DBG20]]
; CHECK-NEXT:    [[TMP11:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_4]] [[TMP6]], 4, !dbg [[DBG20]]
; CHECK-NEXT:    [[TMP12:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_4]] [[TMP6]], 5, !dbg [[DBG20]]
; CHECK-NEXT:    [[TMP13:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_4]] [[TMP6]], 6, !dbg [[DBG20]]
; CHECK-NEXT:    call void @nanos6_release_read_2(ptr [[TMP7]], i64 [[TMP8]], i64 [[TMP9]], i64 [[TMP10]], i64 [[TMP11]], i64 [[TMP12]], i64 [[TMP13]]), !dbg [[DBG20]]
; CHECK-NEXT:    br label [[DOTEXITSTUB:%.*]], !dbg [[DBG21:![0-9]+]]
; CHECK:       .exitStub:
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_task_region_main
; CHECK-SAME: (ptr [[TASK_ARGS:%.*]], ptr [[DEVICE_ENV:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_X:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN:%.*]], ptr [[TASK_ARGS]], i32 0, i32 0
; CHECK-NEXT:    [[LOAD_GEP_X:%.*]] = load ptr, ptr [[GEP_X]], align 8
; CHECK-NEXT:    [[GEP_ARRAY:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN]], ptr [[TASK_ARGS]], i32 0, i32 1
; CHECK-NEXT:    [[LOAD_GEP_ARRAY:%.*]] = load ptr, ptr [[GEP_ARRAY]], align 8
; CHECK-NEXT:    [[TLATE_LOAD_GEP_X:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr [[LOAD_GEP_X]], ptr [[TLATE_LOAD_GEP_X]], align 8
; CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[TLATE_LOAD_GEP_X]], align 8
; CHECK-NEXT:    [[TLATE_LOAD_GEP_ARRAY:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr [[LOAD_GEP_ARRAY]], ptr [[TLATE_LOAD_GEP_ARRAY]], align 8
; CHECK-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[TLATE_LOAD_GEP_ARRAY]], align 8
; CHECK-NEXT:    [[TMP2:%.*]] = icmp ne ptr [[ADDRESS_TRANSLATION_TABLE]], null
; CHECK-NEXT:    br i1 [[TMP2]], label [[TMP3:%.*]], label [[TMP14:%.*]]
; CHECK:       3:
; CHECK-NEXT:    [[LOCAL_LOOKUP_X:%.*]] = getelementptr [[NANOS6_ADDRESS_TRANSLATION_ENTRY_T:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE]], i32 0, i32 0
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[LOCAL_LOOKUP_X]], align 8
; CHECK-NEXT:    [[DEVICE_LOOKUP_X:%.*]] = getelementptr [[NANOS6_ADDRESS_TRANSLATION_ENTRY_T]], ptr [[ADDRESS_TRANSLATION_TABLE]], i32 0, i32 1
; CHECK-NEXT:    [[TMP5:%.*]] = load i64, ptr [[DEVICE_LOOKUP_X]], align 8
; CHECK-NEXT:    [[TMP6:%.*]] = sub i64 0, [[TMP4]]
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[TMP0]], i64 [[TMP6]]
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[TMP7]], i64 [[TMP5]]
; CHECK-NEXT:    store ptr [[TMP8]], ptr [[TLATE_LOAD_GEP_X]], align 8
; CHECK-NEXT:    [[LOCAL_LOOKUP_ARRAY:%.*]] = getelementptr [[NANOS6_ADDRESS_TRANSLATION_ENTRY_T]], ptr [[ADDRESS_TRANSLATION_TABLE]], i32 1, i32 0
; CHECK-NEXT:    [[TMP9:%.*]] = load i64, ptr [[LOCAL_LOOKUP_ARRAY]], align 8
; CHECK-NEXT:    [[DEVICE_LOOKUP_ARRAY:%.*]] = getelementptr [[NANOS6_ADDRESS_TRANSLATION_ENTRY_T]], ptr [[ADDRESS_TRANSLATION_TABLE]], i32 1, i32 1
; CHECK-NEXT:    [[TMP10:%.*]] = load i64, ptr [[DEVICE_LOOKUP_ARRAY]], align 8
; CHECK-NEXT:    [[TMP11:%.*]] = sub i64 0, [[TMP9]]
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr i8, ptr [[TMP1]], i64 [[TMP11]]
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr [[TMP12]], i64 [[TMP10]]
; CHECK-NEXT:    store ptr [[TMP13]], ptr [[TLATE_LOAD_GEP_ARRAY]], align 8
; CHECK-NEXT:    br label [[TMP14]]
; CHECK:       14:
; CHECK-NEXT:    [[TMP15:%.*]] = load ptr, ptr [[TLATE_LOAD_GEP_X]], align 8
; CHECK-NEXT:    [[TMP16:%.*]] = load ptr, ptr [[TLATE_LOAD_GEP_ARRAY]], align 8
; CHECK-NEXT:    call void @nanos6_unpacked_task_region_main(ptr [[TMP15]], ptr [[TMP16]], ptr [[DEVICE_ENV]], ptr [[ADDRESS_TRANSLATION_TABLE]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_unpacked_deps_main
; CHECK-SAME: (ptr [[X:%.*]], ptr [[ARRAY:%.*]], ptr [[LOOP_BOUNDS:%.*]], ptr [[HANDLER:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = call [[STRUCT__DEPEND_UNPACK_T_1:%.*]] @compute_dep.2(ptr [[X]])
; CHECK-NEXT:    [[TMP1:%.*]] = call [[STRUCT__DEPEND_UNPACK_T_1]] @compute_dep.2(ptr [[X]])
; CHECK-NEXT:    [[TMP2:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_1]] [[TMP0]], 0
; CHECK-NEXT:    [[TMP3:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_1]] [[TMP0]], 1
; CHECK-NEXT:    [[TMP4:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_1]] [[TMP0]], 2
; CHECK-NEXT:    [[TMP5:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_1]] [[TMP1]], 3
; CHECK-NEXT:    call void @nanos6_register_region_read_depinfo1(ptr [[HANDLER]], i32 0, ptr @[[GLOB1:[0-9]+]], ptr [[TMP2]], i64 [[TMP3]], i64 [[TMP4]], i64 [[TMP5]])
; CHECK-NEXT:    [[TMP6:%.*]] = call [[STRUCT__DEPEND_UNPACK_T_2:%.*]] @compute_dep.3(ptr [[ARRAY]])
; CHECK-NEXT:    [[TMP7:%.*]] = call [[STRUCT__DEPEND_UNPACK_T_2]] @compute_dep.3(ptr [[ARRAY]])
; CHECK-NEXT:    [[TMP8:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_2]] [[TMP6]], 0
; CHECK-NEXT:    [[TMP9:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_2]] [[TMP6]], 1
; CHECK-NEXT:    [[TMP10:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_2]] [[TMP6]], 2
; CHECK-NEXT:    [[TMP11:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_2]] [[TMP7]], 3
; CHECK-NEXT:    [[TMP12:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_2]] [[TMP6]], 4
; CHECK-NEXT:    [[TMP13:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_2]] [[TMP6]], 5
; CHECK-NEXT:    [[TMP14:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_2]] [[TMP7]], 6
; CHECK-NEXT:    call void @nanos6_register_region_read_depinfo2(ptr [[HANDLER]], i32 1, ptr @[[GLOB2:[0-9]+]], ptr [[TMP8]], i64 [[TMP9]], i64 [[TMP10]], i64 [[TMP11]], i64 [[TMP12]], i64 [[TMP13]], i64 [[TMP14]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_deps_main
; CHECK-SAME: (ptr [[TASK_ARGS:%.*]], ptr [[LOOP_BOUNDS:%.*]], ptr [[HANDLER:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_X:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN:%.*]], ptr [[TASK_ARGS]], i32 0, i32 0
; CHECK-NEXT:    [[LOAD_GEP_X:%.*]] = load ptr, ptr [[GEP_X]], align 8
; CHECK-NEXT:    [[GEP_ARRAY:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN]], ptr [[TASK_ARGS]], i32 0, i32 1
; CHECK-NEXT:    [[LOAD_GEP_ARRAY:%.*]] = load ptr, ptr [[GEP_ARRAY]], align 8
; CHECK-NEXT:    call void @nanos6_unpacked_deps_main(ptr [[LOAD_GEP_X]], ptr [[LOAD_GEP_ARRAY]], ptr [[LOOP_BOUNDS]], ptr [[HANDLER]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_constructor_register_task_info() {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @nanos6_register_task_info(ptr @task_info_var_main)
; CHECK-NEXT:    ret void
;
