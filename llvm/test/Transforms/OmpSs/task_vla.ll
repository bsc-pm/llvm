; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --function-signature --include-generated-funcs
; RUN: opt %s -passes=ompss-2 -S | FileCheck %s
; ModuleID = 'task_vla.ll'
source_filename = "task_vla.ll"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; void pod_array(int n) {
;     int array[n];
;     #pragma oss task private(array)
;     {}
;     #pragma oss task firstprivate(array)
;     {}
; }
; struct S {
;     int x;
;     S();
;     S(const S&s);
;     ~S();
; };
; void non_pod_array(int n) {
;     S array[n];
;     #pragma oss task private(array)
;     {}
;     #pragma oss task firstprivate(array)
;     {}
; }

%struct.S = type { i32 }

; Function Attrs: mustprogress noinline nounwind optnone
define dso_local void @_Z9pod_arrayi(i32 noundef %n) #0 !dbg !5 {
entry:
  %n.addr = alloca i32, align 4
  %saved_stack = alloca ptr, align 8
  %__vla_expr0 = alloca i64, align 8
  store i32 %n, ptr %n.addr, align 4
  %0 = load i32, ptr %n.addr, align 4, !dbg !9
  %1 = zext i32 %0 to i64, !dbg !10
  %2 = call ptr @llvm.stacksave(), !dbg !10
  store ptr %2, ptr %saved_stack, align 8, !dbg !10
  %vla = alloca i32, i64 %1, align 16, !dbg !10
  store i64 %1, ptr %__vla_expr0, align 8, !dbg !10
  %3 = call token @llvm.directive.region.entry() [ "DIR.OSS"([5 x i8] c"TASK\00"), "QUAL.OSS.PRIVATE"(ptr %vla, i32 undef), "QUAL.OSS.VLA.DIMS"(ptr %vla, i64 %1), "QUAL.OSS.CAPTURED"(i64 %1) ], !dbg !11
  call void @llvm.directive.region.exit(token %3), !dbg !12
  %4 = call token @llvm.directive.region.entry() [ "DIR.OSS"([5 x i8] c"TASK\00"), "QUAL.OSS.FIRSTPRIVATE"(ptr %vla, i32 undef), "QUAL.OSS.VLA.DIMS"(ptr %vla, i64 %1), "QUAL.OSS.CAPTURED"(i64 %1) ], !dbg !13
  call void @llvm.directive.region.exit(token %4), !dbg !14
  %5 = load ptr, ptr %saved_stack, align 8, !dbg !15
  call void @llvm.stackrestore(ptr %5), !dbg !15
  ret void, !dbg !15
}

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare ptr @llvm.stacksave() #1

; Function Attrs: nounwind
declare token @llvm.directive.region.entry() #2

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token) #2

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare void @llvm.stackrestore(ptr) #1

; Function Attrs: mustprogress noinline nounwind optnone
define dso_local void @_Z13non_pod_arrayi(i32 noundef %n) #0 !dbg !16 {
entry:
  %n.addr = alloca i32, align 4
  %saved_stack = alloca ptr, align 8
  %__vla_expr0 = alloca i64, align 8
  store i32 %n, ptr %n.addr, align 4
  %0 = load i32, ptr %n.addr, align 4, !dbg !17
  %1 = zext i32 %0 to i64, !dbg !18
  %2 = call ptr @llvm.stacksave(), !dbg !18
  store ptr %2, ptr %saved_stack, align 8, !dbg !18
  %vla = alloca %struct.S, i64 %1, align 16, !dbg !18
  store i64 %1, ptr %__vla_expr0, align 8, !dbg !18
  %isempty = icmp eq i64 %1, 0, !dbg !19
  br i1 %isempty, label %arrayctor.cont, label %new.ctorloop, !dbg !19

new.ctorloop:                                     ; preds = %entry
  %arrayctor.end = getelementptr inbounds %struct.S, ptr %vla, i64 %1, !dbg !19
  br label %arrayctor.loop, !dbg !19

arrayctor.loop:                                   ; preds = %arrayctor.loop, %new.ctorloop
  %arrayctor.cur = phi ptr [ %vla, %new.ctorloop ], [ %arrayctor.next, %arrayctor.loop ], !dbg !19
  call void @_ZN1SC1Ev(ptr noundef nonnull align 4 dereferenceable(4) %arrayctor.cur), !dbg !19
  %arrayctor.next = getelementptr inbounds %struct.S, ptr %arrayctor.cur, i64 1, !dbg !19
  %arrayctor.done = icmp eq ptr %arrayctor.next, %arrayctor.end, !dbg !19
  br i1 %arrayctor.done, label %arrayctor.cont, label %arrayctor.loop, !dbg !19

arrayctor.cont:                                   ; preds = %entry, %arrayctor.loop
  %3 = call token @llvm.directive.region.entry() [ "DIR.OSS"([5 x i8] c"TASK\00"), "QUAL.OSS.PRIVATE"(ptr %vla, %struct.S undef), "QUAL.OSS.VLA.DIMS"(ptr %vla, i64 %1), "QUAL.OSS.INIT"(ptr %vla, ptr @oss_ctor_ZN1SC1Ev), "QUAL.OSS.DEINIT"(ptr %vla, ptr @oss_dtor_ZN1SD1Ev), "QUAL.OSS.CAPTURED"(i64 %1) ], !dbg !20
  call void @llvm.directive.region.exit(token %3), !dbg !21
  %4 = call token @llvm.directive.region.entry() [ "DIR.OSS"([5 x i8] c"TASK\00"), "QUAL.OSS.FIRSTPRIVATE"(ptr %vla, %struct.S undef), "QUAL.OSS.VLA.DIMS"(ptr %vla, i64 %1), "QUAL.OSS.COPY"(ptr %vla, ptr @oss_copy_ctor_ZN1SC1ERKS_), "QUAL.OSS.DEINIT"(ptr %vla, ptr @oss_dtor_ZN1SD1Ev), "QUAL.OSS.CAPTURED"(i64 %1) ], !dbg !22
  call void @llvm.directive.region.exit(token %4), !dbg !23
  %5 = getelementptr inbounds %struct.S, ptr %vla, i64 %1, !dbg !24
  %arraydestroy.isempty = icmp eq ptr %vla, %5, !dbg !24
  br i1 %arraydestroy.isempty, label %arraydestroy.done1, label %arraydestroy.body, !dbg !24

arraydestroy.body:                                ; preds = %arraydestroy.body, %arrayctor.cont
  %arraydestroy.elementPast = phi ptr [ %5, %arrayctor.cont ], [ %arraydestroy.element, %arraydestroy.body ], !dbg !24
  %arraydestroy.element = getelementptr inbounds %struct.S, ptr %arraydestroy.elementPast, i64 -1, !dbg !24
  call void @_ZN1SD1Ev(ptr noundef nonnull align 4 dereferenceable(4) %arraydestroy.element) #2, !dbg !24
  %arraydestroy.done = icmp eq ptr %arraydestroy.element, %vla, !dbg !24
  br i1 %arraydestroy.done, label %arraydestroy.done1, label %arraydestroy.body, !dbg !24

arraydestroy.done1:                               ; preds = %arraydestroy.body, %arrayctor.cont
  %6 = load ptr, ptr %saved_stack, align 8, !dbg !24
  call void @llvm.stackrestore(ptr %6), !dbg !24
  ret void, !dbg !24
}

declare void @_ZN1SC1Ev(ptr noundef nonnull align 4 dereferenceable(4)) unnamed_addr #3

; Function Attrs: noinline norecurse nounwind
define internal void @oss_ctor_ZN1SC1Ev(ptr noundef %0, i64 noundef %1) #4 !dbg !25 {
entry:
  %.addr = alloca ptr, align 8
  %.addr1 = alloca i64, align 8
  store ptr %0, ptr %.addr, align 8
  store i64 %1, ptr %.addr1, align 8
  %2 = load ptr, ptr %.addr, align 8, !dbg !26
  %3 = load i64, ptr %.addr1, align 8, !dbg !26
  %arrayctor.dst.end = getelementptr inbounds %struct.S, ptr %2, i64 %3, !dbg !26
  br label %arrayctor.loop, !dbg !26

arrayctor.loop:                                   ; preds = %arrayctor.loop, %entry
  %arrayctor.dst.cur = phi ptr [ %2, %entry ], [ %arrayctor.dst.next, %arrayctor.loop ], !dbg !26
  call void @_ZN1SC1Ev(ptr noundef nonnull align 4 dereferenceable(4) %arrayctor.dst.cur), !dbg !27
  %arrayctor.dst.next = getelementptr inbounds %struct.S, ptr %arrayctor.dst.cur, i64 1, !dbg !26
  %arrayctor.done = icmp eq ptr %arrayctor.dst.next, %arrayctor.dst.end, !dbg !26
  br i1 %arrayctor.done, label %arrayctor.cont, label %arrayctor.loop, !dbg !26

arrayctor.cont:                                   ; preds = %arrayctor.loop
  ret void, !dbg !27
}

; Function Attrs: nounwind
declare void @_ZN1SD1Ev(ptr noundef nonnull align 4 dereferenceable(4)) unnamed_addr #5

; Function Attrs: noinline norecurse nounwind
define internal void @oss_dtor_ZN1SD1Ev(ptr noundef %0, i64 noundef %1) #4 !dbg !29 {
entry:
  %.addr = alloca ptr, align 8
  %.addr1 = alloca i64, align 8
  store ptr %0, ptr %.addr, align 8
  store i64 %1, ptr %.addr1, align 8
  %2 = load ptr, ptr %.addr, align 8, !dbg !30
  %3 = load i64, ptr %.addr1, align 8, !dbg !30
  %arraydtor.dst.end = getelementptr inbounds %struct.S, ptr %2, i64 %3, !dbg !30
  br label %arraydtor.loop, !dbg !30

arraydtor.loop:                                   ; preds = %arraydtor.loop, %entry
  %arraydtor.dst.cur = phi ptr [ %2, %entry ], [ %arraydtor.dst.next, %arraydtor.loop ], !dbg !30
  call void @_ZN1SD1Ev(ptr noundef nonnull align 4 dereferenceable(4) %arraydtor.dst.cur) #2, !dbg !30
  %arraydtor.dst.next = getelementptr inbounds %struct.S, ptr %arraydtor.dst.cur, i64 1, !dbg !30
  %arraydtor.done = icmp eq ptr %arraydtor.dst.next, %arraydtor.dst.end, !dbg !30
  br i1 %arraydtor.done, label %arraydtor.cont, label %arraydtor.loop, !dbg !30

arraydtor.cont:                                   ; preds = %arraydtor.loop
  ret void, !dbg !30
}

declare void @_ZN1SC1ERKS_(ptr noundef nonnull align 4 dereferenceable(4), ptr noundef nonnull align 4 dereferenceable(4)) unnamed_addr #3

; Function Attrs: noinline norecurse nounwind
define internal void @oss_copy_ctor_ZN1SC1ERKS_(ptr noundef %0, ptr noundef %1, i64 noundef %2) #4 !dbg !31 {
entry:
  %.addr = alloca ptr, align 8
  %.addr1 = alloca ptr, align 8
  %.addr2 = alloca i64, align 8
  store ptr %0, ptr %.addr, align 8
  store ptr %1, ptr %.addr1, align 8
  store i64 %2, ptr %.addr2, align 8
  %3 = load ptr, ptr %.addr, align 8, !dbg !32
  %4 = load ptr, ptr %.addr1, align 8, !dbg !32
  %5 = load i64, ptr %.addr2, align 8, !dbg !32
  %arrayctor.dst.end = getelementptr inbounds %struct.S, ptr %4, i64 %5, !dbg !32
  br label %arrayctor.loop, !dbg !32

arrayctor.loop:                                   ; preds = %arrayctor.loop, %entry
  %arrayctor.dst.cur = phi ptr [ %4, %entry ], [ %arrayctor.dst.next, %arrayctor.loop ], !dbg !32
  %arrayctor.src.cur = phi ptr [ %3, %entry ], [ %arrayctor.src.next, %arrayctor.loop ], !dbg !32
  call void @_ZN1SC1ERKS_(ptr noundef nonnull align 4 dereferenceable(4) %arrayctor.dst.cur, ptr noundef nonnull align 4 dereferenceable(4) %arrayctor.src.cur), !dbg !33
  %arrayctor.dst.next = getelementptr inbounds %struct.S, ptr %arrayctor.dst.cur, i64 1, !dbg !32
  %arrayctor.src.next = getelementptr inbounds %struct.S, ptr %arrayctor.src.cur, i64 1, !dbg !32
  %arrayctor.done = icmp eq ptr %arrayctor.dst.next, %arrayctor.dst.end, !dbg !32
  br i1 %arrayctor.done, label %arrayctor.cont, label %arrayctor.loop, !dbg !32

arrayctor.cont:                                   ; preds = %arrayctor.loop
  ret void, !dbg !33
}

attributes #0 = { mustprogress noinline nounwind optnone "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
attributes #1 = { nocallback nofree nosync nounwind willreturn }
attributes #2 = { nounwind }
attributes #3 = { "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
attributes #4 = { noinline norecurse nounwind "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
attributes #5 = { nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus_14, file: !1, producer: "", isOptimized: false, runtimeVersion: 0, emissionKind: NoDebug, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "<stdin>", directory: "")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 1, !"wchar_size", i32 4}
!4 = !{!""}
!5 = distinct !DISubprogram(name: "pod_array", scope: !6, file: !6, line: 1, type: !7, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !8)
!6 = !DIFile(filename: "task_vla.ll", directory: "")
!7 = !DISubroutineType(types: !8)
!8 = !{}
!9 = !DILocation(line: 2, column: 15, scope: !5)
!10 = !DILocation(line: 2, column: 5, scope: !5)
!11 = !DILocation(line: 3, column: 13, scope: !5)
!12 = !DILocation(line: 4, column: 6, scope: !5)
!13 = !DILocation(line: 5, column: 13, scope: !5)
!14 = !DILocation(line: 6, column: 6, scope: !5)
!15 = !DILocation(line: 7, column: 1, scope: !5)
!16 = distinct !DISubprogram(name: "non_pod_array", scope: !6, file: !6, line: 14, type: !7, scopeLine: 14, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !8)
!17 = !DILocation(line: 15, column: 13, scope: !16)
!18 = !DILocation(line: 15, column: 5, scope: !16)
!19 = !DILocation(line: 15, column: 7, scope: !16)
!20 = !DILocation(line: 16, column: 13, scope: !16)
!21 = !DILocation(line: 17, column: 6, scope: !16)
!22 = !DILocation(line: 18, column: 13, scope: !16)
!23 = !DILocation(line: 19, column: 6, scope: !16)
!24 = !DILocation(line: 20, column: 1, scope: !16)
!25 = distinct !DISubprogram(linkageName: "oss_ctor_ZN1SC1Ev", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!26 = !DILocation(line: 0, scope: !25)
!27 = !DILocation(line: 16, column: 30, scope: !28)
!28 = !DILexicalBlockFile(scope: !25, file: !6, discriminator: 0)
!29 = distinct !DISubprogram(linkageName: "oss_dtor_ZN1SD1Ev", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!30 = !DILocation(line: 0, scope: !29)
!31 = distinct !DISubprogram(linkageName: "oss_copy_ctor_ZN1SC1ERKS_", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!32 = !DILocation(line: 0, scope: !31)
!33 = !DILocation(line: 18, column: 35, scope: !34)
!34 = !DILexicalBlockFile(scope: !31, file: !6, discriminator: 0)
; CHECK-LABEL: define {{[^@]+}}@_Z9pod_arrayi
; CHECK-SAME: (i32 noundef [[N:%.*]]) #[[ATTR0:[0-9]+]] !dbg [[DBG5:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[N_ADDR:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[SAVED_STACK:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    [[__VLA_EXPR0:%.*]] = alloca i64, align 8
; CHECK-NEXT:    store i32 [[N]], ptr [[N_ADDR]], align 4
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[N_ADDR]], align 4, !dbg [[DBG9:![0-9]+]]
; CHECK-NEXT:    [[TMP1:%.*]] = zext i32 [[TMP0]] to i64, !dbg [[DBG10:![0-9]+]]
; CHECK-NEXT:    [[TMP2:%.*]] = call ptr @llvm.stacksave(), !dbg [[DBG10]]
; CHECK-NEXT:    store ptr [[TMP2]], ptr [[SAVED_STACK]], align 8, !dbg [[DBG10]]
; CHECK-NEXT:    [[VLA:%.*]] = alloca i32, i64 [[TMP1]], align 16, !dbg [[DBG10]]
; CHECK-NEXT:    store i64 [[TMP1]], ptr [[__VLA_EXPR0]], align 8, !dbg [[DBG10]]
; CHECK-NEXT:    [[TMP3:%.*]] = alloca ptr, align 8, !dbg [[DBG11:![0-9]+]]
; CHECK-NEXT:    [[TMP4:%.*]] = alloca ptr, align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[NUM_DEPS:%.*]] = alloca i64, align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP5:%.*]] = alloca ptr, align 8, !dbg [[DBG12:![0-9]+]]
; CHECK-NEXT:    [[TMP6:%.*]] = alloca ptr, align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[NUM_DEPS5:%.*]] = alloca i64, align 8, !dbg [[DBG12]]
; CHECK-NEXT:    br label [[FINAL_COND:%.*]], !dbg [[DBG11]]
; CHECK:       codeRepl:
; CHECK-NEXT:    [[TMP7:%.*]] = mul nuw i64 4, [[TMP1]], !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP8:%.*]] = add nuw i64 0, [[TMP7]], !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP9:%.*]] = add nuw i64 16, [[TMP8]], !dbg [[DBG11]]
; CHECK-NEXT:    store i64 0, ptr [[NUM_DEPS]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP10:%.*]] = load i64, ptr [[NUM_DEPS]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    call void @nanos6_create_task(ptr @task_info_var__Z9pod_arrayi, ptr @task_invocation_info__Z9pod_arrayi, ptr null, i64 [[TMP9]], ptr [[TMP3]], ptr [[TMP4]], i64 0, i64 [[TMP10]]), !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP11:%.*]] = load ptr, ptr [[TMP3]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[ARGS_END:%.*]] = getelementptr i8, ptr [[TMP11]], i64 16, !dbg [[DBG11]]
; CHECK-NEXT:    [[GEP_VLA:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z9POD_ARRAYI:%.*]], ptr [[TMP11]], i32 0, i32 0, !dbg [[DBG11]]
; CHECK-NEXT:    store ptr [[ARGS_END]], ptr [[GEP_VLA]], align 4, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP12:%.*]] = mul nuw i64 4, [[TMP1]], !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr [[ARGS_END]], i64 [[TMP12]], !dbg [[DBG11]]
; CHECK-NEXT:    [[CAPT_GEP_:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z9POD_ARRAYI]], ptr [[TMP11]], i32 0, i32 1, !dbg [[DBG11]]
; CHECK-NEXT:    store i64 [[TMP1]], ptr [[CAPT_GEP_]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP14:%.*]] = load ptr, ptr [[TMP4]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    call void @nanos6_submit_task(ptr [[TMP14]]), !dbg [[DBG11]]
; CHECK-NEXT:    br label [[FINAL_END:%.*]], !dbg [[DBG11]]
; CHECK:       final.end:
; CHECK-NEXT:    br label [[FINAL_COND2:%.*]], !dbg [[DBG12]]
; CHECK:       codeRepl4:
; CHECK-NEXT:    [[TMP15:%.*]] = mul nuw i64 4, [[TMP1]], !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP16:%.*]] = add nuw i64 0, [[TMP15]], !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP17:%.*]] = add nuw i64 16, [[TMP16]], !dbg [[DBG12]]
; CHECK-NEXT:    store i64 0, ptr [[NUM_DEPS5]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP18:%.*]] = load i64, ptr [[NUM_DEPS5]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    call void @nanos6_create_task(ptr @task_info_var__Z9pod_arrayi.11, ptr @task_invocation_info__Z9pod_arrayi.7, ptr null, i64 [[TMP17]], ptr [[TMP5]], ptr [[TMP6]], i64 0, i64 [[TMP18]]), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP19:%.*]] = load ptr, ptr [[TMP5]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[ARGS_END6:%.*]] = getelementptr i8, ptr [[TMP19]], i64 16, !dbg [[DBG12]]
; CHECK-NEXT:    [[GEP_VLA7:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z9POD_ARRAYI_0:%.*]], ptr [[TMP19]], i32 0, i32 0, !dbg [[DBG12]]
; CHECK-NEXT:    store ptr [[ARGS_END6]], ptr [[GEP_VLA7]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP20:%.*]] = mul nuw i64 4, [[TMP1]], !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP21:%.*]] = getelementptr i8, ptr [[ARGS_END6]], i64 [[TMP20]], !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP22:%.*]] = mul nuw i64 1, [[TMP1]], !dbg [[DBG12]]
; CHECK-NEXT:    [[GEP_VLA8:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z9POD_ARRAYI_0]], ptr [[TMP19]], i32 0, i32 0, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP23:%.*]] = load ptr, ptr [[GEP_VLA8]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP24:%.*]] = mul nuw i64 [[TMP22]], 4, !dbg [[DBG12]]
; CHECK-NEXT:    call void @llvm.memcpy.p0.p0.i64(ptr align 4 [[TMP23]], ptr align 4 [[VLA]], i64 [[TMP24]], i1 false), !dbg [[DBG12]]
; CHECK-NEXT:    [[CAPT_GEP_9:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z9POD_ARRAYI_0]], ptr [[TMP19]], i32 0, i32 1, !dbg [[DBG12]]
; CHECK-NEXT:    store i64 [[TMP1]], ptr [[CAPT_GEP_9]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP25:%.*]] = load ptr, ptr [[TMP6]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    call void @nanos6_submit_task(ptr [[TMP25]]), !dbg [[DBG12]]
; CHECK-NEXT:    br label [[FINAL_END1:%.*]], !dbg [[DBG12]]
; CHECK:       final.end1:
; CHECK-NEXT:    [[TMP26:%.*]] = load ptr, ptr [[SAVED_STACK]], align 8, !dbg [[DBG13:![0-9]+]]
; CHECK-NEXT:    call void @llvm.stackrestore(ptr [[TMP26]]), !dbg [[DBG13]]
; CHECK-NEXT:    ret void, !dbg [[DBG13]]
; CHECK:       final.then:
; CHECK-NEXT:    br label [[FINAL_END]], !dbg [[DBG12]]
; CHECK:       final.then3:
; CHECK-NEXT:    br label [[FINAL_END1]], !dbg [[DBG13]]
; CHECK:       final.cond:
; CHECK-NEXT:    [[TMP27:%.*]] = call i32 @nanos6_in_final(), !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP28:%.*]] = icmp ne i32 [[TMP27]], 0, !dbg [[DBG11]]
; CHECK-NEXT:    br i1 [[TMP28]], label [[FINAL_THEN:%.*]], label [[CODEREPL:%.*]], !dbg [[DBG11]]
; CHECK:       final.cond2:
; CHECK-NEXT:    [[TMP29:%.*]] = call i32 @nanos6_in_final(), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP30:%.*]] = icmp ne i32 [[TMP29]], 0, !dbg [[DBG12]]
; CHECK-NEXT:    br i1 [[TMP30]], label [[FINAL_THEN3:%.*]], label [[CODEREPL4:%.*]], !dbg [[DBG12]]
;
;
; CHECK-LABEL: define {{[^@]+}}@_Z13non_pod_arrayi
; CHECK-SAME: (i32 noundef [[N:%.*]]) #[[ATTR0]] !dbg [[DBG14:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[N_ADDR:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[SAVED_STACK:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    [[__VLA_EXPR0:%.*]] = alloca i64, align 8
; CHECK-NEXT:    store i32 [[N]], ptr [[N_ADDR]], align 4
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[N_ADDR]], align 4, !dbg [[DBG15:![0-9]+]]
; CHECK-NEXT:    [[TMP1:%.*]] = zext i32 [[TMP0]] to i64, !dbg [[DBG16:![0-9]+]]
; CHECK-NEXT:    [[TMP2:%.*]] = call ptr @llvm.stacksave(), !dbg [[DBG16]]
; CHECK-NEXT:    store ptr [[TMP2]], ptr [[SAVED_STACK]], align 8, !dbg [[DBG16]]
; CHECK-NEXT:    [[VLA:%.*]] = alloca [[STRUCT_S:%.*]], i64 [[TMP1]], align 16, !dbg [[DBG16]]
; CHECK-NEXT:    store i64 [[TMP1]], ptr [[__VLA_EXPR0]], align 8, !dbg [[DBG16]]
; CHECK-NEXT:    [[ISEMPTY:%.*]] = icmp eq i64 [[TMP1]], 0, !dbg [[DBG17:![0-9]+]]
; CHECK-NEXT:    [[TMP3:%.*]] = alloca ptr, align 8, !dbg [[DBG18:![0-9]+]]
; CHECK-NEXT:    [[TMP4:%.*]] = alloca ptr, align 8, !dbg [[DBG18]]
; CHECK-NEXT:    [[NUM_DEPS:%.*]] = alloca i64, align 8, !dbg [[DBG18]]
; CHECK-NEXT:    [[TMP5:%.*]] = alloca ptr, align 8, !dbg [[DBG19:![0-9]+]]
; CHECK-NEXT:    [[TMP6:%.*]] = alloca ptr, align 8, !dbg [[DBG19]]
; CHECK-NEXT:    [[NUM_DEPS6:%.*]] = alloca i64, align 8, !dbg [[DBG19]]
; CHECK-NEXT:    br i1 [[ISEMPTY]], label [[ARRAYCTOR_CONT:%.*]], label [[NEW_CTORLOOP:%.*]], !dbg [[DBG17]]
; CHECK:       new.ctorloop:
; CHECK-NEXT:    [[ARRAYCTOR_END:%.*]] = getelementptr inbounds [[STRUCT_S]], ptr [[VLA]], i64 [[TMP1]], !dbg [[DBG17]]
; CHECK-NEXT:    br label [[ARRAYCTOR_LOOP:%.*]], !dbg [[DBG17]]
; CHECK:       arrayctor.loop:
; CHECK-NEXT:    [[ARRAYCTOR_CUR:%.*]] = phi ptr [ [[VLA]], [[NEW_CTORLOOP]] ], [ [[ARRAYCTOR_NEXT:%.*]], [[ARRAYCTOR_LOOP]] ], !dbg [[DBG17]]
; CHECK-NEXT:    call void @_ZN1SC1Ev(ptr noundef nonnull align 4 dereferenceable(4) [[ARRAYCTOR_CUR]]), !dbg [[DBG17]]
; CHECK-NEXT:    [[ARRAYCTOR_NEXT]] = getelementptr inbounds [[STRUCT_S]], ptr [[ARRAYCTOR_CUR]], i64 1, !dbg [[DBG17]]
; CHECK-NEXT:    [[ARRAYCTOR_DONE:%.*]] = icmp eq ptr [[ARRAYCTOR_NEXT]], [[ARRAYCTOR_END]], !dbg [[DBG17]]
; CHECK-NEXT:    br i1 [[ARRAYCTOR_DONE]], label [[ARRAYCTOR_CONT]], label [[ARRAYCTOR_LOOP]], !dbg [[DBG17]]
; CHECK:       arrayctor.cont:
; CHECK-NEXT:    br label [[FINAL_COND:%.*]], !dbg [[DBG18]]
; CHECK:       codeRepl:
; CHECK-NEXT:    [[TMP7:%.*]] = mul nuw i64 4, [[TMP1]], !dbg [[DBG18]]
; CHECK-NEXT:    [[TMP8:%.*]] = add nuw i64 0, [[TMP7]], !dbg [[DBG18]]
; CHECK-NEXT:    [[TMP9:%.*]] = add nuw i64 16, [[TMP8]], !dbg [[DBG18]]
; CHECK-NEXT:    store i64 0, ptr [[NUM_DEPS]], align 8, !dbg [[DBG18]]
; CHECK-NEXT:    [[TMP10:%.*]] = load i64, ptr [[NUM_DEPS]], align 8, !dbg [[DBG18]]
; CHECK-NEXT:    call void @nanos6_create_task(ptr @task_info_var__Z13non_pod_arrayi, ptr @task_invocation_info__Z13non_pod_arrayi, ptr null, i64 [[TMP9]], ptr [[TMP3]], ptr [[TMP4]], i64 0, i64 [[TMP10]]), !dbg [[DBG18]]
; CHECK-NEXT:    [[TMP11:%.*]] = load ptr, ptr [[TMP3]], align 8, !dbg [[DBG18]]
; CHECK-NEXT:    [[ARGS_END:%.*]] = getelementptr i8, ptr [[TMP11]], i64 16, !dbg [[DBG18]]
; CHECK-NEXT:    [[GEP_VLA:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z13NON_POD_ARRAYI:%.*]], ptr [[TMP11]], i32 0, i32 0, !dbg [[DBG18]]
; CHECK-NEXT:    store ptr [[ARGS_END]], ptr [[GEP_VLA]], align 8, !dbg [[DBG18]]
; CHECK-NEXT:    [[TMP12:%.*]] = mul nuw i64 4, [[TMP1]], !dbg [[DBG18]]
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr [[ARGS_END]], i64 [[TMP12]], !dbg [[DBG18]]
; CHECK-NEXT:    [[TMP14:%.*]] = mul nuw i64 1, [[TMP1]], !dbg [[DBG18]]
; CHECK-NEXT:    [[GEP_VLA1:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z13NON_POD_ARRAYI]], ptr [[TMP11]], i32 0, i32 0, !dbg [[DBG18]]
; CHECK-NEXT:    [[TMP15:%.*]] = load ptr, ptr [[GEP_VLA1]], align 8, !dbg [[DBG18]]
; CHECK-NEXT:    call void @oss_ctor_ZN1SC1Ev(ptr [[TMP15]], i64 [[TMP14]]), !dbg [[DBG18]]
; CHECK-NEXT:    [[CAPT_GEP_:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z13NON_POD_ARRAYI]], ptr [[TMP11]], i32 0, i32 1, !dbg [[DBG18]]
; CHECK-NEXT:    store i64 [[TMP1]], ptr [[CAPT_GEP_]], align 8, !dbg [[DBG18]]
; CHECK-NEXT:    [[TMP16:%.*]] = load ptr, ptr [[TMP4]], align 8, !dbg [[DBG18]]
; CHECK-NEXT:    call void @nanos6_submit_task(ptr [[TMP16]]), !dbg [[DBG18]]
; CHECK-NEXT:    br label [[FINAL_END:%.*]], !dbg [[DBG18]]
; CHECK:       final.end:
; CHECK-NEXT:    br label [[FINAL_COND3:%.*]], !dbg [[DBG19]]
; CHECK:       codeRepl5:
; CHECK-NEXT:    [[TMP17:%.*]] = mul nuw i64 4, [[TMP1]], !dbg [[DBG19]]
; CHECK-NEXT:    [[TMP18:%.*]] = add nuw i64 0, [[TMP17]], !dbg [[DBG19]]
; CHECK-NEXT:    [[TMP19:%.*]] = add nuw i64 16, [[TMP18]], !dbg [[DBG19]]
; CHECK-NEXT:    store i64 0, ptr [[NUM_DEPS6]], align 8, !dbg [[DBG19]]
; CHECK-NEXT:    [[TMP20:%.*]] = load i64, ptr [[NUM_DEPS6]], align 8, !dbg [[DBG19]]
; CHECK-NEXT:    call void @nanos6_create_task(ptr @task_info_var__Z13non_pod_arrayi.24, ptr @task_invocation_info__Z13non_pod_arrayi.20, ptr null, i64 [[TMP19]], ptr [[TMP5]], ptr [[TMP6]], i64 0, i64 [[TMP20]]), !dbg [[DBG19]]
; CHECK-NEXT:    [[TMP21:%.*]] = load ptr, ptr [[TMP5]], align 8, !dbg [[DBG19]]
; CHECK-NEXT:    [[ARGS_END7:%.*]] = getelementptr i8, ptr [[TMP21]], i64 16, !dbg [[DBG19]]
; CHECK-NEXT:    [[GEP_VLA8:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z13NON_POD_ARRAYI_1:%.*]], ptr [[TMP21]], i32 0, i32 0, !dbg [[DBG19]]
; CHECK-NEXT:    store ptr [[ARGS_END7]], ptr [[GEP_VLA8]], align 8, !dbg [[DBG19]]
; CHECK-NEXT:    [[TMP22:%.*]] = mul nuw i64 4, [[TMP1]], !dbg [[DBG19]]
; CHECK-NEXT:    [[TMP23:%.*]] = getelementptr i8, ptr [[ARGS_END7]], i64 [[TMP22]], !dbg [[DBG19]]
; CHECK-NEXT:    [[TMP24:%.*]] = mul nuw i64 1, [[TMP1]], !dbg [[DBG19]]
; CHECK-NEXT:    [[GEP_VLA9:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z13NON_POD_ARRAYI_1]], ptr [[TMP21]], i32 0, i32 0, !dbg [[DBG19]]
; CHECK-NEXT:    [[TMP25:%.*]] = load ptr, ptr [[GEP_VLA9]], align 8, !dbg [[DBG19]]
; CHECK-NEXT:    call void @oss_copy_ctor_ZN1SC1ERKS_(ptr [[VLA]], ptr [[TMP25]], i64 [[TMP24]]), !dbg [[DBG19]]
; CHECK-NEXT:    [[CAPT_GEP_10:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z13NON_POD_ARRAYI_1]], ptr [[TMP21]], i32 0, i32 1, !dbg [[DBG19]]
; CHECK-NEXT:    store i64 [[TMP1]], ptr [[CAPT_GEP_10]], align 8, !dbg [[DBG19]]
; CHECK-NEXT:    [[TMP26:%.*]] = load ptr, ptr [[TMP6]], align 8, !dbg [[DBG19]]
; CHECK-NEXT:    call void @nanos6_submit_task(ptr [[TMP26]]), !dbg [[DBG19]]
; CHECK-NEXT:    br label [[FINAL_END2:%.*]], !dbg [[DBG19]]
; CHECK:       final.end2:
; CHECK-NEXT:    [[TMP27:%.*]] = getelementptr inbounds [[STRUCT_S]], ptr [[VLA]], i64 [[TMP1]], !dbg [[DBG20:![0-9]+]]
; CHECK-NEXT:    [[ARRAYDESTROY_ISEMPTY:%.*]] = icmp eq ptr [[VLA]], [[TMP27]], !dbg [[DBG20]]
; CHECK-NEXT:    br i1 [[ARRAYDESTROY_ISEMPTY]], label [[ARRAYDESTROY_DONE1:%.*]], label [[ARRAYDESTROY_BODY:%.*]], !dbg [[DBG20]]
; CHECK:       arraydestroy.body:
; CHECK-NEXT:    [[ARRAYDESTROY_ELEMENTPAST:%.*]] = phi ptr [ [[TMP27]], [[FINAL_END2]] ], [ [[ARRAYDESTROY_ELEMENT:%.*]], [[ARRAYDESTROY_BODY]] ], !dbg [[DBG20]]
; CHECK-NEXT:    [[ARRAYDESTROY_ELEMENT]] = getelementptr inbounds [[STRUCT_S]], ptr [[ARRAYDESTROY_ELEMENTPAST]], i64 -1, !dbg [[DBG20]]
; CHECK-NEXT:    call void @_ZN1SD1Ev(ptr noundef nonnull align 4 dereferenceable(4) [[ARRAYDESTROY_ELEMENT]]) #[[ATTR2:[0-9]+]], !dbg [[DBG20]]
; CHECK-NEXT:    [[ARRAYDESTROY_DONE:%.*]] = icmp eq ptr [[ARRAYDESTROY_ELEMENT]], [[VLA]], !dbg [[DBG20]]
; CHECK-NEXT:    br i1 [[ARRAYDESTROY_DONE]], label [[ARRAYDESTROY_DONE1]], label [[ARRAYDESTROY_BODY]], !dbg [[DBG20]]
; CHECK:       arraydestroy.done1:
; CHECK-NEXT:    [[TMP28:%.*]] = load ptr, ptr [[SAVED_STACK]], align 8, !dbg [[DBG20]]
; CHECK-NEXT:    call void @llvm.stackrestore(ptr [[TMP28]]), !dbg [[DBG20]]
; CHECK-NEXT:    ret void, !dbg [[DBG20]]
; CHECK:       final.then:
; CHECK-NEXT:    br label [[FINAL_END]], !dbg [[DBG19]]
; CHECK:       final.then4:
; CHECK-NEXT:    br label [[FINAL_END2]], !dbg [[DBG20]]
; CHECK:       final.cond:
; CHECK-NEXT:    [[TMP29:%.*]] = call i32 @nanos6_in_final(), !dbg [[DBG18]]
; CHECK-NEXT:    [[TMP30:%.*]] = icmp ne i32 [[TMP29]], 0, !dbg [[DBG18]]
; CHECK-NEXT:    br i1 [[TMP30]], label [[FINAL_THEN:%.*]], label [[CODEREPL:%.*]], !dbg [[DBG18]]
; CHECK:       final.cond3:
; CHECK-NEXT:    [[TMP31:%.*]] = call i32 @nanos6_in_final(), !dbg [[DBG19]]
; CHECK-NEXT:    [[TMP32:%.*]] = icmp ne i32 [[TMP31]], 0, !dbg [[DBG19]]
; CHECK-NEXT:    br i1 [[TMP32]], label [[FINAL_THEN4:%.*]], label [[CODEREPL5:%.*]], !dbg [[DBG19]]
;
;
; CHECK-LABEL: define {{[^@]+}}@oss_ctor_ZN1SC1Ev
; CHECK-SAME: (ptr noundef [[TMP0:%.*]], i64 noundef [[TMP1:%.*]]) #[[ATTR4:[0-9]+]] !dbg [[DBG21:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[DOTADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    [[DOTADDR1:%.*]] = alloca i64, align 8
; CHECK-NEXT:    store ptr [[TMP0]], ptr [[DOTADDR]], align 8
; CHECK-NEXT:    store i64 [[TMP1]], ptr [[DOTADDR1]], align 8
; CHECK-NEXT:    [[TMP2:%.*]] = load ptr, ptr [[DOTADDR]], align 8, !dbg [[DBG22:![0-9]+]]
; CHECK-NEXT:    [[TMP3:%.*]] = load i64, ptr [[DOTADDR1]], align 8, !dbg [[DBG22]]
; CHECK-NEXT:    [[ARRAYCTOR_DST_END:%.*]] = getelementptr inbounds [[STRUCT_S:%.*]], ptr [[TMP2]], i64 [[TMP3]], !dbg [[DBG22]]
; CHECK-NEXT:    br label [[ARRAYCTOR_LOOP:%.*]], !dbg [[DBG22]]
; CHECK:       arrayctor.loop:
; CHECK-NEXT:    [[ARRAYCTOR_DST_CUR:%.*]] = phi ptr [ [[TMP2]], [[ENTRY:%.*]] ], [ [[ARRAYCTOR_DST_NEXT:%.*]], [[ARRAYCTOR_LOOP]] ], !dbg [[DBG22]]
; CHECK-NEXT:    call void @_ZN1SC1Ev(ptr noundef nonnull align 4 dereferenceable(4) [[ARRAYCTOR_DST_CUR]]), !dbg [[DBG23:![0-9]+]]
; CHECK-NEXT:    [[ARRAYCTOR_DST_NEXT]] = getelementptr inbounds [[STRUCT_S]], ptr [[ARRAYCTOR_DST_CUR]], i64 1, !dbg [[DBG22]]
; CHECK-NEXT:    [[ARRAYCTOR_DONE:%.*]] = icmp eq ptr [[ARRAYCTOR_DST_NEXT]], [[ARRAYCTOR_DST_END]], !dbg [[DBG22]]
; CHECK-NEXT:    br i1 [[ARRAYCTOR_DONE]], label [[ARRAYCTOR_CONT:%.*]], label [[ARRAYCTOR_LOOP]], !dbg [[DBG22]]
; CHECK:       arrayctor.cont:
; CHECK-NEXT:    ret void, !dbg [[DBG23]]
;
;
; CHECK-LABEL: define {{[^@]+}}@oss_dtor_ZN1SD1Ev
; CHECK-SAME: (ptr noundef [[TMP0:%.*]], i64 noundef [[TMP1:%.*]]) #[[ATTR4]] !dbg [[DBG25:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[DOTADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    [[DOTADDR1:%.*]] = alloca i64, align 8
; CHECK-NEXT:    store ptr [[TMP0]], ptr [[DOTADDR]], align 8
; CHECK-NEXT:    store i64 [[TMP1]], ptr [[DOTADDR1]], align 8
; CHECK-NEXT:    [[TMP2:%.*]] = load ptr, ptr [[DOTADDR]], align 8, !dbg [[DBG26:![0-9]+]]
; CHECK-NEXT:    [[TMP3:%.*]] = load i64, ptr [[DOTADDR1]], align 8, !dbg [[DBG26]]
; CHECK-NEXT:    [[ARRAYDTOR_DST_END:%.*]] = getelementptr inbounds [[STRUCT_S:%.*]], ptr [[TMP2]], i64 [[TMP3]], !dbg [[DBG26]]
; CHECK-NEXT:    br label [[ARRAYDTOR_LOOP:%.*]], !dbg [[DBG26]]
; CHECK:       arraydtor.loop:
; CHECK-NEXT:    [[ARRAYDTOR_DST_CUR:%.*]] = phi ptr [ [[TMP2]], [[ENTRY:%.*]] ], [ [[ARRAYDTOR_DST_NEXT:%.*]], [[ARRAYDTOR_LOOP]] ], !dbg [[DBG26]]
; CHECK-NEXT:    call void @_ZN1SD1Ev(ptr noundef nonnull align 4 dereferenceable(4) [[ARRAYDTOR_DST_CUR]]) #[[ATTR2]], !dbg [[DBG26]]
; CHECK-NEXT:    [[ARRAYDTOR_DST_NEXT]] = getelementptr inbounds [[STRUCT_S]], ptr [[ARRAYDTOR_DST_CUR]], i64 1, !dbg [[DBG26]]
; CHECK-NEXT:    [[ARRAYDTOR_DONE:%.*]] = icmp eq ptr [[ARRAYDTOR_DST_NEXT]], [[ARRAYDTOR_DST_END]], !dbg [[DBG26]]
; CHECK-NEXT:    br i1 [[ARRAYDTOR_DONE]], label [[ARRAYDTOR_CONT:%.*]], label [[ARRAYDTOR_LOOP]], !dbg [[DBG26]]
; CHECK:       arraydtor.cont:
; CHECK-NEXT:    ret void, !dbg [[DBG26]]
;
;
; CHECK-LABEL: define {{[^@]+}}@oss_copy_ctor_ZN1SC1ERKS_
; CHECK-SAME: (ptr noundef [[TMP0:%.*]], ptr noundef [[TMP1:%.*]], i64 noundef [[TMP2:%.*]]) #[[ATTR4]] !dbg [[DBG27:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[DOTADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    [[DOTADDR1:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    [[DOTADDR2:%.*]] = alloca i64, align 8
; CHECK-NEXT:    store ptr [[TMP0]], ptr [[DOTADDR]], align 8
; CHECK-NEXT:    store ptr [[TMP1]], ptr [[DOTADDR1]], align 8
; CHECK-NEXT:    store i64 [[TMP2]], ptr [[DOTADDR2]], align 8
; CHECK-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[DOTADDR]], align 8, !dbg [[DBG28:![0-9]+]]
; CHECK-NEXT:    [[TMP4:%.*]] = load ptr, ptr [[DOTADDR1]], align 8, !dbg [[DBG28]]
; CHECK-NEXT:    [[TMP5:%.*]] = load i64, ptr [[DOTADDR2]], align 8, !dbg [[DBG28]]
; CHECK-NEXT:    [[ARRAYCTOR_DST_END:%.*]] = getelementptr inbounds [[STRUCT_S:%.*]], ptr [[TMP4]], i64 [[TMP5]], !dbg [[DBG28]]
; CHECK-NEXT:    br label [[ARRAYCTOR_LOOP:%.*]], !dbg [[DBG28]]
; CHECK:       arrayctor.loop:
; CHECK-NEXT:    [[ARRAYCTOR_DST_CUR:%.*]] = phi ptr [ [[TMP4]], [[ENTRY:%.*]] ], [ [[ARRAYCTOR_DST_NEXT:%.*]], [[ARRAYCTOR_LOOP]] ], !dbg [[DBG28]]
; CHECK-NEXT:    [[ARRAYCTOR_SRC_CUR:%.*]] = phi ptr [ [[TMP3]], [[ENTRY]] ], [ [[ARRAYCTOR_SRC_NEXT:%.*]], [[ARRAYCTOR_LOOP]] ], !dbg [[DBG28]]
; CHECK-NEXT:    call void @_ZN1SC1ERKS_(ptr noundef nonnull align 4 dereferenceable(4) [[ARRAYCTOR_DST_CUR]], ptr noundef nonnull align 4 dereferenceable(4) [[ARRAYCTOR_SRC_CUR]]), !dbg [[DBG29:![0-9]+]]
; CHECK-NEXT:    [[ARRAYCTOR_DST_NEXT]] = getelementptr inbounds [[STRUCT_S]], ptr [[ARRAYCTOR_DST_CUR]], i64 1, !dbg [[DBG28]]
; CHECK-NEXT:    [[ARRAYCTOR_SRC_NEXT]] = getelementptr inbounds [[STRUCT_S]], ptr [[ARRAYCTOR_SRC_CUR]], i64 1, !dbg [[DBG28]]
; CHECK-NEXT:    [[ARRAYCTOR_DONE:%.*]] = icmp eq ptr [[ARRAYCTOR_DST_NEXT]], [[ARRAYCTOR_DST_END]], !dbg [[DBG28]]
; CHECK-NEXT:    br i1 [[ARRAYCTOR_DONE]], label [[ARRAYCTOR_CONT:%.*]], label [[ARRAYCTOR_LOOP]], !dbg [[DBG28]]
; CHECK:       arrayctor.cont:
; CHECK-NEXT:    ret void, !dbg [[DBG29]]
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_duplicate__Z9pod_arrayi
; CHECK-SAME: (ptr [[TASK_ARGS_SRC:%.*]], ptr [[TASK_ARGS_DST:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[TASK_ARGS_DST]], align 8
; CHECK-NEXT:    [[ARGS_END:%.*]] = getelementptr i8, ptr [[TMP0]], i64 16
; CHECK-NEXT:    [[GEP_DST_VLA:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z9POD_ARRAYI:%.*]], ptr [[TMP0]], i32 0, i32 0
; CHECK-NEXT:    store ptr [[ARGS_END]], ptr [[GEP_DST_VLA]], align 4
; CHECK-NEXT:    [[GEP_DST_:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z9POD_ARRAYI]], ptr [[TMP0]], i32 0, i32 1
; CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr [[GEP_DST_]], align 8
; CHECK-NEXT:    [[TMP2:%.*]] = mul nuw i64 4, [[TMP1]]
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[ARGS_END]], i64 [[TMP2]]
; CHECK-NEXT:    [[CAPT_GEP_SRC_:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z9POD_ARRAYI]], ptr [[TASK_ARGS_SRC]], i32 0, i32 1
; CHECK-NEXT:    [[CAPT_GEP_DST_:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z9POD_ARRAYI]], ptr [[TMP0]], i32 0, i32 1
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[CAPT_GEP_SRC_]], align 8
; CHECK-NEXT:    store i64 [[TMP4]], ptr [[CAPT_GEP_DST_]], align 8
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_unpacked_task_region__Z9pod_arrayi
; CHECK-SAME: (ptr [[VLA:%.*]], i64 [[TMP0:%.*]], ptr [[DEVICE_ENV:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) !dbg [[DBG31:![0-9]+]] {
; CHECK-NEXT:  newFuncRoot:
; CHECK-NEXT:    br label [[TMP1:%.*]], !dbg [[DBG32:![0-9]+]]
; CHECK:       1:
; CHECK-NEXT:    br label [[DOTEXITSTUB:%.*]], !dbg [[DBG33:![0-9]+]]
; CHECK:       .exitStub:
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_task_region__Z9pod_arrayi
; CHECK-SAME: (ptr [[TASK_ARGS:%.*]], ptr [[DEVICE_ENV:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_VLA:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z9POD_ARRAYI:%.*]], ptr [[TASK_ARGS]], i32 0, i32 0
; CHECK-NEXT:    [[LOAD_GEP_VLA:%.*]] = load ptr, ptr [[GEP_VLA]], align 8
; CHECK-NEXT:    [[CAPT_GEP:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z9POD_ARRAYI]], ptr [[TASK_ARGS]], i32 0, i32 1
; CHECK-NEXT:    [[LOAD_CAPT_GEP:%.*]] = load i64, ptr [[CAPT_GEP]], align 8
; CHECK-NEXT:    [[TMP0:%.*]] = icmp ne ptr [[ADDRESS_TRANSLATION_TABLE]], null
; CHECK-NEXT:    br i1 [[TMP0]], label [[TMP1:%.*]], label [[TMP2:%.*]]
; CHECK:       1:
; CHECK-NEXT:    br label [[TMP2]]
; CHECK:       2:
; CHECK-NEXT:    call void @nanos6_unpacked_task_region__Z9pod_arrayi(ptr [[LOAD_GEP_VLA]], i64 [[LOAD_CAPT_GEP]], ptr [[DEVICE_ENV]], ptr [[ADDRESS_TRANSLATION_TABLE]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_constructor_register_task_info() {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @nanos6_register_task_info(ptr @task_info_var__Z9pod_arrayi)
; CHECK-NEXT:    call void @nanos6_register_task_info(ptr @task_info_var__Z9pod_arrayi.11)
; CHECK-NEXT:    call void @nanos6_register_task_info(ptr @task_info_var__Z13non_pod_arrayi)
; CHECK-NEXT:    call void @nanos6_register_task_info(ptr @task_info_var__Z13non_pod_arrayi.24)
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_duplicate__Z9pod_arrayi.4
; CHECK-SAME: (ptr [[TASK_ARGS_SRC:%.*]], ptr [[TASK_ARGS_DST:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[TASK_ARGS_DST]], align 8
; CHECK-NEXT:    [[ARGS_END:%.*]] = getelementptr i8, ptr [[TMP0]], i64 16
; CHECK-NEXT:    [[GEP_DST_VLA:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z9POD_ARRAYI_0:%.*]], ptr [[TMP0]], i32 0, i32 0
; CHECK-NEXT:    store ptr [[ARGS_END]], ptr [[GEP_DST_VLA]], align 4
; CHECK-NEXT:    [[GEP_DST_:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z9POD_ARRAYI_0]], ptr [[TMP0]], i32 0, i32 1
; CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr [[GEP_DST_]], align 8
; CHECK-NEXT:    [[TMP2:%.*]] = mul nuw i64 4, [[TMP1]]
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[ARGS_END]], i64 [[TMP2]]
; CHECK-NEXT:    [[GEP_SRC_:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z9POD_ARRAYI_0]], ptr [[TASK_ARGS_SRC]], i32 0, i32 1
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[GEP_SRC_]], align 8
; CHECK-NEXT:    [[TMP5:%.*]] = mul nuw i64 1, [[TMP4]]
; CHECK-NEXT:    [[GEP_SRC_VLA:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z9POD_ARRAYI_0]], ptr [[TASK_ARGS_SRC]], i32 0, i32 0
; CHECK-NEXT:    [[GEP_DST_VLA1:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z9POD_ARRAYI_0]], ptr [[TMP0]], i32 0, i32 0
; CHECK-NEXT:    [[TMP6:%.*]] = load ptr, ptr [[GEP_SRC_VLA]], align 8
; CHECK-NEXT:    [[TMP7:%.*]] = load ptr, ptr [[GEP_DST_VLA1]], align 8
; CHECK-NEXT:    [[TMP8:%.*]] = mul nuw i64 [[TMP5]], 4
; CHECK-NEXT:    call void @llvm.memcpy.p0.p0.i64(ptr align 4 [[TMP7]], ptr align 4 [[TMP6]], i64 [[TMP8]], i1 false)
; CHECK-NEXT:    [[CAPT_GEP_SRC_:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z9POD_ARRAYI_0]], ptr [[TASK_ARGS_SRC]], i32 0, i32 1
; CHECK-NEXT:    [[CAPT_GEP_DST_:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z9POD_ARRAYI_0]], ptr [[TMP0]], i32 0, i32 1
; CHECK-NEXT:    [[TMP9:%.*]] = load i64, ptr [[CAPT_GEP_SRC_]], align 8
; CHECK-NEXT:    store i64 [[TMP9]], ptr [[CAPT_GEP_DST_]], align 8
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_unpacked_task_region__Z9pod_arrayi.5
; CHECK-SAME: (ptr [[VLA:%.*]], i64 [[TMP0:%.*]], ptr [[DEVICE_ENV:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) !dbg [[DBG34:![0-9]+]] {
; CHECK-NEXT:  newFuncRoot:
; CHECK-NEXT:    br label [[TMP1:%.*]], !dbg [[DBG35:![0-9]+]]
; CHECK:       1:
; CHECK-NEXT:    br label [[DOTEXITSTUB:%.*]], !dbg [[DBG36:![0-9]+]]
; CHECK:       .exitStub:
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_task_region__Z9pod_arrayi.6
; CHECK-SAME: (ptr [[TASK_ARGS:%.*]], ptr [[DEVICE_ENV:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_VLA:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z9POD_ARRAYI_0:%.*]], ptr [[TASK_ARGS]], i32 0, i32 0
; CHECK-NEXT:    [[LOAD_GEP_VLA:%.*]] = load ptr, ptr [[GEP_VLA]], align 8
; CHECK-NEXT:    [[CAPT_GEP:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z9POD_ARRAYI_0]], ptr [[TASK_ARGS]], i32 0, i32 1
; CHECK-NEXT:    [[LOAD_CAPT_GEP:%.*]] = load i64, ptr [[CAPT_GEP]], align 8
; CHECK-NEXT:    [[TMP0:%.*]] = icmp ne ptr [[ADDRESS_TRANSLATION_TABLE]], null
; CHECK-NEXT:    br i1 [[TMP0]], label [[TMP1:%.*]], label [[TMP2:%.*]]
; CHECK:       1:
; CHECK-NEXT:    br label [[TMP2]]
; CHECK:       2:
; CHECK-NEXT:    call void @nanos6_unpacked_task_region__Z9pod_arrayi.5(ptr [[LOAD_GEP_VLA]], i64 [[LOAD_CAPT_GEP]], ptr [[DEVICE_ENV]], ptr [[ADDRESS_TRANSLATION_TABLE]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_unpacked_destroy__Z13non_pod_arrayi
; CHECK-SAME: (ptr [[VLA:%.*]], i64 [[TMP0:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP1:%.*]] = mul nuw i64 1, [[TMP0]]
; CHECK-NEXT:    call void @oss_dtor_ZN1SD1Ev(ptr [[VLA]], i64 [[TMP1]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_destroy__Z13non_pod_arrayi
; CHECK-SAME: (ptr [[TASK_ARGS:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_VLA:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z13NON_POD_ARRAYI:%.*]], ptr [[TASK_ARGS]], i32 0, i32 0
; CHECK-NEXT:    [[LOAD_GEP_VLA:%.*]] = load ptr, ptr [[GEP_VLA]], align 8
; CHECK-NEXT:    [[CAPT_GEP:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z13NON_POD_ARRAYI]], ptr [[TASK_ARGS]], i32 0, i32 1
; CHECK-NEXT:    [[LOAD_CAPT_GEP:%.*]] = load i64, ptr [[CAPT_GEP]], align 8
; CHECK-NEXT:    call void @nanos6_unpacked_destroy__Z13non_pod_arrayi(ptr [[LOAD_GEP_VLA]], i64 [[LOAD_CAPT_GEP]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_duplicate__Z13non_pod_arrayi
; CHECK-SAME: (ptr [[TASK_ARGS_SRC:%.*]], ptr [[TASK_ARGS_DST:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[TASK_ARGS_DST]], align 8
; CHECK-NEXT:    [[ARGS_END:%.*]] = getelementptr i8, ptr [[TMP0]], i64 16
; CHECK-NEXT:    [[GEP_DST_VLA:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z13NON_POD_ARRAYI:%.*]], ptr [[TMP0]], i32 0, i32 0
; CHECK-NEXT:    store ptr [[ARGS_END]], ptr [[GEP_DST_VLA]], align 8
; CHECK-NEXT:    [[GEP_DST_:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z13NON_POD_ARRAYI]], ptr [[TMP0]], i32 0, i32 1
; CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr [[GEP_DST_]], align 8
; CHECK-NEXT:    [[TMP2:%.*]] = mul nuw i64 4, [[TMP1]]
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[ARGS_END]], i64 [[TMP2]]
; CHECK-NEXT:    [[GEP_SRC_:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z13NON_POD_ARRAYI]], ptr [[TASK_ARGS_SRC]], i32 0, i32 1
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[GEP_SRC_]], align 8
; CHECK-NEXT:    [[TMP5:%.*]] = mul nuw i64 1, [[TMP4]]
; CHECK-NEXT:    [[GEP_VLA:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z13NON_POD_ARRAYI]], ptr [[TMP0]], i32 0, i32 0
; CHECK-NEXT:    [[TMP6:%.*]] = load ptr, ptr [[GEP_VLA]], align 8
; CHECK-NEXT:    call void @oss_ctor_ZN1SC1Ev(ptr [[TMP6]], i64 [[TMP5]])
; CHECK-NEXT:    [[CAPT_GEP_SRC_:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z13NON_POD_ARRAYI]], ptr [[TASK_ARGS_SRC]], i32 0, i32 1
; CHECK-NEXT:    [[CAPT_GEP_DST_:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z13NON_POD_ARRAYI]], ptr [[TMP0]], i32 0, i32 1
; CHECK-NEXT:    [[TMP7:%.*]] = load i64, ptr [[CAPT_GEP_SRC_]], align 8
; CHECK-NEXT:    store i64 [[TMP7]], ptr [[CAPT_GEP_DST_]], align 8
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_unpacked_task_region__Z13non_pod_arrayi
; CHECK-SAME: (ptr [[VLA:%.*]], i64 [[TMP0:%.*]], ptr [[DEVICE_ENV:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) !dbg [[DBG37:![0-9]+]] {
; CHECK-NEXT:  newFuncRoot:
; CHECK-NEXT:    br label [[TMP1:%.*]], !dbg [[DBG38:![0-9]+]]
; CHECK:       1:
; CHECK-NEXT:    br label [[DOTEXITSTUB:%.*]], !dbg [[DBG39:![0-9]+]]
; CHECK:       .exitStub:
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_task_region__Z13non_pod_arrayi
; CHECK-SAME: (ptr [[TASK_ARGS:%.*]], ptr [[DEVICE_ENV:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_VLA:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z13NON_POD_ARRAYI:%.*]], ptr [[TASK_ARGS]], i32 0, i32 0
; CHECK-NEXT:    [[LOAD_GEP_VLA:%.*]] = load ptr, ptr [[GEP_VLA]], align 8
; CHECK-NEXT:    [[CAPT_GEP:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z13NON_POD_ARRAYI]], ptr [[TASK_ARGS]], i32 0, i32 1
; CHECK-NEXT:    [[LOAD_CAPT_GEP:%.*]] = load i64, ptr [[CAPT_GEP]], align 8
; CHECK-NEXT:    [[TMP0:%.*]] = icmp ne ptr [[ADDRESS_TRANSLATION_TABLE]], null
; CHECK-NEXT:    br i1 [[TMP0]], label [[TMP1:%.*]], label [[TMP2:%.*]]
; CHECK:       1:
; CHECK-NEXT:    br label [[TMP2]]
; CHECK:       2:
; CHECK-NEXT:    call void @nanos6_unpacked_task_region__Z13non_pod_arrayi(ptr [[LOAD_GEP_VLA]], i64 [[LOAD_CAPT_GEP]], ptr [[DEVICE_ENV]], ptr [[ADDRESS_TRANSLATION_TABLE]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_unpacked_destroy__Z13non_pod_arrayi.15
; CHECK-SAME: (ptr [[VLA:%.*]], i64 [[TMP0:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP1:%.*]] = mul nuw i64 1, [[TMP0]]
; CHECK-NEXT:    call void @oss_dtor_ZN1SD1Ev(ptr [[VLA]], i64 [[TMP1]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_destroy__Z13non_pod_arrayi.16
; CHECK-SAME: (ptr [[TASK_ARGS:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_VLA:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z13NON_POD_ARRAYI_1:%.*]], ptr [[TASK_ARGS]], i32 0, i32 0
; CHECK-NEXT:    [[LOAD_GEP_VLA:%.*]] = load ptr, ptr [[GEP_VLA]], align 8
; CHECK-NEXT:    [[CAPT_GEP:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z13NON_POD_ARRAYI_1]], ptr [[TASK_ARGS]], i32 0, i32 1
; CHECK-NEXT:    [[LOAD_CAPT_GEP:%.*]] = load i64, ptr [[CAPT_GEP]], align 8
; CHECK-NEXT:    call void @nanos6_unpacked_destroy__Z13non_pod_arrayi.15(ptr [[LOAD_GEP_VLA]], i64 [[LOAD_CAPT_GEP]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_duplicate__Z13non_pod_arrayi.17
; CHECK-SAME: (ptr [[TASK_ARGS_SRC:%.*]], ptr [[TASK_ARGS_DST:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[TASK_ARGS_DST]], align 8
; CHECK-NEXT:    [[ARGS_END:%.*]] = getelementptr i8, ptr [[TMP0]], i64 16
; CHECK-NEXT:    [[GEP_DST_VLA:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z13NON_POD_ARRAYI_1:%.*]], ptr [[TMP0]], i32 0, i32 0
; CHECK-NEXT:    store ptr [[ARGS_END]], ptr [[GEP_DST_VLA]], align 8
; CHECK-NEXT:    [[GEP_DST_:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z13NON_POD_ARRAYI_1]], ptr [[TMP0]], i32 0, i32 1
; CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr [[GEP_DST_]], align 8
; CHECK-NEXT:    [[TMP2:%.*]] = mul nuw i64 4, [[TMP1]]
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[ARGS_END]], i64 [[TMP2]]
; CHECK-NEXT:    [[GEP_SRC_:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z13NON_POD_ARRAYI_1]], ptr [[TASK_ARGS_SRC]], i32 0, i32 1
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[GEP_SRC_]], align 8
; CHECK-NEXT:    [[TMP5:%.*]] = mul nuw i64 1, [[TMP4]]
; CHECK-NEXT:    [[GEP_SRC_VLA:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z13NON_POD_ARRAYI_1]], ptr [[TASK_ARGS_SRC]], i32 0, i32 0
; CHECK-NEXT:    [[GEP_DST_VLA1:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z13NON_POD_ARRAYI_1]], ptr [[TMP0]], i32 0, i32 0
; CHECK-NEXT:    [[TMP6:%.*]] = load ptr, ptr [[GEP_SRC_VLA]], align 8
; CHECK-NEXT:    [[TMP7:%.*]] = load ptr, ptr [[GEP_DST_VLA1]], align 8
; CHECK-NEXT:    call void @oss_copy_ctor_ZN1SC1ERKS_(ptr [[TMP6]], ptr [[TMP7]], i64 [[TMP5]])
; CHECK-NEXT:    [[CAPT_GEP_SRC_:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z13NON_POD_ARRAYI_1]], ptr [[TASK_ARGS_SRC]], i32 0, i32 1
; CHECK-NEXT:    [[CAPT_GEP_DST_:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z13NON_POD_ARRAYI_1]], ptr [[TMP0]], i32 0, i32 1
; CHECK-NEXT:    [[TMP8:%.*]] = load i64, ptr [[CAPT_GEP_SRC_]], align 8
; CHECK-NEXT:    store i64 [[TMP8]], ptr [[CAPT_GEP_DST_]], align 8
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_unpacked_task_region__Z13non_pod_arrayi.18
; CHECK-SAME: (ptr [[VLA:%.*]], i64 [[TMP0:%.*]], ptr [[DEVICE_ENV:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) !dbg [[DBG40:![0-9]+]] {
; CHECK-NEXT:  newFuncRoot:
; CHECK-NEXT:    br label [[TMP1:%.*]], !dbg [[DBG41:![0-9]+]]
; CHECK:       1:
; CHECK-NEXT:    br label [[DOTEXITSTUB:%.*]], !dbg [[DBG42:![0-9]+]]
; CHECK:       .exitStub:
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_task_region__Z13non_pod_arrayi.19
; CHECK-SAME: (ptr [[TASK_ARGS:%.*]], ptr [[DEVICE_ENV:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_VLA:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z13NON_POD_ARRAYI_1:%.*]], ptr [[TASK_ARGS]], i32 0, i32 0
; CHECK-NEXT:    [[LOAD_GEP_VLA:%.*]] = load ptr, ptr [[GEP_VLA]], align 8
; CHECK-NEXT:    [[CAPT_GEP:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z13NON_POD_ARRAYI_1]], ptr [[TASK_ARGS]], i32 0, i32 1
; CHECK-NEXT:    [[LOAD_CAPT_GEP:%.*]] = load i64, ptr [[CAPT_GEP]], align 8
; CHECK-NEXT:    [[TMP0:%.*]] = icmp ne ptr [[ADDRESS_TRANSLATION_TABLE]], null
; CHECK-NEXT:    br i1 [[TMP0]], label [[TMP1:%.*]], label [[TMP2:%.*]]
; CHECK:       1:
; CHECK-NEXT:    br label [[TMP2]]
; CHECK:       2:
; CHECK-NEXT:    call void @nanos6_unpacked_task_region__Z13non_pod_arrayi.18(ptr [[LOAD_GEP_VLA]], i64 [[LOAD_CAPT_GEP]], ptr [[DEVICE_ENV]], ptr [[ADDRESS_TRANSLATION_TABLE]])
; CHECK-NEXT:    ret void
;
