; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --function-signature --include-generated-funcs
; RUN: opt %s -passes=ompss-2 -S | FileCheck %s
; ModuleID = 'taskiter_while_final_nesting.ll'
source_filename = "taskiter_while_final_nesting.ll"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Check taskiter final code with nesting

; Function Attrs: mustprogress noinline nounwind optnone
define dso_local zeroext i1 @_Z12compute_condv() #0 !dbg !5 {
entry:
  ret i1 true, !dbg !9
}

; Function Attrs: mustprogress noinline norecurse nounwind optnone
define dso_local i32 @main() #1 !dbg !10 {
entry:
  %i = alloca i32, align 4
  store i32 0, ptr %i, align 4, !dbg !11
  %0 = call token @llvm.directive.region.entry() [
  "DIR.OSS"([13 x i8] c"TASKITER.FOR\00"),
  "QUAL.OSS.FIRSTPRIVATE"(ptr %i, i32 undef),
  "QUAL.OSS.LOOP.IND.VAR"(ptr %i),
  "QUAL.OSS.LOOP.LOWER.BOUND"(ptr @compute_lb),
  "QUAL.OSS.LOOP.UPPER.BOUND"(ptr @compute_ub),
  "QUAL.OSS.LOOP.STEP"(ptr @compute_step),
  "QUAL.OSS.LOOP.TYPE"(i64 0, i64 1, i64 1, i64 1, i64 1) ], !dbg !12
  %1 = call token @llvm.directive.region.entry() [
  "DIR.OSS"([15 x i8] c"TASKITER.WHILE\00"),
  "QUAL.OSS.FIRSTPRIVATE"(ptr %i, i32 undef),
  "QUAL.OSS.WHILE.COND"(i1 ()* @_Z12compute_condv) ], !dbg !12
  call void @llvm.directive.region.exit(token %1), !dbg !13
  call void @llvm.directive.region.exit(token %0), !dbg !13
  ret i32 0, !dbg !15
}

; Function Attrs: nounwind
declare token @llvm.directive.region.entry() #2

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token) #2

define internal i32 @compute_lb() #3 !dbg !16 {
entry:
  ret i32 0, !dbg !17
}

define internal i32 @compute_ub() #3 !dbg !19 {
entry:
  ret i32 10, !dbg !20
}

define internal i32 @compute_step() #3 !dbg !22 {
entry:
  ret i32 1, !dbg !23
}



; Function Attrs: nounwind
declare i1 @llvm.directive.marker() #2

attributes #0 = { mustprogress noinline nounwind optnone "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
attributes #1 = { mustprogress noinline norecurse nounwind optnone "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
attributes #2 = { nounwind }
attributes #3 = { "min-legal-vector-width"="0" }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus_14, file: !1, producer: "human", isOptimized: false, runtimeVersion: 0, emissionKind: NoDebug, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "<stdin>", directory: "")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 1, !"wchar_size", i32 4}
!4 = !{!"clang version 14.0.0"}
!5 = distinct !DISubprogram(name: "compute_cond", scope: !6, file: !6, line: 1, type: !7, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !8)
!6 = !DIFile(filename: "taskiter_while_final_nesting.ll", directory: "")
!7 = !DISubroutineType(types: !8)
!8 = !{}
!9 = !DILocation(line: 1, column: 23, scope: !5)
!10 = distinct !DISubprogram(name: "main", scope: !6, file: !6, line: 2, type: !7, scopeLine: 2, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !8)
!11 = !DILocation(line: 4, column: 14, scope: !10)
!12 = !DILocation(line: 4, column: 10, scope: !10)
!13 = !DILocation(line: 5, column: 5, scope: !10)
!14 = !DILocation(line: 6, column: 13, scope: !10)
!15 = !DILocation(line: 7, column: 1, scope: !10)
!16 = distinct !DISubprogram(linkageName: "compute_lb", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!17 = !DILocation(line: 4, column: 18, scope: !18)
!18 = !DILexicalBlockFile(scope: !16, file: !6, discriminator: 0)
!19 = distinct !DISubprogram(linkageName: "compute_ub", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!20 = !DILocation(line: 4, column: 25, scope: !21)
!21 = !DILexicalBlockFile(scope: !19, file: !6, discriminator: 0)
!22 = distinct !DISubprogram(linkageName: "compute_step", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!23 = !DILocation(line: 4, column: 29, scope: !24)
!24 = !DILexicalBlockFile(scope: !22, file: !6, discriminator: 0)







; CHECK-LABEL: define {{[^@]+}}@_Z12compute_condv
; CHECK-SAME: () #[[ATTR0:[0-9]+]] !dbg [[DBG5:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret i1 true, !dbg [[DBG9:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@main
; CHECK-SAME: () #[[ATTR1:[0-9]+]] !dbg [[DBG10:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[I:%.*]] = alloca i32, align 4
; CHECK-NEXT:    store i32 0, ptr [[I]], align 4, !dbg [[DBG11:![0-9]+]]
; CHECK-NEXT:    [[TMP0:%.*]] = alloca ptr, align 8, !dbg [[DBG12:![0-9]+]]
; CHECK-NEXT:    [[TMP1:%.*]] = alloca ptr, align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[NUM_DEPS8:%.*]] = alloca i64, align 8, !dbg [[DBG12]]
; CHECK-NEXT:    br label [[FINAL_COND5:%.*]], !dbg [[DBG12]]
; CHECK:       codeRepl7:
; CHECK-NEXT:    store i64 0, ptr [[NUM_DEPS8]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP2:%.*]] = load i64, ptr [[NUM_DEPS8]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP3:%.*]] = call i32 @compute_lb(), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP4:%.*]] = call i32 @compute_ub(), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP5:%.*]] = call i32 @compute_step(), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP6:%.*]] = sub i32 [[TMP4]], [[TMP3]], !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP7:%.*]] = sub i32 [[TMP6]], 1, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP8:%.*]] = sdiv i32 [[TMP7]], [[TMP5]], !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP9:%.*]] = add i32 [[TMP8]], 1, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP10:%.*]] = sext i32 [[TMP9]] to i64, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP11:%.*]] = mul i64 1, [[TMP10]], !dbg [[DBG12]]
; CHECK-NEXT:    call void @nanos6_create_iter(ptr @task_info_var_main.10, ptr @task_invocation_info_main.6, ptr null, i64 16, ptr [[TMP0]], ptr [[TMP1]], i64 128, i64 [[TMP2]], i64 0, i64 [[TMP11]], i64 0), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP12:%.*]] = load ptr, ptr [[TMP0]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[ARGS_END9:%.*]] = getelementptr i8, ptr [[TMP12]], i64 16, !dbg [[DBG12]]
; CHECK-NEXT:    [[GEP_I10:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN_0:%.*]], ptr [[TMP12]], i32 0, i32 0, !dbg [[DBG12]]
; CHECK-NEXT:    call void @llvm.memcpy.p0.p0.i64(ptr align 4 [[GEP_I10]], ptr align 4 [[I]], i64 4, i1 false), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP13:%.*]] = load ptr, ptr [[TMP1]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    call void @nanos6_submit_task(ptr [[TMP13]]), !dbg [[DBG12]]
; CHECK-NEXT:    br label [[FINAL_END4:%.*]], !dbg [[DBG12]]
; CHECK:       final.end4:
; CHECK-NEXT:    ret i32 0, !dbg [[DBG13:![0-9]+]]
; CHECK:       final.then6:
; CHECK-NEXT:    [[TMP14:%.*]] = call i32 @compute_lb(), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP15:%.*]] = call i32 @compute_ub(), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP16:%.*]] = call i32 @compute_step(), !dbg [[DBG12]]
; CHECK-NEXT:    store i32 [[TMP14]], ptr [[I]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    br label [[FOR_COND:%.*]], !dbg [[DBG12]]
; CHECK:       for.cond:
; CHECK-NEXT:    [[TMP17:%.*]] = load i32, ptr [[I]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP18:%.*]] = icmp slt i32 [[TMP17]], [[TMP15]], !dbg [[DBG12]]
; CHECK-NEXT:    br i1 [[TMP18]], label [[TMP19:%.*]], label [[FOR_END:%.*]], !dbg [[DBG12]]
; CHECK:       19:
; CHECK-NEXT:    br label [[FOR_BODY:%.*]], !dbg [[DBG12]]
; CHECK:       for.body:
; CHECK-NEXT:    br label [[TMP20:%.*]], !dbg [[DBG12]]
; CHECK:       20:
; CHECK-NEXT:    br label [[WHILE_COND1:%.*]], !dbg [[DBG12]]
; CHECK:       while.cond1:
; CHECK-NEXT:    [[TMP21:%.*]] = call i1 @_Z12compute_condv(), !dbg [[DBG12]]
; CHECK-NEXT:    br i1 [[TMP21]], label [[WHILE_BODY2:%.*]], label [[WHILE_END3:%.*]], !dbg [[DBG12]]
; CHECK:       while.body2:
; CHECK-NEXT:    br label [[WHILE_COND1]], !dbg [[DBG14:![0-9]+]]
; CHECK:       22:
; CHECK-NEXT:    br label [[FOR_INCR:%.*]], !dbg [[DBG13]]
; CHECK:       while.end3:
; CHECK-NEXT:    br label [[TMP22:%.*]], !dbg [[DBG12]]
; CHECK:       for.end:
; CHECK-NEXT:    br label [[FINAL_END4]], !dbg [[DBG12]]
; CHECK:       for.incr:
; CHECK-NEXT:    [[TMP23:%.*]] = load i32, ptr [[I]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP24:%.*]] = add i32 [[TMP23]], [[TMP16]], !dbg [[DBG12]]
; CHECK-NEXT:    store i32 [[TMP24]], ptr [[I]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    br label [[FOR_COND]], !dbg [[DBG12]]
; CHECK:       final.cond5:
; CHECK-NEXT:    [[TMP25:%.*]] = call i32 @nanos6_in_final(), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP26:%.*]] = icmp ne i32 [[TMP25]], 0, !dbg [[DBG12]]
; CHECK-NEXT:    br i1 [[TMP26]], label [[FINAL_THEN6:%.*]], label [[CODEREPL7:%.*]], !dbg [[DBG12]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_lb
; CHECK-SAME: () #[[ATTR3:[0-9]+]] !dbg [[DBG15:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret i32 0, !dbg [[DBG16:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_ub
; CHECK-SAME: () #[[ATTR3]] !dbg [[DBG18:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret i32 10, !dbg [[DBG19:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_step
; CHECK-SAME: () #[[ATTR3]] !dbg [[DBG21:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret i32 1, !dbg [[DBG22:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_unpacked_task_region_main
; CHECK-SAME: (ptr [[I:%.*]], ptr [[DEVICE_ENV:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) !dbg [[DBG24:![0-9]+]] {
; CHECK-NEXT:  newFuncRoot:
; CHECK-NEXT:    br label [[TMP0:%.*]], !dbg [[DBG25:![0-9]+]]
; CHECK:       0:
; CHECK-NEXT:    br label [[DOTEXITSTUB:%.*]], !dbg [[DBG26:![0-9]+]]
; CHECK:       .exitStub:
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_task_region_main
; CHECK-SAME: (ptr [[TASK_ARGS:%.*]], ptr [[DEVICE_ENV:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_I:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN:%.*]], ptr [[TASK_ARGS]], i32 0, i32 0
; CHECK-NEXT:    [[TMP0:%.*]] = icmp ne ptr [[ADDRESS_TRANSLATION_TABLE]], null
; CHECK-NEXT:    br i1 [[TMP0]], label [[TMP1:%.*]], label [[TMP2:%.*]]
; CHECK:       1:
; CHECK-NEXT:    br label [[TMP2]]
; CHECK:       2:
; CHECK-NEXT:    call void @nanos6_unpacked_task_region_main(ptr [[GEP_I]], ptr [[DEVICE_ENV]], ptr [[ADDRESS_TRANSLATION_TABLE]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_unpacked_while_cond_main
; CHECK-SAME: (ptr [[I:%.*]], ptr [[RESULT:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = call i1 @_Z12compute_condv()
; CHECK-NEXT:    [[TMP1:%.*]] = zext i1 [[TMP0]] to i8
; CHECK-NEXT:    store i8 [[TMP1]], ptr [[RESULT]], align 1
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_while_cond_main
; CHECK-SAME: (ptr [[TASK_ARGS:%.*]], ptr [[RESULT:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_I:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN:%.*]], ptr [[TASK_ARGS]], i32 0, i32 0
; CHECK-NEXT:    call void @nanos6_unpacked_while_cond_main(ptr [[GEP_I]], ptr [[RESULT]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_constructor_register_task_info() {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @nanos6_register_task_info(ptr @task_info_var_main)
; CHECK-NEXT:    call void @nanos6_register_task_info(ptr @task_info_var_main.10)
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_unpacked_task_region_main.4
; CHECK-SAME: (ptr [[I:%.*]], ptr [[DEVICE_ENV:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) !dbg [[DBG27:![0-9]+]] {
; CHECK-NEXT:  newFuncRoot:
; CHECK-NEXT:    [[TMP0:%.*]] = alloca ptr, align 8, !dbg [[DBG28:![0-9]+]]
; CHECK-NEXT:    [[TMP1:%.*]] = alloca ptr, align 8, !dbg [[DBG28]]
; CHECK-NEXT:    [[NUM_DEPS:%.*]] = alloca i64, align 8, !dbg [[DBG28]]
; CHECK-NEXT:    br label [[TMP2:%.*]], !dbg [[DBG28]]
; CHECK:       2:
; CHECK-NEXT:    br label [[FINAL_COND:%.*]], !dbg [[DBG28]]
; CHECK:       final.cond:
; CHECK-NEXT:    [[TMP3:%.*]] = call i32 @nanos6_in_final(), !dbg [[DBG28]]
; CHECK-NEXT:    [[TMP4:%.*]] = icmp ne i32 [[TMP3]], 0, !dbg [[DBG28]]
; CHECK-NEXT:    br i1 [[TMP4]], label [[FINAL_THEN:%.*]], label [[CODEREPL:%.*]], !dbg [[DBG28]]
; CHECK:       final.then:
; CHECK-NEXT:    br label [[WHILE_COND:%.*]], !dbg [[DBG28]]
; CHECK:       codeRepl:
; CHECK-NEXT:    store i64 0, ptr [[NUM_DEPS]], align 8, !dbg [[DBG28]]
; CHECK-NEXT:    [[TMP5:%.*]] = load i64, ptr [[NUM_DEPS]], align 8, !dbg [[DBG28]]
; CHECK-NEXT:    call void @nanos6_create_iter(ptr @task_info_var_main, ptr @task_invocation_info_main, ptr null, i64 16, ptr [[TMP0]], ptr [[TMP1]], i64 128, i64 [[TMP5]], i64 0, i64 1, i64 0), !dbg [[DBG28]]
; CHECK-NEXT:    [[TMP6:%.*]] = load ptr, ptr [[TMP0]], align 8, !dbg [[DBG28]]
; CHECK-NEXT:    [[ARGS_END:%.*]] = getelementptr i8, ptr [[TMP6]], i64 16, !dbg [[DBG28]]
; CHECK-NEXT:    [[GEP_I:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN:%.*]], ptr [[TMP6]], i32 0, i32 0, !dbg [[DBG28]]
; CHECK-NEXT:    call void @llvm.memcpy.p0.p0.i64(ptr align 4 [[GEP_I]], ptr align 4 [[I]], i64 4, i1 false), !dbg [[DBG28]]
; CHECK-NEXT:    [[TMP7:%.*]] = load ptr, ptr [[TMP1]], align 8, !dbg [[DBG28]]
; CHECK-NEXT:    call void @nanos6_submit_task(ptr [[TMP7]]), !dbg [[DBG28]]
; CHECK-NEXT:    br label [[FINAL_END:%.*]], !dbg [[DBG28]]
; CHECK:       while.cond:
; CHECK-NEXT:    [[TMP8:%.*]] = call i1 @_Z12compute_condv(), !dbg [[DBG28]]
; CHECK-NEXT:    br i1 [[TMP8]], label [[WHILE_BODY:%.*]], label [[WHILE_END:%.*]], !dbg [[DBG28]]
; CHECK:       final.end:
; CHECK-NEXT:    [[TMP9:%.*]] = load i32, ptr [[I]], align 4, !dbg [[DBG29:![0-9]+]]
; CHECK-NEXT:    [[TMP10:%.*]] = call i32 @compute_step(), !dbg [[DBG29]]
; CHECK-NEXT:    [[TMP11:%.*]] = add i32 [[TMP9]], [[TMP10]], !dbg [[DBG29]]
; CHECK-NEXT:    store i32 [[TMP11]], ptr [[I]], align 4, !dbg [[DBG29]]
; CHECK-NEXT:    br label [[DOTEXITSTUB:%.*]], !dbg [[DBG30:![0-9]+]]
; CHECK:       while.body:
; CHECK-NEXT:    br label [[WHILE_COND]], !dbg [[DBG29]]
; CHECK:       while.end:
; CHECK-NEXT:    br label [[FINAL_END]], !dbg [[DBG28]]
; CHECK:       .exitStub:
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_task_region_main.5
; CHECK-SAME: (ptr [[TASK_ARGS:%.*]], ptr [[DEVICE_ENV:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_I:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN_0:%.*]], ptr [[TASK_ARGS]], i32 0, i32 0
; CHECK-NEXT:    [[TMP0:%.*]] = icmp ne ptr [[ADDRESS_TRANSLATION_TABLE]], null
; CHECK-NEXT:    br i1 [[TMP0]], label [[TMP1:%.*]], label [[TMP2:%.*]]
; CHECK:       1:
; CHECK-NEXT:    br label [[TMP2]]
; CHECK:       2:
; CHECK-NEXT:    call void @nanos6_unpacked_task_region_main.4(ptr [[GEP_I]], ptr [[DEVICE_ENV]], ptr [[ADDRESS_TRANSLATION_TABLE]])
; CHECK-NEXT:    ret void
;
