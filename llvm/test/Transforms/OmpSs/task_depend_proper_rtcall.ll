; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --function-signature --include-generated-funcs
; RUN: opt %s -passes=ompss-2 -S | FileCheck %s
; ModuleID = 'task_depend_proper_rtcall.c'
source_filename = "task_depend_proper_rtcall.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; struct S {
;     int x;
; } s;
; int array[10][20];
; int main() {
;     int n;
;     #pragma oss task in(array, array, array)
;     {}
;     #pragma oss task in(s.x, s.x, s.x)
;     {}
;     #pragma oss task in(n, n, n)
;     {}
; }

%struct.S = type { i32 }
%struct._depend_unpack_t = type { ptr, i64, i64, i64, i64, i64, i64 }
%struct._depend_unpack_t.0 = type { ptr, i64, i64, i64, i64, i64, i64 }
%struct._depend_unpack_t.1 = type { ptr, i64, i64, i64, i64, i64, i64 }
%struct._depend_unpack_t.2 = type { ptr, i64, i64, i64 }
%struct._depend_unpack_t.3 = type { ptr, i64, i64, i64 }
%struct._depend_unpack_t.4 = type { ptr, i64, i64, i64 }
%struct._depend_unpack_t.5 = type { ptr, i64, i64, i64 }
%struct._depend_unpack_t.6 = type { ptr, i64, i64, i64 }
%struct._depend_unpack_t.7 = type { ptr, i64, i64, i64 }

@array = global [10 x [20 x i32]] zeroinitializer, align 16
@s = global %struct.S zeroinitializer, align 4

; Function Attrs: noinline nounwind optnone
define dso_local i32 @main() #0 !dbg !5 {
entry:
  %n = alloca i32, align 4
  %0 = call token @llvm.directive.region.entry() [ "DIR.OSS"([5 x i8] c"TASK\00"), "QUAL.OSS.SHARED"(ptr @array, [10 x [20 x i32]] undef), "QUAL.OSS.DEP.IN"(ptr @array, [6 x i8] c"array\00", ptr @compute_dep, ptr @array), "QUAL.OSS.DEP.IN"(ptr @array, [6 x i8] c"array\00", ptr @compute_dep.1, ptr @array), "QUAL.OSS.DEP.IN"(ptr @array, [6 x i8] c"array\00", ptr @compute_dep.2, ptr @array) ], !dbg !9
  call void @llvm.directive.region.exit(token %0), !dbg !10
  %1 = call token @llvm.directive.region.entry() [ "DIR.OSS"([5 x i8] c"TASK\00"), "QUAL.OSS.SHARED"(ptr @s, %struct.S undef), "QUAL.OSS.DEP.IN"(ptr @s, [4 x i8] c"s.x\00", ptr @compute_dep.3, ptr @s), "QUAL.OSS.DEP.IN"(ptr @s, [4 x i8] c"s.x\00", ptr @compute_dep.4, ptr @s), "QUAL.OSS.DEP.IN"(ptr @s, [4 x i8] c"s.x\00", ptr @compute_dep.5, ptr @s) ], !dbg !11
  call void @llvm.directive.region.exit(token %1), !dbg !12
  %2 = call token @llvm.directive.region.entry() [ "DIR.OSS"([5 x i8] c"TASK\00"), "QUAL.OSS.SHARED"(ptr %n, i32 undef), "QUAL.OSS.DEP.IN"(ptr %n, [2 x i8] c"n\00", ptr @compute_dep.6, ptr %n), "QUAL.OSS.DEP.IN"(ptr %n, [2 x i8] c"n\00", ptr @compute_dep.7, ptr %n), "QUAL.OSS.DEP.IN"(ptr %n, [2 x i8] c"n\00", ptr @compute_dep.8, ptr %n) ], !dbg !13
  call void @llvm.directive.region.exit(token %2), !dbg !14
  ret i32 0, !dbg !15
}

; Function Attrs: nounwind
declare token @llvm.directive.region.entry() #1

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token) #1

define internal %struct._depend_unpack_t @compute_dep(ptr %array) #2 !dbg !16 {
entry:
  %retval = alloca %struct._depend_unpack_t, align 8
  %array.addr = alloca ptr, align 8
  store ptr %array, ptr %array.addr, align 8
  %0 = getelementptr inbounds %struct._depend_unpack_t, ptr %retval, i32 0, i32 0
  store ptr %array, ptr %0, align 8
  %1 = getelementptr inbounds %struct._depend_unpack_t, ptr %retval, i32 0, i32 1
  store i64 80, ptr %1, align 8
  %2 = getelementptr inbounds %struct._depend_unpack_t, ptr %retval, i32 0, i32 2
  store i64 0, ptr %2, align 8
  %3 = getelementptr inbounds %struct._depend_unpack_t, ptr %retval, i32 0, i32 3
  store i64 80, ptr %3, align 8
  %4 = getelementptr inbounds %struct._depend_unpack_t, ptr %retval, i32 0, i32 4
  store i64 10, ptr %4, align 8
  %5 = getelementptr inbounds %struct._depend_unpack_t, ptr %retval, i32 0, i32 5
  store i64 0, ptr %5, align 8
  %6 = getelementptr inbounds %struct._depend_unpack_t, ptr %retval, i32 0, i32 6
  store i64 10, ptr %6, align 8
  %7 = load %struct._depend_unpack_t, ptr %retval, align 8
  ret %struct._depend_unpack_t %7
}

define internal %struct._depend_unpack_t.0 @compute_dep.1(ptr %array) #2 !dbg !17 {
entry:
  %retval = alloca %struct._depend_unpack_t.0, align 8
  %array.addr = alloca ptr, align 8
  store ptr %array, ptr %array.addr, align 8
  %0 = getelementptr inbounds %struct._depend_unpack_t.0, ptr %retval, i32 0, i32 0
  store ptr %array, ptr %0, align 8
  %1 = getelementptr inbounds %struct._depend_unpack_t.0, ptr %retval, i32 0, i32 1
  store i64 80, ptr %1, align 8
  %2 = getelementptr inbounds %struct._depend_unpack_t.0, ptr %retval, i32 0, i32 2
  store i64 0, ptr %2, align 8
  %3 = getelementptr inbounds %struct._depend_unpack_t.0, ptr %retval, i32 0, i32 3
  store i64 80, ptr %3, align 8
  %4 = getelementptr inbounds %struct._depend_unpack_t.0, ptr %retval, i32 0, i32 4
  store i64 10, ptr %4, align 8
  %5 = getelementptr inbounds %struct._depend_unpack_t.0, ptr %retval, i32 0, i32 5
  store i64 0, ptr %5, align 8
  %6 = getelementptr inbounds %struct._depend_unpack_t.0, ptr %retval, i32 0, i32 6
  store i64 10, ptr %6, align 8
  %7 = load %struct._depend_unpack_t.0, ptr %retval, align 8
  ret %struct._depend_unpack_t.0 %7
}

define internal %struct._depend_unpack_t.1 @compute_dep.2(ptr %array) #2 !dbg !18 {
entry:
  %retval = alloca %struct._depend_unpack_t.1, align 8
  %array.addr = alloca ptr, align 8
  store ptr %array, ptr %array.addr, align 8
  %0 = getelementptr inbounds %struct._depend_unpack_t.1, ptr %retval, i32 0, i32 0
  store ptr %array, ptr %0, align 8
  %1 = getelementptr inbounds %struct._depend_unpack_t.1, ptr %retval, i32 0, i32 1
  store i64 80, ptr %1, align 8
  %2 = getelementptr inbounds %struct._depend_unpack_t.1, ptr %retval, i32 0, i32 2
  store i64 0, ptr %2, align 8
  %3 = getelementptr inbounds %struct._depend_unpack_t.1, ptr %retval, i32 0, i32 3
  store i64 80, ptr %3, align 8
  %4 = getelementptr inbounds %struct._depend_unpack_t.1, ptr %retval, i32 0, i32 4
  store i64 10, ptr %4, align 8
  %5 = getelementptr inbounds %struct._depend_unpack_t.1, ptr %retval, i32 0, i32 5
  store i64 0, ptr %5, align 8
  %6 = getelementptr inbounds %struct._depend_unpack_t.1, ptr %retval, i32 0, i32 6
  store i64 10, ptr %6, align 8
  %7 = load %struct._depend_unpack_t.1, ptr %retval, align 8
  ret %struct._depend_unpack_t.1 %7
}

define internal %struct._depend_unpack_t.2 @compute_dep.3(ptr %s) #2 !dbg !19 {
entry:
  %retval = alloca %struct._depend_unpack_t.2, align 8
  %s.addr = alloca ptr, align 8
  store ptr %s, ptr %s.addr, align 8
  %x = getelementptr inbounds %struct.S, ptr %s, i32 0, i32 0
  %0 = getelementptr inbounds %struct._depend_unpack_t.2, ptr %retval, i32 0, i32 0
  store ptr %x, ptr %0, align 8
  %1 = getelementptr inbounds %struct._depend_unpack_t.2, ptr %retval, i32 0, i32 1
  store i64 4, ptr %1, align 8
  %2 = getelementptr inbounds %struct._depend_unpack_t.2, ptr %retval, i32 0, i32 2
  store i64 0, ptr %2, align 8
  %3 = getelementptr inbounds %struct._depend_unpack_t.2, ptr %retval, i32 0, i32 3
  store i64 4, ptr %3, align 8
  %4 = load %struct._depend_unpack_t.2, ptr %retval, align 8, !dbg !20
  ret %struct._depend_unpack_t.2 %4, !dbg !20
}

define internal %struct._depend_unpack_t.3 @compute_dep.4(ptr %s) #2 !dbg !22 {
entry:
  %retval = alloca %struct._depend_unpack_t.3, align 8
  %s.addr = alloca ptr, align 8
  store ptr %s, ptr %s.addr, align 8
  %x = getelementptr inbounds %struct.S, ptr %s, i32 0, i32 0
  %0 = getelementptr inbounds %struct._depend_unpack_t.3, ptr %retval, i32 0, i32 0
  store ptr %x, ptr %0, align 8
  %1 = getelementptr inbounds %struct._depend_unpack_t.3, ptr %retval, i32 0, i32 1
  store i64 4, ptr %1, align 8
  %2 = getelementptr inbounds %struct._depend_unpack_t.3, ptr %retval, i32 0, i32 2
  store i64 0, ptr %2, align 8
  %3 = getelementptr inbounds %struct._depend_unpack_t.3, ptr %retval, i32 0, i32 3
  store i64 4, ptr %3, align 8
  %4 = load %struct._depend_unpack_t.3, ptr %retval, align 8, !dbg !23
  ret %struct._depend_unpack_t.3 %4, !dbg !23
}

define internal %struct._depend_unpack_t.4 @compute_dep.5(ptr %s) #2 !dbg !25 {
entry:
  %retval = alloca %struct._depend_unpack_t.4, align 8
  %s.addr = alloca ptr, align 8
  store ptr %s, ptr %s.addr, align 8
  %x = getelementptr inbounds %struct.S, ptr %s, i32 0, i32 0
  %0 = getelementptr inbounds %struct._depend_unpack_t.4, ptr %retval, i32 0, i32 0
  store ptr %x, ptr %0, align 8
  %1 = getelementptr inbounds %struct._depend_unpack_t.4, ptr %retval, i32 0, i32 1
  store i64 4, ptr %1, align 8
  %2 = getelementptr inbounds %struct._depend_unpack_t.4, ptr %retval, i32 0, i32 2
  store i64 0, ptr %2, align 8
  %3 = getelementptr inbounds %struct._depend_unpack_t.4, ptr %retval, i32 0, i32 3
  store i64 4, ptr %3, align 8
  %4 = load %struct._depend_unpack_t.4, ptr %retval, align 8, !dbg !26
  ret %struct._depend_unpack_t.4 %4, !dbg !26
}

define internal %struct._depend_unpack_t.5 @compute_dep.6(ptr %n) #2 !dbg !28 {
entry:
  %retval = alloca %struct._depend_unpack_t.5, align 8
  %n.addr = alloca ptr, align 8
  store ptr %n, ptr %n.addr, align 8
  %0 = getelementptr inbounds %struct._depend_unpack_t.5, ptr %retval, i32 0, i32 0
  store ptr %n, ptr %0, align 8
  %1 = getelementptr inbounds %struct._depend_unpack_t.5, ptr %retval, i32 0, i32 1
  store i64 4, ptr %1, align 8
  %2 = getelementptr inbounds %struct._depend_unpack_t.5, ptr %retval, i32 0, i32 2
  store i64 0, ptr %2, align 8
  %3 = getelementptr inbounds %struct._depend_unpack_t.5, ptr %retval, i32 0, i32 3
  store i64 4, ptr %3, align 8
  %4 = load %struct._depend_unpack_t.5, ptr %retval, align 8
  ret %struct._depend_unpack_t.5 %4
}

define internal %struct._depend_unpack_t.6 @compute_dep.7(ptr %n) #2 !dbg !29 {
entry:
  %retval = alloca %struct._depend_unpack_t.6, align 8
  %n.addr = alloca ptr, align 8
  store ptr %n, ptr %n.addr, align 8
  %0 = getelementptr inbounds %struct._depend_unpack_t.6, ptr %retval, i32 0, i32 0
  store ptr %n, ptr %0, align 8
  %1 = getelementptr inbounds %struct._depend_unpack_t.6, ptr %retval, i32 0, i32 1
  store i64 4, ptr %1, align 8
  %2 = getelementptr inbounds %struct._depend_unpack_t.6, ptr %retval, i32 0, i32 2
  store i64 0, ptr %2, align 8
  %3 = getelementptr inbounds %struct._depend_unpack_t.6, ptr %retval, i32 0, i32 3
  store i64 4, ptr %3, align 8
  %4 = load %struct._depend_unpack_t.6, ptr %retval, align 8
  ret %struct._depend_unpack_t.6 %4
}

define internal %struct._depend_unpack_t.7 @compute_dep.8(ptr %n) #2 !dbg !30 {
entry:
  %retval = alloca %struct._depend_unpack_t.7, align 8
  %n.addr = alloca ptr, align 8
  store ptr %n, ptr %n.addr, align 8
  %0 = getelementptr inbounds %struct._depend_unpack_t.7, ptr %retval, i32 0, i32 0
  store ptr %n, ptr %0, align 8
  %1 = getelementptr inbounds %struct._depend_unpack_t.7, ptr %retval, i32 0, i32 1
  store i64 4, ptr %1, align 8
  %2 = getelementptr inbounds %struct._depend_unpack_t.7, ptr %retval, i32 0, i32 2
  store i64 0, ptr %2, align 8
  %3 = getelementptr inbounds %struct._depend_unpack_t.7, ptr %retval, i32 0, i32 3
  store i64 4, ptr %3, align 8
  %4 = load %struct._depend_unpack_t.7, ptr %retval, align 8
  ret %struct._depend_unpack_t.7 %4
}

attributes #0 = { noinline nounwind optnone "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
attributes #1 = { nounwind }
attributes #2 = { "min-legal-vector-width"="0" }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "", isOptimized: false, runtimeVersion: 0, emissionKind: NoDebug, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "<stdin>", directory: "")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 1, !"wchar_size", i32 4}
!4 = !{!""}
!5 = distinct !DISubprogram(name: "main", scope: !6, file: !6, line: 5, type: !7, scopeLine: 5, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !8)
!6 = !DIFile(filename: "task_depend_proper_rtcall.ll", directory: "")
!7 = !DISubroutineType(types: !8)
!8 = !{}
!9 = !DILocation(line: 7, column: 13, scope: !5)
!10 = !DILocation(line: 8, column: 6, scope: !5)
!11 = !DILocation(line: 9, column: 13, scope: !5)
!12 = !DILocation(line: 10, column: 6, scope: !5)
!13 = !DILocation(line: 11, column: 13, scope: !5)
!14 = !DILocation(line: 12, column: 6, scope: !5)
!15 = !DILocation(line: 13, column: 1, scope: !5)
!16 = distinct !DISubprogram(linkageName: "compute_dep", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!17 = distinct !DISubprogram(linkageName: "compute_dep.1", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!18 = distinct !DISubprogram(linkageName: "compute_dep.2", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!19 = distinct !DISubprogram(linkageName: "compute_dep.3", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!20 = !DILocation(line: 9, column: 25, scope: !21)
!21 = !DILexicalBlockFile(scope: !19, file: !6, discriminator: 0)
!22 = distinct !DISubprogram(linkageName: "compute_dep.4", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!23 = !DILocation(line: 9, column: 30, scope: !24)
!24 = !DILexicalBlockFile(scope: !22, file: !6, discriminator: 0)
!25 = distinct !DISubprogram(linkageName: "compute_dep.5", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!26 = !DILocation(line: 9, column: 35, scope: !27)
!27 = !DILexicalBlockFile(scope: !25, file: !6, discriminator: 0)
!28 = distinct !DISubprogram(linkageName: "compute_dep.6", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!29 = distinct !DISubprogram(linkageName: "compute_dep.7", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!30 = distinct !DISubprogram(linkageName: "compute_dep.8", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
; CHECK-LABEL: define {{[^@]+}}@main
; CHECK-SAME: () #[[ATTR0:[0-9]+]] !dbg [[DBG5:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[N:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[TMP0:%.*]] = alloca ptr, align 8, !dbg [[DBG9:![0-9]+]]
; CHECK-NEXT:    [[TMP1:%.*]] = alloca ptr, align 8, !dbg [[DBG9]]
; CHECK-NEXT:    [[NUM_DEPS:%.*]] = alloca i64, align 8, !dbg [[DBG9]]
; CHECK-NEXT:    [[TMP2:%.*]] = alloca ptr, align 8, !dbg [[DBG10:![0-9]+]]
; CHECK-NEXT:    [[TMP3:%.*]] = alloca ptr, align 8, !dbg [[DBG10]]
; CHECK-NEXT:    [[NUM_DEPS5:%.*]] = alloca i64, align 8, !dbg [[DBG10]]
; CHECK-NEXT:    [[TMP4:%.*]] = alloca ptr, align 8, !dbg [[DBG11:![0-9]+]]
; CHECK-NEXT:    [[TMP5:%.*]] = alloca ptr, align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[NUM_DEPS11:%.*]] = alloca i64, align 8, !dbg [[DBG11]]
; CHECK-NEXT:    br label [[FINAL_COND:%.*]], !dbg [[DBG9]]
; CHECK:       codeRepl:
; CHECK-NEXT:    store i64 0, ptr [[NUM_DEPS]], align 8, !dbg [[DBG9]]
; CHECK-NEXT:    [[TMP6:%.*]] = load i64, ptr [[NUM_DEPS]], align 8, !dbg [[DBG9]]
; CHECK-NEXT:    [[TMP7:%.*]] = add i64 [[TMP6]], 1, !dbg [[DBG9]]
; CHECK-NEXT:    store i64 [[TMP7]], ptr [[NUM_DEPS]], align 8, !dbg [[DBG9]]
; CHECK-NEXT:    [[TMP8:%.*]] = load i64, ptr [[NUM_DEPS]], align 8, !dbg [[DBG9]]
; CHECK-NEXT:    [[TMP9:%.*]] = add i64 [[TMP8]], 1, !dbg [[DBG9]]
; CHECK-NEXT:    store i64 [[TMP9]], ptr [[NUM_DEPS]], align 8, !dbg [[DBG9]]
; CHECK-NEXT:    [[TMP10:%.*]] = load i64, ptr [[NUM_DEPS]], align 8, !dbg [[DBG9]]
; CHECK-NEXT:    [[TMP11:%.*]] = add i64 [[TMP10]], 1, !dbg [[DBG9]]
; CHECK-NEXT:    store i64 [[TMP11]], ptr [[NUM_DEPS]], align 8, !dbg [[DBG9]]
; CHECK-NEXT:    [[TMP12:%.*]] = load i64, ptr [[NUM_DEPS]], align 8, !dbg [[DBG9]]
; CHECK-NEXT:    call void @nanos6_create_task(ptr @task_info_var_main, ptr @task_invocation_info_main, ptr null, i64 16, ptr [[TMP0]], ptr [[TMP1]], i64 0, i64 [[TMP12]]), !dbg [[DBG9]]
; CHECK-NEXT:    [[TMP13:%.*]] = load ptr, ptr [[TMP0]], align 8, !dbg [[DBG9]]
; CHECK-NEXT:    [[ARGS_END:%.*]] = getelementptr i8, ptr [[TMP13]], i64 16, !dbg [[DBG9]]
; CHECK-NEXT:    [[GEP_ARRAY:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN:%.*]], ptr [[TMP13]], i32 0, i32 0, !dbg [[DBG9]]
; CHECK-NEXT:    store ptr @array, ptr [[GEP_ARRAY]], align 8, !dbg [[DBG9]]
; CHECK-NEXT:    [[TMP14:%.*]] = load ptr, ptr [[TMP1]], align 8, !dbg [[DBG9]]
; CHECK-NEXT:    call void @nanos6_submit_task(ptr [[TMP14]]), !dbg [[DBG9]]
; CHECK-NEXT:    br label [[FINAL_END:%.*]], !dbg [[DBG9]]
; CHECK:       final.end:
; CHECK-NEXT:    br label [[FINAL_COND2:%.*]], !dbg [[DBG10]]
; CHECK:       codeRepl4:
; CHECK-NEXT:    store i64 0, ptr [[NUM_DEPS5]], align 8, !dbg [[DBG10]]
; CHECK-NEXT:    [[TMP15:%.*]] = load i64, ptr [[NUM_DEPS5]], align 8, !dbg [[DBG10]]
; CHECK-NEXT:    [[TMP16:%.*]] = add i64 [[TMP15]], 1, !dbg [[DBG10]]
; CHECK-NEXT:    store i64 [[TMP16]], ptr [[NUM_DEPS5]], align 8, !dbg [[DBG10]]
; CHECK-NEXT:    [[TMP17:%.*]] = load i64, ptr [[NUM_DEPS5]], align 8, !dbg [[DBG10]]
; CHECK-NEXT:    [[TMP18:%.*]] = add i64 [[TMP17]], 1, !dbg [[DBG10]]
; CHECK-NEXT:    store i64 [[TMP18]], ptr [[NUM_DEPS5]], align 8, !dbg [[DBG10]]
; CHECK-NEXT:    [[TMP19:%.*]] = load i64, ptr [[NUM_DEPS5]], align 8, !dbg [[DBG10]]
; CHECK-NEXT:    [[TMP20:%.*]] = add i64 [[TMP19]], 1, !dbg [[DBG10]]
; CHECK-NEXT:    store i64 [[TMP20]], ptr [[NUM_DEPS5]], align 8, !dbg [[DBG10]]
; CHECK-NEXT:    [[TMP21:%.*]] = load i64, ptr [[NUM_DEPS5]], align 8, !dbg [[DBG10]]
; CHECK-NEXT:    call void @nanos6_create_task(ptr @task_info_var_main.12, ptr @task_invocation_info_main.8, ptr null, i64 16, ptr [[TMP2]], ptr [[TMP3]], i64 0, i64 [[TMP21]]), !dbg [[DBG10]]
; CHECK-NEXT:    [[TMP22:%.*]] = load ptr, ptr [[TMP2]], align 8, !dbg [[DBG10]]
; CHECK-NEXT:    [[ARGS_END6:%.*]] = getelementptr i8, ptr [[TMP22]], i64 16, !dbg [[DBG10]]
; CHECK-NEXT:    [[GEP_S:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN_0:%.*]], ptr [[TMP22]], i32 0, i32 0, !dbg [[DBG10]]
; CHECK-NEXT:    store ptr @s, ptr [[GEP_S]], align 8, !dbg [[DBG10]]
; CHECK-NEXT:    [[TMP23:%.*]] = load ptr, ptr [[TMP3]], align 8, !dbg [[DBG10]]
; CHECK-NEXT:    call void @nanos6_submit_task(ptr [[TMP23]]), !dbg [[DBG10]]
; CHECK-NEXT:    br label [[FINAL_END1:%.*]], !dbg [[DBG10]]
; CHECK:       final.end1:
; CHECK-NEXT:    br label [[FINAL_COND8:%.*]], !dbg [[DBG11]]
; CHECK:       codeRepl10:
; CHECK-NEXT:    store i64 0, ptr [[NUM_DEPS11]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP24:%.*]] = load i64, ptr [[NUM_DEPS11]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP25:%.*]] = add i64 [[TMP24]], 1, !dbg [[DBG11]]
; CHECK-NEXT:    store i64 [[TMP25]], ptr [[NUM_DEPS11]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP26:%.*]] = load i64, ptr [[NUM_DEPS11]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP27:%.*]] = add i64 [[TMP26]], 1, !dbg [[DBG11]]
; CHECK-NEXT:    store i64 [[TMP27]], ptr [[NUM_DEPS11]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP28:%.*]] = load i64, ptr [[NUM_DEPS11]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP29:%.*]] = add i64 [[TMP28]], 1, !dbg [[DBG11]]
; CHECK-NEXT:    store i64 [[TMP29]], ptr [[NUM_DEPS11]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP30:%.*]] = load i64, ptr [[NUM_DEPS11]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    call void @nanos6_create_task(ptr @task_info_var_main.24, ptr @task_invocation_info_main.20, ptr null, i64 16, ptr [[TMP4]], ptr [[TMP5]], i64 0, i64 [[TMP30]]), !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP31:%.*]] = load ptr, ptr [[TMP4]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[ARGS_END12:%.*]] = getelementptr i8, ptr [[TMP31]], i64 16, !dbg [[DBG11]]
; CHECK-NEXT:    [[GEP_N:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN_1:%.*]], ptr [[TMP31]], i32 0, i32 0, !dbg [[DBG11]]
; CHECK-NEXT:    store ptr [[N]], ptr [[GEP_N]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP32:%.*]] = load ptr, ptr [[TMP5]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    call void @nanos6_submit_task(ptr [[TMP32]]), !dbg [[DBG11]]
; CHECK-NEXT:    br label [[FINAL_END7:%.*]], !dbg [[DBG11]]
; CHECK:       final.end7:
; CHECK-NEXT:    ret i32 0, !dbg [[DBG12:![0-9]+]]
; CHECK:       final.then:
; CHECK-NEXT:    br label [[FINAL_END]], !dbg [[DBG10]]
; CHECK:       final.then3:
; CHECK-NEXT:    br label [[FINAL_END1]], !dbg [[DBG11]]
; CHECK:       final.then9:
; CHECK-NEXT:    br label [[FINAL_END7]], !dbg [[DBG12]]
; CHECK:       final.cond:
; CHECK-NEXT:    [[TMP33:%.*]] = call i32 @nanos6_in_final(), !dbg [[DBG9]]
; CHECK-NEXT:    [[TMP34:%.*]] = icmp ne i32 [[TMP33]], 0, !dbg [[DBG9]]
; CHECK-NEXT:    br i1 [[TMP34]], label [[FINAL_THEN:%.*]], label [[CODEREPL:%.*]], !dbg [[DBG9]]
; CHECK:       final.cond2:
; CHECK-NEXT:    [[TMP35:%.*]] = call i32 @nanos6_in_final(), !dbg [[DBG10]]
; CHECK-NEXT:    [[TMP36:%.*]] = icmp ne i32 [[TMP35]], 0, !dbg [[DBG10]]
; CHECK-NEXT:    br i1 [[TMP36]], label [[FINAL_THEN3:%.*]], label [[CODEREPL4:%.*]], !dbg [[DBG10]]
; CHECK:       final.cond8:
; CHECK-NEXT:    [[TMP37:%.*]] = call i32 @nanos6_in_final(), !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP38:%.*]] = icmp ne i32 [[TMP37]], 0, !dbg [[DBG11]]
; CHECK-NEXT:    br i1 [[TMP38]], label [[FINAL_THEN9:%.*]], label [[CODEREPL10:%.*]], !dbg [[DBG11]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_dep
; CHECK-SAME: (ptr [[ARRAY:%.*]]) #[[ATTR2:[0-9]+]] !dbg [[DBG13:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[RETVAL:%.*]] = alloca [[STRUCT__DEPEND_UNPACK_T:%.*]], align 8
; CHECK-NEXT:    [[ARRAY_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr [[ARRAY]], ptr [[ARRAY_ADDR]], align 8
; CHECK-NEXT:    [[TMP0:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], i32 0, i32 0
; CHECK-NEXT:    store ptr [[ARRAY]], ptr [[TMP0]], align 8
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], i32 0, i32 1
; CHECK-NEXT:    store i64 80, ptr [[TMP1]], align 8
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], i32 0, i32 2
; CHECK-NEXT:    store i64 0, ptr [[TMP2]], align 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], i32 0, i32 3
; CHECK-NEXT:    store i64 80, ptr [[TMP3]], align 8
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], i32 0, i32 4
; CHECK-NEXT:    store i64 10, ptr [[TMP4]], align 8
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], i32 0, i32 5
; CHECK-NEXT:    store i64 0, ptr [[TMP5]], align 8
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], i32 0, i32 6
; CHECK-NEXT:    store i64 10, ptr [[TMP6]], align 8
; CHECK-NEXT:    [[TMP7:%.*]] = load [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], align 8
; CHECK-NEXT:    ret [[STRUCT__DEPEND_UNPACK_T]] [[TMP7]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_dep.1
; CHECK-SAME: (ptr [[ARRAY:%.*]]) #[[ATTR2]] !dbg [[DBG14:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[RETVAL:%.*]] = alloca [[STRUCT__DEPEND_UNPACK_T_0:%.*]], align 8
; CHECK-NEXT:    [[ARRAY_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr [[ARRAY]], ptr [[ARRAY_ADDR]], align 8
; CHECK-NEXT:    [[TMP0:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_0]], ptr [[RETVAL]], i32 0, i32 0
; CHECK-NEXT:    store ptr [[ARRAY]], ptr [[TMP0]], align 8
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_0]], ptr [[RETVAL]], i32 0, i32 1
; CHECK-NEXT:    store i64 80, ptr [[TMP1]], align 8
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_0]], ptr [[RETVAL]], i32 0, i32 2
; CHECK-NEXT:    store i64 0, ptr [[TMP2]], align 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_0]], ptr [[RETVAL]], i32 0, i32 3
; CHECK-NEXT:    store i64 80, ptr [[TMP3]], align 8
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_0]], ptr [[RETVAL]], i32 0, i32 4
; CHECK-NEXT:    store i64 10, ptr [[TMP4]], align 8
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_0]], ptr [[RETVAL]], i32 0, i32 5
; CHECK-NEXT:    store i64 0, ptr [[TMP5]], align 8
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_0]], ptr [[RETVAL]], i32 0, i32 6
; CHECK-NEXT:    store i64 10, ptr [[TMP6]], align 8
; CHECK-NEXT:    [[TMP7:%.*]] = load [[STRUCT__DEPEND_UNPACK_T_0]], ptr [[RETVAL]], align 8
; CHECK-NEXT:    ret [[STRUCT__DEPEND_UNPACK_T_0]] [[TMP7]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_dep.2
; CHECK-SAME: (ptr [[ARRAY:%.*]]) #[[ATTR2]] !dbg [[DBG15:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[RETVAL:%.*]] = alloca [[STRUCT__DEPEND_UNPACK_T_1:%.*]], align 8
; CHECK-NEXT:    [[ARRAY_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr [[ARRAY]], ptr [[ARRAY_ADDR]], align 8
; CHECK-NEXT:    [[TMP0:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_1]], ptr [[RETVAL]], i32 0, i32 0
; CHECK-NEXT:    store ptr [[ARRAY]], ptr [[TMP0]], align 8
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_1]], ptr [[RETVAL]], i32 0, i32 1
; CHECK-NEXT:    store i64 80, ptr [[TMP1]], align 8
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_1]], ptr [[RETVAL]], i32 0, i32 2
; CHECK-NEXT:    store i64 0, ptr [[TMP2]], align 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_1]], ptr [[RETVAL]], i32 0, i32 3
; CHECK-NEXT:    store i64 80, ptr [[TMP3]], align 8
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_1]], ptr [[RETVAL]], i32 0, i32 4
; CHECK-NEXT:    store i64 10, ptr [[TMP4]], align 8
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_1]], ptr [[RETVAL]], i32 0, i32 5
; CHECK-NEXT:    store i64 0, ptr [[TMP5]], align 8
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_1]], ptr [[RETVAL]], i32 0, i32 6
; CHECK-NEXT:    store i64 10, ptr [[TMP6]], align 8
; CHECK-NEXT:    [[TMP7:%.*]] = load [[STRUCT__DEPEND_UNPACK_T_1]], ptr [[RETVAL]], align 8
; CHECK-NEXT:    ret [[STRUCT__DEPEND_UNPACK_T_1]] [[TMP7]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_dep.3
; CHECK-SAME: (ptr [[S:%.*]]) #[[ATTR2]] !dbg [[DBG16:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[RETVAL:%.*]] = alloca [[STRUCT__DEPEND_UNPACK_T_2:%.*]], align 8
; CHECK-NEXT:    [[S_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr [[S]], ptr [[S_ADDR]], align 8
; CHECK-NEXT:    [[X:%.*]] = getelementptr inbounds [[STRUCT_S:%.*]], ptr [[S]], i32 0, i32 0
; CHECK-NEXT:    [[TMP0:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_2]], ptr [[RETVAL]], i32 0, i32 0
; CHECK-NEXT:    store ptr [[X]], ptr [[TMP0]], align 8
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_2]], ptr [[RETVAL]], i32 0, i32 1
; CHECK-NEXT:    store i64 4, ptr [[TMP1]], align 8
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_2]], ptr [[RETVAL]], i32 0, i32 2
; CHECK-NEXT:    store i64 0, ptr [[TMP2]], align 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_2]], ptr [[RETVAL]], i32 0, i32 3
; CHECK-NEXT:    store i64 4, ptr [[TMP3]], align 8
; CHECK-NEXT:    [[TMP4:%.*]] = load [[STRUCT__DEPEND_UNPACK_T_2]], ptr [[RETVAL]], align 8, !dbg [[DBG17:![0-9]+]]
; CHECK-NEXT:    ret [[STRUCT__DEPEND_UNPACK_T_2]] [[TMP4]], !dbg [[DBG17]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_dep.4
; CHECK-SAME: (ptr [[S:%.*]]) #[[ATTR2]] !dbg [[DBG19:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[RETVAL:%.*]] = alloca [[STRUCT__DEPEND_UNPACK_T_3:%.*]], align 8
; CHECK-NEXT:    [[S_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr [[S]], ptr [[S_ADDR]], align 8
; CHECK-NEXT:    [[X:%.*]] = getelementptr inbounds [[STRUCT_S:%.*]], ptr [[S]], i32 0, i32 0
; CHECK-NEXT:    [[TMP0:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_3]], ptr [[RETVAL]], i32 0, i32 0
; CHECK-NEXT:    store ptr [[X]], ptr [[TMP0]], align 8
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_3]], ptr [[RETVAL]], i32 0, i32 1
; CHECK-NEXT:    store i64 4, ptr [[TMP1]], align 8
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_3]], ptr [[RETVAL]], i32 0, i32 2
; CHECK-NEXT:    store i64 0, ptr [[TMP2]], align 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_3]], ptr [[RETVAL]], i32 0, i32 3
; CHECK-NEXT:    store i64 4, ptr [[TMP3]], align 8
; CHECK-NEXT:    [[TMP4:%.*]] = load [[STRUCT__DEPEND_UNPACK_T_3]], ptr [[RETVAL]], align 8, !dbg [[DBG20:![0-9]+]]
; CHECK-NEXT:    ret [[STRUCT__DEPEND_UNPACK_T_3]] [[TMP4]], !dbg [[DBG20]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_dep.5
; CHECK-SAME: (ptr [[S:%.*]]) #[[ATTR2]] !dbg [[DBG22:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[RETVAL:%.*]] = alloca [[STRUCT__DEPEND_UNPACK_T_4:%.*]], align 8
; CHECK-NEXT:    [[S_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr [[S]], ptr [[S_ADDR]], align 8
; CHECK-NEXT:    [[X:%.*]] = getelementptr inbounds [[STRUCT_S:%.*]], ptr [[S]], i32 0, i32 0
; CHECK-NEXT:    [[TMP0:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_4]], ptr [[RETVAL]], i32 0, i32 0
; CHECK-NEXT:    store ptr [[X]], ptr [[TMP0]], align 8
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_4]], ptr [[RETVAL]], i32 0, i32 1
; CHECK-NEXT:    store i64 4, ptr [[TMP1]], align 8
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_4]], ptr [[RETVAL]], i32 0, i32 2
; CHECK-NEXT:    store i64 0, ptr [[TMP2]], align 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_4]], ptr [[RETVAL]], i32 0, i32 3
; CHECK-NEXT:    store i64 4, ptr [[TMP3]], align 8
; CHECK-NEXT:    [[TMP4:%.*]] = load [[STRUCT__DEPEND_UNPACK_T_4]], ptr [[RETVAL]], align 8, !dbg [[DBG23:![0-9]+]]
; CHECK-NEXT:    ret [[STRUCT__DEPEND_UNPACK_T_4]] [[TMP4]], !dbg [[DBG23]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_dep.6
; CHECK-SAME: (ptr [[N:%.*]]) #[[ATTR2]] !dbg [[DBG25:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[RETVAL:%.*]] = alloca [[STRUCT__DEPEND_UNPACK_T_5:%.*]], align 8
; CHECK-NEXT:    [[N_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr [[N]], ptr [[N_ADDR]], align 8
; CHECK-NEXT:    [[TMP0:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_5]], ptr [[RETVAL]], i32 0, i32 0
; CHECK-NEXT:    store ptr [[N]], ptr [[TMP0]], align 8
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_5]], ptr [[RETVAL]], i32 0, i32 1
; CHECK-NEXT:    store i64 4, ptr [[TMP1]], align 8
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_5]], ptr [[RETVAL]], i32 0, i32 2
; CHECK-NEXT:    store i64 0, ptr [[TMP2]], align 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_5]], ptr [[RETVAL]], i32 0, i32 3
; CHECK-NEXT:    store i64 4, ptr [[TMP3]], align 8
; CHECK-NEXT:    [[TMP4:%.*]] = load [[STRUCT__DEPEND_UNPACK_T_5]], ptr [[RETVAL]], align 8
; CHECK-NEXT:    ret [[STRUCT__DEPEND_UNPACK_T_5]] [[TMP4]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_dep.7
; CHECK-SAME: (ptr [[N:%.*]]) #[[ATTR2]] !dbg [[DBG26:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[RETVAL:%.*]] = alloca [[STRUCT__DEPEND_UNPACK_T_6:%.*]], align 8
; CHECK-NEXT:    [[N_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr [[N]], ptr [[N_ADDR]], align 8
; CHECK-NEXT:    [[TMP0:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_6]], ptr [[RETVAL]], i32 0, i32 0
; CHECK-NEXT:    store ptr [[N]], ptr [[TMP0]], align 8
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_6]], ptr [[RETVAL]], i32 0, i32 1
; CHECK-NEXT:    store i64 4, ptr [[TMP1]], align 8
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_6]], ptr [[RETVAL]], i32 0, i32 2
; CHECK-NEXT:    store i64 0, ptr [[TMP2]], align 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_6]], ptr [[RETVAL]], i32 0, i32 3
; CHECK-NEXT:    store i64 4, ptr [[TMP3]], align 8
; CHECK-NEXT:    [[TMP4:%.*]] = load [[STRUCT__DEPEND_UNPACK_T_6]], ptr [[RETVAL]], align 8
; CHECK-NEXT:    ret [[STRUCT__DEPEND_UNPACK_T_6]] [[TMP4]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_dep.8
; CHECK-SAME: (ptr [[N:%.*]]) #[[ATTR2]] !dbg [[DBG27:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[RETVAL:%.*]] = alloca [[STRUCT__DEPEND_UNPACK_T_7:%.*]], align 8
; CHECK-NEXT:    [[N_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr [[N]], ptr [[N_ADDR]], align 8
; CHECK-NEXT:    [[TMP0:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_7]], ptr [[RETVAL]], i32 0, i32 0
; CHECK-NEXT:    store ptr [[N]], ptr [[TMP0]], align 8
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_7]], ptr [[RETVAL]], i32 0, i32 1
; CHECK-NEXT:    store i64 4, ptr [[TMP1]], align 8
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_7]], ptr [[RETVAL]], i32 0, i32 2
; CHECK-NEXT:    store i64 0, ptr [[TMP2]], align 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_7]], ptr [[RETVAL]], i32 0, i32 3
; CHECK-NEXT:    store i64 4, ptr [[TMP3]], align 8
; CHECK-NEXT:    [[TMP4:%.*]] = load [[STRUCT__DEPEND_UNPACK_T_7]], ptr [[RETVAL]], align 8
; CHECK-NEXT:    ret [[STRUCT__DEPEND_UNPACK_T_7]] [[TMP4]]
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_unpacked_task_region_main
; CHECK-SAME: (ptr [[ARRAY:%.*]], ptr [[DEVICE_ENV:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) !dbg [[DBG28:![0-9]+]] {
; CHECK-NEXT:  newFuncRoot:
; CHECK-NEXT:    br label [[TMP0:%.*]], !dbg [[DBG29:![0-9]+]]
; CHECK:       0:
; CHECK-NEXT:    br label [[DOTEXITSTUB:%.*]], !dbg [[DBG30:![0-9]+]]
; CHECK:       .exitStub:
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_task_region_main
; CHECK-SAME: (ptr [[TASK_ARGS:%.*]], ptr [[DEVICE_ENV:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_ARRAY:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN:%.*]], ptr [[TASK_ARGS]], i32 0, i32 0
; CHECK-NEXT:    [[LOAD_GEP_ARRAY:%.*]] = load ptr, ptr [[GEP_ARRAY]], align 8
; CHECK-NEXT:    [[TLATE_LOAD_GEP_ARRAY:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr [[LOAD_GEP_ARRAY]], ptr [[TLATE_LOAD_GEP_ARRAY]], align 8
; CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[TLATE_LOAD_GEP_ARRAY]], align 8
; CHECK-NEXT:    [[TMP1:%.*]] = icmp ne ptr [[ADDRESS_TRANSLATION_TABLE]], null
; CHECK-NEXT:    br i1 [[TMP1]], label [[TMP2:%.*]], label [[TMP8:%.*]]
; CHECK:       2:
; CHECK-NEXT:    [[LOCAL_LOOKUP_ARRAY:%.*]] = getelementptr [[NANOS6_ADDRESS_TRANSLATION_ENTRY_T:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE]], i32 0, i32 0
; CHECK-NEXT:    [[TMP3:%.*]] = load i64, ptr [[LOCAL_LOOKUP_ARRAY]], align 8
; CHECK-NEXT:    [[DEVICE_LOOKUP_ARRAY:%.*]] = getelementptr [[NANOS6_ADDRESS_TRANSLATION_ENTRY_T]], ptr [[ADDRESS_TRANSLATION_TABLE]], i32 0, i32 1
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[DEVICE_LOOKUP_ARRAY]], align 8
; CHECK-NEXT:    [[TMP5:%.*]] = sub i64 0, [[TMP3]]
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[TMP0]], i64 [[TMP5]]
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[TMP6]], i64 [[TMP4]]
; CHECK-NEXT:    store ptr [[TMP7]], ptr [[TLATE_LOAD_GEP_ARRAY]], align 8
; CHECK-NEXT:    br label [[TMP8]]
; CHECK:       8:
; CHECK-NEXT:    [[TMP9:%.*]] = load ptr, ptr [[TLATE_LOAD_GEP_ARRAY]], align 8
; CHECK-NEXT:    call void @nanos6_unpacked_task_region_main(ptr [[TMP9]], ptr [[DEVICE_ENV]], ptr [[ADDRESS_TRANSLATION_TABLE]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_unpacked_deps_main
; CHECK-SAME: (ptr [[ARRAY:%.*]], ptr [[LOOP_BOUNDS:%.*]], ptr [[HANDLER:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = call [[STRUCT__DEPEND_UNPACK_T:%.*]] @compute_dep(ptr [[ARRAY]])
; CHECK-NEXT:    [[TMP1:%.*]] = call [[STRUCT__DEPEND_UNPACK_T]] @compute_dep(ptr [[ARRAY]])
; CHECK-NEXT:    [[TMP2:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T]] [[TMP0]], 0
; CHECK-NEXT:    [[TMP3:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T]] [[TMP0]], 1
; CHECK-NEXT:    [[TMP4:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T]] [[TMP0]], 2
; CHECK-NEXT:    [[TMP5:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T]] [[TMP1]], 3
; CHECK-NEXT:    [[TMP6:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T]] [[TMP0]], 4
; CHECK-NEXT:    [[TMP7:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T]] [[TMP0]], 5
; CHECK-NEXT:    [[TMP8:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T]] [[TMP1]], 6
; CHECK-NEXT:    call void @nanos6_register_region_read_depinfo2(ptr [[HANDLER]], i32 0, ptr @[[GLOB1:[0-9]+]], ptr [[TMP2]], i64 [[TMP3]], i64 [[TMP4]], i64 [[TMP5]], i64 [[TMP6]], i64 [[TMP7]], i64 [[TMP8]])
; CHECK-NEXT:    [[TMP9:%.*]] = call [[STRUCT__DEPEND_UNPACK_T_0:%.*]] @compute_dep.1(ptr [[ARRAY]])
; CHECK-NEXT:    [[TMP10:%.*]] = call [[STRUCT__DEPEND_UNPACK_T_0]] @compute_dep.1(ptr [[ARRAY]])
; CHECK-NEXT:    [[TMP11:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_0]] [[TMP9]], 0
; CHECK-NEXT:    [[TMP12:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_0]] [[TMP9]], 1
; CHECK-NEXT:    [[TMP13:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_0]] [[TMP9]], 2
; CHECK-NEXT:    [[TMP14:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_0]] [[TMP10]], 3
; CHECK-NEXT:    [[TMP15:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_0]] [[TMP9]], 4
; CHECK-NEXT:    [[TMP16:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_0]] [[TMP9]], 5
; CHECK-NEXT:    [[TMP17:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_0]] [[TMP10]], 6
; CHECK-NEXT:    call void @nanos6_register_region_read_depinfo2(ptr [[HANDLER]], i32 0, ptr @[[GLOB2:[0-9]+]], ptr [[TMP11]], i64 [[TMP12]], i64 [[TMP13]], i64 [[TMP14]], i64 [[TMP15]], i64 [[TMP16]], i64 [[TMP17]])
; CHECK-NEXT:    [[TMP18:%.*]] = call [[STRUCT__DEPEND_UNPACK_T_1:%.*]] @compute_dep.2(ptr [[ARRAY]])
; CHECK-NEXT:    [[TMP19:%.*]] = call [[STRUCT__DEPEND_UNPACK_T_1]] @compute_dep.2(ptr [[ARRAY]])
; CHECK-NEXT:    [[TMP20:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_1]] [[TMP18]], 0
; CHECK-NEXT:    [[TMP21:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_1]] [[TMP18]], 1
; CHECK-NEXT:    [[TMP22:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_1]] [[TMP18]], 2
; CHECK-NEXT:    [[TMP23:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_1]] [[TMP19]], 3
; CHECK-NEXT:    [[TMP24:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_1]] [[TMP18]], 4
; CHECK-NEXT:    [[TMP25:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_1]] [[TMP18]], 5
; CHECK-NEXT:    [[TMP26:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_1]] [[TMP19]], 6
; CHECK-NEXT:    call void @nanos6_register_region_read_depinfo2(ptr [[HANDLER]], i32 0, ptr @[[GLOB3:[0-9]+]], ptr [[TMP20]], i64 [[TMP21]], i64 [[TMP22]], i64 [[TMP23]], i64 [[TMP24]], i64 [[TMP25]], i64 [[TMP26]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_deps_main
; CHECK-SAME: (ptr [[TASK_ARGS:%.*]], ptr [[LOOP_BOUNDS:%.*]], ptr [[HANDLER:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_ARRAY:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN:%.*]], ptr [[TASK_ARGS]], i32 0, i32 0
; CHECK-NEXT:    [[LOAD_GEP_ARRAY:%.*]] = load ptr, ptr [[GEP_ARRAY]], align 8
; CHECK-NEXT:    call void @nanos6_unpacked_deps_main(ptr [[LOAD_GEP_ARRAY]], ptr [[LOOP_BOUNDS]], ptr [[HANDLER]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_constructor_register_task_info() {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @nanos6_register_task_info(ptr @task_info_var_main)
; CHECK-NEXT:    call void @nanos6_register_task_info(ptr @task_info_var_main.12)
; CHECK-NEXT:    call void @nanos6_register_task_info(ptr @task_info_var_main.24)
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_unpacked_task_region_main.4
; CHECK-SAME: (ptr [[S:%.*]], ptr [[DEVICE_ENV:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) !dbg [[DBG31:![0-9]+]] {
; CHECK-NEXT:  newFuncRoot:
; CHECK-NEXT:    br label [[TMP0:%.*]], !dbg [[DBG32:![0-9]+]]
; CHECK:       0:
; CHECK-NEXT:    br label [[DOTEXITSTUB:%.*]], !dbg [[DBG33:![0-9]+]]
; CHECK:       .exitStub:
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_task_region_main.5
; CHECK-SAME: (ptr [[TASK_ARGS:%.*]], ptr [[DEVICE_ENV:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_S:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN_0:%.*]], ptr [[TASK_ARGS]], i32 0, i32 0
; CHECK-NEXT:    [[LOAD_GEP_S:%.*]] = load ptr, ptr [[GEP_S]], align 8
; CHECK-NEXT:    [[TLATE_LOAD_GEP_S:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr [[LOAD_GEP_S]], ptr [[TLATE_LOAD_GEP_S]], align 8
; CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[TLATE_LOAD_GEP_S]], align 8
; CHECK-NEXT:    [[TMP1:%.*]] = icmp ne ptr [[ADDRESS_TRANSLATION_TABLE]], null
; CHECK-NEXT:    br i1 [[TMP1]], label [[TMP2:%.*]], label [[TMP8:%.*]]
; CHECK:       2:
; CHECK-NEXT:    [[LOCAL_LOOKUP_S:%.*]] = getelementptr [[NANOS6_ADDRESS_TRANSLATION_ENTRY_T:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE]], i32 0, i32 0
; CHECK-NEXT:    [[TMP3:%.*]] = load i64, ptr [[LOCAL_LOOKUP_S]], align 8
; CHECK-NEXT:    [[DEVICE_LOOKUP_S:%.*]] = getelementptr [[NANOS6_ADDRESS_TRANSLATION_ENTRY_T]], ptr [[ADDRESS_TRANSLATION_TABLE]], i32 0, i32 1
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[DEVICE_LOOKUP_S]], align 8
; CHECK-NEXT:    [[TMP5:%.*]] = sub i64 0, [[TMP3]]
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[TMP0]], i64 [[TMP5]]
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[TMP6]], i64 [[TMP4]]
; CHECK-NEXT:    store ptr [[TMP7]], ptr [[TLATE_LOAD_GEP_S]], align 8
; CHECK-NEXT:    br label [[TMP8]]
; CHECK:       8:
; CHECK-NEXT:    [[TMP9:%.*]] = load ptr, ptr [[TLATE_LOAD_GEP_S]], align 8
; CHECK-NEXT:    call void @nanos6_unpacked_task_region_main.4(ptr [[TMP9]], ptr [[DEVICE_ENV]], ptr [[ADDRESS_TRANSLATION_TABLE]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_unpacked_deps_main.6
; CHECK-SAME: (ptr [[S:%.*]], ptr [[LOOP_BOUNDS:%.*]], ptr [[HANDLER:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = call [[STRUCT__DEPEND_UNPACK_T_2:%.*]] @compute_dep.3(ptr [[S]])
; CHECK-NEXT:    [[TMP1:%.*]] = call [[STRUCT__DEPEND_UNPACK_T_2]] @compute_dep.3(ptr [[S]])
; CHECK-NEXT:    [[TMP2:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_2]] [[TMP0]], 0
; CHECK-NEXT:    [[TMP3:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_2]] [[TMP0]], 1
; CHECK-NEXT:    [[TMP4:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_2]] [[TMP0]], 2
; CHECK-NEXT:    [[TMP5:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_2]] [[TMP1]], 3
; CHECK-NEXT:    call void @nanos6_register_region_read_depinfo1(ptr [[HANDLER]], i32 0, ptr @[[GLOB5:[0-9]+]], ptr [[TMP2]], i64 [[TMP3]], i64 [[TMP4]], i64 [[TMP5]])
; CHECK-NEXT:    [[TMP6:%.*]] = call [[STRUCT__DEPEND_UNPACK_T_3:%.*]] @compute_dep.4(ptr [[S]])
; CHECK-NEXT:    [[TMP7:%.*]] = call [[STRUCT__DEPEND_UNPACK_T_3]] @compute_dep.4(ptr [[S]])
; CHECK-NEXT:    [[TMP8:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_3]] [[TMP6]], 0
; CHECK-NEXT:    [[TMP9:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_3]] [[TMP6]], 1
; CHECK-NEXT:    [[TMP10:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_3]] [[TMP6]], 2
; CHECK-NEXT:    [[TMP11:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_3]] [[TMP7]], 3
; CHECK-NEXT:    call void @nanos6_register_region_read_depinfo1(ptr [[HANDLER]], i32 0, ptr @[[GLOB6:[0-9]+]], ptr [[TMP8]], i64 [[TMP9]], i64 [[TMP10]], i64 [[TMP11]])
; CHECK-NEXT:    [[TMP12:%.*]] = call [[STRUCT__DEPEND_UNPACK_T_4:%.*]] @compute_dep.5(ptr [[S]])
; CHECK-NEXT:    [[TMP13:%.*]] = call [[STRUCT__DEPEND_UNPACK_T_4]] @compute_dep.5(ptr [[S]])
; CHECK-NEXT:    [[TMP14:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_4]] [[TMP12]], 0
; CHECK-NEXT:    [[TMP15:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_4]] [[TMP12]], 1
; CHECK-NEXT:    [[TMP16:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_4]] [[TMP12]], 2
; CHECK-NEXT:    [[TMP17:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_4]] [[TMP13]], 3
; CHECK-NEXT:    call void @nanos6_register_region_read_depinfo1(ptr [[HANDLER]], i32 0, ptr @[[GLOB7:[0-9]+]], ptr [[TMP14]], i64 [[TMP15]], i64 [[TMP16]], i64 [[TMP17]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_deps_main.7
; CHECK-SAME: (ptr [[TASK_ARGS:%.*]], ptr [[LOOP_BOUNDS:%.*]], ptr [[HANDLER:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_S:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN_0:%.*]], ptr [[TASK_ARGS]], i32 0, i32 0
; CHECK-NEXT:    [[LOAD_GEP_S:%.*]] = load ptr, ptr [[GEP_S]], align 8
; CHECK-NEXT:    call void @nanos6_unpacked_deps_main.6(ptr [[LOAD_GEP_S]], ptr [[LOOP_BOUNDS]], ptr [[HANDLER]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_unpacked_task_region_main.16
; CHECK-SAME: (ptr [[N:%.*]], ptr [[DEVICE_ENV:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) !dbg [[DBG34:![0-9]+]] {
; CHECK-NEXT:  newFuncRoot:
; CHECK-NEXT:    br label [[TMP0:%.*]], !dbg [[DBG35:![0-9]+]]
; CHECK:       0:
; CHECK-NEXT:    br label [[DOTEXITSTUB:%.*]], !dbg [[DBG36:![0-9]+]]
; CHECK:       .exitStub:
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_task_region_main.17
; CHECK-SAME: (ptr [[TASK_ARGS:%.*]], ptr [[DEVICE_ENV:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_N:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN_1:%.*]], ptr [[TASK_ARGS]], i32 0, i32 0
; CHECK-NEXT:    [[LOAD_GEP_N:%.*]] = load ptr, ptr [[GEP_N]], align 8
; CHECK-NEXT:    [[TLATE_LOAD_GEP_N:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr [[LOAD_GEP_N]], ptr [[TLATE_LOAD_GEP_N]], align 8
; CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[TLATE_LOAD_GEP_N]], align 8
; CHECK-NEXT:    [[TMP1:%.*]] = icmp ne ptr [[ADDRESS_TRANSLATION_TABLE]], null
; CHECK-NEXT:    br i1 [[TMP1]], label [[TMP2:%.*]], label [[TMP8:%.*]]
; CHECK:       2:
; CHECK-NEXT:    [[LOCAL_LOOKUP_N:%.*]] = getelementptr [[NANOS6_ADDRESS_TRANSLATION_ENTRY_T:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE]], i32 0, i32 0
; CHECK-NEXT:    [[TMP3:%.*]] = load i64, ptr [[LOCAL_LOOKUP_N]], align 8
; CHECK-NEXT:    [[DEVICE_LOOKUP_N:%.*]] = getelementptr [[NANOS6_ADDRESS_TRANSLATION_ENTRY_T]], ptr [[ADDRESS_TRANSLATION_TABLE]], i32 0, i32 1
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[DEVICE_LOOKUP_N]], align 8
; CHECK-NEXT:    [[TMP5:%.*]] = sub i64 0, [[TMP3]]
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[TMP0]], i64 [[TMP5]]
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[TMP6]], i64 [[TMP4]]
; CHECK-NEXT:    store ptr [[TMP7]], ptr [[TLATE_LOAD_GEP_N]], align 8
; CHECK-NEXT:    br label [[TMP8]]
; CHECK:       8:
; CHECK-NEXT:    [[TMP9:%.*]] = load ptr, ptr [[TLATE_LOAD_GEP_N]], align 8
; CHECK-NEXT:    call void @nanos6_unpacked_task_region_main.16(ptr [[TMP9]], ptr [[DEVICE_ENV]], ptr [[ADDRESS_TRANSLATION_TABLE]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_unpacked_deps_main.18
; CHECK-SAME: (ptr [[N:%.*]], ptr [[LOOP_BOUNDS:%.*]], ptr [[HANDLER:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = call [[STRUCT__DEPEND_UNPACK_T_5:%.*]] @compute_dep.6(ptr [[N]])
; CHECK-NEXT:    [[TMP1:%.*]] = call [[STRUCT__DEPEND_UNPACK_T_5]] @compute_dep.6(ptr [[N]])
; CHECK-NEXT:    [[TMP2:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_5]] [[TMP0]], 0
; CHECK-NEXT:    [[TMP3:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_5]] [[TMP0]], 1
; CHECK-NEXT:    [[TMP4:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_5]] [[TMP0]], 2
; CHECK-NEXT:    [[TMP5:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_5]] [[TMP1]], 3
; CHECK-NEXT:    call void @nanos6_register_region_read_depinfo1(ptr [[HANDLER]], i32 0, ptr @[[GLOB9:[0-9]+]], ptr [[TMP2]], i64 [[TMP3]], i64 [[TMP4]], i64 [[TMP5]])
; CHECK-NEXT:    [[TMP6:%.*]] = call [[STRUCT__DEPEND_UNPACK_T_6:%.*]] @compute_dep.7(ptr [[N]])
; CHECK-NEXT:    [[TMP7:%.*]] = call [[STRUCT__DEPEND_UNPACK_T_6]] @compute_dep.7(ptr [[N]])
; CHECK-NEXT:    [[TMP8:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_6]] [[TMP6]], 0
; CHECK-NEXT:    [[TMP9:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_6]] [[TMP6]], 1
; CHECK-NEXT:    [[TMP10:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_6]] [[TMP6]], 2
; CHECK-NEXT:    [[TMP11:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_6]] [[TMP7]], 3
; CHECK-NEXT:    call void @nanos6_register_region_read_depinfo1(ptr [[HANDLER]], i32 0, ptr @[[GLOB10:[0-9]+]], ptr [[TMP8]], i64 [[TMP9]], i64 [[TMP10]], i64 [[TMP11]])
; CHECK-NEXT:    [[TMP12:%.*]] = call [[STRUCT__DEPEND_UNPACK_T_7:%.*]] @compute_dep.8(ptr [[N]])
; CHECK-NEXT:    [[TMP13:%.*]] = call [[STRUCT__DEPEND_UNPACK_T_7]] @compute_dep.8(ptr [[N]])
; CHECK-NEXT:    [[TMP14:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_7]] [[TMP12]], 0
; CHECK-NEXT:    [[TMP15:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_7]] [[TMP12]], 1
; CHECK-NEXT:    [[TMP16:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_7]] [[TMP12]], 2
; CHECK-NEXT:    [[TMP17:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_7]] [[TMP13]], 3
; CHECK-NEXT:    call void @nanos6_register_region_read_depinfo1(ptr [[HANDLER]], i32 0, ptr @[[GLOB11:[0-9]+]], ptr [[TMP14]], i64 [[TMP15]], i64 [[TMP16]], i64 [[TMP17]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_deps_main.19
; CHECK-SAME: (ptr [[TASK_ARGS:%.*]], ptr [[LOOP_BOUNDS:%.*]], ptr [[HANDLER:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_N:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN_1:%.*]], ptr [[TASK_ARGS]], i32 0, i32 0
; CHECK-NEXT:    [[LOAD_GEP_N:%.*]] = load ptr, ptr [[GEP_N]], align 8
; CHECK-NEXT:    call void @nanos6_unpacked_deps_main.18(ptr [[LOAD_GEP_N]], ptr [[LOOP_BOUNDS]], ptr [[HANDLER]])
; CHECK-NEXT:    ret void
;
