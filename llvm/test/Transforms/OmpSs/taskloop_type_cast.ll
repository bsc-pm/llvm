; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --function-signature --include-generated-funcs
; RUN: opt %s -passes=ompss-2 -S | FileCheck %s
; ModuleID = 'taskloop_type_cast.ll'
source_filename = "taskloop_type_cast.ll"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; #include <stdint.h>
; int main() {
;   #pragma oss taskloop collapse(2)
;   for (int32_t i = 0; i < (int64_t)10; ++i) {
;     for (int32_t j = 0; j < (int64_t)10; ++j) {
;     }
;   }
; }

; The bug was we were using the type and sign of the upper bound
; when computing collapse bounds to get the amount of iterations
; and regen the induction variables
; We need to extend or truncate that value to the size of the
; induction variable

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !7 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 0, ptr %i, align 4, !dbg !10
  store i32 0, ptr %j, align 4, !dbg !11
  %0 = call token @llvm.directive.region.entry() [ "DIR.OSS"([9 x i8] c"TASKLOOP\00"), "QUAL.OSS.PRIVATE"(ptr %i, i32 undef), "QUAL.OSS.PRIVATE"(ptr %j, i32 undef), "QUAL.OSS.LOOP.IND.VAR"(ptr %i, ptr %j), "QUAL.OSS.LOOP.LOWER.BOUND"(ptr @compute_lb, ptr @compute_lb.1), "QUAL.OSS.LOOP.UPPER.BOUND"(ptr @compute_ub, ptr @compute_ub.2), "QUAL.OSS.LOOP.STEP"(ptr @compute_step, ptr @compute_step.3), "QUAL.OSS.LOOP.TYPE"(i64 0, i64 1, i64 1, i64 1, i64 1, i64 0, i64 1, i64 1, i64 1, i64 1) ], !dbg !12
  call void @llvm.directive.region.exit(token %0), !dbg !13
  ret i32 0, !dbg !14
}

; Function Attrs: nounwind
declare token @llvm.directive.region.entry() #1

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token) #1

define internal i32 @compute_lb() #2 !dbg !15 {
entry:
  ret i32 0, !dbg !16
}

define internal i64 @compute_ub() #2 !dbg !17 {
entry:
  ret i64 10, !dbg !18
}

define internal i32 @compute_step() #2 !dbg !19 {
entry:
  ret i32 1, !dbg !20
}

define internal i32 @compute_lb.1() #2 !dbg !21 {
entry:
  ret i32 0, !dbg !22
}

define internal i64 @compute_ub.2() #2 !dbg !23 {
entry:
  ret i64 10, !dbg !24
}

define internal i32 @compute_step.3() #2 !dbg !25 {
entry:
  ret i32 1, !dbg !26
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nounwind }
attributes #2 = { "min-legal-vector-width"="0" }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3, !4, !5}
!llvm.ident = !{!6}

!0 = distinct !DICompileUnit(language: DW_LANG_C11, file: !1, producer: "", isOptimized: false, runtimeVersion: 0, emissionKind: NoDebug, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "taskloop_type_cast.ll", directory: "")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 1, !"wchar_size", i32 4}
!4 = !{i32 7, !"uwtable", i32 2}
!5 = !{i32 7, !"frame-pointer", i32 2}
!6 = !{!""}
!7 = distinct !DISubprogram(name: "main", scope: !1, file: !1, line: 2, type: !8, scopeLine: 2, spFlags: DISPFlagDefinition, unit: !0)
!8 = !DISubroutineType(types: !9)
!9 = !{}
!10 = !DILocation(line: 4, column: 16, scope: !7)
!11 = !DILocation(line: 5, column: 18, scope: !7)
!12 = !DILocation(line: 5, column: 10, scope: !7)
!13 = !DILocation(line: 6, column: 5, scope: !7)
!14 = !DILocation(line: 8, column: 1, scope: !7)
!15 = distinct !DISubprogram(linkageName: "compute_lb", scope: !1, file: !1, type: !8, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0)
!16 = !DILocation(line: 4, column: 20, scope: !15)
!17 = distinct !DISubprogram(linkageName: "compute_ub", scope: !1, file: !1, type: !8, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0)
!18 = !DILocation(line: 4, column: 36, scope: !17)
!19 = distinct !DISubprogram(linkageName: "compute_step", scope: !1, file: !1, type: !8, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0)
!20 = !DILocation(line: 4, column: 40, scope: !19)
!21 = distinct !DISubprogram(linkageName: "compute_lb.1", scope: !1, file: !1, type: !8, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0)
!22 = !DILocation(line: 5, column: 22, scope: !21)
!23 = distinct !DISubprogram(linkageName: "compute_ub.2", scope: !1, file: !1, type: !8, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0)
!24 = !DILocation(line: 5, column: 38, scope: !23)
!25 = distinct !DISubprogram(linkageName: "compute_step.3", scope: !1, file: !1, type: !8, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0)
!26 = !DILocation(line: 5, column: 42, scope: !25)
; CHECK-LABEL: define {{[^@]+}}@main
; CHECK-SAME: () #[[ATTR0:[0-9]+]] !dbg [[DBG7:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[I:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[J:%.*]] = alloca i32, align 4
; CHECK-NEXT:    store i32 0, ptr [[I]], align 4, !dbg [[DBG10:![0-9]+]]
; CHECK-NEXT:    store i32 0, ptr [[J]], align 4, !dbg [[DBG11:![0-9]+]]
; CHECK-NEXT:    [[TMP0:%.*]] = alloca ptr, align 8, !dbg [[DBG12:![0-9]+]]
; CHECK-NEXT:    [[TMP1:%.*]] = alloca ptr, align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[NUM_DEPS:%.*]] = alloca i64, align 8, !dbg [[DBG12]]
; CHECK-NEXT:    br label [[FINAL_COND:%.*]], !dbg [[DBG12]]
; CHECK:       codeRepl:
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 8, ptr [[TMP0]]), !dbg [[DBG12]]
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 8, ptr [[TMP1]]), !dbg [[DBG12]]
; CHECK-NEXT:    store i64 0, ptr [[NUM_DEPS]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP2:%.*]] = load i64, ptr [[NUM_DEPS]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP3:%.*]] = call i32 @compute_lb(), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP4:%.*]] = call i64 @compute_ub(), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP5:%.*]] = call i32 @compute_step(), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP6:%.*]] = sext i32 [[TMP3]] to i64, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP7:%.*]] = sub i64 [[TMP4]], [[TMP6]], !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP8:%.*]] = sub i64 [[TMP7]], 1, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP9:%.*]] = sext i32 [[TMP5]] to i64, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP10:%.*]] = sdiv i64 [[TMP8]], [[TMP9]], !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP11:%.*]] = add i64 [[TMP10]], 1, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP12:%.*]] = sub i64 [[TMP4]], 1, !dbg [[DBG12]]
; CHECK-NEXT:    store i32 [[TMP3]], ptr [[I]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP13:%.*]] = call i32 @compute_lb.1(), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP14:%.*]] = trunc i64 [[TMP12]] to i32, !dbg [[DBG12]]
; CHECK-NEXT:    store i32 [[TMP14]], ptr [[I]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP15:%.*]] = call i64 @compute_ub.2(), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP16:%.*]] = call i32 @compute_step.3(), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP17:%.*]] = sext i32 [[TMP13]] to i64, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP18:%.*]] = sub i64 [[TMP15]], [[TMP17]], !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP19:%.*]] = sub i64 [[TMP18]], 1, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP20:%.*]] = sext i32 [[TMP16]] to i64, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP21:%.*]] = sdiv i64 [[TMP19]], [[TMP20]], !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP22:%.*]] = add i64 [[TMP21]], 1, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP23:%.*]] = mul i64 1, [[TMP11]], !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP24:%.*]] = mul i64 [[TMP23]], [[TMP22]], !dbg [[DBG12]]
; CHECK-NEXT:    call void @nanos6_create_loop(ptr @task_info_var_main, ptr @task_invocation_info_main, ptr null, i64 16, ptr [[TMP0]], ptr [[TMP1]], i64 4, i64 [[TMP2]], i64 0, i64 [[TMP24]], i64 0, i64 0), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP25:%.*]] = load ptr, ptr [[TMP0]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[ARGS_END:%.*]] = getelementptr i8, ptr [[TMP25]], i64 16, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP26:%.*]] = load ptr, ptr [[TMP1]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    call void @nanos6_submit_task(ptr [[TMP26]]), !dbg [[DBG12]]
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 8, ptr [[TMP0]]), !dbg [[DBG12]]
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 8, ptr [[TMP1]]), !dbg [[DBG12]]
; CHECK-NEXT:    br label [[FOR_END7:%.*]], !dbg [[DBG12]]
; CHECK:       final.end:
; CHECK-NEXT:    ret i32 0, !dbg [[DBG13:![0-9]+]]
; CHECK:       final.then:
; CHECK-NEXT:    [[TMP27:%.*]] = call i32 @compute_lb(), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP28:%.*]] = call i64 @compute_ub(), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP29:%.*]] = call i32 @compute_step(), !dbg [[DBG12]]
; CHECK-NEXT:    store i32 [[TMP27]], ptr [[I]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    br label [[FOR_COND1:%.*]], !dbg [[DBG12]]
; CHECK:       for.cond1:
; CHECK-NEXT:    [[TMP30:%.*]] = load i32, ptr [[I]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP31:%.*]] = sext i32 [[TMP30]] to i64, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP32:%.*]] = icmp slt i64 [[TMP31]], [[TMP28]], !dbg [[DBG12]]
; CHECK-NEXT:    br i1 [[TMP32]], label [[TMP33:%.*]], label [[FOR_END3:%.*]], !dbg [[DBG12]]
; CHECK:       33:
; CHECK-NEXT:    br label [[TMP34:%.*]], !dbg [[DBG12]]
; CHECK:       34:
; CHECK-NEXT:    br label [[FOR_BODY2:%.*]], !dbg [[DBG12]]
; CHECK:       for.body2:
; CHECK-NEXT:    [[TMP35:%.*]] = call i32 @compute_lb.1(), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP36:%.*]] = call i64 @compute_ub.2(), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP37:%.*]] = call i32 @compute_step.3(), !dbg [[DBG12]]
; CHECK-NEXT:    store i32 [[TMP35]], ptr [[J]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    br label [[FOR_COND:%.*]], !dbg [[DBG12]]
; CHECK:       for.cond:
; CHECK-NEXT:    [[TMP38:%.*]] = load i32, ptr [[J]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP39:%.*]] = sext i32 [[TMP38]] to i64, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP40:%.*]] = icmp slt i64 [[TMP39]], [[TMP36]], !dbg [[DBG12]]
; CHECK-NEXT:    br i1 [[TMP40]], label [[TMP41:%.*]], label [[FOR_END:%.*]], !dbg [[DBG12]]
; CHECK:       41:
; CHECK-NEXT:    br label [[TMP42:%.*]], !dbg [[DBG12]]
; CHECK:       42:
; CHECK-NEXT:    br label [[FOR_BODY:%.*]], !dbg [[DBG12]]
; CHECK:       for.body:
; CHECK-NEXT:    br label [[FOR_INCR:%.*]], !dbg [[DBG13]]
; CHECK:       for.end:
; CHECK-NEXT:    br label [[FOR_INCR4:%.*]], !dbg [[DBG12]]
; CHECK:       for.incr:
; CHECK-NEXT:    [[TMP43:%.*]] = load i32, ptr [[J]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP44:%.*]] = add i32 [[TMP43]], [[TMP37]], !dbg [[DBG12]]
; CHECK-NEXT:    store i32 [[TMP44]], ptr [[J]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    br label [[FOR_COND]], !dbg [[DBG12]]
; CHECK:       for.end3:
; CHECK-NEXT:    br label [[FINAL_END:%.*]], !dbg [[DBG12]]
; CHECK:       for.incr4:
; CHECK-NEXT:    [[TMP45:%.*]] = load i32, ptr [[I]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP46:%.*]] = add i32 [[TMP45]], [[TMP29]], !dbg [[DBG12]]
; CHECK-NEXT:    store i32 [[TMP46]], ptr [[I]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    br label [[FOR_COND1]], !dbg [[DBG12]]
; CHECK:       final.cond:
; CHECK-NEXT:    [[TMP47:%.*]] = call i32 @nanos6_in_final(), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP48:%.*]] = icmp ne i32 [[TMP47]], 0, !dbg [[DBG12]]
; CHECK-NEXT:    br i1 [[TMP48]], label [[FINAL_THEN:%.*]], label [[CODEREPL:%.*]], !dbg [[DBG12]]
; CHECK:       for.end7:
; CHECK-NEXT:    br label [[FINAL_END]], !dbg [[DBG12]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_lb
; CHECK-SAME: () #[[ATTR2:[0-9]+]] !dbg [[DBG14:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret i32 0, !dbg [[DBG15:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_ub
; CHECK-SAME: () #[[ATTR2]] !dbg [[DBG16:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret i64 10, !dbg [[DBG17:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_step
; CHECK-SAME: () #[[ATTR2]] !dbg [[DBG18:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret i32 1, !dbg [[DBG19:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_lb.1
; CHECK-SAME: () #[[ATTR2]] !dbg [[DBG20:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret i32 0, !dbg [[DBG21:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_ub.2
; CHECK-SAME: () #[[ATTR2]] !dbg [[DBG22:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret i64 10, !dbg [[DBG23:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_step.3
; CHECK-SAME: () #[[ATTR2]] !dbg [[DBG24:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret i32 1, !dbg [[DBG25:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_constructor_check_version() {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @nanos6_check_version(i64 1, ptr @nanos6_versions, ptr @[[GLOB0:[0-9]+]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_unpacked_task_region_main
; CHECK-SAME: (ptr [[I:%.*]], ptr [[J:%.*]], ptr [[LOOP_BOUNDS:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) !dbg [[DBG26:![0-9]+]] {
; CHECK-NEXT:  newFuncRoot:
; CHECK-NEXT:    br label [[TMP0:%.*]], !dbg [[DBG27:![0-9]+]]
; CHECK:       0:
; CHECK-NEXT:    [[LB_GEP:%.*]] = getelementptr [[NANOS6_LOOP_BOUNDS_T:%.*]], ptr [[LOOP_BOUNDS]], i32 0, i32 0, !dbg [[DBG27]]
; CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr [[LB_GEP]], align 8, !dbg [[DBG27]]
; CHECK-NEXT:    [[UB_GEP:%.*]] = getelementptr [[NANOS6_LOOP_BOUNDS_T]], ptr [[LOOP_BOUNDS]], i32 0, i32 1, !dbg [[DBG27]]
; CHECK-NEXT:    [[TMP2:%.*]] = load i64, ptr [[UB_GEP]], align 8, !dbg [[DBG27]]
; CHECK-NEXT:    [[TMP3:%.*]] = call i32 @compute_lb(), !dbg [[DBG27]]
; CHECK-NEXT:    [[TMP4:%.*]] = call i64 @compute_ub(), !dbg [[DBG27]]
; CHECK-NEXT:    [[TMP5:%.*]] = call i32 @compute_step(), !dbg [[DBG27]]
; CHECK-NEXT:    [[TMP6:%.*]] = sext i32 [[TMP3]] to i64, !dbg [[DBG27]]
; CHECK-NEXT:    [[TMP7:%.*]] = sub i64 [[TMP2]], [[TMP6]], !dbg [[DBG27]]
; CHECK-NEXT:    [[TMP8:%.*]] = sub i64 [[TMP7]], 1, !dbg [[DBG27]]
; CHECK-NEXT:    [[TMP9:%.*]] = sext i32 [[TMP5]] to i64, !dbg [[DBG27]]
; CHECK-NEXT:    [[TMP10:%.*]] = sdiv i64 [[TMP8]], [[TMP9]], !dbg [[DBG27]]
; CHECK-NEXT:    [[TMP11:%.*]] = add i64 [[TMP10]], 1, !dbg [[DBG27]]
; CHECK-NEXT:    [[TMP12:%.*]] = sub i64 [[TMP2]], 1, !dbg [[DBG27]]
; CHECK-NEXT:    store i32 [[TMP3]], ptr [[I]], align 4, !dbg [[DBG27]]
; CHECK-NEXT:    [[TMP13:%.*]] = call i32 @compute_lb.1(), !dbg [[DBG27]]
; CHECK-NEXT:    [[TMP14:%.*]] = trunc i64 [[TMP12]] to i32, !dbg [[DBG27]]
; CHECK-NEXT:    store i32 [[TMP14]], ptr [[I]], align 4, !dbg [[DBG27]]
; CHECK-NEXT:    [[TMP15:%.*]] = call i64 @compute_ub.2(), !dbg [[DBG27]]
; CHECK-NEXT:    [[TMP16:%.*]] = call i32 @compute_step.3(), !dbg [[DBG27]]
; CHECK-NEXT:    [[TMP17:%.*]] = sext i32 [[TMP13]] to i64, !dbg [[DBG27]]
; CHECK-NEXT:    [[TMP18:%.*]] = sub i64 [[TMP15]], [[TMP17]], !dbg [[DBG27]]
; CHECK-NEXT:    [[TMP19:%.*]] = sub i64 [[TMP18]], 1, !dbg [[DBG27]]
; CHECK-NEXT:    [[TMP20:%.*]] = sext i32 [[TMP16]] to i64, !dbg [[DBG27]]
; CHECK-NEXT:    [[TMP21:%.*]] = sdiv i64 [[TMP19]], [[TMP20]], !dbg [[DBG27]]
; CHECK-NEXT:    [[TMP22:%.*]] = add i64 [[TMP21]], 1, !dbg [[DBG27]]
; CHECK-NEXT:    [[TMP23:%.*]] = sext i32 [[TMP3]] to i64, !dbg [[DBG27]]
; CHECK-NEXT:    [[LOOP:%.*]] = alloca i64, align 8, !dbg [[DBG27]]
; CHECK-NEXT:    store i64 [[TMP1]], ptr [[LOOP]], align 8, !dbg [[DBG27]]
; CHECK-NEXT:    br label [[FOR_COND5:%.*]], !dbg [[DBG27]]
; CHECK:       for.cond5:
; CHECK-NEXT:    [[TMP24:%.*]] = load i64, ptr [[LOOP]], align 8, !dbg [[DBG27]]
; CHECK-NEXT:    [[TMP25:%.*]] = icmp ult i64 [[TMP24]], [[TMP2]], !dbg [[DBG27]]
; CHECK-NEXT:    br i1 [[TMP25]], label [[TMP26:%.*]], label [[DOTEXITSTUB:%.*]], !dbg [[DBG27]]
; CHECK:       26:
; CHECK-NEXT:    [[TMP27:%.*]] = load i64, ptr [[LOOP]], align 8, !dbg [[DBG27]]
; CHECK-NEXT:    [[TMP28:%.*]] = mul i64 1, [[TMP22]], !dbg [[DBG27]]
; CHECK-NEXT:    [[TMP29:%.*]] = udiv i64 [[TMP27]], [[TMP28]], !dbg [[DBG27]]
; CHECK-NEXT:    [[TMP30:%.*]] = sext i32 [[TMP5]] to i64, !dbg [[DBG27]]
; CHECK-NEXT:    [[TMP31:%.*]] = mul i64 [[TMP29]], [[TMP30]], !dbg [[DBG27]]
; CHECK-NEXT:    [[TMP32:%.*]] = sext i32 [[TMP3]] to i64, !dbg [[DBG27]]
; CHECK-NEXT:    [[TMP33:%.*]] = add i64 [[TMP31]], [[TMP32]], !dbg [[DBG27]]
; CHECK-NEXT:    [[TMP34:%.*]] = mul i64 [[TMP29]], [[TMP28]], !dbg [[DBG27]]
; CHECK-NEXT:    [[TMP35:%.*]] = sub i64 [[TMP27]], [[TMP34]], !dbg [[DBG27]]
; CHECK-NEXT:    [[TMP36:%.*]] = trunc i64 [[TMP33]] to i32, !dbg [[DBG27]]
; CHECK-NEXT:    store i32 [[TMP36]], ptr [[I]], align 4, !dbg [[DBG27]]
; CHECK-NEXT:    br label [[TMP37:%.*]], !dbg [[DBG27]]
; CHECK:       37:
; CHECK-NEXT:    [[TMP38:%.*]] = udiv i64 [[TMP35]], 1, !dbg [[DBG27]]
; CHECK-NEXT:    [[TMP39:%.*]] = sext i32 [[TMP16]] to i64, !dbg [[DBG27]]
; CHECK-NEXT:    [[TMP40:%.*]] = mul i64 [[TMP38]], [[TMP39]], !dbg [[DBG27]]
; CHECK-NEXT:    [[TMP41:%.*]] = sext i32 [[TMP13]] to i64, !dbg [[DBG27]]
; CHECK-NEXT:    [[TMP42:%.*]] = add i64 [[TMP40]], [[TMP41]], !dbg [[DBG27]]
; CHECK-NEXT:    [[TMP43:%.*]] = mul i64 [[TMP38]], 1, !dbg [[DBG27]]
; CHECK-NEXT:    [[TMP44:%.*]] = sub i64 [[TMP35]], [[TMP43]], !dbg [[DBG27]]
; CHECK-NEXT:    [[TMP45:%.*]] = trunc i64 [[TMP42]] to i32, !dbg [[DBG27]]
; CHECK-NEXT:    store i32 [[TMP45]], ptr [[J]], align 4, !dbg [[DBG27]]
; CHECK-NEXT:    br label [[FOR_BODY6:%.*]], !dbg [[DBG27]]
; CHECK:       for.body6:
; CHECK-NEXT:    br label [[FOR_INCR8:%.*]], !dbg [[DBG28:![0-9]+]]
; CHECK:       for.incr8:
; CHECK-NEXT:    [[TMP46:%.*]] = load i64, ptr [[LOOP]], align 8, !dbg [[DBG27]]
; CHECK-NEXT:    [[TMP47:%.*]] = add i64 [[TMP46]], 1, !dbg [[DBG27]]
; CHECK-NEXT:    store i64 [[TMP47]], ptr [[LOOP]], align 8, !dbg [[DBG27]]
; CHECK-NEXT:    br label [[FOR_COND5]], !dbg [[DBG27]]
; CHECK:       .exitStub:
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_task_region_main
; CHECK-SAME: (ptr [[TASK_ARGS:%.*]], ptr [[LOOP_BOUNDS:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_I:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN:%.*]], ptr [[TASK_ARGS]], i32 0, i32 0
; CHECK-NEXT:    [[GEP_J:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN]], ptr [[TASK_ARGS]], i32 0, i32 1
; CHECK-NEXT:    [[TMP0:%.*]] = icmp ne ptr [[ADDRESS_TRANSLATION_TABLE]], null
; CHECK-NEXT:    br i1 [[TMP0]], label [[TLATE_IF:%.*]], label [[TLATE_END:%.*]]
; CHECK:       end:
; CHECK-NEXT:    call void @nanos6_unpacked_task_region_main(ptr [[GEP_I]], ptr [[GEP_J]], ptr [[LOOP_BOUNDS]], ptr [[ADDRESS_TRANSLATION_TABLE]])
; CHECK-NEXT:    ret void
; CHECK:       tlate.if:
; CHECK-NEXT:    br label [[TLATE_END]]
; CHECK:       tlate.end:
; CHECK-NEXT:    br label [[END:%.*]]
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_constructor_register_task_info() {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @nanos6_register_task_info(ptr @task_info_var_main)
; CHECK-NEXT:    ret void
;
