; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --function-signature --include-generated-funcs
; RUN: opt %s -passes=ompss-2 -S | FileCheck %s
; ModuleID = 'task_final_exception.ll'
source_filename = "task_final_exception.ll"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; struct S {
;     int x;
;     S() {}
;     S(const S &s) {}
;     ~S() {}
; };
; void foo(S const & s){}
; int main() {
;     S s;
;     #pragma oss task
;     foo(s);
; }

%struct.S = type { i32 }

$_ZN1SC1Ev = comdat any

$_ZN1SC1ERKS_ = comdat any

$_ZN1SD1Ev = comdat any

$_ZN1SC2Ev = comdat any

$_ZN1SC2ERKS_ = comdat any

$_ZN1SD2Ev = comdat any

; Function Attrs: mustprogress noinline nounwind optnone
define dso_local void @_Z3fooRK1S(ptr noundef nonnull align 4 dereferenceable(4) %s) #0 !dbg !5 {
entry:
  %s.addr = alloca ptr, align 8
  store ptr %s, ptr %s.addr, align 8
  ret void, !dbg !9
}

; Function Attrs: mustprogress noinline norecurse nounwind optnone
define dso_local noundef i32 @main() #1 !dbg !10 {
entry:
  %s = alloca %struct.S, align 4
  call void @_ZN1SC1Ev(ptr noundef nonnull align 4 dereferenceable(4) %s), !dbg !11
  %0 = call token @llvm.directive.region.entry() [ "DIR.OSS"([5 x i8] c"TASK\00"), "QUAL.OSS.FIRSTPRIVATE"(ptr %s, %struct.S undef), "QUAL.OSS.COPY"(ptr %s, ptr @oss_copy_ctor_ZN1SC1ERKS_), "QUAL.OSS.DEINIT"(ptr %s, ptr @oss_dtor_ZN1SD1Ev) ], !dbg !12
  call void @_Z3fooRK1S(ptr noundef nonnull align 4 dereferenceable(4) %s), !dbg !13
  call void @llvm.directive.region.exit(token %0), !dbg !13
  call void @_ZN1SD1Ev(ptr noundef nonnull align 4 dereferenceable(4) %s) #3, !dbg !14
  ret i32 0, !dbg !14
}

; Function Attrs: noinline nounwind optnone
define linkonce_odr void @_ZN1SC1Ev(ptr noundef nonnull align 4 dereferenceable(4) %this) unnamed_addr #2 comdat align 2 !dbg !15 {
entry:
  %this.addr = alloca ptr, align 8
  store ptr %this, ptr %this.addr, align 8
  %this1 = load ptr, ptr %this.addr, align 8
  call void @_ZN1SC2Ev(ptr noundef nonnull align 4 dereferenceable(4) %this1), !dbg !16
  ret void, !dbg !17
}

; Function Attrs: nounwind
declare token @llvm.directive.region.entry() #3

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token) #3

; Function Attrs: noinline nounwind optnone
define linkonce_odr void @_ZN1SC1ERKS_(ptr noundef nonnull align 4 dereferenceable(4) %this, ptr noundef nonnull align 4 dereferenceable(4) %s) unnamed_addr #2 comdat align 2 !dbg !18 {
entry:
  %this.addr = alloca ptr, align 8
  %s.addr = alloca ptr, align 8
  store ptr %this, ptr %this.addr, align 8
  store ptr %s, ptr %s.addr, align 8
  %this1 = load ptr, ptr %this.addr, align 8
  %0 = load ptr, ptr %s.addr, align 8, !dbg !19
  call void @_ZN1SC2ERKS_(ptr noundef nonnull align 4 dereferenceable(4) %this1, ptr noundef nonnull align 4 dereferenceable(4) %0), !dbg !19
  ret void, !dbg !20
}

; Function Attrs: noinline norecurse nounwind
define internal void @oss_copy_ctor_ZN1SC1ERKS_(ptr noundef %0, ptr noundef %1, i64 noundef %2) #4 !dbg !21 {
entry:
  %.addr = alloca ptr, align 8
  %.addr1 = alloca ptr, align 8
  %.addr2 = alloca i64, align 8
  store ptr %0, ptr %.addr, align 8
  store ptr %1, ptr %.addr1, align 8
  store i64 %2, ptr %.addr2, align 8
  %3 = load ptr, ptr %.addr, align 8, !dbg !22
  %4 = load ptr, ptr %.addr1, align 8, !dbg !22
  %5 = load i64, ptr %.addr2, align 8, !dbg !22
  %arrayctor.dst.end = getelementptr inbounds %struct.S, ptr %4, i64 %5, !dbg !22
  br label %arrayctor.loop, !dbg !22

arrayctor.loop:                                   ; preds = %arrayctor.loop, %entry
  %arrayctor.dst.cur = phi ptr [ %4, %entry ], [ %arrayctor.dst.next, %arrayctor.loop ], !dbg !22
  %arrayctor.src.cur = phi ptr [ %3, %entry ], [ %arrayctor.src.next, %arrayctor.loop ], !dbg !22
  call void @_ZN1SC1ERKS_(ptr noundef nonnull align 4 dereferenceable(4) %arrayctor.dst.cur, ptr noundef nonnull align 4 dereferenceable(4) %arrayctor.src.cur), !dbg !23
  %arrayctor.dst.next = getelementptr inbounds %struct.S, ptr %arrayctor.dst.cur, i64 1, !dbg !22
  %arrayctor.src.next = getelementptr inbounds %struct.S, ptr %arrayctor.src.cur, i64 1, !dbg !22
  %arrayctor.done = icmp eq ptr %arrayctor.dst.next, %arrayctor.dst.end, !dbg !22
  br i1 %arrayctor.done, label %arrayctor.cont, label %arrayctor.loop, !dbg !22

arrayctor.cont:                                   ; preds = %arrayctor.loop
  ret void, !dbg !23
}

; Function Attrs: noinline nounwind optnone
define linkonce_odr void @_ZN1SD1Ev(ptr noundef nonnull align 4 dereferenceable(4) %this) unnamed_addr #2 comdat align 2 !dbg !25 {
entry:
  %this.addr = alloca ptr, align 8
  store ptr %this, ptr %this.addr, align 8
  %this1 = load ptr, ptr %this.addr, align 8
  call void @_ZN1SD2Ev(ptr noundef nonnull align 4 dereferenceable(4) %this1) #3, !dbg !26
  ret void, !dbg !27
}

; Function Attrs: noinline norecurse nounwind
define internal void @oss_dtor_ZN1SD1Ev(ptr noundef %0, i64 noundef %1) #4 !dbg !28 {
entry:
  %.addr = alloca ptr, align 8
  %.addr1 = alloca i64, align 8
  store ptr %0, ptr %.addr, align 8
  store i64 %1, ptr %.addr1, align 8
  %2 = load ptr, ptr %.addr, align 8, !dbg !29
  %3 = load i64, ptr %.addr1, align 8, !dbg !29
  %arraydtor.dst.end = getelementptr inbounds %struct.S, ptr %2, i64 %3, !dbg !29
  br label %arraydtor.loop, !dbg !29

arraydtor.loop:                                   ; preds = %arraydtor.loop, %entry
  %arraydtor.dst.cur = phi ptr [ %2, %entry ], [ %arraydtor.dst.next, %arraydtor.loop ], !dbg !29
  call void @_ZN1SD1Ev(ptr noundef nonnull align 4 dereferenceable(4) %arraydtor.dst.cur) #3, !dbg !29
  %arraydtor.dst.next = getelementptr inbounds %struct.S, ptr %arraydtor.dst.cur, i64 1, !dbg !29
  %arraydtor.done = icmp eq ptr %arraydtor.dst.next, %arraydtor.dst.end, !dbg !29
  br i1 %arraydtor.done, label %arraydtor.cont, label %arraydtor.loop, !dbg !29

arraydtor.cont:                                   ; preds = %arraydtor.loop
  ret void, !dbg !29
}

; Function Attrs: noinline nounwind optnone
define linkonce_odr void @_ZN1SC2Ev(ptr noundef nonnull align 4 dereferenceable(4) %this) unnamed_addr #2 comdat align 2 !dbg !30 {
entry:
  %this.addr = alloca ptr, align 8
  store ptr %this, ptr %this.addr, align 8
  %this1 = load ptr, ptr %this.addr, align 8
  ret void, !dbg !31
}

; Function Attrs: noinline nounwind optnone
define linkonce_odr void @_ZN1SC2ERKS_(ptr noundef nonnull align 4 dereferenceable(4) %this, ptr noundef nonnull align 4 dereferenceable(4) %s) unnamed_addr #2 comdat align 2 !dbg !32 {
entry:
  %this.addr = alloca ptr, align 8
  %s.addr = alloca ptr, align 8
  store ptr %this, ptr %this.addr, align 8
  store ptr %s, ptr %s.addr, align 8
  %this1 = load ptr, ptr %this.addr, align 8
  ret void, !dbg !33
}

; Function Attrs: noinline nounwind optnone
define linkonce_odr void @_ZN1SD2Ev(ptr noundef nonnull align 4 dereferenceable(4) %this) unnamed_addr #2 comdat align 2 !dbg !34 {
entry:
  %this.addr = alloca ptr, align 8
  store ptr %this, ptr %this.addr, align 8
  %this1 = load ptr, ptr %this.addr, align 8
  ret void, !dbg !35
}

attributes #0 = { mustprogress noinline nounwind optnone "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
attributes #1 = { mustprogress noinline norecurse nounwind optnone "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
attributes #2 = { noinline nounwind optnone "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
attributes #3 = { nounwind }
attributes #4 = { noinline norecurse nounwind "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus_14, file: !1, producer: "", isOptimized: false, runtimeVersion: 0, emissionKind: NoDebug, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "<stdin>", directory: "")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 1, !"wchar_size", i32 4}
!4 = !{!""}
!5 = distinct !DISubprogram(name: "foo", scope: !6, file: !6, line: 7, type: !7, scopeLine: 7, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !8)
!6 = !DIFile(filename: "task_final_exception.ll", directory: "")
!7 = !DISubroutineType(types: !8)
!8 = !{}
!9 = !DILocation(line: 7, column: 23, scope: !5)
!10 = distinct !DISubprogram(name: "main", scope: !6, file: !6, line: 8, type: !7, scopeLine: 8, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !8)
!11 = !DILocation(line: 9, column: 7, scope: !10)
!12 = !DILocation(line: 10, column: 13, scope: !10)
!13 = !DILocation(line: 11, column: 5, scope: !10)
!14 = !DILocation(line: 12, column: 1, scope: !10)
!15 = distinct !DISubprogram(name: "S", scope: !6, file: !6, line: 3, type: !7, scopeLine: 3, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !8)
!16 = !DILocation(line: 3, column: 9, scope: !15)
!17 = !DILocation(line: 3, column: 10, scope: !15)
!18 = distinct !DISubprogram(name: "S", scope: !6, file: !6, line: 4, type: !7, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !8)
!19 = !DILocation(line: 4, column: 19, scope: !18)
!20 = !DILocation(line: 4, column: 20, scope: !18)
!21 = distinct !DISubprogram(linkageName: "oss_copy_ctor_ZN1SC1ERKS_", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!22 = !DILocation(line: 0, scope: !21)
!23 = !DILocation(line: 11, column: 9, scope: !24)
!24 = !DILexicalBlockFile(scope: !21, file: !6, discriminator: 0)
!25 = distinct !DISubprogram(name: "~S", scope: !6, file: !6, line: 5, type: !7, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !8)
!26 = !DILocation(line: 5, column: 10, scope: !25)
!27 = !DILocation(line: 5, column: 11, scope: !25)
!28 = distinct !DISubprogram(linkageName: "oss_dtor_ZN1SD1Ev", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!29 = !DILocation(line: 0, scope: !28)
!30 = distinct !DISubprogram(name: "S", scope: !6, file: !6, line: 3, type: !7, scopeLine: 3, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !8)
!31 = !DILocation(line: 3, column: 10, scope: !30)
!32 = distinct !DISubprogram(name: "S", scope: !6, file: !6, line: 4, type: !7, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !8)
!33 = !DILocation(line: 4, column: 20, scope: !32)
!34 = distinct !DISubprogram(name: "~S", scope: !6, file: !6, line: 5, type: !7, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !8)
!35 = !DILocation(line: 5, column: 11, scope: !34)
; CHECK-LABEL: define {{[^@]+}}@_Z3fooRK1S
; CHECK-SAME: (ptr noundef nonnull align 4 dereferenceable(4) [[S:%.*]]) #[[ATTR0:[0-9]+]] !dbg [[DBG5:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[S_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr [[S]], ptr [[S_ADDR]], align 8
; CHECK-NEXT:    ret void, !dbg [[DBG9:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@main
; CHECK-SAME: () #[[ATTR1:[0-9]+]] !dbg [[DBG10:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[S:%.*]] = alloca [[STRUCT_S:%.*]], align 4
; CHECK-NEXT:    call void @_ZN1SC1Ev(ptr noundef nonnull align 4 dereferenceable(4) [[S]]), !dbg [[DBG11:![0-9]+]]
; CHECK-NEXT:    [[TMP0:%.*]] = alloca ptr, align 8, !dbg [[DBG12:![0-9]+]]
; CHECK-NEXT:    [[TMP1:%.*]] = alloca ptr, align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[NUM_DEPS:%.*]] = alloca i64, align 8, !dbg [[DBG12]]
; CHECK-NEXT:    br label [[FINAL_COND:%.*]], !dbg [[DBG12]]
; CHECK:       codeRepl:
; CHECK-NEXT:    store i64 0, ptr [[NUM_DEPS]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP2:%.*]] = load i64, ptr [[NUM_DEPS]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    call void @nanos6_create_task(ptr @task_info_var_main, ptr @task_invocation_info_main, ptr null, i64 16, ptr [[TMP0]], ptr [[TMP1]], i64 0, i64 [[TMP2]]), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[TMP0]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[ARGS_END:%.*]] = getelementptr i8, ptr [[TMP3]], i64 16, !dbg [[DBG12]]
; CHECK-NEXT:    [[GEP_S:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN:%.*]], ptr [[TMP3]], i32 0, i32 0, !dbg [[DBG12]]
; CHECK-NEXT:    call void @oss_copy_ctor_ZN1SC1ERKS_(ptr [[S]], ptr [[GEP_S]], i64 1), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP4:%.*]] = load ptr, ptr [[TMP1]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    call void @nanos6_submit_task(ptr [[TMP4]]), !dbg [[DBG12]]
; CHECK-NEXT:    br label [[FINAL_END:%.*]], !dbg [[DBG12]]
; CHECK:       final.end:
; CHECK-NEXT:    call void @_ZN1SD1Ev(ptr noundef nonnull align 4 dereferenceable(4) [[S]]) #[[ATTR3:[0-9]+]], !dbg [[DBG13:![0-9]+]]
; CHECK-NEXT:    ret i32 0, !dbg [[DBG13]]
; CHECK:       final.then:
; CHECK-NEXT:    call void @_Z3fooRK1S(ptr noundef nonnull align 4 dereferenceable(4) [[S]]), !dbg [[DBG14:![0-9]+]]
; CHECK-NEXT:    br label [[FINAL_END]], !dbg [[DBG13]]
; CHECK:       final.cond:
; CHECK-NEXT:    [[TMP5:%.*]] = call i32 @nanos6_in_final(), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP6:%.*]] = icmp ne i32 [[TMP5]], 0, !dbg [[DBG12]]
; CHECK-NEXT:    br i1 [[TMP6]], label [[FINAL_THEN:%.*]], label [[CODEREPL:%.*]], !dbg [[DBG12]]
;
;
; CHECK-LABEL: define {{[^@]+}}@_ZN1SC1Ev
; CHECK-SAME: (ptr noundef nonnull align 4 dereferenceable(4) [[THIS:%.*]]) unnamed_addr #[[ATTR2:[0-9]+]] comdat align 2 !dbg [[DBG15:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 8
; CHECK-NEXT:    [[THIS1:%.*]] = load ptr, ptr [[THIS_ADDR]], align 8
; CHECK-NEXT:    call void @_ZN1SC2Ev(ptr noundef nonnull align 4 dereferenceable(4) [[THIS1]]), !dbg [[DBG16:![0-9]+]]
; CHECK-NEXT:    ret void, !dbg [[DBG17:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@_ZN1SC1ERKS_
; CHECK-SAME: (ptr noundef nonnull align 4 dereferenceable(4) [[THIS:%.*]], ptr noundef nonnull align 4 dereferenceable(4) [[S:%.*]]) unnamed_addr #[[ATTR2]] comdat align 2 !dbg [[DBG18:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    [[S_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 8
; CHECK-NEXT:    store ptr [[S]], ptr [[S_ADDR]], align 8
; CHECK-NEXT:    [[THIS1:%.*]] = load ptr, ptr [[THIS_ADDR]], align 8
; CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[S_ADDR]], align 8, !dbg [[DBG19:![0-9]+]]
; CHECK-NEXT:    call void @_ZN1SC2ERKS_(ptr noundef nonnull align 4 dereferenceable(4) [[THIS1]], ptr noundef nonnull align 4 dereferenceable(4) [[TMP0]]), !dbg [[DBG19]]
; CHECK-NEXT:    ret void, !dbg [[DBG20:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@oss_copy_ctor_ZN1SC1ERKS_
; CHECK-SAME: (ptr noundef [[TMP0:%.*]], ptr noundef [[TMP1:%.*]], i64 noundef [[TMP2:%.*]]) #[[ATTR4:[0-9]+]] !dbg [[DBG21:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[DOTADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    [[DOTADDR1:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    [[DOTADDR2:%.*]] = alloca i64, align 8
; CHECK-NEXT:    store ptr [[TMP0]], ptr [[DOTADDR]], align 8
; CHECK-NEXT:    store ptr [[TMP1]], ptr [[DOTADDR1]], align 8
; CHECK-NEXT:    store i64 [[TMP2]], ptr [[DOTADDR2]], align 8
; CHECK-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[DOTADDR]], align 8, !dbg [[DBG22:![0-9]+]]
; CHECK-NEXT:    [[TMP4:%.*]] = load ptr, ptr [[DOTADDR1]], align 8, !dbg [[DBG22]]
; CHECK-NEXT:    [[TMP5:%.*]] = load i64, ptr [[DOTADDR2]], align 8, !dbg [[DBG22]]
; CHECK-NEXT:    [[ARRAYCTOR_DST_END:%.*]] = getelementptr inbounds [[STRUCT_S:%.*]], ptr [[TMP4]], i64 [[TMP5]], !dbg [[DBG22]]
; CHECK-NEXT:    br label [[ARRAYCTOR_LOOP:%.*]], !dbg [[DBG22]]
; CHECK:       arrayctor.loop:
; CHECK-NEXT:    [[ARRAYCTOR_DST_CUR:%.*]] = phi ptr [ [[TMP4]], [[ENTRY:%.*]] ], [ [[ARRAYCTOR_DST_NEXT:%.*]], [[ARRAYCTOR_LOOP]] ], !dbg [[DBG22]]
; CHECK-NEXT:    [[ARRAYCTOR_SRC_CUR:%.*]] = phi ptr [ [[TMP3]], [[ENTRY]] ], [ [[ARRAYCTOR_SRC_NEXT:%.*]], [[ARRAYCTOR_LOOP]] ], !dbg [[DBG22]]
; CHECK-NEXT:    call void @_ZN1SC1ERKS_(ptr noundef nonnull align 4 dereferenceable(4) [[ARRAYCTOR_DST_CUR]], ptr noundef nonnull align 4 dereferenceable(4) [[ARRAYCTOR_SRC_CUR]]), !dbg [[DBG23:![0-9]+]]
; CHECK-NEXT:    [[ARRAYCTOR_DST_NEXT]] = getelementptr inbounds [[STRUCT_S]], ptr [[ARRAYCTOR_DST_CUR]], i64 1, !dbg [[DBG22]]
; CHECK-NEXT:    [[ARRAYCTOR_SRC_NEXT]] = getelementptr inbounds [[STRUCT_S]], ptr [[ARRAYCTOR_SRC_CUR]], i64 1, !dbg [[DBG22]]
; CHECK-NEXT:    [[ARRAYCTOR_DONE:%.*]] = icmp eq ptr [[ARRAYCTOR_DST_NEXT]], [[ARRAYCTOR_DST_END]], !dbg [[DBG22]]
; CHECK-NEXT:    br i1 [[ARRAYCTOR_DONE]], label [[ARRAYCTOR_CONT:%.*]], label [[ARRAYCTOR_LOOP]], !dbg [[DBG22]]
; CHECK:       arrayctor.cont:
; CHECK-NEXT:    ret void, !dbg [[DBG23]]
;
;
; CHECK-LABEL: define {{[^@]+}}@_ZN1SD1Ev
; CHECK-SAME: (ptr noundef nonnull align 4 dereferenceable(4) [[THIS:%.*]]) unnamed_addr #[[ATTR2]] comdat align 2 !dbg [[DBG25:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 8
; CHECK-NEXT:    [[THIS1:%.*]] = load ptr, ptr [[THIS_ADDR]], align 8
; CHECK-NEXT:    call void @_ZN1SD2Ev(ptr noundef nonnull align 4 dereferenceable(4) [[THIS1]]) #[[ATTR3]], !dbg [[DBG26:![0-9]+]]
; CHECK-NEXT:    ret void, !dbg [[DBG27:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@oss_dtor_ZN1SD1Ev
; CHECK-SAME: (ptr noundef [[TMP0:%.*]], i64 noundef [[TMP1:%.*]]) #[[ATTR4]] !dbg [[DBG28:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[DOTADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    [[DOTADDR1:%.*]] = alloca i64, align 8
; CHECK-NEXT:    store ptr [[TMP0]], ptr [[DOTADDR]], align 8
; CHECK-NEXT:    store i64 [[TMP1]], ptr [[DOTADDR1]], align 8
; CHECK-NEXT:    [[TMP2:%.*]] = load ptr, ptr [[DOTADDR]], align 8, !dbg [[DBG29:![0-9]+]]
; CHECK-NEXT:    [[TMP3:%.*]] = load i64, ptr [[DOTADDR1]], align 8, !dbg [[DBG29]]
; CHECK-NEXT:    [[ARRAYDTOR_DST_END:%.*]] = getelementptr inbounds [[STRUCT_S:%.*]], ptr [[TMP2]], i64 [[TMP3]], !dbg [[DBG29]]
; CHECK-NEXT:    br label [[ARRAYDTOR_LOOP:%.*]], !dbg [[DBG29]]
; CHECK:       arraydtor.loop:
; CHECK-NEXT:    [[ARRAYDTOR_DST_CUR:%.*]] = phi ptr [ [[TMP2]], [[ENTRY:%.*]] ], [ [[ARRAYDTOR_DST_NEXT:%.*]], [[ARRAYDTOR_LOOP]] ], !dbg [[DBG29]]
; CHECK-NEXT:    call void @_ZN1SD1Ev(ptr noundef nonnull align 4 dereferenceable(4) [[ARRAYDTOR_DST_CUR]]) #[[ATTR3]], !dbg [[DBG29]]
; CHECK-NEXT:    [[ARRAYDTOR_DST_NEXT]] = getelementptr inbounds [[STRUCT_S]], ptr [[ARRAYDTOR_DST_CUR]], i64 1, !dbg [[DBG29]]
; CHECK-NEXT:    [[ARRAYDTOR_DONE:%.*]] = icmp eq ptr [[ARRAYDTOR_DST_NEXT]], [[ARRAYDTOR_DST_END]], !dbg [[DBG29]]
; CHECK-NEXT:    br i1 [[ARRAYDTOR_DONE]], label [[ARRAYDTOR_CONT:%.*]], label [[ARRAYDTOR_LOOP]], !dbg [[DBG29]]
; CHECK:       arraydtor.cont:
; CHECK-NEXT:    ret void, !dbg [[DBG29]]
;
;
; CHECK-LABEL: define {{[^@]+}}@_ZN1SC2Ev
; CHECK-SAME: (ptr noundef nonnull align 4 dereferenceable(4) [[THIS:%.*]]) unnamed_addr #[[ATTR2]] comdat align 2 !dbg [[DBG30:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 8
; CHECK-NEXT:    [[THIS1:%.*]] = load ptr, ptr [[THIS_ADDR]], align 8
; CHECK-NEXT:    ret void, !dbg [[DBG31:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@_ZN1SC2ERKS_
; CHECK-SAME: (ptr noundef nonnull align 4 dereferenceable(4) [[THIS:%.*]], ptr noundef nonnull align 4 dereferenceable(4) [[S:%.*]]) unnamed_addr #[[ATTR2]] comdat align 2 !dbg [[DBG32:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    [[S_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 8
; CHECK-NEXT:    store ptr [[S]], ptr [[S_ADDR]], align 8
; CHECK-NEXT:    [[THIS1:%.*]] = load ptr, ptr [[THIS_ADDR]], align 8
; CHECK-NEXT:    ret void, !dbg [[DBG33:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@_ZN1SD2Ev
; CHECK-SAME: (ptr noundef nonnull align 4 dereferenceable(4) [[THIS:%.*]]) unnamed_addr #[[ATTR2]] comdat align 2 !dbg [[DBG34:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 8
; CHECK-NEXT:    [[THIS1:%.*]] = load ptr, ptr [[THIS_ADDR]], align 8
; CHECK-NEXT:    ret void, !dbg [[DBG35:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_unpacked_destroy_main
; CHECK-SAME: (ptr [[S:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @oss_dtor_ZN1SD1Ev(ptr [[S]], i64 1)
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_destroy_main
; CHECK-SAME: (ptr [[TASK_ARGS:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_S:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN:%.*]], ptr [[TASK_ARGS]], i32 0, i32 0
; CHECK-NEXT:    call void @nanos6_unpacked_destroy_main(ptr [[GEP_S]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_duplicate_main
; CHECK-SAME: (ptr [[TASK_ARGS_SRC:%.*]], ptr [[TASK_ARGS_DST:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[TASK_ARGS_DST]], align 8
; CHECK-NEXT:    [[ARGS_END:%.*]] = getelementptr i8, ptr [[TMP0]], i64 16
; CHECK-NEXT:    [[GEP_SRC_S:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN:%.*]], ptr [[TASK_ARGS_SRC]], i32 0, i32 0
; CHECK-NEXT:    [[GEP_DST_S:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN]], ptr [[TMP0]], i32 0, i32 0
; CHECK-NEXT:    call void @oss_copy_ctor_ZN1SC1ERKS_(ptr [[GEP_SRC_S]], ptr [[GEP_DST_S]], i64 1)
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_unpacked_task_region_main
; CHECK-SAME: (ptr [[S:%.*]], ptr [[DEVICE_ENV:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) !dbg [[DBG36:![0-9]+]] {
; CHECK-NEXT:  newFuncRoot:
; CHECK-NEXT:    br label [[TMP0:%.*]], !dbg [[DBG37:![0-9]+]]
; CHECK:       0:
; CHECK-NEXT:    call void @_Z3fooRK1S(ptr noundef nonnull align 4 dereferenceable(4) [[S]]), !dbg [[DBG38:![0-9]+]]
; CHECK-NEXT:    br label [[DOTEXITSTUB:%.*]], !dbg [[DBG39:![0-9]+]]
; CHECK:       .exitStub:
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_task_region_main
; CHECK-SAME: (ptr [[TASK_ARGS:%.*]], ptr [[DEVICE_ENV:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_S:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN:%.*]], ptr [[TASK_ARGS]], i32 0, i32 0
; CHECK-NEXT:    [[TMP0:%.*]] = icmp ne ptr [[ADDRESS_TRANSLATION_TABLE]], null
; CHECK-NEXT:    br i1 [[TMP0]], label [[TMP1:%.*]], label [[TMP2:%.*]]
; CHECK:       1:
; CHECK-NEXT:    br label [[TMP2]]
; CHECK:       2:
; CHECK-NEXT:    call void @nanos6_unpacked_task_region_main(ptr [[GEP_S]], ptr [[DEVICE_ENV]], ptr [[ADDRESS_TRANSLATION_TABLE]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_constructor_register_task_info() {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @nanos6_register_task_info(ptr @task_info_var_main)
; CHECK-NEXT:    ret void
;
