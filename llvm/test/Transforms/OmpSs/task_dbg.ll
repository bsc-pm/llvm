; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --function-signature --include-generated-funcs
; RUN: opt %s -passes=ompss-2 -S | FileCheck %s
; ModuleID = 'task_dbg.ll'
source_filename = "task_dbg.ll"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Originally CodeExtractor removes intrinsics if they refer to something outside
; the region. This test checks for OmpSs-2 that debug intrinsics are kept.

; struct S {
;     int x = 4;
;     void foo() {
;         #pragma oss task
;         {
;             x++;
;             x++;
;         }
;     }
; };
; int main() {
;     int x = 10;
;     int vla[x];
;     int array[10];
;     S s;
;     s.foo();
;     x = vla[0] = array[0] = 43;
;     #pragma oss task
;     {
;         x++;
;         vla[0]++;
;         array[0]++;
;     }
; }

%struct.S = type { i32 }

$_ZN1SC1Ev = comdat any

$_ZN1S3fooEv = comdat any

$_ZN1SC2Ev = comdat any

; Function Attrs: mustprogress noinline norecurse nounwind optnone
define dso_local noundef i32 @main() #0 !dbg !5 {
entry:
  %x = alloca i32, align 4
  %saved_stack = alloca ptr, align 8
  %__vla_expr0 = alloca i64, align 8
  %array = alloca [10 x i32], align 16
  %s = alloca %struct.S, align 4
  store i32 10, ptr %x, align 4, !dbg !9
  %0 = load i32, ptr %x, align 4, !dbg !10
  %1 = zext i32 %0 to i64, !dbg !11
  %2 = call ptr @llvm.stacksave(), !dbg !11
  store ptr %2, ptr %saved_stack, align 8, !dbg !11
  %vla = alloca i32, i64 %1, align 16, !dbg !11
  store i64 %1, ptr %__vla_expr0, align 8, !dbg !11
  call void @_ZN1SC1Ev(ptr noundef nonnull align 4 dereferenceable(4) %s) #4, !dbg !12
  call void @_ZN1S3fooEv(ptr noundef nonnull align 4 dereferenceable(4) %s), !dbg !13
  %arrayidx = getelementptr inbounds [10 x i32], ptr %array, i64 0, i64 0, !dbg !14
  store i32 43, ptr %arrayidx, align 16, !dbg !15
  %arrayidx1 = getelementptr inbounds i32, ptr %vla, i64 0, !dbg !16
  store i32 43, ptr %arrayidx1, align 16, !dbg !17
  store i32 43, ptr %x, align 4, !dbg !18
  %3 = call token @llvm.directive.region.entry() [ "DIR.OSS"([5 x i8] c"TASK\00"), "QUAL.OSS.FIRSTPRIVATE"(ptr %x, i32 undef), "QUAL.OSS.FIRSTPRIVATE"(ptr %vla, i32 undef), "QUAL.OSS.VLA.DIMS"(ptr %vla, i64 %1), "QUAL.OSS.FIRSTPRIVATE"(ptr %array, [10 x i32] undef), "QUAL.OSS.CAPTURED"(i64 %1) ], !dbg !19
  %4 = load i32, ptr %x, align 4, !dbg !20
  %inc = add nsw i32 %4, 1, !dbg !20
  store i32 %inc, ptr %x, align 4, !dbg !20
  %arrayidx2 = getelementptr inbounds i32, ptr %vla, i64 0, !dbg !21
  %5 = load i32, ptr %arrayidx2, align 16, !dbg !22
  %inc3 = add nsw i32 %5, 1, !dbg !22
  store i32 %inc3, ptr %arrayidx2, align 16, !dbg !22
  %arrayidx4 = getelementptr inbounds [10 x i32], ptr %array, i64 0, i64 0, !dbg !23
  %6 = load i32, ptr %arrayidx4, align 16, !dbg !24
  %inc5 = add nsw i32 %6, 1, !dbg !24
  store i32 %inc5, ptr %arrayidx4, align 16, !dbg !24
  call void @llvm.directive.region.exit(token %3), !dbg !25
  %7 = load ptr, ptr %saved_stack, align 8, !dbg !26
  call void @llvm.stackrestore(ptr %7), !dbg !26
  ret i32 0, !dbg !26
}

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare ptr @llvm.stacksave() #1

; Function Attrs: noinline nounwind optnone
define linkonce_odr void @_ZN1SC1Ev(ptr noundef nonnull align 4 dereferenceable(4) %this) unnamed_addr #2 comdat align 2 !dbg !27 {
entry:
  %this.addr = alloca ptr, align 8
  store ptr %this, ptr %this.addr, align 8
  %this1 = load ptr, ptr %this.addr, align 8
  call void @_ZN1SC2Ev(ptr noundef nonnull align 4 dereferenceable(4) %this1) #4, !dbg !28
  ret void, !dbg !28
}

; Function Attrs: mustprogress noinline nounwind optnone
define linkonce_odr void @_ZN1S3fooEv(ptr noundef nonnull align 4 dereferenceable(4) %this) #3 comdat align 2 !dbg !29 {
entry:
  %this.addr = alloca ptr, align 8
  store ptr %this, ptr %this.addr, align 8
  %this1 = load ptr, ptr %this.addr, align 8
  %0 = call token @llvm.directive.region.entry() [ "DIR.OSS"([5 x i8] c"TASK\00"), "QUAL.OSS.SHARED"(ptr %this1, %struct.S undef) ], !dbg !30
  %x = getelementptr inbounds %struct.S, ptr %this1, i32 0, i32 0, !dbg !31
  %1 = load i32, ptr %x, align 4, !dbg !32
  %inc = add nsw i32 %1, 1, !dbg !32
  store i32 %inc, ptr %x, align 4, !dbg !32
  %x2 = getelementptr inbounds %struct.S, ptr %this1, i32 0, i32 0, !dbg !33
  %2 = load i32, ptr %x2, align 4, !dbg !34
  %inc3 = add nsw i32 %2, 1, !dbg !34
  store i32 %inc3, ptr %x2, align 4, !dbg !34
  call void @llvm.directive.region.exit(token %0), !dbg !35
  ret void, !dbg !36
}

; Function Attrs: nounwind
declare token @llvm.directive.region.entry() #4

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token) #4

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare void @llvm.stackrestore(ptr) #1

; Function Attrs: noinline nounwind optnone
define linkonce_odr void @_ZN1SC2Ev(ptr noundef nonnull align 4 dereferenceable(4) %this) unnamed_addr #2 comdat align 2 !dbg !37 {
entry:
  %this.addr = alloca ptr, align 8
  store ptr %this, ptr %this.addr, align 8
  %this1 = load ptr, ptr %this.addr, align 8
  %x = getelementptr inbounds %struct.S, ptr %this1, i32 0, i32 0, !dbg !38
  store i32 4, ptr %x, align 4, !dbg !38
  ret void, !dbg !39
}

attributes #0 = { mustprogress noinline norecurse nounwind optnone "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
attributes #1 = { nocallback nofree nosync nounwind willreturn }
attributes #2 = { noinline nounwind optnone "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
attributes #3 = { mustprogress noinline nounwind optnone "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
attributes #4 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus_14, file: !1, producer: "", isOptimized: false, runtimeVersion: 0, emissionKind: NoDebug, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "<stdin>", directory: "")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 1, !"wchar_size", i32 4}
!4 = !{!""}
!5 = distinct !DISubprogram(name: "main", scope: !6, file: !6, line: 11, type: !7, scopeLine: 11, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !8)
!6 = !DIFile(filename: "task_dbg.ll", directory: "")
!7 = !DISubroutineType(types: !8)
!8 = !{}
!9 = !DILocation(line: 12, column: 9, scope: !5)
!10 = !DILocation(line: 13, column: 13, scope: !5)
!11 = !DILocation(line: 13, column: 5, scope: !5)
!12 = !DILocation(line: 15, column: 7, scope: !5)
!13 = !DILocation(line: 16, column: 7, scope: !5)
!14 = !DILocation(line: 17, column: 18, scope: !5)
!15 = !DILocation(line: 17, column: 27, scope: !5)
!16 = !DILocation(line: 17, column: 9, scope: !5)
!17 = !DILocation(line: 17, column: 16, scope: !5)
!18 = !DILocation(line: 17, column: 7, scope: !5)
!19 = !DILocation(line: 18, column: 13, scope: !5)
!20 = !DILocation(line: 20, column: 10, scope: !5)
!21 = !DILocation(line: 21, column: 9, scope: !5)
!22 = !DILocation(line: 21, column: 15, scope: !5)
!23 = !DILocation(line: 22, column: 9, scope: !5)
!24 = !DILocation(line: 22, column: 17, scope: !5)
!25 = !DILocation(line: 23, column: 5, scope: !5)
!26 = !DILocation(line: 24, column: 1, scope: !5)
!27 = distinct !DISubprogram(name: "S", scope: !6, file: !6, line: 1, type: !7, scopeLine: 1, flags: DIFlagArtificial | DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !8)
!28 = !DILocation(line: 1, column: 8, scope: !27)
!29 = distinct !DISubprogram(name: "foo", scope: !6, file: !6, line: 3, type: !7, scopeLine: 3, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !8)
!30 = !DILocation(line: 4, column: 17, scope: !29)
!31 = !DILocation(line: 6, column: 13, scope: !29)
!32 = !DILocation(line: 6, column: 14, scope: !29)
!33 = !DILocation(line: 7, column: 13, scope: !29)
!34 = !DILocation(line: 7, column: 14, scope: !29)
!35 = !DILocation(line: 8, column: 9, scope: !29)
!36 = !DILocation(line: 9, column: 5, scope: !29)
!37 = distinct !DISubprogram(name: "S", scope: !6, file: !6, line: 1, type: !7, scopeLine: 1, flags: DIFlagArtificial | DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !8)
!38 = !DILocation(line: 2, column: 9, scope: !37)
!39 = !DILocation(line: 1, column: 8, scope: !37)
; CHECK-LABEL: define {{[^@]+}}@main
; CHECK-SAME: () #[[ATTR0:[0-9]+]] !dbg [[DBG5:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[X:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[SAVED_STACK:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    [[__VLA_EXPR0:%.*]] = alloca i64, align 8
; CHECK-NEXT:    [[ARRAY:%.*]] = alloca [10 x i32], align 16
; CHECK-NEXT:    [[S:%.*]] = alloca [[STRUCT_S:%.*]], align 4
; CHECK-NEXT:    store i32 10, ptr [[X]], align 4, !dbg [[DBG9:![0-9]+]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[X]], align 4, !dbg [[DBG10:![0-9]+]]
; CHECK-NEXT:    [[TMP1:%.*]] = zext i32 [[TMP0]] to i64, !dbg [[DBG11:![0-9]+]]
; CHECK-NEXT:    [[TMP2:%.*]] = call ptr @llvm.stacksave(), !dbg [[DBG11]]
; CHECK-NEXT:    store ptr [[TMP2]], ptr [[SAVED_STACK]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[VLA:%.*]] = alloca i32, i64 [[TMP1]], align 16, !dbg [[DBG11]]
; CHECK-NEXT:    store i64 [[TMP1]], ptr [[__VLA_EXPR0]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    call void @_ZN1SC1Ev(ptr noundef nonnull align 4 dereferenceable(4) [[S]]) #[[ATTR4:[0-9]+]], !dbg [[DBG12:![0-9]+]]
; CHECK-NEXT:    call void @_ZN1S3fooEv(ptr noundef nonnull align 4 dereferenceable(4) [[S]]), !dbg [[DBG13:![0-9]+]]
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds [10 x i32], ptr [[ARRAY]], i64 0, i64 0, !dbg [[DBG14:![0-9]+]]
; CHECK-NEXT:    store i32 43, ptr [[ARRAYIDX]], align 16, !dbg [[DBG15:![0-9]+]]
; CHECK-NEXT:    [[ARRAYIDX1:%.*]] = getelementptr inbounds i32, ptr [[VLA]], i64 0, !dbg [[DBG16:![0-9]+]]
; CHECK-NEXT:    store i32 43, ptr [[ARRAYIDX1]], align 16, !dbg [[DBG17:![0-9]+]]
; CHECK-NEXT:    store i32 43, ptr [[X]], align 4, !dbg [[DBG18:![0-9]+]]
; CHECK-NEXT:    [[TMP3:%.*]] = alloca ptr, align 8, !dbg [[DBG19:![0-9]+]]
; CHECK-NEXT:    [[TMP4:%.*]] = alloca ptr, align 8, !dbg [[DBG19]]
; CHECK-NEXT:    [[NUM_DEPS:%.*]] = alloca i64, align 8, !dbg [[DBG19]]
; CHECK-NEXT:    br label [[FINAL_COND:%.*]], !dbg [[DBG19]]
; CHECK:       codeRepl:
; CHECK-NEXT:    [[TMP5:%.*]] = mul nuw i64 4, [[TMP1]], !dbg [[DBG19]]
; CHECK-NEXT:    [[TMP6:%.*]] = add nuw i64 0, [[TMP5]], !dbg [[DBG19]]
; CHECK-NEXT:    [[TMP7:%.*]] = add nuw i64 64, [[TMP6]], !dbg [[DBG19]]
; CHECK-NEXT:    store i64 0, ptr [[NUM_DEPS]], align 8, !dbg [[DBG19]]
; CHECK-NEXT:    [[TMP8:%.*]] = load i64, ptr [[NUM_DEPS]], align 8, !dbg [[DBG19]]
; CHECK-NEXT:    call void @nanos6_create_task(ptr @task_info_var_main, ptr @task_invocation_info_main, ptr null, i64 [[TMP7]], ptr [[TMP3]], ptr [[TMP4]], i64 0, i64 [[TMP8]]), !dbg [[DBG19]]
; CHECK-NEXT:    [[TMP9:%.*]] = load ptr, ptr [[TMP3]], align 8, !dbg [[DBG19]]
; CHECK-NEXT:    [[ARGS_END:%.*]] = getelementptr i8, ptr [[TMP9]], i64 64, !dbg [[DBG19]]
; CHECK-NEXT:    [[GEP_VLA:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN:%.*]], ptr [[TMP9]], i32 0, i32 1, !dbg [[DBG19]]
; CHECK-NEXT:    store ptr [[ARGS_END]], ptr [[GEP_VLA]], align 4, !dbg [[DBG19]]
; CHECK-NEXT:    [[TMP10:%.*]] = mul nuw i64 4, [[TMP1]], !dbg [[DBG19]]
; CHECK-NEXT:    [[TMP11:%.*]] = getelementptr i8, ptr [[ARGS_END]], i64 [[TMP10]], !dbg [[DBG19]]
; CHECK-NEXT:    [[GEP_X:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN]], ptr [[TMP9]], i32 0, i32 0, !dbg [[DBG19]]
; CHECK-NEXT:    call void @llvm.memcpy.p0.p0.i64(ptr align 4 [[GEP_X]], ptr align 4 [[X]], i64 4, i1 false), !dbg [[DBG19]]
; CHECK-NEXT:    [[TMP12:%.*]] = mul nuw i64 1, [[TMP1]], !dbg [[DBG19]]
; CHECK-NEXT:    [[GEP_VLA1:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN]], ptr [[TMP9]], i32 0, i32 1, !dbg [[DBG19]]
; CHECK-NEXT:    [[TMP13:%.*]] = load ptr, ptr [[GEP_VLA1]], align 8, !dbg [[DBG19]]
; CHECK-NEXT:    [[TMP14:%.*]] = mul nuw i64 [[TMP12]], 4, !dbg [[DBG19]]
; CHECK-NEXT:    call void @llvm.memcpy.p0.p0.i64(ptr align 4 [[TMP13]], ptr align 4 [[VLA]], i64 [[TMP14]], i1 false), !dbg [[DBG19]]
; CHECK-NEXT:    [[GEP_ARRAY:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN]], ptr [[TMP9]], i32 0, i32 2, !dbg [[DBG19]]
; CHECK-NEXT:    call void @llvm.memcpy.p0.p0.i64(ptr align 4 [[GEP_ARRAY]], ptr align 4 [[ARRAY]], i64 40, i1 false), !dbg [[DBG19]]
; CHECK-NEXT:    [[CAPT_GEP_:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN]], ptr [[TMP9]], i32 0, i32 3, !dbg [[DBG19]]
; CHECK-NEXT:    store i64 [[TMP1]], ptr [[CAPT_GEP_]], align 8, !dbg [[DBG19]]
; CHECK-NEXT:    [[TMP15:%.*]] = load ptr, ptr [[TMP4]], align 8, !dbg [[DBG19]]
; CHECK-NEXT:    call void @nanos6_submit_task(ptr [[TMP15]]), !dbg [[DBG19]]
; CHECK-NEXT:    br label [[FINAL_END:%.*]], !dbg [[DBG19]]
; CHECK:       final.end:
; CHECK-NEXT:    [[TMP16:%.*]] = load ptr, ptr [[SAVED_STACK]], align 8, !dbg [[DBG20:![0-9]+]]
; CHECK-NEXT:    call void @llvm.stackrestore(ptr [[TMP16]]), !dbg [[DBG20]]
; CHECK-NEXT:    ret i32 0, !dbg [[DBG20]]
; CHECK:       final.then:
; CHECK-NEXT:    [[TMP17:%.*]] = load i32, ptr [[X]], align 4, !dbg [[DBG21:![0-9]+]]
; CHECK-NEXT:    [[INC_CLONE:%.*]] = add nsw i32 [[TMP17]], 1, !dbg [[DBG21]]
; CHECK-NEXT:    store i32 [[INC_CLONE]], ptr [[X]], align 4, !dbg [[DBG21]]
; CHECK-NEXT:    [[ARRAYIDX2_CLONE:%.*]] = getelementptr inbounds i32, ptr [[VLA]], i64 0, !dbg [[DBG22:![0-9]+]]
; CHECK-NEXT:    [[TMP18:%.*]] = load i32, ptr [[ARRAYIDX2_CLONE]], align 16, !dbg [[DBG23:![0-9]+]]
; CHECK-NEXT:    [[INC3_CLONE:%.*]] = add nsw i32 [[TMP18]], 1, !dbg [[DBG23]]
; CHECK-NEXT:    store i32 [[INC3_CLONE]], ptr [[ARRAYIDX2_CLONE]], align 16, !dbg [[DBG23]]
; CHECK-NEXT:    [[ARRAYIDX4_CLONE:%.*]] = getelementptr inbounds [10 x i32], ptr [[ARRAY]], i64 0, i64 0, !dbg [[DBG24:![0-9]+]]
; CHECK-NEXT:    [[TMP19:%.*]] = load i32, ptr [[ARRAYIDX4_CLONE]], align 16, !dbg [[DBG25:![0-9]+]]
; CHECK-NEXT:    [[INC5_CLONE:%.*]] = add nsw i32 [[TMP19]], 1, !dbg [[DBG25]]
; CHECK-NEXT:    store i32 [[INC5_CLONE]], ptr [[ARRAYIDX4_CLONE]], align 16, !dbg [[DBG25]]
; CHECK-NEXT:    br label [[FINAL_END]], !dbg [[DBG20]]
; CHECK:       final.cond:
; CHECK-NEXT:    [[TMP20:%.*]] = call i32 @nanos6_in_final(), !dbg [[DBG19]]
; CHECK-NEXT:    [[TMP21:%.*]] = icmp ne i32 [[TMP20]], 0, !dbg [[DBG19]]
; CHECK-NEXT:    br i1 [[TMP21]], label [[FINAL_THEN:%.*]], label [[CODEREPL:%.*]], !dbg [[DBG19]]
;
;
; CHECK-LABEL: define {{[^@]+}}@_ZN1SC1Ev
; CHECK-SAME: (ptr noundef nonnull align 4 dereferenceable(4) [[THIS:%.*]]) unnamed_addr #[[ATTR2:[0-9]+]] comdat align 2 !dbg [[DBG26:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 8
; CHECK-NEXT:    [[THIS1:%.*]] = load ptr, ptr [[THIS_ADDR]], align 8
; CHECK-NEXT:    call void @_ZN1SC2Ev(ptr noundef nonnull align 4 dereferenceable(4) [[THIS1]]) #[[ATTR4]], !dbg [[DBG27:![0-9]+]]
; CHECK-NEXT:    ret void, !dbg [[DBG27]]
;
;
; CHECK-LABEL: define {{[^@]+}}@_ZN1S3fooEv
; CHECK-SAME: (ptr noundef nonnull align 4 dereferenceable(4) [[THIS:%.*]]) #[[ATTR3:[0-9]+]] comdat align 2 !dbg [[DBG28:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 8
; CHECK-NEXT:    [[THIS1:%.*]] = load ptr, ptr [[THIS_ADDR]], align 8
; CHECK-NEXT:    [[TMP0:%.*]] = alloca ptr, align 8, !dbg [[DBG29:![0-9]+]]
; CHECK-NEXT:    [[TMP1:%.*]] = alloca ptr, align 8, !dbg [[DBG29]]
; CHECK-NEXT:    [[NUM_DEPS:%.*]] = alloca i64, align 8, !dbg [[DBG29]]
; CHECK-NEXT:    br label [[FINAL_COND:%.*]], !dbg [[DBG29]]
; CHECK:       codeRepl:
; CHECK-NEXT:    store i64 0, ptr [[NUM_DEPS]], align 8, !dbg [[DBG29]]
; CHECK-NEXT:    [[TMP2:%.*]] = load i64, ptr [[NUM_DEPS]], align 8, !dbg [[DBG29]]
; CHECK-NEXT:    call void @nanos6_create_task(ptr @task_info_var__ZN1S3fooEv, ptr @task_invocation_info__ZN1S3fooEv, ptr null, i64 16, ptr [[TMP0]], ptr [[TMP1]], i64 0, i64 [[TMP2]]), !dbg [[DBG29]]
; CHECK-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[TMP0]], align 8, !dbg [[DBG29]]
; CHECK-NEXT:    [[ARGS_END:%.*]] = getelementptr i8, ptr [[TMP3]], i64 16, !dbg [[DBG29]]
; CHECK-NEXT:    [[GEP_THIS1:%.*]] = getelementptr [[NANOS6_TASK_ARGS__ZN1S3FOOEV:%.*]], ptr [[TMP3]], i32 0, i32 0, !dbg [[DBG29]]
; CHECK-NEXT:    store ptr [[THIS1]], ptr [[GEP_THIS1]], align 8, !dbg [[DBG29]]
; CHECK-NEXT:    [[TMP4:%.*]] = load ptr, ptr [[TMP1]], align 8, !dbg [[DBG29]]
; CHECK-NEXT:    call void @nanos6_submit_task(ptr [[TMP4]]), !dbg [[DBG29]]
; CHECK-NEXT:    br label [[FINAL_END:%.*]], !dbg [[DBG29]]
; CHECK:       final.end:
; CHECK-NEXT:    ret void, !dbg [[DBG30:![0-9]+]]
; CHECK:       final.then:
; CHECK-NEXT:    [[X_CLONE:%.*]] = getelementptr inbounds [[STRUCT_S:%.*]], ptr [[THIS1]], i32 0, i32 0, !dbg [[DBG31:![0-9]+]]
; CHECK-NEXT:    [[TMP5:%.*]] = load i32, ptr [[X_CLONE]], align 4, !dbg [[DBG32:![0-9]+]]
; CHECK-NEXT:    [[INC_CLONE:%.*]] = add nsw i32 [[TMP5]], 1, !dbg [[DBG32]]
; CHECK-NEXT:    store i32 [[INC_CLONE]], ptr [[X_CLONE]], align 4, !dbg [[DBG32]]
; CHECK-NEXT:    [[X2_CLONE:%.*]] = getelementptr inbounds [[STRUCT_S]], ptr [[THIS1]], i32 0, i32 0, !dbg [[DBG33:![0-9]+]]
; CHECK-NEXT:    [[TMP6:%.*]] = load i32, ptr [[X2_CLONE]], align 4, !dbg [[DBG34:![0-9]+]]
; CHECK-NEXT:    [[INC3_CLONE:%.*]] = add nsw i32 [[TMP6]], 1, !dbg [[DBG34]]
; CHECK-NEXT:    store i32 [[INC3_CLONE]], ptr [[X2_CLONE]], align 4, !dbg [[DBG34]]
; CHECK-NEXT:    br label [[FINAL_END]], !dbg [[DBG30]]
; CHECK:       final.cond:
; CHECK-NEXT:    [[TMP7:%.*]] = call i32 @nanos6_in_final(), !dbg [[DBG29]]
; CHECK-NEXT:    [[TMP8:%.*]] = icmp ne i32 [[TMP7]], 0, !dbg [[DBG29]]
; CHECK-NEXT:    br i1 [[TMP8]], label [[FINAL_THEN:%.*]], label [[CODEREPL:%.*]], !dbg [[DBG29]]
;
;
; CHECK-LABEL: define {{[^@]+}}@_ZN1SC2Ev
; CHECK-SAME: (ptr noundef nonnull align 4 dereferenceable(4) [[THIS:%.*]]) unnamed_addr #[[ATTR2]] comdat align 2 !dbg [[DBG35:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 8
; CHECK-NEXT:    [[THIS1:%.*]] = load ptr, ptr [[THIS_ADDR]], align 8
; CHECK-NEXT:    [[X:%.*]] = getelementptr inbounds [[STRUCT_S:%.*]], ptr [[THIS1]], i32 0, i32 0, !dbg [[DBG36:![0-9]+]]
; CHECK-NEXT:    store i32 4, ptr [[X]], align 4, !dbg [[DBG36]]
; CHECK-NEXT:    ret void, !dbg [[DBG37:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_duplicate_main
; CHECK-SAME: (ptr [[TASK_ARGS_SRC:%.*]], ptr [[TASK_ARGS_DST:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[TASK_ARGS_DST]], align 8
; CHECK-NEXT:    [[ARGS_END:%.*]] = getelementptr i8, ptr [[TMP0]], i64 64
; CHECK-NEXT:    [[GEP_DST_VLA:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN:%.*]], ptr [[TMP0]], i32 0, i32 1
; CHECK-NEXT:    store ptr [[ARGS_END]], ptr [[GEP_DST_VLA]], align 4
; CHECK-NEXT:    [[GEP_DST_:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN]], ptr [[TMP0]], i32 0, i32 3
; CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr [[GEP_DST_]], align 8
; CHECK-NEXT:    [[TMP2:%.*]] = mul nuw i64 4, [[TMP1]]
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[ARGS_END]], i64 [[TMP2]]
; CHECK-NEXT:    [[GEP_SRC_X:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN]], ptr [[TASK_ARGS_SRC]], i32 0, i32 0
; CHECK-NEXT:    [[GEP_DST_X:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN]], ptr [[TMP0]], i32 0, i32 0
; CHECK-NEXT:    call void @llvm.memcpy.p0.p0.i64(ptr align 4 [[GEP_DST_X]], ptr align 4 [[GEP_SRC_X]], i64 4, i1 false)
; CHECK-NEXT:    [[GEP_SRC_:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN]], ptr [[TASK_ARGS_SRC]], i32 0, i32 3
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[GEP_SRC_]], align 8
; CHECK-NEXT:    [[TMP5:%.*]] = mul nuw i64 1, [[TMP4]]
; CHECK-NEXT:    [[GEP_SRC_VLA:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN]], ptr [[TASK_ARGS_SRC]], i32 0, i32 1
; CHECK-NEXT:    [[GEP_DST_VLA1:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN]], ptr [[TMP0]], i32 0, i32 1
; CHECK-NEXT:    [[TMP6:%.*]] = load ptr, ptr [[GEP_SRC_VLA]], align 8
; CHECK-NEXT:    [[TMP7:%.*]] = load ptr, ptr [[GEP_DST_VLA1]], align 8
; CHECK-NEXT:    [[TMP8:%.*]] = mul nuw i64 [[TMP5]], 4
; CHECK-NEXT:    call void @llvm.memcpy.p0.p0.i64(ptr align 4 [[TMP7]], ptr align 4 [[TMP6]], i64 [[TMP8]], i1 false)
; CHECK-NEXT:    [[GEP_SRC_ARRAY:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN]], ptr [[TASK_ARGS_SRC]], i32 0, i32 2
; CHECK-NEXT:    [[GEP_DST_ARRAY:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN]], ptr [[TMP0]], i32 0, i32 2
; CHECK-NEXT:    call void @llvm.memcpy.p0.p0.i64(ptr align 4 [[GEP_DST_ARRAY]], ptr align 4 [[GEP_SRC_ARRAY]], i64 40, i1 false)
; CHECK-NEXT:    [[CAPT_GEP_SRC_:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN]], ptr [[TASK_ARGS_SRC]], i32 0, i32 3
; CHECK-NEXT:    [[CAPT_GEP_DST_:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN]], ptr [[TMP0]], i32 0, i32 3
; CHECK-NEXT:    [[TMP9:%.*]] = load i64, ptr [[CAPT_GEP_SRC_]], align 8
; CHECK-NEXT:    store i64 [[TMP9]], ptr [[CAPT_GEP_DST_]], align 8
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_unpacked_task_region_main
; CHECK-SAME: (ptr [[X:%.*]], ptr [[VLA:%.*]], ptr [[ARRAY:%.*]], i64 [[TMP0:%.*]], ptr [[DEVICE_ENV:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) !dbg [[DBG38:![0-9]+]] {
; CHECK-NEXT:  newFuncRoot:
; CHECK-NEXT:    br label [[TMP1:%.*]], !dbg [[DBG39:![0-9]+]]
; CHECK:       1:
; CHECK-NEXT:    [[TMP2:%.*]] = load i32, ptr [[X]], align 4, !dbg [[DBG40:![0-9]+]]
; CHECK-NEXT:    [[INC:%.*]] = add nsw i32 [[TMP2]], 1, !dbg [[DBG40]]
; CHECK-NEXT:    store i32 [[INC]], ptr [[X]], align 4, !dbg [[DBG40]]
; CHECK-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds i32, ptr [[VLA]], i64 0, !dbg [[DBG41:![0-9]+]]
; CHECK-NEXT:    [[TMP3:%.*]] = load i32, ptr [[ARRAYIDX2]], align 16, !dbg [[DBG42:![0-9]+]]
; CHECK-NEXT:    [[INC3:%.*]] = add nsw i32 [[TMP3]], 1, !dbg [[DBG42]]
; CHECK-NEXT:    store i32 [[INC3]], ptr [[ARRAYIDX2]], align 16, !dbg [[DBG42]]
; CHECK-NEXT:    [[ARRAYIDX4:%.*]] = getelementptr inbounds [10 x i32], ptr [[ARRAY]], i64 0, i64 0, !dbg [[DBG43:![0-9]+]]
; CHECK-NEXT:    [[TMP4:%.*]] = load i32, ptr [[ARRAYIDX4]], align 16, !dbg [[DBG44:![0-9]+]]
; CHECK-NEXT:    [[INC5:%.*]] = add nsw i32 [[TMP4]], 1, !dbg [[DBG44]]
; CHECK-NEXT:    store i32 [[INC5]], ptr [[ARRAYIDX4]], align 16, !dbg [[DBG44]]
; CHECK-NEXT:    br label [[DOTEXITSTUB:%.*]], !dbg [[DBG45:![0-9]+]]
; CHECK:       .exitStub:
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_task_region_main
; CHECK-SAME: (ptr [[TASK_ARGS:%.*]], ptr [[DEVICE_ENV:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_X:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN:%.*]], ptr [[TASK_ARGS]], i32 0, i32 0
; CHECK-NEXT:    [[GEP_VLA:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN]], ptr [[TASK_ARGS]], i32 0, i32 1
; CHECK-NEXT:    [[LOAD_GEP_VLA:%.*]] = load ptr, ptr [[GEP_VLA]], align 8
; CHECK-NEXT:    [[GEP_ARRAY:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN]], ptr [[TASK_ARGS]], i32 0, i32 2
; CHECK-NEXT:    [[CAPT_GEP:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN]], ptr [[TASK_ARGS]], i32 0, i32 3
; CHECK-NEXT:    [[LOAD_CAPT_GEP:%.*]] = load i64, ptr [[CAPT_GEP]], align 8
; CHECK-NEXT:    [[TMP0:%.*]] = icmp ne ptr [[ADDRESS_TRANSLATION_TABLE]], null
; CHECK-NEXT:    br i1 [[TMP0]], label [[TMP1:%.*]], label [[TMP2:%.*]]
; CHECK:       1:
; CHECK-NEXT:    br label [[TMP2]]
; CHECK:       2:
; CHECK-NEXT:    call void @nanos6_unpacked_task_region_main(ptr [[GEP_X]], ptr [[LOAD_GEP_VLA]], ptr [[GEP_ARRAY]], i64 [[LOAD_CAPT_GEP]], ptr [[DEVICE_ENV]], ptr [[ADDRESS_TRANSLATION_TABLE]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_constructor_register_task_info() {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @nanos6_register_task_info(ptr @task_info_var_main)
; CHECK-NEXT:    call void @nanos6_register_task_info(ptr @task_info_var__ZN1S3fooEv)
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_unpacked_task_region__ZN1S3fooEv
; CHECK-SAME: (ptr [[THIS1:%.*]], ptr [[DEVICE_ENV:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) !dbg [[DBG46:![0-9]+]] {
; CHECK-NEXT:  newFuncRoot:
; CHECK-NEXT:    br label [[TMP0:%.*]], !dbg [[DBG47:![0-9]+]]
; CHECK:       0:
; CHECK-NEXT:    [[X:%.*]] = getelementptr inbounds [[STRUCT_S:%.*]], ptr [[THIS1]], i32 0, i32 0, !dbg [[DBG48:![0-9]+]]
; CHECK-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 4, !dbg [[DBG49:![0-9]+]]
; CHECK-NEXT:    [[INC:%.*]] = add nsw i32 [[TMP1]], 1, !dbg [[DBG49]]
; CHECK-NEXT:    store i32 [[INC]], ptr [[X]], align 4, !dbg [[DBG49]]
; CHECK-NEXT:    [[X2:%.*]] = getelementptr inbounds [[STRUCT_S]], ptr [[THIS1]], i32 0, i32 0, !dbg [[DBG50:![0-9]+]]
; CHECK-NEXT:    [[TMP2:%.*]] = load i32, ptr [[X2]], align 4, !dbg [[DBG51:![0-9]+]]
; CHECK-NEXT:    [[INC3:%.*]] = add nsw i32 [[TMP2]], 1, !dbg [[DBG51]]
; CHECK-NEXT:    store i32 [[INC3]], ptr [[X2]], align 4, !dbg [[DBG51]]
; CHECK-NEXT:    br label [[DOTEXITSTUB:%.*]], !dbg [[DBG52:![0-9]+]]
; CHECK:       .exitStub:
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_task_region__ZN1S3fooEv
; CHECK-SAME: (ptr [[TASK_ARGS:%.*]], ptr [[DEVICE_ENV:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_THIS1:%.*]] = getelementptr [[NANOS6_TASK_ARGS__ZN1S3FOOEV:%.*]], ptr [[TASK_ARGS]], i32 0, i32 0
; CHECK-NEXT:    [[LOAD_GEP_THIS1:%.*]] = load ptr, ptr [[GEP_THIS1]], align 8
; CHECK-NEXT:    [[TMP0:%.*]] = icmp ne ptr [[ADDRESS_TRANSLATION_TABLE]], null
; CHECK-NEXT:    br i1 [[TMP0]], label [[TMP1:%.*]], label [[TMP2:%.*]]
; CHECK:       1:
; CHECK-NEXT:    br label [[TMP2]]
; CHECK:       2:
; CHECK-NEXT:    call void @nanos6_unpacked_task_region__ZN1S3fooEv(ptr [[LOAD_GEP_THIS1]], ptr [[DEVICE_ENV]], ptr [[ADDRESS_TRANSLATION_TABLE]])
; CHECK-NEXT:    ret void
;
