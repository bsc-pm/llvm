; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --function-signature --include-generated-funcs
; RUN: opt %s -passes=ompss-2 -S | FileCheck %s
; ModuleID = 'loop_duplicate_args_vla.ll'
source_filename = "loop_duplicate_args_vla.ll"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; This test checks task_args duplicate shared/private/firstprivate vlas

; struct S {
;     S();
;     S(const S&);
;     ~S();
; };
; void foo() {
;     int n;
;     S s[n];
;     #pragma oss task for shared(s)
;     for (int i = 0; i < 10; ++i) {}
;     #pragma oss task for private(s)
;     for (int i = 0; i < 10; ++i) {}
;     #pragma oss task for firstprivate(s)
;     for (int i = 0; i < 10; ++i) {}
; }

%struct.S = type { i8 }

; Function Attrs: mustprogress noinline nounwind optnone
define dso_local void @_Z3foov() #0 !dbg !5 {
entry:
  %n = alloca i32, align 4
  %saved_stack = alloca ptr, align 8
  %__vla_expr0 = alloca i64, align 8
  %i = alloca i32, align 4
  %i1 = alloca i32, align 4
  %i2 = alloca i32, align 4
  %0 = load i32, ptr %n, align 4, !dbg !9
  %1 = zext i32 %0 to i64, !dbg !10
  %2 = call ptr @llvm.stacksave(), !dbg !10
  store ptr %2, ptr %saved_stack, align 8, !dbg !10
  %vla = alloca %struct.S, i64 %1, align 16, !dbg !10
  store i64 %1, ptr %__vla_expr0, align 8, !dbg !10
  %isempty = icmp eq i64 %1, 0, !dbg !11
  br i1 %isempty, label %arrayctor.cont, label %new.ctorloop, !dbg !11

new.ctorloop:                                     ; preds = %entry
  %arrayctor.end = getelementptr inbounds %struct.S, ptr %vla, i64 %1, !dbg !11
  br label %arrayctor.loop, !dbg !11

arrayctor.loop:                                   ; preds = %arrayctor.loop, %new.ctorloop
  %arrayctor.cur = phi ptr [ %vla, %new.ctorloop ], [ %arrayctor.next, %arrayctor.loop ], !dbg !11
  call void @_ZN1SC1Ev(ptr noundef nonnull align 1 dereferenceable(1) %arrayctor.cur), !dbg !11
  %arrayctor.next = getelementptr inbounds %struct.S, ptr %arrayctor.cur, i64 1, !dbg !11
  %arrayctor.done = icmp eq ptr %arrayctor.next, %arrayctor.end, !dbg !11
  br i1 %arrayctor.done, label %arrayctor.cont, label %arrayctor.loop, !dbg !11

arrayctor.cont:                                   ; preds = %entry, %arrayctor.loop
  store i32 0, ptr %i, align 4, !dbg !12
  %3 = call token @llvm.directive.region.entry() [ "DIR.OSS"([9 x i8] c"TASK.FOR\00"), "QUAL.OSS.SHARED"(ptr %vla, %struct.S undef), "QUAL.OSS.VLA.DIMS"(ptr %vla, i64 %1), "QUAL.OSS.PRIVATE"(ptr %i, i32 undef), "QUAL.OSS.LOOP.IND.VAR"(ptr %i), "QUAL.OSS.LOOP.LOWER.BOUND"(ptr @compute_lb), "QUAL.OSS.LOOP.UPPER.BOUND"(ptr @compute_ub), "QUAL.OSS.LOOP.STEP"(ptr @compute_step), "QUAL.OSS.LOOP.TYPE"(i64 0, i64 1, i64 1, i64 1, i64 1), "QUAL.OSS.CAPTURED"(i64 %1) ], !dbg !13
  call void @llvm.directive.region.exit(token %3), !dbg !14
  store i32 0, ptr %i1, align 4, !dbg !15
  %4 = call token @llvm.directive.region.entry() [ "DIR.OSS"([9 x i8] c"TASK.FOR\00"), "QUAL.OSS.PRIVATE"(ptr %vla, %struct.S undef), "QUAL.OSS.VLA.DIMS"(ptr %vla, i64 %1), "QUAL.OSS.INIT"(ptr %vla, ptr @oss_ctor_ZN1SC1Ev), "QUAL.OSS.DEINIT"(ptr %vla, ptr @oss_dtor_ZN1SD1Ev), "QUAL.OSS.PRIVATE"(ptr %i1, i32 undef), "QUAL.OSS.LOOP.IND.VAR"(ptr %i1), "QUAL.OSS.LOOP.LOWER.BOUND"(ptr @compute_lb.1), "QUAL.OSS.LOOP.UPPER.BOUND"(ptr @compute_ub.2), "QUAL.OSS.LOOP.STEP"(ptr @compute_step.3), "QUAL.OSS.LOOP.TYPE"(i64 0, i64 1, i64 1, i64 1, i64 1), "QUAL.OSS.CAPTURED"(i64 %1) ], !dbg !16
  call void @llvm.directive.region.exit(token %4), !dbg !17
  store i32 0, ptr %i2, align 4, !dbg !18
  %5 = call token @llvm.directive.region.entry() [ "DIR.OSS"([9 x i8] c"TASK.FOR\00"), "QUAL.OSS.PRIVATE"(ptr %i2, i32 undef), "QUAL.OSS.FIRSTPRIVATE"(ptr %vla, %struct.S undef), "QUAL.OSS.VLA.DIMS"(ptr %vla, i64 %1), "QUAL.OSS.COPY"(ptr %vla, ptr @oss_copy_ctor_ZN1SC1ERKS_), "QUAL.OSS.DEINIT"(ptr %vla, ptr @oss_dtor_ZN1SD1Ev), "QUAL.OSS.LOOP.IND.VAR"(ptr %i2), "QUAL.OSS.LOOP.LOWER.BOUND"(ptr @compute_lb.4), "QUAL.OSS.LOOP.UPPER.BOUND"(ptr @compute_ub.5), "QUAL.OSS.LOOP.STEP"(ptr @compute_step.6), "QUAL.OSS.LOOP.TYPE"(i64 0, i64 1, i64 1, i64 1, i64 1), "QUAL.OSS.CAPTURED"(i64 %1) ], !dbg !19
  call void @llvm.directive.region.exit(token %5), !dbg !20
  %6 = getelementptr inbounds %struct.S, ptr %vla, i64 %1, !dbg !21
  %arraydestroy.isempty = icmp eq ptr %vla, %6, !dbg !21
  br i1 %arraydestroy.isempty, label %arraydestroy.done3, label %arraydestroy.body, !dbg !21

arraydestroy.body:                                ; preds = %arraydestroy.body, %arrayctor.cont
  %arraydestroy.elementPast = phi ptr [ %6, %arrayctor.cont ], [ %arraydestroy.element, %arraydestroy.body ], !dbg !21
  %arraydestroy.element = getelementptr inbounds %struct.S, ptr %arraydestroy.elementPast, i64 -1, !dbg !21
  call void @_ZN1SD1Ev(ptr noundef nonnull align 1 dereferenceable(1) %arraydestroy.element) #3, !dbg !21
  %arraydestroy.done = icmp eq ptr %arraydestroy.element, %vla, !dbg !21
  br i1 %arraydestroy.done, label %arraydestroy.done3, label %arraydestroy.body, !dbg !21

arraydestroy.done3:                               ; preds = %arraydestroy.body, %arrayctor.cont
  %7 = load ptr, ptr %saved_stack, align 8, !dbg !21
  call void @llvm.stackrestore(ptr %7), !dbg !21
  ret void, !dbg !21
}

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare ptr @llvm.stacksave() #1

declare void @_ZN1SC1Ev(ptr noundef nonnull align 1 dereferenceable(1)) unnamed_addr #2

; Function Attrs: nounwind
declare token @llvm.directive.region.entry() #3

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token) #3

define internal i32 @compute_lb() #4 !dbg !22 {
entry:
  ret i32 0, !dbg !23
}

define internal i32 @compute_ub() #4 !dbg !25 {
entry:
  ret i32 10, !dbg !26
}

define internal i32 @compute_step() #4 !dbg !28 {
entry:
  ret i32 1, !dbg !29
}

; Function Attrs: noinline norecurse nounwind
define internal void @oss_ctor_ZN1SC1Ev(ptr noundef %0, i64 noundef %1) #5 !dbg !31 {
entry:
  %.addr = alloca ptr, align 8
  %.addr1 = alloca i64, align 8
  store ptr %0, ptr %.addr, align 8
  store i64 %1, ptr %.addr1, align 8
  %2 = load ptr, ptr %.addr, align 8, !dbg !32
  %3 = load i64, ptr %.addr1, align 8, !dbg !32
  %arrayctor.dst.end = getelementptr inbounds %struct.S, ptr %2, i64 %3, !dbg !32
  br label %arrayctor.loop, !dbg !32

arrayctor.loop:                                   ; preds = %arrayctor.loop, %entry
  %arrayctor.dst.cur = phi ptr [ %2, %entry ], [ %arrayctor.dst.next, %arrayctor.loop ], !dbg !32
  call void @_ZN1SC1Ev(ptr noundef nonnull align 1 dereferenceable(1) %arrayctor.dst.cur), !dbg !33
  %arrayctor.dst.next = getelementptr inbounds %struct.S, ptr %arrayctor.dst.cur, i64 1, !dbg !32
  %arrayctor.done = icmp eq ptr %arrayctor.dst.next, %arrayctor.dst.end, !dbg !32
  br i1 %arrayctor.done, label %arrayctor.cont, label %arrayctor.loop, !dbg !32

arrayctor.cont:                                   ; preds = %arrayctor.loop
  ret void, !dbg !33
}

; Function Attrs: nounwind
declare void @_ZN1SD1Ev(ptr noundef nonnull align 1 dereferenceable(1)) unnamed_addr #6

; Function Attrs: noinline norecurse nounwind
define internal void @oss_dtor_ZN1SD1Ev(ptr noundef %0, i64 noundef %1) #5 !dbg !35 {
entry:
  %.addr = alloca ptr, align 8
  %.addr1 = alloca i64, align 8
  store ptr %0, ptr %.addr, align 8
  store i64 %1, ptr %.addr1, align 8
  %2 = load ptr, ptr %.addr, align 8, !dbg !36
  %3 = load i64, ptr %.addr1, align 8, !dbg !36
  %arraydtor.dst.end = getelementptr inbounds %struct.S, ptr %2, i64 %3, !dbg !36
  br label %arraydtor.loop, !dbg !36

arraydtor.loop:                                   ; preds = %arraydtor.loop, %entry
  %arraydtor.dst.cur = phi ptr [ %2, %entry ], [ %arraydtor.dst.next, %arraydtor.loop ], !dbg !36
  call void @_ZN1SD1Ev(ptr noundef nonnull align 1 dereferenceable(1) %arraydtor.dst.cur) #3, !dbg !36
  %arraydtor.dst.next = getelementptr inbounds %struct.S, ptr %arraydtor.dst.cur, i64 1, !dbg !36
  %arraydtor.done = icmp eq ptr %arraydtor.dst.next, %arraydtor.dst.end, !dbg !36
  br i1 %arraydtor.done, label %arraydtor.cont, label %arraydtor.loop, !dbg !36

arraydtor.cont:                                   ; preds = %arraydtor.loop
  ret void, !dbg !36
}

define internal i32 @compute_lb.1() #4 !dbg !37 {
entry:
  ret i32 0, !dbg !38
}

define internal i32 @compute_ub.2() #4 !dbg !40 {
entry:
  ret i32 10, !dbg !41
}

define internal i32 @compute_step.3() #4 !dbg !43 {
entry:
  ret i32 1, !dbg !44
}

declare void @_ZN1SC1ERKS_(ptr noundef nonnull align 1 dereferenceable(1), ptr noundef nonnull align 1 dereferenceable(1)) unnamed_addr #2

; Function Attrs: noinline norecurse nounwind
define internal void @oss_copy_ctor_ZN1SC1ERKS_(ptr noundef %0, ptr noundef %1, i64 noundef %2) #5 !dbg !46 {
entry:
  %.addr = alloca ptr, align 8
  %.addr1 = alloca ptr, align 8
  %.addr2 = alloca i64, align 8
  store ptr %0, ptr %.addr, align 8
  store ptr %1, ptr %.addr1, align 8
  store i64 %2, ptr %.addr2, align 8
  %3 = load ptr, ptr %.addr, align 8, !dbg !47
  %4 = load ptr, ptr %.addr1, align 8, !dbg !47
  %5 = load i64, ptr %.addr2, align 8, !dbg !47
  %arrayctor.dst.end = getelementptr inbounds %struct.S, ptr %4, i64 %5, !dbg !47
  br label %arrayctor.loop, !dbg !47

arrayctor.loop:                                   ; preds = %arrayctor.loop, %entry
  %arrayctor.dst.cur = phi ptr [ %4, %entry ], [ %arrayctor.dst.next, %arrayctor.loop ], !dbg !47
  %arrayctor.src.cur = phi ptr [ %3, %entry ], [ %arrayctor.src.next, %arrayctor.loop ], !dbg !47
  call void @_ZN1SC1ERKS_(ptr noundef nonnull align 1 dereferenceable(1) %arrayctor.dst.cur, ptr noundef nonnull align 1 dereferenceable(1) %arrayctor.src.cur), !dbg !48
  %arrayctor.dst.next = getelementptr inbounds %struct.S, ptr %arrayctor.dst.cur, i64 1, !dbg !47
  %arrayctor.src.next = getelementptr inbounds %struct.S, ptr %arrayctor.src.cur, i64 1, !dbg !47
  %arrayctor.done = icmp eq ptr %arrayctor.dst.next, %arrayctor.dst.end, !dbg !47
  br i1 %arrayctor.done, label %arrayctor.cont, label %arrayctor.loop, !dbg !47

arrayctor.cont:                                   ; preds = %arrayctor.loop
  ret void, !dbg !48
}

define internal i32 @compute_lb.4() #4 !dbg !50 {
entry:
  ret i32 0, !dbg !51
}

define internal i32 @compute_ub.5() #4 !dbg !53 {
entry:
  ret i32 10, !dbg !54
}

define internal i32 @compute_step.6() #4 !dbg !56 {
entry:
  ret i32 1, !dbg !57
}

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare void @llvm.stackrestore(ptr) #1

attributes #0 = { mustprogress noinline nounwind optnone "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
attributes #1 = { nocallback nofree nosync nounwind willreturn }
attributes #2 = { "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
attributes #3 = { nounwind }
attributes #4 = { "min-legal-vector-width"="0" }
attributes #5 = { noinline norecurse nounwind "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
attributes #6 = { nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus_14, file: !1, producer: "", isOptimized: false, runtimeVersion: 0, emissionKind: NoDebug, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "<stdin>", directory: "")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 1, !"wchar_size", i32 4}
!4 = !{!""}
!5 = distinct !DISubprogram(name: "foo", scope: !6, file: !6, line: 7, type: !7, scopeLine: 7, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !8)
!6 = !DIFile(filename: "loop_duplicate_args_vla.ll", directory: "")
!7 = !DISubroutineType(types: !8)
!8 = !{}
!9 = !DILocation(line: 9, column: 10, scope: !5)
!10 = !DILocation(line: 9, column: 6, scope: !5)
!11 = !DILocation(line: 9, column: 8, scope: !5)
!12 = !DILocation(line: 11, column: 15, scope: !5)
!13 = !DILocation(line: 11, column: 11, scope: !5)
!14 = !DILocation(line: 11, column: 36, scope: !5)
!15 = !DILocation(line: 13, column: 15, scope: !5)
!16 = !DILocation(line: 13, column: 11, scope: !5)
!17 = !DILocation(line: 13, column: 36, scope: !5)
!18 = !DILocation(line: 15, column: 15, scope: !5)
!19 = !DILocation(line: 15, column: 11, scope: !5)
!20 = !DILocation(line: 15, column: 36, scope: !5)
!21 = !DILocation(line: 16, column: 2, scope: !5)
!22 = distinct !DISubprogram(linkageName: "compute_lb", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!23 = !DILocation(line: 11, column: 19, scope: !24)
!24 = !DILexicalBlockFile(scope: !22, file: !6, discriminator: 0)
!25 = distinct !DISubprogram(linkageName: "compute_ub", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!26 = !DILocation(line: 11, column: 26, scope: !27)
!27 = !DILexicalBlockFile(scope: !25, file: !6, discriminator: 0)
!28 = distinct !DISubprogram(linkageName: "compute_step", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!29 = !DILocation(line: 11, column: 30, scope: !30)
!30 = !DILexicalBlockFile(scope: !28, file: !6, discriminator: 0)
!31 = distinct !DISubprogram(linkageName: "oss_ctor_ZN1SC1Ev", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!32 = !DILocation(line: 0, scope: !31)
!33 = !DILocation(line: 12, column: 35, scope: !34)
!34 = !DILexicalBlockFile(scope: !31, file: !6, discriminator: 0)
!35 = distinct !DISubprogram(linkageName: "oss_dtor_ZN1SD1Ev", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!36 = !DILocation(line: 0, scope: !35)
!37 = distinct !DISubprogram(linkageName: "compute_lb.1", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!38 = !DILocation(line: 13, column: 19, scope: !39)
!39 = !DILexicalBlockFile(scope: !37, file: !6, discriminator: 0)
!40 = distinct !DISubprogram(linkageName: "compute_ub.2", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!41 = !DILocation(line: 13, column: 26, scope: !42)
!42 = !DILexicalBlockFile(scope: !40, file: !6, discriminator: 0)
!43 = distinct !DISubprogram(linkageName: "compute_step.3", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!44 = !DILocation(line: 13, column: 30, scope: !45)
!45 = !DILexicalBlockFile(scope: !43, file: !6, discriminator: 0)
!46 = distinct !DISubprogram(linkageName: "oss_copy_ctor_ZN1SC1ERKS_", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!47 = !DILocation(line: 0, scope: !46)
!48 = !DILocation(line: 14, column: 40, scope: !49)
!49 = !DILexicalBlockFile(scope: !46, file: !6, discriminator: 0)
!50 = distinct !DISubprogram(linkageName: "compute_lb.4", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!51 = !DILocation(line: 15, column: 19, scope: !52)
!52 = !DILexicalBlockFile(scope: !50, file: !6, discriminator: 0)
!53 = distinct !DISubprogram(linkageName: "compute_ub.5", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!54 = !DILocation(line: 15, column: 26, scope: !55)
!55 = !DILexicalBlockFile(scope: !53, file: !6, discriminator: 0)
!56 = distinct !DISubprogram(linkageName: "compute_step.6", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!57 = !DILocation(line: 15, column: 30, scope: !58)
!58 = !DILexicalBlockFile(scope: !56, file: !6, discriminator: 0)
; CHECK-LABEL: define {{[^@]+}}@_Z3foov
; CHECK-SAME: () #[[ATTR0:[0-9]+]] !dbg [[DBG5:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[N:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[SAVED_STACK:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    [[__VLA_EXPR0:%.*]] = alloca i64, align 8
; CHECK-NEXT:    [[I:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[I1:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[I2:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[N]], align 4, !dbg [[DBG9:![0-9]+]]
; CHECK-NEXT:    [[TMP1:%.*]] = zext i32 [[TMP0]] to i64, !dbg [[DBG10:![0-9]+]]
; CHECK-NEXT:    [[TMP2:%.*]] = call ptr @llvm.stacksave(), !dbg [[DBG10]]
; CHECK-NEXT:    store ptr [[TMP2]], ptr [[SAVED_STACK]], align 8, !dbg [[DBG10]]
; CHECK-NEXT:    [[VLA:%.*]] = alloca [[STRUCT_S:%.*]], i64 [[TMP1]], align 16, !dbg [[DBG10]]
; CHECK-NEXT:    store i64 [[TMP1]], ptr [[__VLA_EXPR0]], align 8, !dbg [[DBG10]]
; CHECK-NEXT:    [[ISEMPTY:%.*]] = icmp eq i64 [[TMP1]], 0, !dbg [[DBG11:![0-9]+]]
; CHECK-NEXT:    [[TMP3:%.*]] = alloca ptr, align 8, !dbg [[DBG12:![0-9]+]]
; CHECK-NEXT:    [[TMP4:%.*]] = alloca ptr, align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[NUM_DEPS:%.*]] = alloca i64, align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP5:%.*]] = alloca ptr, align 8, !dbg [[DBG13:![0-9]+]]
; CHECK-NEXT:    [[TMP6:%.*]] = alloca ptr, align 8, !dbg [[DBG13]]
; CHECK-NEXT:    [[NUM_DEPS17:%.*]] = alloca i64, align 8, !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP7:%.*]] = alloca ptr, align 8, !dbg [[DBG14:![0-9]+]]
; CHECK-NEXT:    [[TMP8:%.*]] = alloca ptr, align 8, !dbg [[DBG14]]
; CHECK-NEXT:    [[NUM_DEPS34:%.*]] = alloca i64, align 8, !dbg [[DBG14]]
; CHECK-NEXT:    br i1 [[ISEMPTY]], label [[ARRAYCTOR_CONT:%.*]], label [[NEW_CTORLOOP:%.*]], !dbg [[DBG11]]
; CHECK:       new.ctorloop:
; CHECK-NEXT:    [[ARRAYCTOR_END:%.*]] = getelementptr inbounds [[STRUCT_S]], ptr [[VLA]], i64 [[TMP1]], !dbg [[DBG11]]
; CHECK-NEXT:    br label [[ARRAYCTOR_LOOP:%.*]], !dbg [[DBG11]]
; CHECK:       arrayctor.loop:
; CHECK-NEXT:    [[ARRAYCTOR_CUR:%.*]] = phi ptr [ [[VLA]], [[NEW_CTORLOOP]] ], [ [[ARRAYCTOR_NEXT:%.*]], [[ARRAYCTOR_LOOP]] ], !dbg [[DBG11]]
; CHECK-NEXT:    call void @_ZN1SC1Ev(ptr noundef nonnull align 1 dereferenceable(1) [[ARRAYCTOR_CUR]]), !dbg [[DBG11]]
; CHECK-NEXT:    [[ARRAYCTOR_NEXT]] = getelementptr inbounds [[STRUCT_S]], ptr [[ARRAYCTOR_CUR]], i64 1, !dbg [[DBG11]]
; CHECK-NEXT:    [[ARRAYCTOR_DONE:%.*]] = icmp eq ptr [[ARRAYCTOR_NEXT]], [[ARRAYCTOR_END]], !dbg [[DBG11]]
; CHECK-NEXT:    br i1 [[ARRAYCTOR_DONE]], label [[ARRAYCTOR_CONT]], label [[ARRAYCTOR_LOOP]], !dbg [[DBG11]]
; CHECK:       arrayctor.cont:
; CHECK-NEXT:    store i32 0, ptr [[I]], align 4, !dbg [[DBG15:![0-9]+]]
; CHECK-NEXT:    br label [[FINAL_COND:%.*]], !dbg [[DBG12]]
; CHECK:       codeRepl:
; CHECK-NEXT:    store i64 0, ptr [[NUM_DEPS]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP9:%.*]] = load i64, ptr [[NUM_DEPS]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP10:%.*]] = call i32 @compute_lb(), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP11:%.*]] = call i32 @compute_ub(), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP12:%.*]] = call i32 @compute_step(), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP13:%.*]] = sub i32 [[TMP11]], [[TMP10]], !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP14:%.*]] = sub i32 [[TMP13]], 1, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP15:%.*]] = sdiv i32 [[TMP14]], [[TMP12]], !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP16:%.*]] = add i32 [[TMP15]], 1, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP17:%.*]] = sext i32 [[TMP16]] to i64, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP18:%.*]] = mul i64 1, [[TMP17]], !dbg [[DBG12]]
; CHECK-NEXT:    call void @nanos6_create_loop(ptr @task_info_var__Z3foov, ptr @task_invocation_info__Z3foov, ptr null, i64 32, ptr [[TMP3]], ptr [[TMP4]], i64 8, i64 [[TMP9]], i64 0, i64 [[TMP18]], i64 0, i64 0), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP19:%.*]] = load ptr, ptr [[TMP3]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[ARGS_END:%.*]] = getelementptr i8, ptr [[TMP19]], i64 32, !dbg [[DBG12]]
; CHECK-NEXT:    [[GEP_VLA:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3FOOV:%.*]], ptr [[TMP19]], i32 0, i32 0, !dbg [[DBG12]]
; CHECK-NEXT:    store ptr [[VLA]], ptr [[GEP_VLA]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[CAPT_GEP_:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3FOOV]], ptr [[TMP19]], i32 0, i32 2, !dbg [[DBG12]]
; CHECK-NEXT:    store i64 [[TMP1]], ptr [[CAPT_GEP_]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP20:%.*]] = load ptr, ptr [[TMP4]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    call void @nanos6_submit_task(ptr [[TMP20]]), !dbg [[DBG12]]
; CHECK-NEXT:    br label [[FOR_END3:%.*]], !dbg [[DBG12]]
; CHECK:       final.end:
; CHECK-NEXT:    store i32 0, ptr [[I1]], align 4, !dbg [[DBG16:![0-9]+]]
; CHECK-NEXT:    br label [[FINAL_COND10:%.*]], !dbg [[DBG13]]
; CHECK:       codeRepl16:
; CHECK-NEXT:    [[TMP21:%.*]] = mul nuw i64 1, [[TMP1]], !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP22:%.*]] = add nuw i64 0, [[TMP21]], !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP23:%.*]] = add nuw i64 32, [[TMP22]], !dbg [[DBG13]]
; CHECK-NEXT:    store i64 0, ptr [[NUM_DEPS17]], align 8, !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP24:%.*]] = load i64, ptr [[NUM_DEPS17]], align 8, !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP25:%.*]] = call i32 @compute_lb.1(), !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP26:%.*]] = call i32 @compute_ub.2(), !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP27:%.*]] = call i32 @compute_step.3(), !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP28:%.*]] = sub i32 [[TMP26]], [[TMP25]], !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP29:%.*]] = sub i32 [[TMP28]], 1, !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP30:%.*]] = sdiv i32 [[TMP29]], [[TMP27]], !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP31:%.*]] = add i32 [[TMP30]], 1, !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP32:%.*]] = sext i32 [[TMP31]] to i64, !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP33:%.*]] = mul i64 1, [[TMP32]], !dbg [[DBG13]]
; CHECK-NEXT:    call void @nanos6_create_loop(ptr @task_info_var__Z3foov.11, ptr @task_invocation_info__Z3foov.7, ptr null, i64 [[TMP23]], ptr [[TMP5]], ptr [[TMP6]], i64 8, i64 [[TMP24]], i64 0, i64 [[TMP33]], i64 0, i64 0), !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP34:%.*]] = load ptr, ptr [[TMP5]], align 8, !dbg [[DBG13]]
; CHECK-NEXT:    [[ARGS_END18:%.*]] = getelementptr i8, ptr [[TMP34]], i64 32, !dbg [[DBG13]]
; CHECK-NEXT:    [[GEP_VLA19:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3FOOV_0:%.*]], ptr [[TMP34]], i32 0, i32 0, !dbg [[DBG13]]
; CHECK-NEXT:    store ptr [[ARGS_END18]], ptr [[GEP_VLA19]], align 8, !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP35:%.*]] = mul nuw i64 1, [[TMP1]], !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP36:%.*]] = getelementptr i8, ptr [[ARGS_END18]], i64 [[TMP35]], !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP37:%.*]] = mul nuw i64 1, [[TMP1]], !dbg [[DBG13]]
; CHECK-NEXT:    [[GEP_VLA20:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3FOOV_0]], ptr [[TMP34]], i32 0, i32 0, !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP38:%.*]] = load ptr, ptr [[GEP_VLA20]], align 8, !dbg [[DBG13]]
; CHECK-NEXT:    call void @oss_ctor_ZN1SC1Ev(ptr [[TMP38]], i64 [[TMP37]]), !dbg [[DBG13]]
; CHECK-NEXT:    [[CAPT_GEP_21:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3FOOV_0]], ptr [[TMP34]], i32 0, i32 2, !dbg [[DBG13]]
; CHECK-NEXT:    store i64 [[TMP1]], ptr [[CAPT_GEP_21]], align 8, !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP39:%.*]] = load ptr, ptr [[TMP6]], align 8, !dbg [[DBG13]]
; CHECK-NEXT:    call void @nanos6_submit_task(ptr [[TMP39]]), !dbg [[DBG13]]
; CHECK-NEXT:    br label [[FOR_END14:%.*]], !dbg [[DBG13]]
; CHECK:       final.end9:
; CHECK-NEXT:    store i32 0, ptr [[I2]], align 4, !dbg [[DBG17:![0-9]+]]
; CHECK-NEXT:    br label [[FINAL_COND27:%.*]], !dbg [[DBG14]]
; CHECK:       codeRepl33:
; CHECK-NEXT:    [[TMP40:%.*]] = mul nuw i64 1, [[TMP1]], !dbg [[DBG14]]
; CHECK-NEXT:    [[TMP41:%.*]] = add nuw i64 0, [[TMP40]], !dbg [[DBG14]]
; CHECK-NEXT:    [[TMP42:%.*]] = add nuw i64 32, [[TMP41]], !dbg [[DBG14]]
; CHECK-NEXT:    store i64 0, ptr [[NUM_DEPS34]], align 8, !dbg [[DBG14]]
; CHECK-NEXT:    [[TMP43:%.*]] = load i64, ptr [[NUM_DEPS34]], align 8, !dbg [[DBG14]]
; CHECK-NEXT:    [[TMP44:%.*]] = call i32 @compute_lb.4(), !dbg [[DBG14]]
; CHECK-NEXT:    [[TMP45:%.*]] = call i32 @compute_ub.5(), !dbg [[DBG14]]
; CHECK-NEXT:    [[TMP46:%.*]] = call i32 @compute_step.6(), !dbg [[DBG14]]
; CHECK-NEXT:    [[TMP47:%.*]] = sub i32 [[TMP45]], [[TMP44]], !dbg [[DBG14]]
; CHECK-NEXT:    [[TMP48:%.*]] = sub i32 [[TMP47]], 1, !dbg [[DBG14]]
; CHECK-NEXT:    [[TMP49:%.*]] = sdiv i32 [[TMP48]], [[TMP46]], !dbg [[DBG14]]
; CHECK-NEXT:    [[TMP50:%.*]] = add i32 [[TMP49]], 1, !dbg [[DBG14]]
; CHECK-NEXT:    [[TMP51:%.*]] = sext i32 [[TMP50]] to i64, !dbg [[DBG14]]
; CHECK-NEXT:    [[TMP52:%.*]] = mul i64 1, [[TMP51]], !dbg [[DBG14]]
; CHECK-NEXT:    call void @nanos6_create_loop(ptr @task_info_var__Z3foov.24, ptr @task_invocation_info__Z3foov.20, ptr null, i64 [[TMP42]], ptr [[TMP7]], ptr [[TMP8]], i64 8, i64 [[TMP43]], i64 0, i64 [[TMP52]], i64 0, i64 0), !dbg [[DBG14]]
; CHECK-NEXT:    [[TMP53:%.*]] = load ptr, ptr [[TMP7]], align 8, !dbg [[DBG14]]
; CHECK-NEXT:    [[ARGS_END35:%.*]] = getelementptr i8, ptr [[TMP53]], i64 32, !dbg [[DBG14]]
; CHECK-NEXT:    [[GEP_VLA36:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3FOOV_1:%.*]], ptr [[TMP53]], i32 0, i32 1, !dbg [[DBG14]]
; CHECK-NEXT:    store ptr [[ARGS_END35]], ptr [[GEP_VLA36]], align 8, !dbg [[DBG14]]
; CHECK-NEXT:    [[TMP54:%.*]] = mul nuw i64 1, [[TMP1]], !dbg [[DBG14]]
; CHECK-NEXT:    [[TMP55:%.*]] = getelementptr i8, ptr [[ARGS_END35]], i64 [[TMP54]], !dbg [[DBG14]]
; CHECK-NEXT:    [[TMP56:%.*]] = mul nuw i64 1, [[TMP1]], !dbg [[DBG14]]
; CHECK-NEXT:    [[GEP_VLA37:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3FOOV_1]], ptr [[TMP53]], i32 0, i32 1, !dbg [[DBG14]]
; CHECK-NEXT:    [[TMP57:%.*]] = load ptr, ptr [[GEP_VLA37]], align 8, !dbg [[DBG14]]
; CHECK-NEXT:    call void @oss_copy_ctor_ZN1SC1ERKS_(ptr [[VLA]], ptr [[TMP57]], i64 [[TMP56]]), !dbg [[DBG14]]
; CHECK-NEXT:    [[CAPT_GEP_38:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3FOOV_1]], ptr [[TMP53]], i32 0, i32 2, !dbg [[DBG14]]
; CHECK-NEXT:    store i64 [[TMP1]], ptr [[CAPT_GEP_38]], align 8, !dbg [[DBG14]]
; CHECK-NEXT:    [[TMP58:%.*]] = load ptr, ptr [[TMP8]], align 8, !dbg [[DBG14]]
; CHECK-NEXT:    call void @nanos6_submit_task(ptr [[TMP58]]), !dbg [[DBG14]]
; CHECK-NEXT:    br label [[FOR_END31:%.*]], !dbg [[DBG14]]
; CHECK:       final.end26:
; CHECK-NEXT:    [[TMP59:%.*]] = getelementptr inbounds [[STRUCT_S]], ptr [[VLA]], i64 [[TMP1]], !dbg [[DBG18:![0-9]+]]
; CHECK-NEXT:    [[ARRAYDESTROY_ISEMPTY:%.*]] = icmp eq ptr [[VLA]], [[TMP59]], !dbg [[DBG18]]
; CHECK-NEXT:    br i1 [[ARRAYDESTROY_ISEMPTY]], label [[ARRAYDESTROY_DONE3:%.*]], label [[ARRAYDESTROY_BODY:%.*]], !dbg [[DBG18]]
; CHECK:       arraydestroy.body:
; CHECK-NEXT:    [[ARRAYDESTROY_ELEMENTPAST:%.*]] = phi ptr [ [[TMP59]], [[FINAL_END26:%.*]] ], [ [[ARRAYDESTROY_ELEMENT:%.*]], [[ARRAYDESTROY_BODY]] ], !dbg [[DBG18]]
; CHECK-NEXT:    [[ARRAYDESTROY_ELEMENT]] = getelementptr inbounds [[STRUCT_S]], ptr [[ARRAYDESTROY_ELEMENTPAST]], i64 -1, !dbg [[DBG18]]
; CHECK-NEXT:    call void @_ZN1SD1Ev(ptr noundef nonnull align 1 dereferenceable(1) [[ARRAYDESTROY_ELEMENT]]) #[[ATTR3:[0-9]+]], !dbg [[DBG18]]
; CHECK-NEXT:    [[ARRAYDESTROY_DONE:%.*]] = icmp eq ptr [[ARRAYDESTROY_ELEMENT]], [[VLA]], !dbg [[DBG18]]
; CHECK-NEXT:    br i1 [[ARRAYDESTROY_DONE]], label [[ARRAYDESTROY_DONE3]], label [[ARRAYDESTROY_BODY]], !dbg [[DBG18]]
; CHECK:       arraydestroy.done3:
; CHECK-NEXT:    [[TMP60:%.*]] = load ptr, ptr [[SAVED_STACK]], align 8, !dbg [[DBG18]]
; CHECK-NEXT:    call void @llvm.stackrestore(ptr [[TMP60]]), !dbg [[DBG18]]
; CHECK-NEXT:    ret void, !dbg [[DBG18]]
; CHECK:       final.then:
; CHECK-NEXT:    [[TMP61:%.*]] = call i32 @compute_lb(), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP62:%.*]] = call i32 @compute_ub(), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP63:%.*]] = call i32 @compute_step(), !dbg [[DBG12]]
; CHECK-NEXT:    store i32 [[TMP61]], ptr [[I]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    br label [[FOR_COND:%.*]], !dbg [[DBG12]]
; CHECK:       for.cond:
; CHECK-NEXT:    [[TMP64:%.*]] = load i32, ptr [[I]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP65:%.*]] = icmp slt i32 [[TMP64]], [[TMP62]], !dbg [[DBG12]]
; CHECK-NEXT:    br i1 [[TMP65]], label [[TMP66:%.*]], label [[FOR_END:%.*]], !dbg [[DBG12]]
; CHECK:       66:
; CHECK-NEXT:    br label [[FOR_BODY:%.*]], !dbg [[DBG12]]
; CHECK:       for.body:
; CHECK-NEXT:    br label [[FOR_INCR:%.*]], !dbg [[DBG16]]
; CHECK:       final.then11:
; CHECK-NEXT:    [[TMP67:%.*]] = call i32 @compute_lb.1(), !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP68:%.*]] = call i32 @compute_ub.2(), !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP69:%.*]] = call i32 @compute_step.3(), !dbg [[DBG13]]
; CHECK-NEXT:    store i32 [[TMP67]], ptr [[I1]], align 4, !dbg [[DBG13]]
; CHECK-NEXT:    br label [[FOR_COND5:%.*]], !dbg [[DBG13]]
; CHECK:       for.cond5:
; CHECK-NEXT:    [[TMP70:%.*]] = load i32, ptr [[I1]], align 4, !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP71:%.*]] = icmp slt i32 [[TMP70]], [[TMP68]], !dbg [[DBG13]]
; CHECK-NEXT:    br i1 [[TMP71]], label [[TMP72:%.*]], label [[FOR_END7:%.*]], !dbg [[DBG13]]
; CHECK:       72:
; CHECK-NEXT:    br label [[FOR_BODY6:%.*]], !dbg [[DBG13]]
; CHECK:       for.body6:
; CHECK-NEXT:    br label [[FOR_INCR8:%.*]], !dbg [[DBG17]]
; CHECK:       final.then28:
; CHECK-NEXT:    [[TMP73:%.*]] = call i32 @compute_lb.4(), !dbg [[DBG14]]
; CHECK-NEXT:    [[TMP74:%.*]] = call i32 @compute_ub.5(), !dbg [[DBG14]]
; CHECK-NEXT:    [[TMP75:%.*]] = call i32 @compute_step.6(), !dbg [[DBG14]]
; CHECK-NEXT:    store i32 [[TMP73]], ptr [[I2]], align 4, !dbg [[DBG14]]
; CHECK-NEXT:    br label [[FOR_COND22:%.*]], !dbg [[DBG14]]
; CHECK:       for.cond22:
; CHECK-NEXT:    [[TMP76:%.*]] = load i32, ptr [[I2]], align 4, !dbg [[DBG14]]
; CHECK-NEXT:    [[TMP77:%.*]] = icmp slt i32 [[TMP76]], [[TMP74]], !dbg [[DBG14]]
; CHECK-NEXT:    br i1 [[TMP77]], label [[TMP78:%.*]], label [[FOR_END24:%.*]], !dbg [[DBG14]]
; CHECK:       78:
; CHECK-NEXT:    br label [[FOR_BODY23:%.*]], !dbg [[DBG14]]
; CHECK:       for.body23:
; CHECK-NEXT:    br label [[FOR_INCR25:%.*]], !dbg [[DBG18]]
; CHECK:       for.end:
; CHECK-NEXT:    br label [[FINAL_END:%.*]], !dbg [[DBG12]]
; CHECK:       for.incr:
; CHECK-NEXT:    [[TMP79:%.*]] = load i32, ptr [[I]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP80:%.*]] = add i32 [[TMP79]], [[TMP63]], !dbg [[DBG12]]
; CHECK-NEXT:    store i32 [[TMP80]], ptr [[I]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    br label [[FOR_COND]], !dbg [[DBG12]]
; CHECK:       final.cond:
; CHECK-NEXT:    [[TMP81:%.*]] = call i32 @nanos6_in_final(), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP82:%.*]] = icmp ne i32 [[TMP81]], 0, !dbg [[DBG12]]
; CHECK-NEXT:    br i1 [[TMP82]], label [[FINAL_THEN:%.*]], label [[CODEREPL:%.*]], !dbg [[DBG12]]
; CHECK:       for.end3:
; CHECK-NEXT:    br label [[FINAL_END]], !dbg [[DBG12]]
; CHECK:       for.end7:
; CHECK-NEXT:    br label [[FINAL_END9:%.*]], !dbg [[DBG13]]
; CHECK:       for.incr8:
; CHECK-NEXT:    [[TMP83:%.*]] = load i32, ptr [[I1]], align 4, !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP84:%.*]] = add i32 [[TMP83]], [[TMP69]], !dbg [[DBG13]]
; CHECK-NEXT:    store i32 [[TMP84]], ptr [[I1]], align 4, !dbg [[DBG13]]
; CHECK-NEXT:    br label [[FOR_COND5]], !dbg [[DBG13]]
; CHECK:       final.cond10:
; CHECK-NEXT:    [[TMP85:%.*]] = call i32 @nanos6_in_final(), !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP86:%.*]] = icmp ne i32 [[TMP85]], 0, !dbg [[DBG13]]
; CHECK-NEXT:    br i1 [[TMP86]], label [[FINAL_THEN11:%.*]], label [[CODEREPL16:%.*]], !dbg [[DBG13]]
; CHECK:       for.end14:
; CHECK-NEXT:    br label [[FINAL_END9]], !dbg [[DBG13]]
; CHECK:       for.end24:
; CHECK-NEXT:    br label [[FINAL_END26]], !dbg [[DBG14]]
; CHECK:       for.incr25:
; CHECK-NEXT:    [[TMP87:%.*]] = load i32, ptr [[I2]], align 4, !dbg [[DBG14]]
; CHECK-NEXT:    [[TMP88:%.*]] = add i32 [[TMP87]], [[TMP75]], !dbg [[DBG14]]
; CHECK-NEXT:    store i32 [[TMP88]], ptr [[I2]], align 4, !dbg [[DBG14]]
; CHECK-NEXT:    br label [[FOR_COND22]], !dbg [[DBG14]]
; CHECK:       final.cond27:
; CHECK-NEXT:    [[TMP89:%.*]] = call i32 @nanos6_in_final(), !dbg [[DBG14]]
; CHECK-NEXT:    [[TMP90:%.*]] = icmp ne i32 [[TMP89]], 0, !dbg [[DBG14]]
; CHECK-NEXT:    br i1 [[TMP90]], label [[FINAL_THEN28:%.*]], label [[CODEREPL33:%.*]], !dbg [[DBG14]]
; CHECK:       for.end31:
; CHECK-NEXT:    br label [[FINAL_END26]], !dbg [[DBG14]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_lb
; CHECK-SAME: () #[[ATTR4:[0-9]+]] !dbg [[DBG19:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret i32 0, !dbg [[DBG20:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_ub
; CHECK-SAME: () #[[ATTR4]] !dbg [[DBG22:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret i32 10, !dbg [[DBG23:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_step
; CHECK-SAME: () #[[ATTR4]] !dbg [[DBG25:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret i32 1, !dbg [[DBG26:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@oss_ctor_ZN1SC1Ev
; CHECK-SAME: (ptr noundef [[TMP0:%.*]], i64 noundef [[TMP1:%.*]]) #[[ATTR5:[0-9]+]] !dbg [[DBG28:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[DOTADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    [[DOTADDR1:%.*]] = alloca i64, align 8
; CHECK-NEXT:    store ptr [[TMP0]], ptr [[DOTADDR]], align 8
; CHECK-NEXT:    store i64 [[TMP1]], ptr [[DOTADDR1]], align 8
; CHECK-NEXT:    [[TMP2:%.*]] = load ptr, ptr [[DOTADDR]], align 8, !dbg [[DBG29:![0-9]+]]
; CHECK-NEXT:    [[TMP3:%.*]] = load i64, ptr [[DOTADDR1]], align 8, !dbg [[DBG29]]
; CHECK-NEXT:    [[ARRAYCTOR_DST_END:%.*]] = getelementptr inbounds [[STRUCT_S:%.*]], ptr [[TMP2]], i64 [[TMP3]], !dbg [[DBG29]]
; CHECK-NEXT:    br label [[ARRAYCTOR_LOOP:%.*]], !dbg [[DBG29]]
; CHECK:       arrayctor.loop:
; CHECK-NEXT:    [[ARRAYCTOR_DST_CUR:%.*]] = phi ptr [ [[TMP2]], [[ENTRY:%.*]] ], [ [[ARRAYCTOR_DST_NEXT:%.*]], [[ARRAYCTOR_LOOP]] ], !dbg [[DBG29]]
; CHECK-NEXT:    call void @_ZN1SC1Ev(ptr noundef nonnull align 1 dereferenceable(1) [[ARRAYCTOR_DST_CUR]]), !dbg [[DBG30:![0-9]+]]
; CHECK-NEXT:    [[ARRAYCTOR_DST_NEXT]] = getelementptr inbounds [[STRUCT_S]], ptr [[ARRAYCTOR_DST_CUR]], i64 1, !dbg [[DBG29]]
; CHECK-NEXT:    [[ARRAYCTOR_DONE:%.*]] = icmp eq ptr [[ARRAYCTOR_DST_NEXT]], [[ARRAYCTOR_DST_END]], !dbg [[DBG29]]
; CHECK-NEXT:    br i1 [[ARRAYCTOR_DONE]], label [[ARRAYCTOR_CONT:%.*]], label [[ARRAYCTOR_LOOP]], !dbg [[DBG29]]
; CHECK:       arrayctor.cont:
; CHECK-NEXT:    ret void, !dbg [[DBG30]]
;
;
; CHECK-LABEL: define {{[^@]+}}@oss_dtor_ZN1SD1Ev
; CHECK-SAME: (ptr noundef [[TMP0:%.*]], i64 noundef [[TMP1:%.*]]) #[[ATTR5]] !dbg [[DBG32:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[DOTADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    [[DOTADDR1:%.*]] = alloca i64, align 8
; CHECK-NEXT:    store ptr [[TMP0]], ptr [[DOTADDR]], align 8
; CHECK-NEXT:    store i64 [[TMP1]], ptr [[DOTADDR1]], align 8
; CHECK-NEXT:    [[TMP2:%.*]] = load ptr, ptr [[DOTADDR]], align 8, !dbg [[DBG33:![0-9]+]]
; CHECK-NEXT:    [[TMP3:%.*]] = load i64, ptr [[DOTADDR1]], align 8, !dbg [[DBG33]]
; CHECK-NEXT:    [[ARRAYDTOR_DST_END:%.*]] = getelementptr inbounds [[STRUCT_S:%.*]], ptr [[TMP2]], i64 [[TMP3]], !dbg [[DBG33]]
; CHECK-NEXT:    br label [[ARRAYDTOR_LOOP:%.*]], !dbg [[DBG33]]
; CHECK:       arraydtor.loop:
; CHECK-NEXT:    [[ARRAYDTOR_DST_CUR:%.*]] = phi ptr [ [[TMP2]], [[ENTRY:%.*]] ], [ [[ARRAYDTOR_DST_NEXT:%.*]], [[ARRAYDTOR_LOOP]] ], !dbg [[DBG33]]
; CHECK-NEXT:    call void @_ZN1SD1Ev(ptr noundef nonnull align 1 dereferenceable(1) [[ARRAYDTOR_DST_CUR]]) #[[ATTR3]], !dbg [[DBG33]]
; CHECK-NEXT:    [[ARRAYDTOR_DST_NEXT]] = getelementptr inbounds [[STRUCT_S]], ptr [[ARRAYDTOR_DST_CUR]], i64 1, !dbg [[DBG33]]
; CHECK-NEXT:    [[ARRAYDTOR_DONE:%.*]] = icmp eq ptr [[ARRAYDTOR_DST_NEXT]], [[ARRAYDTOR_DST_END]], !dbg [[DBG33]]
; CHECK-NEXT:    br i1 [[ARRAYDTOR_DONE]], label [[ARRAYDTOR_CONT:%.*]], label [[ARRAYDTOR_LOOP]], !dbg [[DBG33]]
; CHECK:       arraydtor.cont:
; CHECK-NEXT:    ret void, !dbg [[DBG33]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_lb.1
; CHECK-SAME: () #[[ATTR4]] !dbg [[DBG34:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret i32 0, !dbg [[DBG35:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_ub.2
; CHECK-SAME: () #[[ATTR4]] !dbg [[DBG37:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret i32 10, !dbg [[DBG38:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_step.3
; CHECK-SAME: () #[[ATTR4]] !dbg [[DBG40:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret i32 1, !dbg [[DBG41:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@oss_copy_ctor_ZN1SC1ERKS_
; CHECK-SAME: (ptr noundef [[TMP0:%.*]], ptr noundef [[TMP1:%.*]], i64 noundef [[TMP2:%.*]]) #[[ATTR5]] !dbg [[DBG43:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[DOTADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    [[DOTADDR1:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    [[DOTADDR2:%.*]] = alloca i64, align 8
; CHECK-NEXT:    store ptr [[TMP0]], ptr [[DOTADDR]], align 8
; CHECK-NEXT:    store ptr [[TMP1]], ptr [[DOTADDR1]], align 8
; CHECK-NEXT:    store i64 [[TMP2]], ptr [[DOTADDR2]], align 8
; CHECK-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[DOTADDR]], align 8, !dbg [[DBG44:![0-9]+]]
; CHECK-NEXT:    [[TMP4:%.*]] = load ptr, ptr [[DOTADDR1]], align 8, !dbg [[DBG44]]
; CHECK-NEXT:    [[TMP5:%.*]] = load i64, ptr [[DOTADDR2]], align 8, !dbg [[DBG44]]
; CHECK-NEXT:    [[ARRAYCTOR_DST_END:%.*]] = getelementptr inbounds [[STRUCT_S:%.*]], ptr [[TMP4]], i64 [[TMP5]], !dbg [[DBG44]]
; CHECK-NEXT:    br label [[ARRAYCTOR_LOOP:%.*]], !dbg [[DBG44]]
; CHECK:       arrayctor.loop:
; CHECK-NEXT:    [[ARRAYCTOR_DST_CUR:%.*]] = phi ptr [ [[TMP4]], [[ENTRY:%.*]] ], [ [[ARRAYCTOR_DST_NEXT:%.*]], [[ARRAYCTOR_LOOP]] ], !dbg [[DBG44]]
; CHECK-NEXT:    [[ARRAYCTOR_SRC_CUR:%.*]] = phi ptr [ [[TMP3]], [[ENTRY]] ], [ [[ARRAYCTOR_SRC_NEXT:%.*]], [[ARRAYCTOR_LOOP]] ], !dbg [[DBG44]]
; CHECK-NEXT:    call void @_ZN1SC1ERKS_(ptr noundef nonnull align 1 dereferenceable(1) [[ARRAYCTOR_DST_CUR]], ptr noundef nonnull align 1 dereferenceable(1) [[ARRAYCTOR_SRC_CUR]]), !dbg [[DBG45:![0-9]+]]
; CHECK-NEXT:    [[ARRAYCTOR_DST_NEXT]] = getelementptr inbounds [[STRUCT_S]], ptr [[ARRAYCTOR_DST_CUR]], i64 1, !dbg [[DBG44]]
; CHECK-NEXT:    [[ARRAYCTOR_SRC_NEXT]] = getelementptr inbounds [[STRUCT_S]], ptr [[ARRAYCTOR_SRC_CUR]], i64 1, !dbg [[DBG44]]
; CHECK-NEXT:    [[ARRAYCTOR_DONE:%.*]] = icmp eq ptr [[ARRAYCTOR_DST_NEXT]], [[ARRAYCTOR_DST_END]], !dbg [[DBG44]]
; CHECK-NEXT:    br i1 [[ARRAYCTOR_DONE]], label [[ARRAYCTOR_CONT:%.*]], label [[ARRAYCTOR_LOOP]], !dbg [[DBG44]]
; CHECK:       arrayctor.cont:
; CHECK-NEXT:    ret void, !dbg [[DBG45]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_lb.4
; CHECK-SAME: () #[[ATTR4]] !dbg [[DBG47:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret i32 0, !dbg [[DBG48:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_ub.5
; CHECK-SAME: () #[[ATTR4]] !dbg [[DBG50:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret i32 10, !dbg [[DBG51:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_step.6
; CHECK-SAME: () #[[ATTR4]] !dbg [[DBG53:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret i32 1, !dbg [[DBG54:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_duplicate__Z3foov
; CHECK-SAME: (ptr [[TASK_ARGS_SRC:%.*]], ptr [[TASK_ARGS_DST:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[TASK_ARGS_DST]], align 8
; CHECK-NEXT:    [[ARGS_END:%.*]] = getelementptr i8, ptr [[TMP0]], i64 32
; CHECK-NEXT:    [[GEP_SRC_VLA:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3FOOV:%.*]], ptr [[TASK_ARGS_SRC]], i32 0, i32 0
; CHECK-NEXT:    [[GEP_DST_VLA:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3FOOV]], ptr [[TMP0]], i32 0, i32 0
; CHECK-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[GEP_SRC_VLA]], align 8
; CHECK-NEXT:    store ptr [[TMP1]], ptr [[GEP_DST_VLA]], align 8
; CHECK-NEXT:    [[CAPT_GEP_SRC_:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3FOOV]], ptr [[TASK_ARGS_SRC]], i32 0, i32 2
; CHECK-NEXT:    [[CAPT_GEP_DST_:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3FOOV]], ptr [[TMP0]], i32 0, i32 2
; CHECK-NEXT:    [[TMP2:%.*]] = load i64, ptr [[CAPT_GEP_SRC_]], align 8
; CHECK-NEXT:    store i64 [[TMP2]], ptr [[CAPT_GEP_DST_]], align 8
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_unpacked_task_region__Z3foov
; CHECK-SAME: (ptr [[VLA:%.*]], ptr [[I:%.*]], i64 [[TMP0:%.*]], ptr [[LOOP_BOUNDS:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) !dbg [[DBG56:![0-9]+]] {
; CHECK-NEXT:  newFuncRoot:
; CHECK-NEXT:    br label [[TMP1:%.*]], !dbg [[DBG57:![0-9]+]]
; CHECK:       1:
; CHECK-NEXT:    [[LB_GEP:%.*]] = getelementptr [[NANOS6_LOOP_BOUNDS_T:%.*]], ptr [[LOOP_BOUNDS]], i32 0, i32 0, !dbg [[DBG57]]
; CHECK-NEXT:    [[TMP2:%.*]] = load i64, ptr [[LB_GEP]], align 8, !dbg [[DBG57]]
; CHECK-NEXT:    [[LB:%.*]] = trunc i64 [[TMP2]] to i32, !dbg [[DBG57]]
; CHECK-NEXT:    [[UB_GEP:%.*]] = getelementptr [[NANOS6_LOOP_BOUNDS_T]], ptr [[LOOP_BOUNDS]], i32 0, i32 1, !dbg [[DBG57]]
; CHECK-NEXT:    [[TMP3:%.*]] = load i64, ptr [[UB_GEP]], align 8, !dbg [[DBG57]]
; CHECK-NEXT:    [[UB:%.*]] = trunc i64 [[TMP3]] to i32, !dbg [[DBG57]]
; CHECK-NEXT:    [[TMP4:%.*]] = call i32 @compute_lb(), !dbg [[DBG57]]
; CHECK-NEXT:    [[TMP5:%.*]] = call i32 @compute_ub(), !dbg [[DBG57]]
; CHECK-NEXT:    [[TMP6:%.*]] = call i32 @compute_step(), !dbg [[DBG57]]
; CHECK-NEXT:    [[TMP7:%.*]] = sub i32 [[UB]], [[LB]], !dbg [[DBG57]]
; CHECK-NEXT:    [[TMP8:%.*]] = sub i32 [[TMP7]], 1, !dbg [[DBG57]]
; CHECK-NEXT:    [[TMP9:%.*]] = sdiv i32 [[TMP8]], [[TMP6]], !dbg [[DBG57]]
; CHECK-NEXT:    [[TMP10:%.*]] = add i32 [[TMP9]], 1, !dbg [[DBG57]]
; CHECK-NEXT:    [[TMP11:%.*]] = sext i32 [[TMP10]] to i64, !dbg [[DBG57]]
; CHECK-NEXT:    [[LOOP:%.*]] = alloca i32, align 4, !dbg [[DBG57]]
; CHECK-NEXT:    store i32 [[LB]], ptr [[LOOP]], align 4, !dbg [[DBG57]]
; CHECK-NEXT:    br label [[FOR_COND1:%.*]], !dbg [[DBG57]]
; CHECK:       for.cond1:
; CHECK-NEXT:    [[TMP12:%.*]] = load i32, ptr [[LOOP]], align 4, !dbg [[DBG57]]
; CHECK-NEXT:    [[TMP13:%.*]] = icmp slt i32 [[TMP12]], [[UB]], !dbg [[DBG57]]
; CHECK-NEXT:    br i1 [[TMP13]], label [[TMP14:%.*]], label [[DOTEXITSTUB:%.*]], !dbg [[DBG57]]
; CHECK:       14:
; CHECK-NEXT:    [[TMP15:%.*]] = load i32, ptr [[LOOP]], align 4, !dbg [[DBG57]]
; CHECK-NEXT:    [[TMP16:%.*]] = sext i32 [[TMP15]] to i64, !dbg [[DBG57]]
; CHECK-NEXT:    [[TMP17:%.*]] = udiv i64 [[TMP16]], 1, !dbg [[DBG57]]
; CHECK-NEXT:    [[TMP18:%.*]] = sext i32 [[TMP6]] to i64, !dbg [[DBG57]]
; CHECK-NEXT:    [[TMP19:%.*]] = mul i64 [[TMP17]], [[TMP18]], !dbg [[DBG57]]
; CHECK-NEXT:    [[TMP20:%.*]] = sext i32 [[TMP4]] to i64, !dbg [[DBG57]]
; CHECK-NEXT:    [[TMP21:%.*]] = add i64 [[TMP19]], [[TMP20]], !dbg [[DBG57]]
; CHECK-NEXT:    [[TMP22:%.*]] = mul i64 [[TMP17]], 1, !dbg [[DBG57]]
; CHECK-NEXT:    [[TMP23:%.*]] = sext i32 [[TMP15]] to i64, !dbg [[DBG57]]
; CHECK-NEXT:    [[TMP24:%.*]] = sub i64 [[TMP23]], [[TMP22]], !dbg [[DBG57]]
; CHECK-NEXT:    [[TMP25:%.*]] = trunc i64 [[TMP21]] to i32, !dbg [[DBG57]]
; CHECK-NEXT:    store i32 [[TMP25]], ptr [[I]], align 4, !dbg [[DBG57]]
; CHECK-NEXT:    br label [[FOR_BODY2:%.*]], !dbg [[DBG57]]
; CHECK:       for.body2:
; CHECK-NEXT:    br label [[FOR_INCR4:%.*]], !dbg [[DBG58:![0-9]+]]
; CHECK:       for.incr4:
; CHECK-NEXT:    [[TMP26:%.*]] = load i32, ptr [[LOOP]], align 4, !dbg [[DBG57]]
; CHECK-NEXT:    [[TMP27:%.*]] = add i32 [[TMP26]], 1, !dbg [[DBG57]]
; CHECK-NEXT:    store i32 [[TMP27]], ptr [[LOOP]], align 4, !dbg [[DBG57]]
; CHECK-NEXT:    br label [[FOR_COND1]], !dbg [[DBG57]]
; CHECK:       .exitStub:
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_task_region__Z3foov
; CHECK-SAME: (ptr [[TASK_ARGS:%.*]], ptr [[LOOP_BOUNDS:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_VLA:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3FOOV:%.*]], ptr [[TASK_ARGS]], i32 0, i32 0
; CHECK-NEXT:    [[LOAD_GEP_VLA:%.*]] = load ptr, ptr [[GEP_VLA]], align 8
; CHECK-NEXT:    [[GEP_I:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3FOOV]], ptr [[TASK_ARGS]], i32 0, i32 1
; CHECK-NEXT:    [[CAPT_GEP:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3FOOV]], ptr [[TASK_ARGS]], i32 0, i32 2
; CHECK-NEXT:    [[LOAD_CAPT_GEP:%.*]] = load i64, ptr [[CAPT_GEP]], align 8
; CHECK-NEXT:    [[TMP0:%.*]] = icmp ne ptr [[ADDRESS_TRANSLATION_TABLE]], null
; CHECK-NEXT:    br i1 [[TMP0]], label [[TMP1:%.*]], label [[TMP2:%.*]]
; CHECK:       1:
; CHECK-NEXT:    br label [[TMP2]]
; CHECK:       2:
; CHECK-NEXT:    call void @nanos6_unpacked_task_region__Z3foov(ptr [[LOAD_GEP_VLA]], ptr [[GEP_I]], i64 [[LOAD_CAPT_GEP]], ptr [[LOOP_BOUNDS]], ptr [[ADDRESS_TRANSLATION_TABLE]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_constructor_register_task_info() {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @nanos6_register_task_info(ptr @task_info_var__Z3foov)
; CHECK-NEXT:    call void @nanos6_register_task_info(ptr @task_info_var__Z3foov.11)
; CHECK-NEXT:    call void @nanos6_register_task_info(ptr @task_info_var__Z3foov.24)
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_unpacked_destroy__Z3foov
; CHECK-SAME: (ptr [[VLA:%.*]], ptr [[I1:%.*]], i64 [[TMP0:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP1:%.*]] = mul nuw i64 1, [[TMP0]]
; CHECK-NEXT:    call void @oss_dtor_ZN1SD1Ev(ptr [[VLA]], i64 [[TMP1]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_destroy__Z3foov
; CHECK-SAME: (ptr [[TASK_ARGS:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_VLA:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3FOOV_0:%.*]], ptr [[TASK_ARGS]], i32 0, i32 0
; CHECK-NEXT:    [[LOAD_GEP_VLA:%.*]] = load ptr, ptr [[GEP_VLA]], align 8
; CHECK-NEXT:    [[GEP_I1:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3FOOV_0]], ptr [[TASK_ARGS]], i32 0, i32 1
; CHECK-NEXT:    [[CAPT_GEP:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3FOOV_0]], ptr [[TASK_ARGS]], i32 0, i32 2
; CHECK-NEXT:    [[LOAD_CAPT_GEP:%.*]] = load i64, ptr [[CAPT_GEP]], align 8
; CHECK-NEXT:    call void @nanos6_unpacked_destroy__Z3foov(ptr [[LOAD_GEP_VLA]], ptr [[GEP_I1]], i64 [[LOAD_CAPT_GEP]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_duplicate__Z3foov.4
; CHECK-SAME: (ptr [[TASK_ARGS_SRC:%.*]], ptr [[TASK_ARGS_DST:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[TASK_ARGS_DST]], align 8
; CHECK-NEXT:    [[ARGS_END:%.*]] = getelementptr i8, ptr [[TMP0]], i64 32
; CHECK-NEXT:    [[GEP_DST_VLA:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3FOOV_0:%.*]], ptr [[TMP0]], i32 0, i32 0
; CHECK-NEXT:    store ptr [[ARGS_END]], ptr [[GEP_DST_VLA]], align 8
; CHECK-NEXT:    [[GEP_DST_:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3FOOV_0]], ptr [[TMP0]], i32 0, i32 2
; CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr [[GEP_DST_]], align 8
; CHECK-NEXT:    [[TMP2:%.*]] = mul nuw i64 1, [[TMP1]]
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[ARGS_END]], i64 [[TMP2]]
; CHECK-NEXT:    [[GEP_SRC_:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3FOOV_0]], ptr [[TASK_ARGS_SRC]], i32 0, i32 2
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[GEP_SRC_]], align 8
; CHECK-NEXT:    [[TMP5:%.*]] = mul nuw i64 1, [[TMP4]]
; CHECK-NEXT:    [[GEP_VLA:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3FOOV_0]], ptr [[TMP0]], i32 0, i32 0
; CHECK-NEXT:    [[TMP6:%.*]] = load ptr, ptr [[GEP_VLA]], align 8
; CHECK-NEXT:    call void @oss_ctor_ZN1SC1Ev(ptr [[TMP6]], i64 [[TMP5]])
; CHECK-NEXT:    [[CAPT_GEP_SRC_:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3FOOV_0]], ptr [[TASK_ARGS_SRC]], i32 0, i32 2
; CHECK-NEXT:    [[CAPT_GEP_DST_:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3FOOV_0]], ptr [[TMP0]], i32 0, i32 2
; CHECK-NEXT:    [[TMP7:%.*]] = load i64, ptr [[CAPT_GEP_SRC_]], align 8
; CHECK-NEXT:    store i64 [[TMP7]], ptr [[CAPT_GEP_DST_]], align 8
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_unpacked_task_region__Z3foov.5
; CHECK-SAME: (ptr [[VLA:%.*]], ptr [[I1:%.*]], i64 [[TMP0:%.*]], ptr [[LOOP_BOUNDS:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) !dbg [[DBG59:![0-9]+]] {
; CHECK-NEXT:  newFuncRoot:
; CHECK-NEXT:    br label [[TMP1:%.*]], !dbg [[DBG60:![0-9]+]]
; CHECK:       1:
; CHECK-NEXT:    [[LB_GEP:%.*]] = getelementptr [[NANOS6_LOOP_BOUNDS_T:%.*]], ptr [[LOOP_BOUNDS]], i32 0, i32 0, !dbg [[DBG60]]
; CHECK-NEXT:    [[TMP2:%.*]] = load i64, ptr [[LB_GEP]], align 8, !dbg [[DBG60]]
; CHECK-NEXT:    [[LB:%.*]] = trunc i64 [[TMP2]] to i32, !dbg [[DBG60]]
; CHECK-NEXT:    [[UB_GEP:%.*]] = getelementptr [[NANOS6_LOOP_BOUNDS_T]], ptr [[LOOP_BOUNDS]], i32 0, i32 1, !dbg [[DBG60]]
; CHECK-NEXT:    [[TMP3:%.*]] = load i64, ptr [[UB_GEP]], align 8, !dbg [[DBG60]]
; CHECK-NEXT:    [[UB:%.*]] = trunc i64 [[TMP3]] to i32, !dbg [[DBG60]]
; CHECK-NEXT:    [[TMP4:%.*]] = call i32 @compute_lb.1(), !dbg [[DBG60]]
; CHECK-NEXT:    [[TMP5:%.*]] = call i32 @compute_ub.2(), !dbg [[DBG60]]
; CHECK-NEXT:    [[TMP6:%.*]] = call i32 @compute_step.3(), !dbg [[DBG60]]
; CHECK-NEXT:    [[TMP7:%.*]] = sub i32 [[UB]], [[LB]], !dbg [[DBG60]]
; CHECK-NEXT:    [[TMP8:%.*]] = sub i32 [[TMP7]], 1, !dbg [[DBG60]]
; CHECK-NEXT:    [[TMP9:%.*]] = sdiv i32 [[TMP8]], [[TMP6]], !dbg [[DBG60]]
; CHECK-NEXT:    [[TMP10:%.*]] = add i32 [[TMP9]], 1, !dbg [[DBG60]]
; CHECK-NEXT:    [[TMP11:%.*]] = sext i32 [[TMP10]] to i64, !dbg [[DBG60]]
; CHECK-NEXT:    [[LOOP:%.*]] = alloca i32, align 4, !dbg [[DBG60]]
; CHECK-NEXT:    store i32 [[LB]], ptr [[LOOP]], align 4, !dbg [[DBG60]]
; CHECK-NEXT:    br label [[FOR_COND12:%.*]], !dbg [[DBG60]]
; CHECK:       for.cond12:
; CHECK-NEXT:    [[TMP12:%.*]] = load i32, ptr [[LOOP]], align 4, !dbg [[DBG60]]
; CHECK-NEXT:    [[TMP13:%.*]] = icmp slt i32 [[TMP12]], [[UB]], !dbg [[DBG60]]
; CHECK-NEXT:    br i1 [[TMP13]], label [[TMP14:%.*]], label [[DOTEXITSTUB:%.*]], !dbg [[DBG60]]
; CHECK:       14:
; CHECK-NEXT:    [[TMP15:%.*]] = load i32, ptr [[LOOP]], align 4, !dbg [[DBG60]]
; CHECK-NEXT:    [[TMP16:%.*]] = sext i32 [[TMP15]] to i64, !dbg [[DBG60]]
; CHECK-NEXT:    [[TMP17:%.*]] = udiv i64 [[TMP16]], 1, !dbg [[DBG60]]
; CHECK-NEXT:    [[TMP18:%.*]] = sext i32 [[TMP6]] to i64, !dbg [[DBG60]]
; CHECK-NEXT:    [[TMP19:%.*]] = mul i64 [[TMP17]], [[TMP18]], !dbg [[DBG60]]
; CHECK-NEXT:    [[TMP20:%.*]] = sext i32 [[TMP4]] to i64, !dbg [[DBG60]]
; CHECK-NEXT:    [[TMP21:%.*]] = add i64 [[TMP19]], [[TMP20]], !dbg [[DBG60]]
; CHECK-NEXT:    [[TMP22:%.*]] = mul i64 [[TMP17]], 1, !dbg [[DBG60]]
; CHECK-NEXT:    [[TMP23:%.*]] = sext i32 [[TMP15]] to i64, !dbg [[DBG60]]
; CHECK-NEXT:    [[TMP24:%.*]] = sub i64 [[TMP23]], [[TMP22]], !dbg [[DBG60]]
; CHECK-NEXT:    [[TMP25:%.*]] = trunc i64 [[TMP21]] to i32, !dbg [[DBG60]]
; CHECK-NEXT:    store i32 [[TMP25]], ptr [[I1]], align 4, !dbg [[DBG60]]
; CHECK-NEXT:    br label [[FOR_BODY13:%.*]], !dbg [[DBG60]]
; CHECK:       for.body13:
; CHECK-NEXT:    br label [[FOR_INCR15:%.*]], !dbg [[DBG61:![0-9]+]]
; CHECK:       for.incr15:
; CHECK-NEXT:    [[TMP26:%.*]] = load i32, ptr [[LOOP]], align 4, !dbg [[DBG60]]
; CHECK-NEXT:    [[TMP27:%.*]] = add i32 [[TMP26]], 1, !dbg [[DBG60]]
; CHECK-NEXT:    store i32 [[TMP27]], ptr [[LOOP]], align 4, !dbg [[DBG60]]
; CHECK-NEXT:    br label [[FOR_COND12]], !dbg [[DBG60]]
; CHECK:       .exitStub:
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_task_region__Z3foov.6
; CHECK-SAME: (ptr [[TASK_ARGS:%.*]], ptr [[LOOP_BOUNDS:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_VLA:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3FOOV_0:%.*]], ptr [[TASK_ARGS]], i32 0, i32 0
; CHECK-NEXT:    [[LOAD_GEP_VLA:%.*]] = load ptr, ptr [[GEP_VLA]], align 8
; CHECK-NEXT:    [[GEP_I1:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3FOOV_0]], ptr [[TASK_ARGS]], i32 0, i32 1
; CHECK-NEXT:    [[CAPT_GEP:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3FOOV_0]], ptr [[TASK_ARGS]], i32 0, i32 2
; CHECK-NEXT:    [[LOAD_CAPT_GEP:%.*]] = load i64, ptr [[CAPT_GEP]], align 8
; CHECK-NEXT:    [[TMP0:%.*]] = icmp ne ptr [[ADDRESS_TRANSLATION_TABLE]], null
; CHECK-NEXT:    br i1 [[TMP0]], label [[TMP1:%.*]], label [[TMP2:%.*]]
; CHECK:       1:
; CHECK-NEXT:    br label [[TMP2]]
; CHECK:       2:
; CHECK-NEXT:    call void @nanos6_unpacked_task_region__Z3foov.5(ptr [[LOAD_GEP_VLA]], ptr [[GEP_I1]], i64 [[LOAD_CAPT_GEP]], ptr [[LOOP_BOUNDS]], ptr [[ADDRESS_TRANSLATION_TABLE]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_unpacked_destroy__Z3foov.15
; CHECK-SAME: (ptr [[I2:%.*]], ptr [[VLA:%.*]], i64 [[TMP0:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP1:%.*]] = mul nuw i64 1, [[TMP0]]
; CHECK-NEXT:    call void @oss_dtor_ZN1SD1Ev(ptr [[VLA]], i64 [[TMP1]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_destroy__Z3foov.16
; CHECK-SAME: (ptr [[TASK_ARGS:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_I2:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3FOOV_1:%.*]], ptr [[TASK_ARGS]], i32 0, i32 0
; CHECK-NEXT:    [[GEP_VLA:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3FOOV_1]], ptr [[TASK_ARGS]], i32 0, i32 1
; CHECK-NEXT:    [[LOAD_GEP_VLA:%.*]] = load ptr, ptr [[GEP_VLA]], align 8
; CHECK-NEXT:    [[CAPT_GEP:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3FOOV_1]], ptr [[TASK_ARGS]], i32 0, i32 2
; CHECK-NEXT:    [[LOAD_CAPT_GEP:%.*]] = load i64, ptr [[CAPT_GEP]], align 8
; CHECK-NEXT:    call void @nanos6_unpacked_destroy__Z3foov.15(ptr [[GEP_I2]], ptr [[LOAD_GEP_VLA]], i64 [[LOAD_CAPT_GEP]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_duplicate__Z3foov.17
; CHECK-SAME: (ptr [[TASK_ARGS_SRC:%.*]], ptr [[TASK_ARGS_DST:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[TASK_ARGS_DST]], align 8
; CHECK-NEXT:    [[ARGS_END:%.*]] = getelementptr i8, ptr [[TMP0]], i64 32
; CHECK-NEXT:    [[GEP_DST_VLA:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3FOOV_1:%.*]], ptr [[TMP0]], i32 0, i32 1
; CHECK-NEXT:    store ptr [[ARGS_END]], ptr [[GEP_DST_VLA]], align 8
; CHECK-NEXT:    [[GEP_DST_:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3FOOV_1]], ptr [[TMP0]], i32 0, i32 2
; CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr [[GEP_DST_]], align 8
; CHECK-NEXT:    [[TMP2:%.*]] = mul nuw i64 1, [[TMP1]]
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[ARGS_END]], i64 [[TMP2]]
; CHECK-NEXT:    [[GEP_SRC_:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3FOOV_1]], ptr [[TASK_ARGS_SRC]], i32 0, i32 2
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[GEP_SRC_]], align 8
; CHECK-NEXT:    [[TMP5:%.*]] = mul nuw i64 1, [[TMP4]]
; CHECK-NEXT:    [[GEP_SRC_VLA:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3FOOV_1]], ptr [[TASK_ARGS_SRC]], i32 0, i32 1
; CHECK-NEXT:    [[GEP_DST_VLA1:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3FOOV_1]], ptr [[TMP0]], i32 0, i32 1
; CHECK-NEXT:    [[TMP6:%.*]] = load ptr, ptr [[GEP_SRC_VLA]], align 8
; CHECK-NEXT:    [[TMP7:%.*]] = load ptr, ptr [[GEP_DST_VLA1]], align 8
; CHECK-NEXT:    call void @oss_copy_ctor_ZN1SC1ERKS_(ptr [[TMP6]], ptr [[TMP7]], i64 [[TMP5]])
; CHECK-NEXT:    [[CAPT_GEP_SRC_:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3FOOV_1]], ptr [[TASK_ARGS_SRC]], i32 0, i32 2
; CHECK-NEXT:    [[CAPT_GEP_DST_:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3FOOV_1]], ptr [[TMP0]], i32 0, i32 2
; CHECK-NEXT:    [[TMP8:%.*]] = load i64, ptr [[CAPT_GEP_SRC_]], align 8
; CHECK-NEXT:    store i64 [[TMP8]], ptr [[CAPT_GEP_DST_]], align 8
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_unpacked_task_region__Z3foov.18
; CHECK-SAME: (ptr [[I2:%.*]], ptr [[VLA:%.*]], i64 [[TMP0:%.*]], ptr [[LOOP_BOUNDS:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) !dbg [[DBG62:![0-9]+]] {
; CHECK-NEXT:  newFuncRoot:
; CHECK-NEXT:    br label [[TMP1:%.*]], !dbg [[DBG63:![0-9]+]]
; CHECK:       1:
; CHECK-NEXT:    [[LB_GEP:%.*]] = getelementptr [[NANOS6_LOOP_BOUNDS_T:%.*]], ptr [[LOOP_BOUNDS]], i32 0, i32 0, !dbg [[DBG63]]
; CHECK-NEXT:    [[TMP2:%.*]] = load i64, ptr [[LB_GEP]], align 8, !dbg [[DBG63]]
; CHECK-NEXT:    [[LB:%.*]] = trunc i64 [[TMP2]] to i32, !dbg [[DBG63]]
; CHECK-NEXT:    [[UB_GEP:%.*]] = getelementptr [[NANOS6_LOOP_BOUNDS_T]], ptr [[LOOP_BOUNDS]], i32 0, i32 1, !dbg [[DBG63]]
; CHECK-NEXT:    [[TMP3:%.*]] = load i64, ptr [[UB_GEP]], align 8, !dbg [[DBG63]]
; CHECK-NEXT:    [[UB:%.*]] = trunc i64 [[TMP3]] to i32, !dbg [[DBG63]]
; CHECK-NEXT:    [[TMP4:%.*]] = call i32 @compute_lb.4(), !dbg [[DBG63]]
; CHECK-NEXT:    [[TMP5:%.*]] = call i32 @compute_ub.5(), !dbg [[DBG63]]
; CHECK-NEXT:    [[TMP6:%.*]] = call i32 @compute_step.6(), !dbg [[DBG63]]
; CHECK-NEXT:    [[TMP7:%.*]] = sub i32 [[UB]], [[LB]], !dbg [[DBG63]]
; CHECK-NEXT:    [[TMP8:%.*]] = sub i32 [[TMP7]], 1, !dbg [[DBG63]]
; CHECK-NEXT:    [[TMP9:%.*]] = sdiv i32 [[TMP8]], [[TMP6]], !dbg [[DBG63]]
; CHECK-NEXT:    [[TMP10:%.*]] = add i32 [[TMP9]], 1, !dbg [[DBG63]]
; CHECK-NEXT:    [[TMP11:%.*]] = sext i32 [[TMP10]] to i64, !dbg [[DBG63]]
; CHECK-NEXT:    [[LOOP:%.*]] = alloca i32, align 4, !dbg [[DBG63]]
; CHECK-NEXT:    store i32 [[LB]], ptr [[LOOP]], align 4, !dbg [[DBG63]]
; CHECK-NEXT:    br label [[FOR_COND29:%.*]], !dbg [[DBG63]]
; CHECK:       for.cond29:
; CHECK-NEXT:    [[TMP12:%.*]] = load i32, ptr [[LOOP]], align 4, !dbg [[DBG63]]
; CHECK-NEXT:    [[TMP13:%.*]] = icmp slt i32 [[TMP12]], [[UB]], !dbg [[DBG63]]
; CHECK-NEXT:    br i1 [[TMP13]], label [[TMP14:%.*]], label [[DOTEXITSTUB:%.*]], !dbg [[DBG63]]
; CHECK:       14:
; CHECK-NEXT:    [[TMP15:%.*]] = load i32, ptr [[LOOP]], align 4, !dbg [[DBG63]]
; CHECK-NEXT:    [[TMP16:%.*]] = sext i32 [[TMP15]] to i64, !dbg [[DBG63]]
; CHECK-NEXT:    [[TMP17:%.*]] = udiv i64 [[TMP16]], 1, !dbg [[DBG63]]
; CHECK-NEXT:    [[TMP18:%.*]] = sext i32 [[TMP6]] to i64, !dbg [[DBG63]]
; CHECK-NEXT:    [[TMP19:%.*]] = mul i64 [[TMP17]], [[TMP18]], !dbg [[DBG63]]
; CHECK-NEXT:    [[TMP20:%.*]] = sext i32 [[TMP4]] to i64, !dbg [[DBG63]]
; CHECK-NEXT:    [[TMP21:%.*]] = add i64 [[TMP19]], [[TMP20]], !dbg [[DBG63]]
; CHECK-NEXT:    [[TMP22:%.*]] = mul i64 [[TMP17]], 1, !dbg [[DBG63]]
; CHECK-NEXT:    [[TMP23:%.*]] = sext i32 [[TMP15]] to i64, !dbg [[DBG63]]
; CHECK-NEXT:    [[TMP24:%.*]] = sub i64 [[TMP23]], [[TMP22]], !dbg [[DBG63]]
; CHECK-NEXT:    [[TMP25:%.*]] = trunc i64 [[TMP21]] to i32, !dbg [[DBG63]]
; CHECK-NEXT:    store i32 [[TMP25]], ptr [[I2]], align 4, !dbg [[DBG63]]
; CHECK-NEXT:    br label [[FOR_BODY30:%.*]], !dbg [[DBG63]]
; CHECK:       for.body30:
; CHECK-NEXT:    br label [[FOR_INCR32:%.*]], !dbg [[DBG64:![0-9]+]]
; CHECK:       for.incr32:
; CHECK-NEXT:    [[TMP26:%.*]] = load i32, ptr [[LOOP]], align 4, !dbg [[DBG63]]
; CHECK-NEXT:    [[TMP27:%.*]] = add i32 [[TMP26]], 1, !dbg [[DBG63]]
; CHECK-NEXT:    store i32 [[TMP27]], ptr [[LOOP]], align 4, !dbg [[DBG63]]
; CHECK-NEXT:    br label [[FOR_COND29]], !dbg [[DBG63]]
; CHECK:       .exitStub:
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_task_region__Z3foov.19
; CHECK-SAME: (ptr [[TASK_ARGS:%.*]], ptr [[LOOP_BOUNDS:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_I2:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3FOOV_1:%.*]], ptr [[TASK_ARGS]], i32 0, i32 0
; CHECK-NEXT:    [[GEP_VLA:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3FOOV_1]], ptr [[TASK_ARGS]], i32 0, i32 1
; CHECK-NEXT:    [[LOAD_GEP_VLA:%.*]] = load ptr, ptr [[GEP_VLA]], align 8
; CHECK-NEXT:    [[CAPT_GEP:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z3FOOV_1]], ptr [[TASK_ARGS]], i32 0, i32 2
; CHECK-NEXT:    [[LOAD_CAPT_GEP:%.*]] = load i64, ptr [[CAPT_GEP]], align 8
; CHECK-NEXT:    [[TMP0:%.*]] = icmp ne ptr [[ADDRESS_TRANSLATION_TABLE]], null
; CHECK-NEXT:    br i1 [[TMP0]], label [[TMP1:%.*]], label [[TMP2:%.*]]
; CHECK:       1:
; CHECK-NEXT:    br label [[TMP2]]
; CHECK:       2:
; CHECK-NEXT:    call void @nanos6_unpacked_task_region__Z3foov.18(ptr [[GEP_I2]], ptr [[LOAD_GEP_VLA]], i64 [[LOAD_CAPT_GEP]], ptr [[LOOP_BOUNDS]], ptr [[ADDRESS_TRANSLATION_TABLE]])
; CHECK-NEXT:    ret void
;
