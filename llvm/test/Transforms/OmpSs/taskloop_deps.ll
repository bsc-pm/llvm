; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --function-signature --include-generated-funcs
; RUN: opt %s -passes=ompss-2 -S | FileCheck %s
; ModuleID = 'taskloop_deps.ll'
source_filename = "taskloop_deps.ll"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; NOTE: Since we call two times compute_dep we can replace uses of induction
; variable to use (nanos6.lb*step + lb) and (nanos6.ub*step + ub)

; #include <assert.h>
; int main() {
;     int array[100];
;     int i;
;     #pragma oss taskloop out(array[i])
;     for (i = 0; i < 100; ++i) {
;         array[i] = i;
;     }
;     #pragma oss taskloop in(array[i])
;     for (i = 0; i < 100; ++i) {
;         assert(array[i] == i);
;     }
;     #pragma oss taskwait
; }

%struct._depend_unpack_t = type { ptr, i64, i64, i64 }
%struct._depend_unpack_t.0 = type { ptr, i64, i64, i64 }

@.str = private unnamed_addr constant [14 x i8] c"array[i] == i\00", align 1
@.str.5 = private unnamed_addr constant [6 x i8] c"tmp.c\00", align 1
@__PRETTY_FUNCTION__.main = private unnamed_addr constant [11 x i8] c"int main()\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !7 {
entry:
  %retval = alloca i32, align 4
  %array = alloca [100 x i32], align 16
  %i = alloca i32, align 4
  store i32 0, ptr %retval, align 4
  store i32 0, ptr %i, align 4, !dbg !10
  %0 = call token @llvm.directive.region.entry() [ "DIR.OSS"([9 x i8] c"TASKLOOP\00"), "QUAL.OSS.SHARED"(ptr %array, [100 x i32] undef), "QUAL.OSS.PRIVATE"(ptr %i, i32 undef), "QUAL.OSS.LOOP.IND.VAR"(ptr %i), "QUAL.OSS.LOOP.LOWER.BOUND"(ptr @compute_lb), "QUAL.OSS.LOOP.UPPER.BOUND"(ptr @compute_ub), "QUAL.OSS.LOOP.STEP"(ptr @compute_step), "QUAL.OSS.LOOP.TYPE"(i64 0, i64 1, i64 1, i64 1, i64 1), "QUAL.OSS.DEP.OUT"(ptr %array, [9 x i8] c"array[i]\00", ptr @compute_dep, ptr %array, ptr %i) ], !dbg !11
  %1 = load i32, ptr %i, align 4, !dbg !12
  %2 = load i32, ptr %i, align 4, !dbg !13
  %idxprom = sext i32 %2 to i64, !dbg !14
  %arrayidx = getelementptr inbounds [100 x i32], ptr %array, i64 0, i64 %idxprom, !dbg !14
  store i32 %1, ptr %arrayidx, align 4, !dbg !15
  call void @llvm.directive.region.exit(token %0), !dbg !16
  store i32 0, ptr %i, align 4, !dbg !17
  %3 = call token @llvm.directive.region.entry() [ "DIR.OSS"([9 x i8] c"TASKLOOP\00"), "QUAL.OSS.SHARED"(ptr %array, [100 x i32] undef), "QUAL.OSS.PRIVATE"(ptr %i, i32 undef), "QUAL.OSS.LOOP.IND.VAR"(ptr %i), "QUAL.OSS.LOOP.LOWER.BOUND"(ptr @compute_lb.1), "QUAL.OSS.LOOP.UPPER.BOUND"(ptr @compute_ub.2), "QUAL.OSS.LOOP.STEP"(ptr @compute_step.3), "QUAL.OSS.LOOP.TYPE"(i64 0, i64 1, i64 1, i64 1, i64 1), "QUAL.OSS.DEP.IN"(ptr %array, [9 x i8] c"array[i]\00", ptr @compute_dep.4, ptr %array, ptr %i) ], !dbg !18
  %4 = load i32, ptr %i, align 4, !dbg !19
  %idxprom1 = sext i32 %4 to i64, !dbg !19
  %arrayidx2 = getelementptr inbounds [100 x i32], ptr %array, i64 0, i64 %idxprom1, !dbg !19
  %5 = load i32, ptr %arrayidx2, align 4, !dbg !19
  %6 = load i32, ptr %i, align 4, !dbg !19
  %cmp = icmp eq i32 %5, %6, !dbg !19
  br i1 %cmp, label %if.then, label %if.else, !dbg !19

if.then:                                          ; preds = %entry
  br label %if.end, !dbg !19

if.else:                                          ; preds = %entry
  call void @__assert_fail(ptr noundef @.str, ptr noundef @.str.5, i32 noundef 11, ptr noundef @__PRETTY_FUNCTION__.main) #4, !dbg !19
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  call void @llvm.directive.region.exit(token %3), !dbg !20
  %7 = call i1 @llvm.directive.marker() [ "DIR.OSS"([9 x i8] c"TASKWAIT\00") ], !dbg !21
  %8 = load i32, ptr %retval, align 4, !dbg !22
  ret i32 %8, !dbg !22
}

; Function Attrs: nounwind
declare token @llvm.directive.region.entry() #1

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token) #1

define internal i32 @compute_lb() #2 !dbg !23 {
entry:
  ret i32 0, !dbg !24
}

define internal i32 @compute_ub() #2 !dbg !25 {
entry:
  ret i32 100, !dbg !26
}

define internal i32 @compute_step() #2 !dbg !27 {
entry:
  ret i32 1, !dbg !28
}

define internal %struct._depend_unpack_t @compute_dep(ptr %array, ptr %i) #2 !dbg !29 {
entry:
  %retval = alloca %struct._depend_unpack_t, align 8
  %array.addr = alloca ptr, align 8
  %i.addr = alloca ptr, align 8
  store ptr %array, ptr %array.addr, align 8
  store ptr %i, ptr %i.addr, align 8
  %0 = load i32, ptr %i, align 4, !dbg !30
  %1 = sext i32 %0 to i64
  %2 = add i64 %1, 1
  %arraydecay = getelementptr inbounds [100 x i32], ptr %array, i64 0, i64 0, !dbg !31
  %3 = mul i64 %1, 4
  %4 = mul i64 %2, 4
  %5 = getelementptr inbounds %struct._depend_unpack_t, ptr %retval, i32 0, i32 0
  store ptr %arraydecay, ptr %5, align 8
  %6 = getelementptr inbounds %struct._depend_unpack_t, ptr %retval, i32 0, i32 1
  store i64 400, ptr %6, align 8
  %7 = getelementptr inbounds %struct._depend_unpack_t, ptr %retval, i32 0, i32 2
  store i64 %3, ptr %7, align 8
  %8 = getelementptr inbounds %struct._depend_unpack_t, ptr %retval, i32 0, i32 3
  store i64 %4, ptr %8, align 8
  %9 = load %struct._depend_unpack_t, ptr %retval, align 8, !dbg !31
  ret %struct._depend_unpack_t %9, !dbg !31
}

define internal i32 @compute_lb.1() #2 !dbg !32 {
entry:
  ret i32 0, !dbg !33
}

define internal i32 @compute_ub.2() #2 !dbg !34 {
entry:
  ret i32 100, !dbg !35
}

define internal i32 @compute_step.3() #2 !dbg !36 {
entry:
  ret i32 1, !dbg !37
}

define internal %struct._depend_unpack_t.0 @compute_dep.4(ptr %array, ptr %i) #2 !dbg !38 {
entry:
  %retval = alloca %struct._depend_unpack_t.0, align 8
  %array.addr = alloca ptr, align 8
  %i.addr = alloca ptr, align 8
  store ptr %array, ptr %array.addr, align 8
  store ptr %i, ptr %i.addr, align 8
  %0 = load i32, ptr %i, align 4, !dbg !39
  %1 = sext i32 %0 to i64
  %2 = add i64 %1, 1
  %arraydecay = getelementptr inbounds [100 x i32], ptr %array, i64 0, i64 0, !dbg !40
  %3 = mul i64 %1, 4
  %4 = mul i64 %2, 4
  %5 = getelementptr inbounds %struct._depend_unpack_t.0, ptr %retval, i32 0, i32 0
  store ptr %arraydecay, ptr %5, align 8
  %6 = getelementptr inbounds %struct._depend_unpack_t.0, ptr %retval, i32 0, i32 1
  store i64 400, ptr %6, align 8
  %7 = getelementptr inbounds %struct._depend_unpack_t.0, ptr %retval, i32 0, i32 2
  store i64 %3, ptr %7, align 8
  %8 = getelementptr inbounds %struct._depend_unpack_t.0, ptr %retval, i32 0, i32 3
  store i64 %4, ptr %8, align 8
  %9 = load %struct._depend_unpack_t.0, ptr %retval, align 8, !dbg !40
  ret %struct._depend_unpack_t.0 %9, !dbg !40
}

; Function Attrs: noreturn nounwind
declare dso_local void @__assert_fail(ptr noundef, ptr noundef, i32 noundef, ptr noundef) #3

; Function Attrs: nounwind
declare i1 @llvm.directive.marker() #1

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nounwind }
attributes #2 = { "min-legal-vector-width"="0" }
attributes #3 = { noreturn nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { noreturn nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3, !4, !5}
!llvm.ident = !{!6}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "", isOptimized: false, runtimeVersion: 0, emissionKind: NoDebug, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "taskloop_deps.ll", directory: "")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 1, !"wchar_size", i32 4}
!4 = !{i32 7, !"uwtable", i32 2}
!5 = !{i32 7, !"frame-pointer", i32 2}
!6 = !{!""}
!7 = distinct !DISubprogram(name: "main", scope: !1, file: !1, line: 2, type: !8, scopeLine: 2, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !9)
!8 = !DISubroutineType(types: !9)
!9 = !{}
!10 = !DILocation(line: 6, column: 12, scope: !7)
!11 = !DILocation(line: 6, column: 10, scope: !7)
!12 = !DILocation(line: 7, column: 20, scope: !7)
!13 = !DILocation(line: 7, column: 15, scope: !7)
!14 = !DILocation(line: 7, column: 9, scope: !7)
!15 = !DILocation(line: 7, column: 18, scope: !7)
!16 = !DILocation(line: 8, column: 5, scope: !7)
!17 = !DILocation(line: 10, column: 12, scope: !7)
!18 = !DILocation(line: 10, column: 10, scope: !7)
!19 = !DILocation(line: 11, column: 9, scope: !7)
!20 = !DILocation(line: 12, column: 5, scope: !7)
!21 = !DILocation(line: 13, column: 13, scope: !7)
!22 = !DILocation(line: 14, column: 1, scope: !7)
!23 = distinct !DISubprogram(linkageName: "compute_lb", scope: !1, file: !1, type: !8, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !9)
!24 = !DILocation(line: 6, column: 14, scope: !23)
!25 = distinct !DISubprogram(linkageName: "compute_ub", scope: !1, file: !1, type: !8, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !9)
!26 = !DILocation(line: 6, column: 21, scope: !25)
!27 = distinct !DISubprogram(linkageName: "compute_step", scope: !1, file: !1, type: !8, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !9)
!28 = !DILocation(line: 6, column: 26, scope: !27)
!29 = distinct !DISubprogram(linkageName: "compute_dep", scope: !1, file: !1, type: !8, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !9)
!30 = !DILocation(line: 5, column: 36, scope: !29)
!31 = !DILocation(line: 5, column: 30, scope: !29)
!32 = distinct !DISubprogram(linkageName: "compute_lb.1", scope: !1, file: !1, type: !8, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !9)
!33 = !DILocation(line: 10, column: 14, scope: !32)
!34 = distinct !DISubprogram(linkageName: "compute_ub.2", scope: !1, file: !1, type: !8, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !9)
!35 = !DILocation(line: 10, column: 21, scope: !34)
!36 = distinct !DISubprogram(linkageName: "compute_step.3", scope: !1, file: !1, type: !8, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !9)
!37 = !DILocation(line: 10, column: 26, scope: !36)
!38 = distinct !DISubprogram(linkageName: "compute_dep.4", scope: !1, file: !1, type: !8, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !9)
!39 = !DILocation(line: 9, column: 35, scope: !38)
!40 = !DILocation(line: 9, column: 29, scope: !38)
; CHECK-LABEL: define {{[^@]+}}@main
; CHECK-SAME: () #[[ATTR0:[0-9]+]] !dbg [[DBG7:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[RETVAL:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[ARRAY:%.*]] = alloca [100 x i32], align 16
; CHECK-NEXT:    [[I:%.*]] = alloca i32, align 4
; CHECK-NEXT:    store i32 0, ptr [[RETVAL]], align 4
; CHECK-NEXT:    store i32 0, ptr [[I]], align 4, !dbg [[DBG10:![0-9]+]]
; CHECK-NEXT:    [[TMP0:%.*]] = alloca ptr, align 8, !dbg [[DBG11:![0-9]+]]
; CHECK-NEXT:    [[TMP1:%.*]] = alloca ptr, align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[NUM_DEPS:%.*]] = alloca i64, align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP2:%.*]] = alloca ptr, align 8, !dbg [[DBG12:![0-9]+]]
; CHECK-NEXT:    [[TMP3:%.*]] = alloca ptr, align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[NUM_DEPS17:%.*]] = alloca i64, align 8, !dbg [[DBG12]]
; CHECK-NEXT:    br label [[FINAL_COND:%.*]], !dbg [[DBG11]]
; CHECK:       codeRepl:
; CHECK-NEXT:    store i64 0, ptr [[NUM_DEPS]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[NUM_DEPS]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP5:%.*]] = add i64 [[TMP4]], 1, !dbg [[DBG11]]
; CHECK-NEXT:    store i64 [[TMP5]], ptr [[NUM_DEPS]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP6:%.*]] = load i64, ptr [[NUM_DEPS]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP7:%.*]] = call i32 @compute_lb(), !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP8:%.*]] = call i32 @compute_ub(), !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP9:%.*]] = call i32 @compute_step(), !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP10:%.*]] = sub i32 [[TMP8]], [[TMP7]], !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP11:%.*]] = sub i32 [[TMP10]], 1, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP12:%.*]] = sdiv i32 [[TMP11]], [[TMP9]], !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP13:%.*]] = add i32 [[TMP12]], 1, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP14:%.*]] = sext i32 [[TMP13]] to i64, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP15:%.*]] = mul i64 1, [[TMP14]], !dbg [[DBG11]]
; CHECK-NEXT:    call void @nanos6_create_loop(ptr @task_info_var_main, ptr @task_invocation_info_main, ptr null, i64 16, ptr [[TMP0]], ptr [[TMP1]], i64 4, i64 [[TMP6]], i64 0, i64 [[TMP15]], i64 0, i64 0), !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP16:%.*]] = load ptr, ptr [[TMP0]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[ARGS_END:%.*]] = getelementptr i8, ptr [[TMP16]], i64 16, !dbg [[DBG11]]
; CHECK-NEXT:    [[GEP_ARRAY:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN:%.*]], ptr [[TMP16]], i32 0, i32 0, !dbg [[DBG11]]
; CHECK-NEXT:    store ptr [[ARRAY]], ptr [[GEP_ARRAY]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP17:%.*]] = load ptr, ptr [[TMP1]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    call void @nanos6_submit_task(ptr [[TMP17]]), !dbg [[DBG11]]
; CHECK-NEXT:    br label [[FOR_END3:%.*]], !dbg [[DBG11]]
; CHECK:       final.end:
; CHECK-NEXT:    store i32 0, ptr [[I]], align 4, !dbg [[DBG13:![0-9]+]]
; CHECK-NEXT:    br label [[FINAL_COND10:%.*]], !dbg [[DBG12]]
; CHECK:       codeRepl16:
; CHECK-NEXT:    store i64 0, ptr [[NUM_DEPS17]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP18:%.*]] = load i64, ptr [[NUM_DEPS17]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP19:%.*]] = add i64 [[TMP18]], 1, !dbg [[DBG12]]
; CHECK-NEXT:    store i64 [[TMP19]], ptr [[NUM_DEPS17]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP20:%.*]] = load i64, ptr [[NUM_DEPS17]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP21:%.*]] = call i32 @compute_lb.1(), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP22:%.*]] = call i32 @compute_ub.2(), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP23:%.*]] = call i32 @compute_step.3(), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP24:%.*]] = sub i32 [[TMP22]], [[TMP21]], !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP25:%.*]] = sub i32 [[TMP24]], 1, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP26:%.*]] = sdiv i32 [[TMP25]], [[TMP23]], !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP27:%.*]] = add i32 [[TMP26]], 1, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP28:%.*]] = sext i32 [[TMP27]] to i64, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP29:%.*]] = mul i64 1, [[TMP28]], !dbg [[DBG12]]
; CHECK-NEXT:    call void @nanos6_create_loop(ptr @task_info_var_main.12, ptr @task_invocation_info_main.8, ptr null, i64 16, ptr [[TMP2]], ptr [[TMP3]], i64 4, i64 [[TMP20]], i64 0, i64 [[TMP29]], i64 0, i64 0), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP30:%.*]] = load ptr, ptr [[TMP2]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[ARGS_END18:%.*]] = getelementptr i8, ptr [[TMP30]], i64 16, !dbg [[DBG12]]
; CHECK-NEXT:    [[GEP_ARRAY19:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN_0:%.*]], ptr [[TMP30]], i32 0, i32 0, !dbg [[DBG12]]
; CHECK-NEXT:    store ptr [[ARRAY]], ptr [[GEP_ARRAY19]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP31:%.*]] = load ptr, ptr [[TMP3]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    call void @nanos6_submit_task(ptr [[TMP31]]), !dbg [[DBG12]]
; CHECK-NEXT:    br label [[FOR_END14:%.*]], !dbg [[DBG12]]
; CHECK:       final.end9:
; CHECK-NEXT:    call void @nanos6_taskwait(ptr @[[GLOB4:[0-9]+]]), !dbg [[DBG14:![0-9]+]]
; CHECK-NEXT:    [[TMP32:%.*]] = load i32, ptr [[RETVAL]], align 4, !dbg [[DBG15:![0-9]+]]
; CHECK-NEXT:    ret i32 [[TMP32]], !dbg [[DBG15]]
; CHECK:       final.then:
; CHECK-NEXT:    [[TMP33:%.*]] = call i32 @compute_lb(), !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP34:%.*]] = call i32 @compute_ub(), !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP35:%.*]] = call i32 @compute_step(), !dbg [[DBG11]]
; CHECK-NEXT:    store i32 [[TMP33]], ptr [[I]], align 4, !dbg [[DBG11]]
; CHECK-NEXT:    br label [[FOR_COND:%.*]], !dbg [[DBG11]]
; CHECK:       for.cond:
; CHECK-NEXT:    [[TMP36:%.*]] = load i32, ptr [[I]], align 4, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP37:%.*]] = icmp slt i32 [[TMP36]], [[TMP34]], !dbg [[DBG11]]
; CHECK-NEXT:    br i1 [[TMP37]], label [[TMP38:%.*]], label [[FOR_END:%.*]], !dbg [[DBG11]]
; CHECK:       38:
; CHECK-NEXT:    br label [[FOR_BODY:%.*]], !dbg [[DBG11]]
; CHECK:       for.body:
; CHECK-NEXT:    [[TMP39:%.*]] = load i32, ptr [[I]], align 4, !dbg [[DBG16:![0-9]+]]
; CHECK-NEXT:    [[TMP40:%.*]] = load i32, ptr [[I]], align 4, !dbg [[DBG17:![0-9]+]]
; CHECK-NEXT:    [[IDXPROM_CLONE:%.*]] = sext i32 [[TMP40]] to i64, !dbg [[DBG18:![0-9]+]]
; CHECK-NEXT:    [[ARRAYIDX_CLONE:%.*]] = getelementptr inbounds [100 x i32], ptr [[ARRAY]], i64 0, i64 [[IDXPROM_CLONE]], !dbg [[DBG18]]
; CHECK-NEXT:    store i32 [[TMP39]], ptr [[ARRAYIDX_CLONE]], align 4, !dbg [[DBG19:![0-9]+]]
; CHECK-NEXT:    br label [[FOR_INCR:%.*]], !dbg [[DBG13]]
; CHECK:       final.then11:
; CHECK-NEXT:    [[TMP41:%.*]] = call i32 @compute_lb.1(), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP42:%.*]] = call i32 @compute_ub.2(), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP43:%.*]] = call i32 @compute_step.3(), !dbg [[DBG12]]
; CHECK-NEXT:    store i32 [[TMP41]], ptr [[I]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    br label [[FOR_COND5:%.*]], !dbg [[DBG12]]
; CHECK:       for.cond5:
; CHECK-NEXT:    [[TMP44:%.*]] = load i32, ptr [[I]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP45:%.*]] = icmp slt i32 [[TMP44]], [[TMP42]], !dbg [[DBG12]]
; CHECK-NEXT:    br i1 [[TMP45]], label [[TMP46:%.*]], label [[FOR_END7:%.*]], !dbg [[DBG12]]
; CHECK:       46:
; CHECK-NEXT:    br label [[FOR_BODY6:%.*]], !dbg [[DBG12]]
; CHECK:       for.body6:
; CHECK-NEXT:    [[TMP47:%.*]] = load i32, ptr [[I]], align 4, !dbg [[DBG20:![0-9]+]]
; CHECK-NEXT:    [[IDXPROM1_CLONE:%.*]] = sext i32 [[TMP47]] to i64, !dbg [[DBG20]]
; CHECK-NEXT:    [[ARRAYIDX2_CLONE:%.*]] = getelementptr inbounds [100 x i32], ptr [[ARRAY]], i64 0, i64 [[IDXPROM1_CLONE]], !dbg [[DBG20]]
; CHECK-NEXT:    [[TMP48:%.*]] = load i32, ptr [[ARRAYIDX2_CLONE]], align 4, !dbg [[DBG20]]
; CHECK-NEXT:    [[TMP49:%.*]] = load i32, ptr [[I]], align 4, !dbg [[DBG20]]
; CHECK-NEXT:    [[CMP_CLONE:%.*]] = icmp eq i32 [[TMP48]], [[TMP49]], !dbg [[DBG20]]
; CHECK-NEXT:    br i1 [[CMP_CLONE]], label [[IF_THEN_CLONE:%.*]], label [[IF_ELSE_CLONE:%.*]], !dbg [[DBG20]]
; CHECK:       if.then.clone:
; CHECK-NEXT:    br label [[IF_END_CLONE:%.*]], !dbg [[DBG20]]
; CHECK:       if.else.clone:
; CHECK-NEXT:    call void @__assert_fail(ptr noundef @.str, ptr noundef @.str.5, i32 noundef 11, ptr noundef @__PRETTY_FUNCTION__.main) #[[ATTR4:[0-9]+]], !dbg [[DBG20]]
; CHECK-NEXT:    br label [[IF_END_CLONE]]
; CHECK:       if.end.clone:
; CHECK-NEXT:    br label [[FOR_INCR8:%.*]], !dbg [[DBG14]]
; CHECK:       for.end:
; CHECK-NEXT:    br label [[FINAL_END:%.*]], !dbg [[DBG11]]
; CHECK:       for.incr:
; CHECK-NEXT:    [[TMP50:%.*]] = load i32, ptr [[I]], align 4, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP51:%.*]] = add i32 [[TMP50]], [[TMP35]], !dbg [[DBG11]]
; CHECK-NEXT:    store i32 [[TMP51]], ptr [[I]], align 4, !dbg [[DBG11]]
; CHECK-NEXT:    br label [[FOR_COND]], !dbg [[DBG11]]
; CHECK:       final.cond:
; CHECK-NEXT:    [[TMP52:%.*]] = call i32 @nanos6_in_final(), !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP53:%.*]] = icmp ne i32 [[TMP52]], 0, !dbg [[DBG11]]
; CHECK-NEXT:    br i1 [[TMP53]], label [[FINAL_THEN:%.*]], label [[CODEREPL:%.*]], !dbg [[DBG11]]
; CHECK:       for.end3:
; CHECK-NEXT:    br label [[FINAL_END]], !dbg [[DBG11]]
; CHECK:       for.end7:
; CHECK-NEXT:    br label [[FINAL_END9:%.*]], !dbg [[DBG12]]
; CHECK:       for.incr8:
; CHECK-NEXT:    [[TMP54:%.*]] = load i32, ptr [[I]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP55:%.*]] = add i32 [[TMP54]], [[TMP43]], !dbg [[DBG12]]
; CHECK-NEXT:    store i32 [[TMP55]], ptr [[I]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    br label [[FOR_COND5]], !dbg [[DBG12]]
; CHECK:       final.cond10:
; CHECK-NEXT:    [[TMP56:%.*]] = call i32 @nanos6_in_final(), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP57:%.*]] = icmp ne i32 [[TMP56]], 0, !dbg [[DBG12]]
; CHECK-NEXT:    br i1 [[TMP57]], label [[FINAL_THEN11:%.*]], label [[CODEREPL16:%.*]], !dbg [[DBG12]]
; CHECK:       for.end14:
; CHECK-NEXT:    br label [[FINAL_END9]], !dbg [[DBG12]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_lb
; CHECK-SAME: () #[[ATTR2:[0-9]+]] !dbg [[DBG21:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret i32 0, !dbg [[DBG22:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_ub
; CHECK-SAME: () #[[ATTR2]] !dbg [[DBG23:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret i32 100, !dbg [[DBG24:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_step
; CHECK-SAME: () #[[ATTR2]] !dbg [[DBG25:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret i32 1, !dbg [[DBG26:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_dep
; CHECK-SAME: (ptr [[ARRAY:%.*]], ptr [[I:%.*]]) #[[ATTR2]] !dbg [[DBG27:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[RETVAL:%.*]] = alloca [[STRUCT__DEPEND_UNPACK_T:%.*]], align 8
; CHECK-NEXT:    [[ARRAY_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    [[I_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr [[ARRAY]], ptr [[ARRAY_ADDR]], align 8
; CHECK-NEXT:    store ptr [[I]], ptr [[I_ADDR]], align 8
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[I]], align 4, !dbg [[DBG28:![0-9]+]]
; CHECK-NEXT:    [[TMP1:%.*]] = sext i32 [[TMP0]] to i64
; CHECK-NEXT:    [[TMP2:%.*]] = add i64 [[TMP1]], 1
; CHECK-NEXT:    [[ARRAYDECAY:%.*]] = getelementptr inbounds [100 x i32], ptr [[ARRAY]], i64 0, i64 0, !dbg [[DBG29:![0-9]+]]
; CHECK-NEXT:    [[TMP3:%.*]] = mul i64 [[TMP1]], 4
; CHECK-NEXT:    [[TMP4:%.*]] = mul i64 [[TMP2]], 4
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], i32 0, i32 0
; CHECK-NEXT:    store ptr [[ARRAYDECAY]], ptr [[TMP5]], align 8
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], i32 0, i32 1
; CHECK-NEXT:    store i64 400, ptr [[TMP6]], align 8
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], i32 0, i32 2
; CHECK-NEXT:    store i64 [[TMP3]], ptr [[TMP7]], align 8
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], i32 0, i32 3
; CHECK-NEXT:    store i64 [[TMP4]], ptr [[TMP8]], align 8
; CHECK-NEXT:    [[TMP9:%.*]] = load [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], align 8, !dbg [[DBG29]]
; CHECK-NEXT:    ret [[STRUCT__DEPEND_UNPACK_T]] [[TMP9]], !dbg [[DBG29]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_lb.1
; CHECK-SAME: () #[[ATTR2]] !dbg [[DBG30:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret i32 0, !dbg [[DBG31:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_ub.2
; CHECK-SAME: () #[[ATTR2]] !dbg [[DBG32:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret i32 100, !dbg [[DBG33:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_step.3
; CHECK-SAME: () #[[ATTR2]] !dbg [[DBG34:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret i32 1, !dbg [[DBG35:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_dep.4
; CHECK-SAME: (ptr [[ARRAY:%.*]], ptr [[I:%.*]]) #[[ATTR2]] !dbg [[DBG36:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[RETVAL:%.*]] = alloca [[STRUCT__DEPEND_UNPACK_T_0:%.*]], align 8
; CHECK-NEXT:    [[ARRAY_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    [[I_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr [[ARRAY]], ptr [[ARRAY_ADDR]], align 8
; CHECK-NEXT:    store ptr [[I]], ptr [[I_ADDR]], align 8
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[I]], align 4, !dbg [[DBG37:![0-9]+]]
; CHECK-NEXT:    [[TMP1:%.*]] = sext i32 [[TMP0]] to i64
; CHECK-NEXT:    [[TMP2:%.*]] = add i64 [[TMP1]], 1
; CHECK-NEXT:    [[ARRAYDECAY:%.*]] = getelementptr inbounds [100 x i32], ptr [[ARRAY]], i64 0, i64 0, !dbg [[DBG38:![0-9]+]]
; CHECK-NEXT:    [[TMP3:%.*]] = mul i64 [[TMP1]], 4
; CHECK-NEXT:    [[TMP4:%.*]] = mul i64 [[TMP2]], 4
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_0]], ptr [[RETVAL]], i32 0, i32 0
; CHECK-NEXT:    store ptr [[ARRAYDECAY]], ptr [[TMP5]], align 8
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_0]], ptr [[RETVAL]], i32 0, i32 1
; CHECK-NEXT:    store i64 400, ptr [[TMP6]], align 8
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_0]], ptr [[RETVAL]], i32 0, i32 2
; CHECK-NEXT:    store i64 [[TMP3]], ptr [[TMP7]], align 8
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_0]], ptr [[RETVAL]], i32 0, i32 3
; CHECK-NEXT:    store i64 [[TMP4]], ptr [[TMP8]], align 8
; CHECK-NEXT:    [[TMP9:%.*]] = load [[STRUCT__DEPEND_UNPACK_T_0]], ptr [[RETVAL]], align 8, !dbg [[DBG38]]
; CHECK-NEXT:    ret [[STRUCT__DEPEND_UNPACK_T_0]] [[TMP9]], !dbg [[DBG38]]
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_unpacked_task_region_main
; CHECK-SAME: (ptr [[ARRAY:%.*]], ptr [[I:%.*]], ptr [[LOOP_BOUNDS:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) !dbg [[DBG39:![0-9]+]] {
; CHECK-NEXT:  newFuncRoot:
; CHECK-NEXT:    br label [[TMP0:%.*]], !dbg [[DBG40:![0-9]+]]
; CHECK:       0:
; CHECK-NEXT:    [[LB_GEP:%.*]] = getelementptr [[NANOS6_LOOP_BOUNDS_T:%.*]], ptr [[LOOP_BOUNDS]], i32 0, i32 0, !dbg [[DBG40]]
; CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr [[LB_GEP]], align 8, !dbg [[DBG40]]
; CHECK-NEXT:    [[LB:%.*]] = trunc i64 [[TMP1]] to i32, !dbg [[DBG40]]
; CHECK-NEXT:    [[UB_GEP:%.*]] = getelementptr [[NANOS6_LOOP_BOUNDS_T]], ptr [[LOOP_BOUNDS]], i32 0, i32 1, !dbg [[DBG40]]
; CHECK-NEXT:    [[TMP2:%.*]] = load i64, ptr [[UB_GEP]], align 8, !dbg [[DBG40]]
; CHECK-NEXT:    [[UB:%.*]] = trunc i64 [[TMP2]] to i32, !dbg [[DBG40]]
; CHECK-NEXT:    [[TMP3:%.*]] = call i32 @compute_lb(), !dbg [[DBG40]]
; CHECK-NEXT:    [[TMP4:%.*]] = call i32 @compute_ub(), !dbg [[DBG40]]
; CHECK-NEXT:    [[TMP5:%.*]] = call i32 @compute_step(), !dbg [[DBG40]]
; CHECK-NEXT:    [[TMP6:%.*]] = sub i32 [[UB]], [[LB]], !dbg [[DBG40]]
; CHECK-NEXT:    [[TMP7:%.*]] = sub i32 [[TMP6]], 1, !dbg [[DBG40]]
; CHECK-NEXT:    [[TMP8:%.*]] = sdiv i32 [[TMP7]], [[TMP5]], !dbg [[DBG40]]
; CHECK-NEXT:    [[TMP9:%.*]] = add i32 [[TMP8]], 1, !dbg [[DBG40]]
; CHECK-NEXT:    [[TMP10:%.*]] = sext i32 [[TMP9]] to i64, !dbg [[DBG40]]
; CHECK-NEXT:    [[LOOP:%.*]] = alloca i32, align 4, !dbg [[DBG40]]
; CHECK-NEXT:    store i32 [[LB]], ptr [[LOOP]], align 4, !dbg [[DBG40]]
; CHECK-NEXT:    br label [[FOR_COND1:%.*]], !dbg [[DBG40]]
; CHECK:       for.cond1:
; CHECK-NEXT:    [[TMP11:%.*]] = load i32, ptr [[LOOP]], align 4, !dbg [[DBG40]]
; CHECK-NEXT:    [[TMP12:%.*]] = icmp slt i32 [[TMP11]], [[UB]], !dbg [[DBG40]]
; CHECK-NEXT:    br i1 [[TMP12]], label [[TMP13:%.*]], label [[DOTEXITSTUB:%.*]], !dbg [[DBG40]]
; CHECK:       13:
; CHECK-NEXT:    [[TMP14:%.*]] = load i32, ptr [[LOOP]], align 4, !dbg [[DBG40]]
; CHECK-NEXT:    [[TMP15:%.*]] = sext i32 [[TMP14]] to i64, !dbg [[DBG40]]
; CHECK-NEXT:    [[TMP16:%.*]] = udiv i64 [[TMP15]], 1, !dbg [[DBG40]]
; CHECK-NEXT:    [[TMP17:%.*]] = sext i32 [[TMP5]] to i64, !dbg [[DBG40]]
; CHECK-NEXT:    [[TMP18:%.*]] = mul i64 [[TMP16]], [[TMP17]], !dbg [[DBG40]]
; CHECK-NEXT:    [[TMP19:%.*]] = sext i32 [[TMP3]] to i64, !dbg [[DBG40]]
; CHECK-NEXT:    [[TMP20:%.*]] = add i64 [[TMP18]], [[TMP19]], !dbg [[DBG40]]
; CHECK-NEXT:    [[TMP21:%.*]] = mul i64 [[TMP16]], 1, !dbg [[DBG40]]
; CHECK-NEXT:    [[TMP22:%.*]] = sext i32 [[TMP14]] to i64, !dbg [[DBG40]]
; CHECK-NEXT:    [[TMP23:%.*]] = sub i64 [[TMP22]], [[TMP21]], !dbg [[DBG40]]
; CHECK-NEXT:    [[TMP24:%.*]] = trunc i64 [[TMP20]] to i32, !dbg [[DBG40]]
; CHECK-NEXT:    store i32 [[TMP24]], ptr [[I]], align 4, !dbg [[DBG40]]
; CHECK-NEXT:    br label [[FOR_BODY2:%.*]], !dbg [[DBG40]]
; CHECK:       for.body2:
; CHECK-NEXT:    [[TMP25:%.*]] = load i32, ptr [[I]], align 4, !dbg [[DBG41:![0-9]+]]
; CHECK-NEXT:    [[TMP26:%.*]] = load i32, ptr [[I]], align 4, !dbg [[DBG42:![0-9]+]]
; CHECK-NEXT:    [[IDXPROM:%.*]] = sext i32 [[TMP26]] to i64, !dbg [[DBG43:![0-9]+]]
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds [100 x i32], ptr [[ARRAY]], i64 0, i64 [[IDXPROM]], !dbg [[DBG43]]
; CHECK-NEXT:    store i32 [[TMP25]], ptr [[ARRAYIDX]], align 4, !dbg [[DBG44:![0-9]+]]
; CHECK-NEXT:    br label [[FOR_INCR4:%.*]], !dbg [[DBG45:![0-9]+]]
; CHECK:       for.incr4:
; CHECK-NEXT:    [[TMP27:%.*]] = load i32, ptr [[LOOP]], align 4, !dbg [[DBG40]]
; CHECK-NEXT:    [[TMP28:%.*]] = add i32 [[TMP27]], 1, !dbg [[DBG40]]
; CHECK-NEXT:    store i32 [[TMP28]], ptr [[LOOP]], align 4, !dbg [[DBG40]]
; CHECK-NEXT:    br label [[FOR_COND1]], !dbg [[DBG40]]
; CHECK:       .exitStub:
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_task_region_main
; CHECK-SAME: (ptr [[TASK_ARGS:%.*]], ptr [[LOOP_BOUNDS:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_ARRAY:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN:%.*]], ptr [[TASK_ARGS]], i32 0, i32 0
; CHECK-NEXT:    [[LOAD_GEP_ARRAY:%.*]] = load ptr, ptr [[GEP_ARRAY]], align 8
; CHECK-NEXT:    [[GEP_I:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN]], ptr [[TASK_ARGS]], i32 0, i32 1
; CHECK-NEXT:    [[TLATE_LOAD_GEP_ARRAY:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr [[LOAD_GEP_ARRAY]], ptr [[TLATE_LOAD_GEP_ARRAY]], align 8
; CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[TLATE_LOAD_GEP_ARRAY]], align 8
; CHECK-NEXT:    [[TMP1:%.*]] = icmp ne ptr [[ADDRESS_TRANSLATION_TABLE]], null
; CHECK-NEXT:    br i1 [[TMP1]], label [[TMP2:%.*]], label [[TMP8:%.*]]
; CHECK:       2:
; CHECK-NEXT:    [[LOCAL_LOOKUP_ARRAY:%.*]] = getelementptr [[NANOS6_ADDRESS_TRANSLATION_ENTRY_T:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE]], i32 0, i32 0
; CHECK-NEXT:    [[TMP3:%.*]] = load i64, ptr [[LOCAL_LOOKUP_ARRAY]], align 8
; CHECK-NEXT:    [[DEVICE_LOOKUP_ARRAY:%.*]] = getelementptr [[NANOS6_ADDRESS_TRANSLATION_ENTRY_T]], ptr [[ADDRESS_TRANSLATION_TABLE]], i32 0, i32 1
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[DEVICE_LOOKUP_ARRAY]], align 8
; CHECK-NEXT:    [[TMP5:%.*]] = sub i64 0, [[TMP3]]
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[TMP0]], i64 [[TMP5]]
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[TMP6]], i64 [[TMP4]]
; CHECK-NEXT:    store ptr [[TMP7]], ptr [[TLATE_LOAD_GEP_ARRAY]], align 8
; CHECK-NEXT:    br label [[TMP8]]
; CHECK:       8:
; CHECK-NEXT:    [[TMP9:%.*]] = load ptr, ptr [[TLATE_LOAD_GEP_ARRAY]], align 8
; CHECK-NEXT:    call void @nanos6_unpacked_task_region_main(ptr [[TMP9]], ptr [[GEP_I]], ptr [[LOOP_BOUNDS]], ptr [[ADDRESS_TRANSLATION_TABLE]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_unpacked_deps_main
; CHECK-SAME: (ptr [[ARRAY:%.*]], ptr [[I:%.*]], ptr [[LOOP_BOUNDS:%.*]], ptr [[HANDLER:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[LB_GEP:%.*]] = getelementptr [[NANOS6_LOOP_BOUNDS_T:%.*]], ptr [[LOOP_BOUNDS]], i32 0, i32 0
; CHECK-NEXT:    [[TMP0:%.*]] = load i64, ptr [[LB_GEP]], align 8
; CHECK-NEXT:    [[LB:%.*]] = trunc i64 [[TMP0]] to i32
; CHECK-NEXT:    [[UB_GEP:%.*]] = getelementptr [[NANOS6_LOOP_BOUNDS_T]], ptr [[LOOP_BOUNDS]], i32 0, i32 1
; CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr [[UB_GEP]], align 8
; CHECK-NEXT:    [[TMP2:%.*]] = trunc i64 [[TMP1]] to i32
; CHECK-NEXT:    [[UB:%.*]] = sub i32 [[TMP2]], 1
; CHECK-NEXT:    [[TMP3:%.*]] = call i32 @compute_lb()
; CHECK-NEXT:    [[TMP4:%.*]] = call i32 @compute_ub()
; CHECK-NEXT:    [[TMP5:%.*]] = call i32 @compute_step()
; CHECK-NEXT:    [[TMP6:%.*]] = sub i32 [[TMP4]], [[TMP3]]
; CHECK-NEXT:    [[TMP7:%.*]] = sub i32 [[TMP6]], 1
; CHECK-NEXT:    [[TMP8:%.*]] = sdiv i32 [[TMP7]], [[TMP5]]
; CHECK-NEXT:    [[TMP9:%.*]] = add i32 [[TMP8]], 1
; CHECK-NEXT:    [[TMP10:%.*]] = sext i32 [[TMP9]] to i64
; CHECK-NEXT:    [[I_LB:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[I_UB:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[TMP11:%.*]] = sext i32 [[LB]] to i64
; CHECK-NEXT:    [[TMP12:%.*]] = udiv i64 [[TMP11]], 1
; CHECK-NEXT:    [[TMP13:%.*]] = sext i32 [[TMP5]] to i64
; CHECK-NEXT:    [[TMP14:%.*]] = mul i64 [[TMP12]], [[TMP13]]
; CHECK-NEXT:    [[TMP15:%.*]] = sext i32 [[TMP3]] to i64
; CHECK-NEXT:    [[TMP16:%.*]] = add i64 [[TMP14]], [[TMP15]]
; CHECK-NEXT:    [[TMP17:%.*]] = mul i64 [[TMP12]], 1
; CHECK-NEXT:    [[TMP18:%.*]] = sext i32 [[LB]] to i64
; CHECK-NEXT:    [[TMP19:%.*]] = sub i64 [[TMP18]], [[TMP17]]
; CHECK-NEXT:    [[TMP20:%.*]] = trunc i64 [[TMP16]] to i32
; CHECK-NEXT:    store i32 [[TMP20]], ptr [[I_LB]], align 4
; CHECK-NEXT:    [[TMP21:%.*]] = sext i32 [[UB]] to i64
; CHECK-NEXT:    [[TMP22:%.*]] = udiv i64 [[TMP21]], 1
; CHECK-NEXT:    [[TMP23:%.*]] = sext i32 [[TMP5]] to i64
; CHECK-NEXT:    [[TMP24:%.*]] = mul i64 [[TMP22]], [[TMP23]]
; CHECK-NEXT:    [[TMP25:%.*]] = sext i32 [[TMP3]] to i64
; CHECK-NEXT:    [[TMP26:%.*]] = add i64 [[TMP24]], [[TMP25]]
; CHECK-NEXT:    [[TMP27:%.*]] = mul i64 [[TMP22]], 1
; CHECK-NEXT:    [[TMP28:%.*]] = sext i32 [[UB]] to i64
; CHECK-NEXT:    [[TMP29:%.*]] = sub i64 [[TMP28]], [[TMP27]]
; CHECK-NEXT:    [[TMP30:%.*]] = trunc i64 [[TMP26]] to i32
; CHECK-NEXT:    store i32 [[TMP30]], ptr [[I_UB]], align 4
; CHECK-NEXT:    [[TMP31:%.*]] = call [[STRUCT__DEPEND_UNPACK_T:%.*]] @compute_dep(ptr [[ARRAY]], ptr [[I_LB]])
; CHECK-NEXT:    [[TMP32:%.*]] = call [[STRUCT__DEPEND_UNPACK_T]] @compute_dep(ptr [[ARRAY]], ptr [[I_UB]])
; CHECK-NEXT:    [[TMP33:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T]] [[TMP31]], 0
; CHECK-NEXT:    [[TMP34:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T]] [[TMP31]], 1
; CHECK-NEXT:    [[TMP35:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T]] [[TMP31]], 2
; CHECK-NEXT:    [[TMP36:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T]] [[TMP32]], 3
; CHECK-NEXT:    call void @nanos6_register_region_write_depinfo1(ptr [[HANDLER]], i32 0, ptr @[[GLOB1:[0-9]+]], ptr [[TMP33]], i64 [[TMP34]], i64 [[TMP35]], i64 [[TMP36]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_deps_main
; CHECK-SAME: (ptr [[TASK_ARGS:%.*]], ptr [[LOOP_BOUNDS:%.*]], ptr [[HANDLER:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_ARRAY:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN:%.*]], ptr [[TASK_ARGS]], i32 0, i32 0
; CHECK-NEXT:    [[LOAD_GEP_ARRAY:%.*]] = load ptr, ptr [[GEP_ARRAY]], align 8
; CHECK-NEXT:    [[GEP_I:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN]], ptr [[TASK_ARGS]], i32 0, i32 1
; CHECK-NEXT:    call void @nanos6_unpacked_deps_main(ptr [[LOAD_GEP_ARRAY]], ptr [[GEP_I]], ptr [[LOOP_BOUNDS]], ptr [[HANDLER]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_constructor_register_task_info() {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @nanos6_register_task_info(ptr @task_info_var_main)
; CHECK-NEXT:    call void @nanos6_register_task_info(ptr @task_info_var_main.12)
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_unpacked_task_region_main.4
; CHECK-SAME: (ptr [[ARRAY:%.*]], ptr [[I:%.*]], ptr [[LOOP_BOUNDS:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) !dbg [[DBG46:![0-9]+]] {
; CHECK-NEXT:  newFuncRoot:
; CHECK-NEXT:    br label [[TMP0:%.*]], !dbg [[DBG47:![0-9]+]]
; CHECK:       0:
; CHECK-NEXT:    [[LB_GEP:%.*]] = getelementptr [[NANOS6_LOOP_BOUNDS_T:%.*]], ptr [[LOOP_BOUNDS]], i32 0, i32 0, !dbg [[DBG47]]
; CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr [[LB_GEP]], align 8, !dbg [[DBG47]]
; CHECK-NEXT:    [[LB:%.*]] = trunc i64 [[TMP1]] to i32, !dbg [[DBG47]]
; CHECK-NEXT:    [[UB_GEP:%.*]] = getelementptr [[NANOS6_LOOP_BOUNDS_T]], ptr [[LOOP_BOUNDS]], i32 0, i32 1, !dbg [[DBG47]]
; CHECK-NEXT:    [[TMP2:%.*]] = load i64, ptr [[UB_GEP]], align 8, !dbg [[DBG47]]
; CHECK-NEXT:    [[UB:%.*]] = trunc i64 [[TMP2]] to i32, !dbg [[DBG47]]
; CHECK-NEXT:    [[TMP3:%.*]] = call i32 @compute_lb.1(), !dbg [[DBG47]]
; CHECK-NEXT:    [[TMP4:%.*]] = call i32 @compute_ub.2(), !dbg [[DBG47]]
; CHECK-NEXT:    [[TMP5:%.*]] = call i32 @compute_step.3(), !dbg [[DBG47]]
; CHECK-NEXT:    [[TMP6:%.*]] = sub i32 [[UB]], [[LB]], !dbg [[DBG47]]
; CHECK-NEXT:    [[TMP7:%.*]] = sub i32 [[TMP6]], 1, !dbg [[DBG47]]
; CHECK-NEXT:    [[TMP8:%.*]] = sdiv i32 [[TMP7]], [[TMP5]], !dbg [[DBG47]]
; CHECK-NEXT:    [[TMP9:%.*]] = add i32 [[TMP8]], 1, !dbg [[DBG47]]
; CHECK-NEXT:    [[TMP10:%.*]] = sext i32 [[TMP9]] to i64, !dbg [[DBG47]]
; CHECK-NEXT:    [[LOOP:%.*]] = alloca i32, align 4, !dbg [[DBG47]]
; CHECK-NEXT:    store i32 [[LB]], ptr [[LOOP]], align 4, !dbg [[DBG47]]
; CHECK-NEXT:    br label [[FOR_COND12:%.*]], !dbg [[DBG47]]
; CHECK:       for.cond12:
; CHECK-NEXT:    [[TMP11:%.*]] = load i32, ptr [[LOOP]], align 4, !dbg [[DBG47]]
; CHECK-NEXT:    [[TMP12:%.*]] = icmp slt i32 [[TMP11]], [[UB]], !dbg [[DBG47]]
; CHECK-NEXT:    br i1 [[TMP12]], label [[TMP13:%.*]], label [[DOTEXITSTUB:%.*]], !dbg [[DBG47]]
; CHECK:       13:
; CHECK-NEXT:    [[TMP14:%.*]] = load i32, ptr [[LOOP]], align 4, !dbg [[DBG47]]
; CHECK-NEXT:    [[TMP15:%.*]] = sext i32 [[TMP14]] to i64, !dbg [[DBG47]]
; CHECK-NEXT:    [[TMP16:%.*]] = udiv i64 [[TMP15]], 1, !dbg [[DBG47]]
; CHECK-NEXT:    [[TMP17:%.*]] = sext i32 [[TMP5]] to i64, !dbg [[DBG47]]
; CHECK-NEXT:    [[TMP18:%.*]] = mul i64 [[TMP16]], [[TMP17]], !dbg [[DBG47]]
; CHECK-NEXT:    [[TMP19:%.*]] = sext i32 [[TMP3]] to i64, !dbg [[DBG47]]
; CHECK-NEXT:    [[TMP20:%.*]] = add i64 [[TMP18]], [[TMP19]], !dbg [[DBG47]]
; CHECK-NEXT:    [[TMP21:%.*]] = mul i64 [[TMP16]], 1, !dbg [[DBG47]]
; CHECK-NEXT:    [[TMP22:%.*]] = sext i32 [[TMP14]] to i64, !dbg [[DBG47]]
; CHECK-NEXT:    [[TMP23:%.*]] = sub i64 [[TMP22]], [[TMP21]], !dbg [[DBG47]]
; CHECK-NEXT:    [[TMP24:%.*]] = trunc i64 [[TMP20]] to i32, !dbg [[DBG47]]
; CHECK-NEXT:    store i32 [[TMP24]], ptr [[I]], align 4, !dbg [[DBG47]]
; CHECK-NEXT:    br label [[FOR_BODY13:%.*]], !dbg [[DBG47]]
; CHECK:       for.body13:
; CHECK-NEXT:    [[TMP25:%.*]] = load i32, ptr [[I]], align 4, !dbg [[DBG48:![0-9]+]]
; CHECK-NEXT:    [[IDXPROM1:%.*]] = sext i32 [[TMP25]] to i64, !dbg [[DBG48]]
; CHECK-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds [100 x i32], ptr [[ARRAY]], i64 0, i64 [[IDXPROM1]], !dbg [[DBG48]]
; CHECK-NEXT:    [[TMP26:%.*]] = load i32, ptr [[ARRAYIDX2]], align 4, !dbg [[DBG48]]
; CHECK-NEXT:    [[TMP27:%.*]] = load i32, ptr [[I]], align 4, !dbg [[DBG48]]
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i32 [[TMP26]], [[TMP27]], !dbg [[DBG48]]
; CHECK-NEXT:    br i1 [[CMP]], label [[IF_THEN:%.*]], label [[IF_ELSE:%.*]], !dbg [[DBG48]]
; CHECK:       if.then:
; CHECK-NEXT:    br label [[IF_END:%.*]], !dbg [[DBG48]]
; CHECK:       if.else:
; CHECK-NEXT:    call void @__assert_fail(ptr noundef @.str, ptr noundef @.str.5, i32 noundef 11, ptr noundef @__PRETTY_FUNCTION__.main) #[[ATTR4]], !dbg [[DBG48]]
; CHECK-NEXT:    br label [[IF_END]]
; CHECK:       if.end:
; CHECK-NEXT:    br label [[FOR_INCR15:%.*]], !dbg [[DBG49:![0-9]+]]
; CHECK:       for.incr15:
; CHECK-NEXT:    [[TMP28:%.*]] = load i32, ptr [[LOOP]], align 4, !dbg [[DBG47]]
; CHECK-NEXT:    [[TMP29:%.*]] = add i32 [[TMP28]], 1, !dbg [[DBG47]]
; CHECK-NEXT:    store i32 [[TMP29]], ptr [[LOOP]], align 4, !dbg [[DBG47]]
; CHECK-NEXT:    br label [[FOR_COND12]], !dbg [[DBG47]]
; CHECK:       .exitStub:
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_task_region_main.5
; CHECK-SAME: (ptr [[TASK_ARGS:%.*]], ptr [[LOOP_BOUNDS:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_ARRAY:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN_0:%.*]], ptr [[TASK_ARGS]], i32 0, i32 0
; CHECK-NEXT:    [[LOAD_GEP_ARRAY:%.*]] = load ptr, ptr [[GEP_ARRAY]], align 8
; CHECK-NEXT:    [[GEP_I:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN_0]], ptr [[TASK_ARGS]], i32 0, i32 1
; CHECK-NEXT:    [[TLATE_LOAD_GEP_ARRAY:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr [[LOAD_GEP_ARRAY]], ptr [[TLATE_LOAD_GEP_ARRAY]], align 8
; CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[TLATE_LOAD_GEP_ARRAY]], align 8
; CHECK-NEXT:    [[TMP1:%.*]] = icmp ne ptr [[ADDRESS_TRANSLATION_TABLE]], null
; CHECK-NEXT:    br i1 [[TMP1]], label [[TMP2:%.*]], label [[TMP8:%.*]]
; CHECK:       2:
; CHECK-NEXT:    [[LOCAL_LOOKUP_ARRAY:%.*]] = getelementptr [[NANOS6_ADDRESS_TRANSLATION_ENTRY_T:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE]], i32 0, i32 0
; CHECK-NEXT:    [[TMP3:%.*]] = load i64, ptr [[LOCAL_LOOKUP_ARRAY]], align 8
; CHECK-NEXT:    [[DEVICE_LOOKUP_ARRAY:%.*]] = getelementptr [[NANOS6_ADDRESS_TRANSLATION_ENTRY_T]], ptr [[ADDRESS_TRANSLATION_TABLE]], i32 0, i32 1
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[DEVICE_LOOKUP_ARRAY]], align 8
; CHECK-NEXT:    [[TMP5:%.*]] = sub i64 0, [[TMP3]]
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[TMP0]], i64 [[TMP5]]
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[TMP6]], i64 [[TMP4]]
; CHECK-NEXT:    store ptr [[TMP7]], ptr [[TLATE_LOAD_GEP_ARRAY]], align 8
; CHECK-NEXT:    br label [[TMP8]]
; CHECK:       8:
; CHECK-NEXT:    [[TMP9:%.*]] = load ptr, ptr [[TLATE_LOAD_GEP_ARRAY]], align 8
; CHECK-NEXT:    call void @nanos6_unpacked_task_region_main.4(ptr [[TMP9]], ptr [[GEP_I]], ptr [[LOOP_BOUNDS]], ptr [[ADDRESS_TRANSLATION_TABLE]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_unpacked_deps_main.6
; CHECK-SAME: (ptr [[ARRAY:%.*]], ptr [[I:%.*]], ptr [[LOOP_BOUNDS:%.*]], ptr [[HANDLER:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[LB_GEP:%.*]] = getelementptr [[NANOS6_LOOP_BOUNDS_T:%.*]], ptr [[LOOP_BOUNDS]], i32 0, i32 0
; CHECK-NEXT:    [[TMP0:%.*]] = load i64, ptr [[LB_GEP]], align 8
; CHECK-NEXT:    [[LB:%.*]] = trunc i64 [[TMP0]] to i32
; CHECK-NEXT:    [[UB_GEP:%.*]] = getelementptr [[NANOS6_LOOP_BOUNDS_T]], ptr [[LOOP_BOUNDS]], i32 0, i32 1
; CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr [[UB_GEP]], align 8
; CHECK-NEXT:    [[TMP2:%.*]] = trunc i64 [[TMP1]] to i32
; CHECK-NEXT:    [[UB:%.*]] = sub i32 [[TMP2]], 1
; CHECK-NEXT:    [[TMP3:%.*]] = call i32 @compute_lb.1()
; CHECK-NEXT:    [[TMP4:%.*]] = call i32 @compute_ub.2()
; CHECK-NEXT:    [[TMP5:%.*]] = call i32 @compute_step.3()
; CHECK-NEXT:    [[TMP6:%.*]] = sub i32 [[TMP4]], [[TMP3]]
; CHECK-NEXT:    [[TMP7:%.*]] = sub i32 [[TMP6]], 1
; CHECK-NEXT:    [[TMP8:%.*]] = sdiv i32 [[TMP7]], [[TMP5]]
; CHECK-NEXT:    [[TMP9:%.*]] = add i32 [[TMP8]], 1
; CHECK-NEXT:    [[TMP10:%.*]] = sext i32 [[TMP9]] to i64
; CHECK-NEXT:    [[I_LB:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[I_UB:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[TMP11:%.*]] = sext i32 [[LB]] to i64
; CHECK-NEXT:    [[TMP12:%.*]] = udiv i64 [[TMP11]], 1
; CHECK-NEXT:    [[TMP13:%.*]] = sext i32 [[TMP5]] to i64
; CHECK-NEXT:    [[TMP14:%.*]] = mul i64 [[TMP12]], [[TMP13]]
; CHECK-NEXT:    [[TMP15:%.*]] = sext i32 [[TMP3]] to i64
; CHECK-NEXT:    [[TMP16:%.*]] = add i64 [[TMP14]], [[TMP15]]
; CHECK-NEXT:    [[TMP17:%.*]] = mul i64 [[TMP12]], 1
; CHECK-NEXT:    [[TMP18:%.*]] = sext i32 [[LB]] to i64
; CHECK-NEXT:    [[TMP19:%.*]] = sub i64 [[TMP18]], [[TMP17]]
; CHECK-NEXT:    [[TMP20:%.*]] = trunc i64 [[TMP16]] to i32
; CHECK-NEXT:    store i32 [[TMP20]], ptr [[I_LB]], align 4
; CHECK-NEXT:    [[TMP21:%.*]] = sext i32 [[UB]] to i64
; CHECK-NEXT:    [[TMP22:%.*]] = udiv i64 [[TMP21]], 1
; CHECK-NEXT:    [[TMP23:%.*]] = sext i32 [[TMP5]] to i64
; CHECK-NEXT:    [[TMP24:%.*]] = mul i64 [[TMP22]], [[TMP23]]
; CHECK-NEXT:    [[TMP25:%.*]] = sext i32 [[TMP3]] to i64
; CHECK-NEXT:    [[TMP26:%.*]] = add i64 [[TMP24]], [[TMP25]]
; CHECK-NEXT:    [[TMP27:%.*]] = mul i64 [[TMP22]], 1
; CHECK-NEXT:    [[TMP28:%.*]] = sext i32 [[UB]] to i64
; CHECK-NEXT:    [[TMP29:%.*]] = sub i64 [[TMP28]], [[TMP27]]
; CHECK-NEXT:    [[TMP30:%.*]] = trunc i64 [[TMP26]] to i32
; CHECK-NEXT:    store i32 [[TMP30]], ptr [[I_UB]], align 4
; CHECK-NEXT:    [[TMP31:%.*]] = call [[STRUCT__DEPEND_UNPACK_T_0:%.*]] @compute_dep.4(ptr [[ARRAY]], ptr [[I_LB]])
; CHECK-NEXT:    [[TMP32:%.*]] = call [[STRUCT__DEPEND_UNPACK_T_0]] @compute_dep.4(ptr [[ARRAY]], ptr [[I_UB]])
; CHECK-NEXT:    [[TMP33:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_0]] [[TMP31]], 0
; CHECK-NEXT:    [[TMP34:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_0]] [[TMP31]], 1
; CHECK-NEXT:    [[TMP35:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_0]] [[TMP31]], 2
; CHECK-NEXT:    [[TMP36:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_0]] [[TMP32]], 3
; CHECK-NEXT:    call void @nanos6_register_region_read_depinfo1(ptr [[HANDLER]], i32 0, ptr @[[GLOB3:[0-9]+]], ptr [[TMP33]], i64 [[TMP34]], i64 [[TMP35]], i64 [[TMP36]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_deps_main.7
; CHECK-SAME: (ptr [[TASK_ARGS:%.*]], ptr [[LOOP_BOUNDS:%.*]], ptr [[HANDLER:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_ARRAY:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN_0:%.*]], ptr [[TASK_ARGS]], i32 0, i32 0
; CHECK-NEXT:    [[LOAD_GEP_ARRAY:%.*]] = load ptr, ptr [[GEP_ARRAY]], align 8
; CHECK-NEXT:    [[GEP_I:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN_0]], ptr [[TASK_ARGS]], i32 0, i32 1
; CHECK-NEXT:    call void @nanos6_unpacked_deps_main.6(ptr [[LOAD_GEP_ARRAY]], ptr [[GEP_I]], ptr [[LOOP_BOUNDS]], ptr [[HANDLER]])
; CHECK-NEXT:    ret void
;
