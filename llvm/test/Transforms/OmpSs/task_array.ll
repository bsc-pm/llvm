; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --function-signature --include-generated-funcs
; RUN: opt %s -passes=ompss-2 -S | FileCheck %s
; ModuleID = 'task_array.cpp'
source_filename = "task_array.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; void pod_array() {
;     int array[10];
;     #pragma oss task private(array)
;     {}
;     #pragma oss task firstprivate(array)
;     {}
; }
; struct S {
;     int x;
;     ~S();
; };
; void non_pod_array() {
;     S array[10];
;     #pragma oss task private(array)
;     {}
;     #pragma oss task firstprivate(array)
;     {}
; }

%struct.S = type { i32 }

$_ZN1SC1Ev = comdat any

$_ZN1SC1ERKS_ = comdat any

; Function Attrs: mustprogress noinline nounwind optnone
define dso_local void @_Z9pod_arrayv() #0 !dbg !5 {
entry:
  %array = alloca [10 x i32], align 16
  %0 = call token @llvm.directive.region.entry() [ "DIR.OSS"([5 x i8] c"TASK\00"), "QUAL.OSS.PRIVATE"(ptr %array, [10 x i32] undef) ], !dbg !9
  call void @llvm.directive.region.exit(token %0), !dbg !10
  %1 = call token @llvm.directive.region.entry() [ "DIR.OSS"([5 x i8] c"TASK\00"), "QUAL.OSS.FIRSTPRIVATE"(ptr %array, [10 x i32] undef) ], !dbg !11
  call void @llvm.directive.region.exit(token %1), !dbg !12
  ret void, !dbg !13
}

; Function Attrs: nounwind
declare token @llvm.directive.region.entry() #1

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token) #1

; Function Attrs: mustprogress noinline nounwind optnone
define dso_local void @_Z13non_pod_arrayv() #0 !dbg !14 {
entry:
  %array = alloca [10 x %struct.S], align 16
  %0 = call token @llvm.directive.region.entry() [ "DIR.OSS"([5 x i8] c"TASK\00"), "QUAL.OSS.PRIVATE"(ptr %array, [10 x %struct.S] undef), "QUAL.OSS.INIT"(ptr %array, ptr @oss_ctor_ZN1SC1Ev), "QUAL.OSS.DEINIT"(ptr %array, ptr @oss_dtor_ZN1SD1Ev) ], !dbg !15
  call void @llvm.directive.region.exit(token %0), !dbg !16
  %1 = call token @llvm.directive.region.entry() [ "DIR.OSS"([5 x i8] c"TASK\00"), "QUAL.OSS.FIRSTPRIVATE"(ptr %array, [10 x %struct.S] undef), "QUAL.OSS.COPY"(ptr %array, ptr @oss_copy_ctor_ZN1SC1ERKS_), "QUAL.OSS.DEINIT"(ptr %array, ptr @oss_dtor_ZN1SD1Ev) ], !dbg !17
  call void @llvm.directive.region.exit(token %1), !dbg !18
  %array.begin = getelementptr inbounds [10 x %struct.S], ptr %array, i32 0, i32 0, !dbg !19
  %2 = getelementptr inbounds %struct.S, ptr %array.begin, i64 10, !dbg !19
  br label %arraydestroy.body, !dbg !19

arraydestroy.body:                                ; preds = %arraydestroy.body, %entry
  %arraydestroy.elementPast = phi ptr [ %2, %entry ], [ %arraydestroy.element, %arraydestroy.body ], !dbg !19
  %arraydestroy.element = getelementptr inbounds %struct.S, ptr %arraydestroy.elementPast, i64 -1, !dbg !19
  call void @_ZN1SD1Ev(ptr noundef nonnull align 4 dereferenceable(4) %arraydestroy.element) #1, !dbg !19
  %arraydestroy.done = icmp eq ptr %arraydestroy.element, %array.begin, !dbg !19
  br i1 %arraydestroy.done, label %arraydestroy.done1, label %arraydestroy.body, !dbg !19

arraydestroy.done1:                               ; preds = %arraydestroy.body
  ret void, !dbg !19
}

; Function Attrs: noinline nounwind optnone
define linkonce_odr void @_ZN1SC1Ev(ptr noundef nonnull align 4 dereferenceable(4) %this) unnamed_addr #2 comdat align 2 !dbg !20 {
entry:
  %this.addr = alloca ptr, align 8
  store ptr %this, ptr %this.addr, align 8
  %this1 = load ptr, ptr %this.addr, align 8
  ret void, !dbg !21
}

; Function Attrs: noinline norecurse nounwind
define internal void @oss_ctor_ZN1SC1Ev(ptr noundef %0, i64 noundef %1) #3 !dbg !22 {
entry:
  %.addr = alloca ptr, align 8
  %.addr1 = alloca i64, align 8
  store ptr %0, ptr %.addr, align 8
  store i64 %1, ptr %.addr1, align 8
  %2 = load ptr, ptr %.addr, align 8, !dbg !23
  %3 = load i64, ptr %.addr1, align 8, !dbg !23
  %arrayctor.dst.end = getelementptr inbounds %struct.S, ptr %2, i64 %3, !dbg !23
  br label %arrayctor.loop, !dbg !23

arrayctor.loop:                                   ; preds = %arrayctor.loop, %entry
  %arrayctor.dst.cur = phi ptr [ %2, %entry ], [ %arrayctor.dst.next, %arrayctor.loop ], !dbg !23
  %arrayctor.dst.next = getelementptr inbounds %struct.S, ptr %arrayctor.dst.cur, i64 1, !dbg !23
  %arrayctor.done = icmp eq ptr %arrayctor.dst.next, %arrayctor.dst.end, !dbg !23
  br i1 %arrayctor.done, label %arrayctor.cont, label %arrayctor.loop, !dbg !23

arrayctor.cont:                                   ; preds = %arrayctor.loop
  ret void, !dbg !24
}

; Function Attrs: nounwind
declare void @_ZN1SD1Ev(ptr noundef nonnull align 4 dereferenceable(4)) unnamed_addr #4

; Function Attrs: noinline norecurse nounwind
define internal void @oss_dtor_ZN1SD1Ev(ptr noundef %0, i64 noundef %1) #3 !dbg !26 {
entry:
  %.addr = alloca ptr, align 8
  %.addr1 = alloca i64, align 8
  store ptr %0, ptr %.addr, align 8
  store i64 %1, ptr %.addr1, align 8
  %2 = load ptr, ptr %.addr, align 8, !dbg !27
  %3 = load i64, ptr %.addr1, align 8, !dbg !27
  %arraydtor.dst.end = getelementptr inbounds %struct.S, ptr %2, i64 %3, !dbg !27
  br label %arraydtor.loop, !dbg !27

arraydtor.loop:                                   ; preds = %arraydtor.loop, %entry
  %arraydtor.dst.cur = phi ptr [ %2, %entry ], [ %arraydtor.dst.next, %arraydtor.loop ], !dbg !27
  call void @_ZN1SD1Ev(ptr noundef nonnull align 4 dereferenceable(4) %arraydtor.dst.cur) #1, !dbg !27
  %arraydtor.dst.next = getelementptr inbounds %struct.S, ptr %arraydtor.dst.cur, i64 1, !dbg !27
  %arraydtor.done = icmp eq ptr %arraydtor.dst.next, %arraydtor.dst.end, !dbg !27
  br i1 %arraydtor.done, label %arraydtor.cont, label %arraydtor.loop, !dbg !27

arraydtor.cont:                                   ; preds = %arraydtor.loop
  ret void, !dbg !27
}

; Function Attrs: noinline nounwind optnone
define linkonce_odr void @_ZN1SC1ERKS_(ptr noundef nonnull align 4 dereferenceable(4) %this, ptr noundef nonnull align 4 dereferenceable(4) %0) unnamed_addr #2 comdat align 2 !dbg !28 {
entry:
  %this.addr = alloca ptr, align 8
  %.addr = alloca ptr, align 8
  store ptr %this, ptr %this.addr, align 8
  store ptr %0, ptr %.addr, align 8
  %this1 = load ptr, ptr %this.addr, align 8
  %1 = load ptr, ptr %.addr, align 8, !dbg !29
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %this1, ptr align 4 %1, i64 4, i1 false), !dbg !29
  ret void, !dbg !29
}

; Function Attrs: noinline norecurse nounwind
define internal void @oss_copy_ctor_ZN1SC1ERKS_(ptr noundef %0, ptr noundef %1, i64 noundef %2) #3 !dbg !30 {
entry:
  %.addr = alloca ptr, align 8
  %.addr1 = alloca ptr, align 8
  %.addr2 = alloca i64, align 8
  store ptr %0, ptr %.addr, align 8
  store ptr %1, ptr %.addr1, align 8
  store i64 %2, ptr %.addr2, align 8
  %3 = load ptr, ptr %.addr, align 8, !dbg !31
  %4 = load ptr, ptr %.addr1, align 8, !dbg !31
  %5 = load i64, ptr %.addr2, align 8, !dbg !31
  %arrayctor.dst.end = getelementptr inbounds %struct.S, ptr %4, i64 %5, !dbg !31
  br label %arrayctor.loop, !dbg !31

arrayctor.loop:                                   ; preds = %arrayctor.loop, %entry
  %arrayctor.dst.cur = phi ptr [ %4, %entry ], [ %arrayctor.dst.next, %arrayctor.loop ], !dbg !31
  %arrayctor.src.cur = phi ptr [ %3, %entry ], [ %arrayctor.src.next, %arrayctor.loop ], !dbg !31
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %arrayctor.dst.cur, ptr align 4 %arrayctor.src.cur, i64 4, i1 false), !dbg !32
  %arrayctor.dst.next = getelementptr inbounds %struct.S, ptr %arrayctor.dst.cur, i64 1, !dbg !31
  %arrayctor.src.next = getelementptr inbounds %struct.S, ptr %arrayctor.src.cur, i64 1, !dbg !31
  %arrayctor.done = icmp eq ptr %arrayctor.dst.next, %arrayctor.dst.end, !dbg !31
  br i1 %arrayctor.done, label %arrayctor.cont, label %arrayctor.loop, !dbg !31

arrayctor.cont:                                   ; preds = %arrayctor.loop
  ret void, !dbg !32
}

; Function Attrs: argmemonly nofree nounwind willreturn
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #5

attributes #0 = { mustprogress noinline nounwind optnone "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
attributes #1 = { nounwind }
attributes #2 = { noinline nounwind optnone "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
attributes #3 = { noinline norecurse nounwind "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
attributes #4 = { nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
attributes #5 = { argmemonly nofree nounwind willreturn }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus_14, file: !1, producer: "", isOptimized: false, runtimeVersion: 0, emissionKind: NoDebug, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "<stdin>", directory: "")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 1, !"wchar_size", i32 4}
!4 = !{!""}
!5 = distinct !DISubprogram(name: "pod_array", scope: !6, file: !6, line: 1, type: !7, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !8)
!6 = !DIFile(filename: "task_array.ll", directory: "")
!7 = !DISubroutineType(types: !8)
!8 = !{}
!9 = !DILocation(line: 3, column: 13, scope: !5)
!10 = !DILocation(line: 4, column: 6, scope: !5)
!11 = !DILocation(line: 5, column: 13, scope: !5)
!12 = !DILocation(line: 6, column: 6, scope: !5)
!13 = !DILocation(line: 7, column: 1, scope: !5)
!14 = distinct !DISubprogram(name: "non_pod_array", scope: !6, file: !6, line: 12, type: !7, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !8)
!15 = !DILocation(line: 14, column: 13, scope: !14)
!16 = !DILocation(line: 15, column: 6, scope: !14)
!17 = !DILocation(line: 16, column: 13, scope: !14)
!18 = !DILocation(line: 17, column: 6, scope: !14)
!19 = !DILocation(line: 18, column: 1, scope: !14)
!20 = distinct !DISubprogram(name: "S", scope: !6, file: !6, line: 8, type: !7, scopeLine: 8, flags: DIFlagArtificial | DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !8)
!21 = !DILocation(line: 8, column: 8, scope: !20)
!22 = distinct !DISubprogram(linkageName: "oss_ctor_ZN1SC1Ev", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!23 = !DILocation(line: 0, scope: !22)
!24 = !DILocation(line: 14, column: 30, scope: !25)
!25 = !DILexicalBlockFile(scope: !22, file: !6, discriminator: 0)
!26 = distinct !DISubprogram(linkageName: "oss_dtor_ZN1SD1Ev", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!27 = !DILocation(line: 0, scope: !26)
!28 = distinct !DISubprogram(name: "S", scope: !6, file: !6, line: 8, type: !7, scopeLine: 8, flags: DIFlagArtificial | DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !8)
!29 = !DILocation(line: 8, column: 8, scope: !28)
!30 = distinct !DISubprogram(linkageName: "oss_copy_ctor_ZN1SC1ERKS_", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!31 = !DILocation(line: 0, scope: !30)
!32 = !DILocation(line: 16, column: 35, scope: !33)
!33 = !DILexicalBlockFile(scope: !30, file: !6, discriminator: 0)
; CHECK-LABEL: define {{[^@]+}}@_Z9pod_arrayv
; CHECK-SAME: () #[[ATTR0:[0-9]+]] !dbg [[DBG5:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[ARRAY:%.*]] = alloca [10 x i32], align 16
; CHECK-NEXT:    [[TMP0:%.*]] = alloca ptr, align 8, !dbg [[DBG9:![0-9]+]]
; CHECK-NEXT:    [[TMP1:%.*]] = alloca ptr, align 8, !dbg [[DBG9]]
; CHECK-NEXT:    [[NUM_DEPS:%.*]] = alloca i64, align 8, !dbg [[DBG9]]
; CHECK-NEXT:    [[TMP2:%.*]] = alloca ptr, align 8, !dbg [[DBG10:![0-9]+]]
; CHECK-NEXT:    [[TMP3:%.*]] = alloca ptr, align 8, !dbg [[DBG10]]
; CHECK-NEXT:    [[NUM_DEPS5:%.*]] = alloca i64, align 8, !dbg [[DBG10]]
; CHECK-NEXT:    br label [[FINAL_COND:%.*]], !dbg [[DBG9]]
; CHECK:       codeRepl:
; CHECK-NEXT:    store i64 0, ptr [[NUM_DEPS]], align 8, !dbg [[DBG9]]
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[NUM_DEPS]], align 8, !dbg [[DBG9]]
; CHECK-NEXT:    call void @nanos6_create_task(ptr @task_info_var__Z9pod_arrayv, ptr @task_invocation_info__Z9pod_arrayv, ptr null, i64 48, ptr [[TMP0]], ptr [[TMP1]], i64 0, i64 [[TMP4]]), !dbg [[DBG9]]
; CHECK-NEXT:    [[TMP5:%.*]] = load ptr, ptr [[TMP0]], align 8, !dbg [[DBG9]]
; CHECK-NEXT:    [[ARGS_END:%.*]] = getelementptr i8, ptr [[TMP5]], i64 48, !dbg [[DBG9]]
; CHECK-NEXT:    [[TMP6:%.*]] = load ptr, ptr [[TMP1]], align 8, !dbg [[DBG9]]
; CHECK-NEXT:    call void @nanos6_submit_task(ptr [[TMP6]]), !dbg [[DBG9]]
; CHECK-NEXT:    br label [[FINAL_END:%.*]], !dbg [[DBG9]]
; CHECK:       final.end:
; CHECK-NEXT:    br label [[FINAL_COND2:%.*]], !dbg [[DBG10]]
; CHECK:       codeRepl4:
; CHECK-NEXT:    store i64 0, ptr [[NUM_DEPS5]], align 8, !dbg [[DBG10]]
; CHECK-NEXT:    [[TMP7:%.*]] = load i64, ptr [[NUM_DEPS5]], align 8, !dbg [[DBG10]]
; CHECK-NEXT:    call void @nanos6_create_task(ptr @task_info_var__Z9pod_arrayv.10, ptr @task_invocation_info__Z9pod_arrayv.6, ptr null, i64 48, ptr [[TMP2]], ptr [[TMP3]], i64 0, i64 [[TMP7]]), !dbg [[DBG10]]
; CHECK-NEXT:    [[TMP8:%.*]] = load ptr, ptr [[TMP2]], align 8, !dbg [[DBG10]]
; CHECK-NEXT:    [[ARGS_END6:%.*]] = getelementptr i8, ptr [[TMP8]], i64 48, !dbg [[DBG10]]
; CHECK-NEXT:    [[GEP_ARRAY:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z9POD_ARRAYV_0:%.*]], ptr [[TMP8]], i32 0, i32 0, !dbg [[DBG10]]
; CHECK-NEXT:    call void @llvm.memcpy.p0.p0.i64(ptr align 4 [[GEP_ARRAY]], ptr align 4 [[ARRAY]], i64 40, i1 false), !dbg [[DBG10]]
; CHECK-NEXT:    [[TMP9:%.*]] = load ptr, ptr [[TMP3]], align 8, !dbg [[DBG10]]
; CHECK-NEXT:    call void @nanos6_submit_task(ptr [[TMP9]]), !dbg [[DBG10]]
; CHECK-NEXT:    br label [[FINAL_END1:%.*]], !dbg [[DBG10]]
; CHECK:       final.end1:
; CHECK-NEXT:    ret void, !dbg [[DBG11:![0-9]+]]
; CHECK:       final.then:
; CHECK-NEXT:    br label [[FINAL_END]], !dbg [[DBG10]]
; CHECK:       final.then3:
; CHECK-NEXT:    br label [[FINAL_END1]], !dbg [[DBG11]]
; CHECK:       final.cond:
; CHECK-NEXT:    [[TMP10:%.*]] = call i32 @nanos6_in_final(), !dbg [[DBG9]]
; CHECK-NEXT:    [[TMP11:%.*]] = icmp ne i32 [[TMP10]], 0, !dbg [[DBG9]]
; CHECK-NEXT:    br i1 [[TMP11]], label [[FINAL_THEN:%.*]], label [[CODEREPL:%.*]], !dbg [[DBG9]]
; CHECK:       final.cond2:
; CHECK-NEXT:    [[TMP12:%.*]] = call i32 @nanos6_in_final(), !dbg [[DBG10]]
; CHECK-NEXT:    [[TMP13:%.*]] = icmp ne i32 [[TMP12]], 0, !dbg [[DBG10]]
; CHECK-NEXT:    br i1 [[TMP13]], label [[FINAL_THEN3:%.*]], label [[CODEREPL4:%.*]], !dbg [[DBG10]]
;
;
; CHECK-LABEL: define {{[^@]+}}@_Z13non_pod_arrayv
; CHECK-SAME: () #[[ATTR0]] !dbg [[DBG12:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[ARRAY:%.*]] = alloca [10 x %struct.S], align 16
; CHECK-NEXT:    [[TMP0:%.*]] = alloca ptr, align 8, !dbg [[DBG13:![0-9]+]]
; CHECK-NEXT:    [[TMP1:%.*]] = alloca ptr, align 8, !dbg [[DBG13]]
; CHECK-NEXT:    [[NUM_DEPS:%.*]] = alloca i64, align 8, !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP2:%.*]] = alloca ptr, align 8, !dbg [[DBG14:![0-9]+]]
; CHECK-NEXT:    [[TMP3:%.*]] = alloca ptr, align 8, !dbg [[DBG14]]
; CHECK-NEXT:    [[NUM_DEPS5:%.*]] = alloca i64, align 8, !dbg [[DBG14]]
; CHECK-NEXT:    br label [[FINAL_COND:%.*]], !dbg [[DBG13]]
; CHECK:       codeRepl:
; CHECK-NEXT:    store i64 0, ptr [[NUM_DEPS]], align 8, !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[NUM_DEPS]], align 8, !dbg [[DBG13]]
; CHECK-NEXT:    call void @nanos6_create_task(ptr @task_info_var__Z13non_pod_arrayv, ptr @task_invocation_info__Z13non_pod_arrayv, ptr null, i64 48, ptr [[TMP0]], ptr [[TMP1]], i64 0, i64 [[TMP4]]), !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP5:%.*]] = load ptr, ptr [[TMP0]], align 8, !dbg [[DBG13]]
; CHECK-NEXT:    [[ARGS_END:%.*]] = getelementptr i8, ptr [[TMP5]], i64 48, !dbg [[DBG13]]
; CHECK-NEXT:    [[GEP_ARRAY:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z13NON_POD_ARRAYV:%.*]], ptr [[TMP5]], i32 0, i32 0, !dbg [[DBG13]]
; CHECK-NEXT:    call void @oss_ctor_ZN1SC1Ev(ptr [[GEP_ARRAY]], i64 10), !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP6:%.*]] = load ptr, ptr [[TMP1]], align 8, !dbg [[DBG13]]
; CHECK-NEXT:    call void @nanos6_submit_task(ptr [[TMP6]]), !dbg [[DBG13]]
; CHECK-NEXT:    br label [[FINAL_END:%.*]], !dbg [[DBG13]]
; CHECK:       final.end:
; CHECK-NEXT:    br label [[FINAL_COND2:%.*]], !dbg [[DBG14]]
; CHECK:       codeRepl4:
; CHECK-NEXT:    store i64 0, ptr [[NUM_DEPS5]], align 8, !dbg [[DBG14]]
; CHECK-NEXT:    [[TMP7:%.*]] = load i64, ptr [[NUM_DEPS5]], align 8, !dbg [[DBG14]]
; CHECK-NEXT:    call void @nanos6_create_task(ptr @task_info_var__Z13non_pod_arrayv.23, ptr @task_invocation_info__Z13non_pod_arrayv.19, ptr null, i64 48, ptr [[TMP2]], ptr [[TMP3]], i64 0, i64 [[TMP7]]), !dbg [[DBG14]]
; CHECK-NEXT:    [[TMP8:%.*]] = load ptr, ptr [[TMP2]], align 8, !dbg [[DBG14]]
; CHECK-NEXT:    [[ARGS_END6:%.*]] = getelementptr i8, ptr [[TMP8]], i64 48, !dbg [[DBG14]]
; CHECK-NEXT:    [[GEP_ARRAY7:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z13NON_POD_ARRAYV_1:%.*]], ptr [[TMP8]], i32 0, i32 0, !dbg [[DBG14]]
; CHECK-NEXT:    call void @oss_copy_ctor_ZN1SC1ERKS_(ptr [[ARRAY]], ptr [[GEP_ARRAY7]], i64 10), !dbg [[DBG14]]
; CHECK-NEXT:    [[TMP9:%.*]] = load ptr, ptr [[TMP3]], align 8, !dbg [[DBG14]]
; CHECK-NEXT:    call void @nanos6_submit_task(ptr [[TMP9]]), !dbg [[DBG14]]
; CHECK-NEXT:    br label [[FINAL_END1:%.*]], !dbg [[DBG14]]
; CHECK:       final.end1:
; CHECK-NEXT:    [[ARRAY_BEGIN:%.*]] = getelementptr inbounds [10 x %struct.S], ptr [[ARRAY]], i32 0, i32 0, !dbg [[DBG15:![0-9]+]]
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr inbounds [[STRUCT_S:%.*]], ptr [[ARRAY_BEGIN]], i64 10, !dbg [[DBG15]]
; CHECK-NEXT:    br label [[ARRAYDESTROY_BODY:%.*]], !dbg [[DBG15]]
; CHECK:       arraydestroy.body:
; CHECK-NEXT:    [[ARRAYDESTROY_ELEMENTPAST:%.*]] = phi ptr [ [[TMP10]], [[FINAL_END1]] ], [ [[ARRAYDESTROY_ELEMENT:%.*]], [[ARRAYDESTROY_BODY]] ], !dbg [[DBG15]]
; CHECK-NEXT:    [[ARRAYDESTROY_ELEMENT]] = getelementptr inbounds [[STRUCT_S]], ptr [[ARRAYDESTROY_ELEMENTPAST]], i64 -1, !dbg [[DBG15]]
; CHECK-NEXT:    call void @_ZN1SD1Ev(ptr noundef nonnull align 4 dereferenceable(4) [[ARRAYDESTROY_ELEMENT]]) #[[ATTR1:[0-9]+]], !dbg [[DBG15]]
; CHECK-NEXT:    [[ARRAYDESTROY_DONE:%.*]] = icmp eq ptr [[ARRAYDESTROY_ELEMENT]], [[ARRAY_BEGIN]], !dbg [[DBG15]]
; CHECK-NEXT:    br i1 [[ARRAYDESTROY_DONE]], label [[ARRAYDESTROY_DONE1:%.*]], label [[ARRAYDESTROY_BODY]], !dbg [[DBG15]]
; CHECK:       arraydestroy.done1:
; CHECK-NEXT:    ret void, !dbg [[DBG15]]
; CHECK:       final.then:
; CHECK-NEXT:    br label [[FINAL_END]], !dbg [[DBG14]]
; CHECK:       final.then3:
; CHECK-NEXT:    br label [[FINAL_END1]], !dbg [[DBG15]]
; CHECK:       final.cond:
; CHECK-NEXT:    [[TMP11:%.*]] = call i32 @nanos6_in_final(), !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP12:%.*]] = icmp ne i32 [[TMP11]], 0, !dbg [[DBG13]]
; CHECK-NEXT:    br i1 [[TMP12]], label [[FINAL_THEN:%.*]], label [[CODEREPL:%.*]], !dbg [[DBG13]]
; CHECK:       final.cond2:
; CHECK-NEXT:    [[TMP13:%.*]] = call i32 @nanos6_in_final(), !dbg [[DBG14]]
; CHECK-NEXT:    [[TMP14:%.*]] = icmp ne i32 [[TMP13]], 0, !dbg [[DBG14]]
; CHECK-NEXT:    br i1 [[TMP14]], label [[FINAL_THEN3:%.*]], label [[CODEREPL4:%.*]], !dbg [[DBG14]]
;
;
; CHECK-LABEL: define {{[^@]+}}@_ZN1SC1Ev
; CHECK-SAME: (ptr noundef nonnull align 4 dereferenceable(4) [[THIS:%.*]]) unnamed_addr #[[ATTR2:[0-9]+]] comdat align 2 !dbg [[DBG16:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 8
; CHECK-NEXT:    [[THIS1:%.*]] = load ptr, ptr [[THIS_ADDR]], align 8
; CHECK-NEXT:    ret void, !dbg [[DBG17:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@oss_ctor_ZN1SC1Ev
; CHECK-SAME: (ptr noundef [[TMP0:%.*]], i64 noundef [[TMP1:%.*]]) #[[ATTR3:[0-9]+]] !dbg [[DBG18:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[DOTADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    [[DOTADDR1:%.*]] = alloca i64, align 8
; CHECK-NEXT:    store ptr [[TMP0]], ptr [[DOTADDR]], align 8
; CHECK-NEXT:    store i64 [[TMP1]], ptr [[DOTADDR1]], align 8
; CHECK-NEXT:    [[TMP2:%.*]] = load ptr, ptr [[DOTADDR]], align 8, !dbg [[DBG19:![0-9]+]]
; CHECK-NEXT:    [[TMP3:%.*]] = load i64, ptr [[DOTADDR1]], align 8, !dbg [[DBG19]]
; CHECK-NEXT:    [[ARRAYCTOR_DST_END:%.*]] = getelementptr inbounds [[STRUCT_S:%.*]], ptr [[TMP2]], i64 [[TMP3]], !dbg [[DBG19]]
; CHECK-NEXT:    br label [[ARRAYCTOR_LOOP:%.*]], !dbg [[DBG19]]
; CHECK:       arrayctor.loop:
; CHECK-NEXT:    [[ARRAYCTOR_DST_CUR:%.*]] = phi ptr [ [[TMP2]], [[ENTRY:%.*]] ], [ [[ARRAYCTOR_DST_NEXT:%.*]], [[ARRAYCTOR_LOOP]] ], !dbg [[DBG19]]
; CHECK-NEXT:    [[ARRAYCTOR_DST_NEXT]] = getelementptr inbounds [[STRUCT_S]], ptr [[ARRAYCTOR_DST_CUR]], i64 1, !dbg [[DBG19]]
; CHECK-NEXT:    [[ARRAYCTOR_DONE:%.*]] = icmp eq ptr [[ARRAYCTOR_DST_NEXT]], [[ARRAYCTOR_DST_END]], !dbg [[DBG19]]
; CHECK-NEXT:    br i1 [[ARRAYCTOR_DONE]], label [[ARRAYCTOR_CONT:%.*]], label [[ARRAYCTOR_LOOP]], !dbg [[DBG19]]
; CHECK:       arrayctor.cont:
; CHECK-NEXT:    ret void, !dbg [[DBG20:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@oss_dtor_ZN1SD1Ev
; CHECK-SAME: (ptr noundef [[TMP0:%.*]], i64 noundef [[TMP1:%.*]]) #[[ATTR3]] !dbg [[DBG22:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[DOTADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    [[DOTADDR1:%.*]] = alloca i64, align 8
; CHECK-NEXT:    store ptr [[TMP0]], ptr [[DOTADDR]], align 8
; CHECK-NEXT:    store i64 [[TMP1]], ptr [[DOTADDR1]], align 8
; CHECK-NEXT:    [[TMP2:%.*]] = load ptr, ptr [[DOTADDR]], align 8, !dbg [[DBG23:![0-9]+]]
; CHECK-NEXT:    [[TMP3:%.*]] = load i64, ptr [[DOTADDR1]], align 8, !dbg [[DBG23]]
; CHECK-NEXT:    [[ARRAYDTOR_DST_END:%.*]] = getelementptr inbounds [[STRUCT_S:%.*]], ptr [[TMP2]], i64 [[TMP3]], !dbg [[DBG23]]
; CHECK-NEXT:    br label [[ARRAYDTOR_LOOP:%.*]], !dbg [[DBG23]]
; CHECK:       arraydtor.loop:
; CHECK-NEXT:    [[ARRAYDTOR_DST_CUR:%.*]] = phi ptr [ [[TMP2]], [[ENTRY:%.*]] ], [ [[ARRAYDTOR_DST_NEXT:%.*]], [[ARRAYDTOR_LOOP]] ], !dbg [[DBG23]]
; CHECK-NEXT:    call void @_ZN1SD1Ev(ptr noundef nonnull align 4 dereferenceable(4) [[ARRAYDTOR_DST_CUR]]) #[[ATTR1]], !dbg [[DBG23]]
; CHECK-NEXT:    [[ARRAYDTOR_DST_NEXT]] = getelementptr inbounds [[STRUCT_S]], ptr [[ARRAYDTOR_DST_CUR]], i64 1, !dbg [[DBG23]]
; CHECK-NEXT:    [[ARRAYDTOR_DONE:%.*]] = icmp eq ptr [[ARRAYDTOR_DST_NEXT]], [[ARRAYDTOR_DST_END]], !dbg [[DBG23]]
; CHECK-NEXT:    br i1 [[ARRAYDTOR_DONE]], label [[ARRAYDTOR_CONT:%.*]], label [[ARRAYDTOR_LOOP]], !dbg [[DBG23]]
; CHECK:       arraydtor.cont:
; CHECK-NEXT:    ret void, !dbg [[DBG23]]
;
;
; CHECK-LABEL: define {{[^@]+}}@_ZN1SC1ERKS_
; CHECK-SAME: (ptr noundef nonnull align 4 dereferenceable(4) [[THIS:%.*]], ptr noundef nonnull align 4 dereferenceable(4) [[TMP0:%.*]]) unnamed_addr #[[ATTR2]] comdat align 2 !dbg [[DBG24:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    [[DOTADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 8
; CHECK-NEXT:    store ptr [[TMP0]], ptr [[DOTADDR]], align 8
; CHECK-NEXT:    [[THIS1:%.*]] = load ptr, ptr [[THIS_ADDR]], align 8
; CHECK-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[DOTADDR]], align 8, !dbg [[DBG25:![0-9]+]]
; CHECK-NEXT:    call void @llvm.memcpy.p0.p0.i64(ptr align 4 [[THIS1]], ptr align 4 [[TMP1]], i64 4, i1 false), !dbg [[DBG25]]
; CHECK-NEXT:    ret void, !dbg [[DBG25]]
;
;
; CHECK-LABEL: define {{[^@]+}}@oss_copy_ctor_ZN1SC1ERKS_
; CHECK-SAME: (ptr noundef [[TMP0:%.*]], ptr noundef [[TMP1:%.*]], i64 noundef [[TMP2:%.*]]) #[[ATTR3]] !dbg [[DBG26:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[DOTADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    [[DOTADDR1:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    [[DOTADDR2:%.*]] = alloca i64, align 8
; CHECK-NEXT:    store ptr [[TMP0]], ptr [[DOTADDR]], align 8
; CHECK-NEXT:    store ptr [[TMP1]], ptr [[DOTADDR1]], align 8
; CHECK-NEXT:    store i64 [[TMP2]], ptr [[DOTADDR2]], align 8
; CHECK-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[DOTADDR]], align 8, !dbg [[DBG27:![0-9]+]]
; CHECK-NEXT:    [[TMP4:%.*]] = load ptr, ptr [[DOTADDR1]], align 8, !dbg [[DBG27]]
; CHECK-NEXT:    [[TMP5:%.*]] = load i64, ptr [[DOTADDR2]], align 8, !dbg [[DBG27]]
; CHECK-NEXT:    [[ARRAYCTOR_DST_END:%.*]] = getelementptr inbounds [[STRUCT_S:%.*]], ptr [[TMP4]], i64 [[TMP5]], !dbg [[DBG27]]
; CHECK-NEXT:    br label [[ARRAYCTOR_LOOP:%.*]], !dbg [[DBG27]]
; CHECK:       arrayctor.loop:
; CHECK-NEXT:    [[ARRAYCTOR_DST_CUR:%.*]] = phi ptr [ [[TMP4]], [[ENTRY:%.*]] ], [ [[ARRAYCTOR_DST_NEXT:%.*]], [[ARRAYCTOR_LOOP]] ], !dbg [[DBG27]]
; CHECK-NEXT:    [[ARRAYCTOR_SRC_CUR:%.*]] = phi ptr [ [[TMP3]], [[ENTRY]] ], [ [[ARRAYCTOR_SRC_NEXT:%.*]], [[ARRAYCTOR_LOOP]] ], !dbg [[DBG27]]
; CHECK-NEXT:    call void @llvm.memcpy.p0.p0.i64(ptr align 4 [[ARRAYCTOR_DST_CUR]], ptr align 4 [[ARRAYCTOR_SRC_CUR]], i64 4, i1 false), !dbg [[DBG28:![0-9]+]]
; CHECK-NEXT:    [[ARRAYCTOR_DST_NEXT]] = getelementptr inbounds [[STRUCT_S]], ptr [[ARRAYCTOR_DST_CUR]], i64 1, !dbg [[DBG27]]
; CHECK-NEXT:    [[ARRAYCTOR_SRC_NEXT]] = getelementptr inbounds [[STRUCT_S]], ptr [[ARRAYCTOR_SRC_CUR]], i64 1, !dbg [[DBG27]]
; CHECK-NEXT:    [[ARRAYCTOR_DONE:%.*]] = icmp eq ptr [[ARRAYCTOR_DST_NEXT]], [[ARRAYCTOR_DST_END]], !dbg [[DBG27]]
; CHECK-NEXT:    br i1 [[ARRAYCTOR_DONE]], label [[ARRAYCTOR_CONT:%.*]], label [[ARRAYCTOR_LOOP]], !dbg [[DBG27]]
; CHECK:       arrayctor.cont:
; CHECK-NEXT:    ret void, !dbg [[DBG28]]
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_unpacked_task_region__Z9pod_arrayv
; CHECK-SAME: (ptr [[ARRAY:%.*]], ptr [[DEVICE_ENV:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) !dbg [[DBG30:![0-9]+]] {
; CHECK-NEXT:  newFuncRoot:
; CHECK-NEXT:    br label [[TMP0:%.*]], !dbg [[DBG31:![0-9]+]]
; CHECK:       0:
; CHECK-NEXT:    br label [[DOTEXITSTUB:%.*]], !dbg [[DBG32:![0-9]+]]
; CHECK:       .exitStub:
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_task_region__Z9pod_arrayv
; CHECK-SAME: (ptr [[TASK_ARGS:%.*]], ptr [[DEVICE_ENV:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_ARRAY:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z9POD_ARRAYV:%.*]], ptr [[TASK_ARGS]], i32 0, i32 0
; CHECK-NEXT:    [[TMP0:%.*]] = icmp ne ptr [[ADDRESS_TRANSLATION_TABLE]], null
; CHECK-NEXT:    br i1 [[TMP0]], label [[TMP1:%.*]], label [[TMP2:%.*]]
; CHECK:       1:
; CHECK-NEXT:    br label [[TMP2]]
; CHECK:       2:
; CHECK-NEXT:    call void @nanos6_unpacked_task_region__Z9pod_arrayv(ptr [[GEP_ARRAY]], ptr [[DEVICE_ENV]], ptr [[ADDRESS_TRANSLATION_TABLE]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_constructor_register_task_info() {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @nanos6_register_task_info(ptr @task_info_var__Z9pod_arrayv)
; CHECK-NEXT:    call void @nanos6_register_task_info(ptr @task_info_var__Z9pod_arrayv.10)
; CHECK-NEXT:    call void @nanos6_register_task_info(ptr @task_info_var__Z13non_pod_arrayv)
; CHECK-NEXT:    call void @nanos6_register_task_info(ptr @task_info_var__Z13non_pod_arrayv.23)
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_unpacked_task_region__Z9pod_arrayv.4
; CHECK-SAME: (ptr [[ARRAY:%.*]], ptr [[DEVICE_ENV:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) !dbg [[DBG33:![0-9]+]] {
; CHECK-NEXT:  newFuncRoot:
; CHECK-NEXT:    br label [[TMP0:%.*]], !dbg [[DBG34:![0-9]+]]
; CHECK:       0:
; CHECK-NEXT:    br label [[DOTEXITSTUB:%.*]], !dbg [[DBG35:![0-9]+]]
; CHECK:       .exitStub:
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_task_region__Z9pod_arrayv.5
; CHECK-SAME: (ptr [[TASK_ARGS:%.*]], ptr [[DEVICE_ENV:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_ARRAY:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z9POD_ARRAYV_0:%.*]], ptr [[TASK_ARGS]], i32 0, i32 0
; CHECK-NEXT:    [[TMP0:%.*]] = icmp ne ptr [[ADDRESS_TRANSLATION_TABLE]], null
; CHECK-NEXT:    br i1 [[TMP0]], label [[TMP1:%.*]], label [[TMP2:%.*]]
; CHECK:       1:
; CHECK-NEXT:    br label [[TMP2]]
; CHECK:       2:
; CHECK-NEXT:    call void @nanos6_unpacked_task_region__Z9pod_arrayv.4(ptr [[GEP_ARRAY]], ptr [[DEVICE_ENV]], ptr [[ADDRESS_TRANSLATION_TABLE]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_unpacked_destroy__Z13non_pod_arrayv
; CHECK-SAME: (ptr [[ARRAY:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @oss_dtor_ZN1SD1Ev(ptr [[ARRAY]], i64 10)
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_destroy__Z13non_pod_arrayv
; CHECK-SAME: (ptr [[TASK_ARGS:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_ARRAY:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z13NON_POD_ARRAYV:%.*]], ptr [[TASK_ARGS]], i32 0, i32 0
; CHECK-NEXT:    call void @nanos6_unpacked_destroy__Z13non_pod_arrayv(ptr [[GEP_ARRAY]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_duplicate__Z13non_pod_arrayv
; CHECK-SAME: (ptr [[TASK_ARGS_SRC:%.*]], ptr [[TASK_ARGS_DST:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[TASK_ARGS_DST]], align 8
; CHECK-NEXT:    [[ARGS_END:%.*]] = getelementptr i8, ptr [[TMP0]], i64 48
; CHECK-NEXT:    [[GEP_ARRAY:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z13NON_POD_ARRAYV:%.*]], ptr [[TMP0]], i32 0, i32 0
; CHECK-NEXT:    call void @oss_ctor_ZN1SC1Ev(ptr [[GEP_ARRAY]], i64 10)
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_unpacked_task_region__Z13non_pod_arrayv
; CHECK-SAME: (ptr [[ARRAY:%.*]], ptr [[DEVICE_ENV:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) !dbg [[DBG36:![0-9]+]] {
; CHECK-NEXT:  newFuncRoot:
; CHECK-NEXT:    br label [[TMP0:%.*]], !dbg [[DBG37:![0-9]+]]
; CHECK:       0:
; CHECK-NEXT:    br label [[DOTEXITSTUB:%.*]], !dbg [[DBG38:![0-9]+]]
; CHECK:       .exitStub:
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_task_region__Z13non_pod_arrayv
; CHECK-SAME: (ptr [[TASK_ARGS:%.*]], ptr [[DEVICE_ENV:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_ARRAY:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z13NON_POD_ARRAYV:%.*]], ptr [[TASK_ARGS]], i32 0, i32 0
; CHECK-NEXT:    [[TMP0:%.*]] = icmp ne ptr [[ADDRESS_TRANSLATION_TABLE]], null
; CHECK-NEXT:    br i1 [[TMP0]], label [[TMP1:%.*]], label [[TMP2:%.*]]
; CHECK:       1:
; CHECK-NEXT:    br label [[TMP2]]
; CHECK:       2:
; CHECK-NEXT:    call void @nanos6_unpacked_task_region__Z13non_pod_arrayv(ptr [[GEP_ARRAY]], ptr [[DEVICE_ENV]], ptr [[ADDRESS_TRANSLATION_TABLE]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_unpacked_destroy__Z13non_pod_arrayv.14
; CHECK-SAME: (ptr [[ARRAY:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @oss_dtor_ZN1SD1Ev(ptr [[ARRAY]], i64 10)
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_destroy__Z13non_pod_arrayv.15
; CHECK-SAME: (ptr [[TASK_ARGS:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_ARRAY:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z13NON_POD_ARRAYV_1:%.*]], ptr [[TASK_ARGS]], i32 0, i32 0
; CHECK-NEXT:    call void @nanos6_unpacked_destroy__Z13non_pod_arrayv.14(ptr [[GEP_ARRAY]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_duplicate__Z13non_pod_arrayv.16
; CHECK-SAME: (ptr [[TASK_ARGS_SRC:%.*]], ptr [[TASK_ARGS_DST:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[TASK_ARGS_DST]], align 8
; CHECK-NEXT:    [[ARGS_END:%.*]] = getelementptr i8, ptr [[TMP0]], i64 48
; CHECK-NEXT:    [[GEP_SRC_ARRAY:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z13NON_POD_ARRAYV_1:%.*]], ptr [[TASK_ARGS_SRC]], i32 0, i32 0
; CHECK-NEXT:    [[GEP_DST_ARRAY:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z13NON_POD_ARRAYV_1]], ptr [[TMP0]], i32 0, i32 0
; CHECK-NEXT:    call void @oss_copy_ctor_ZN1SC1ERKS_(ptr [[GEP_SRC_ARRAY]], ptr [[GEP_DST_ARRAY]], i64 10)
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_unpacked_task_region__Z13non_pod_arrayv.17
; CHECK-SAME: (ptr [[ARRAY:%.*]], ptr [[DEVICE_ENV:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) !dbg [[DBG39:![0-9]+]] {
; CHECK-NEXT:  newFuncRoot:
; CHECK-NEXT:    br label [[TMP0:%.*]], !dbg [[DBG40:![0-9]+]]
; CHECK:       0:
; CHECK-NEXT:    br label [[DOTEXITSTUB:%.*]], !dbg [[DBG41:![0-9]+]]
; CHECK:       .exitStub:
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_task_region__Z13non_pod_arrayv.18
; CHECK-SAME: (ptr [[TASK_ARGS:%.*]], ptr [[DEVICE_ENV:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_ARRAY:%.*]] = getelementptr [[NANOS6_TASK_ARGS__Z13NON_POD_ARRAYV_1:%.*]], ptr [[TASK_ARGS]], i32 0, i32 0
; CHECK-NEXT:    [[TMP0:%.*]] = icmp ne ptr [[ADDRESS_TRANSLATION_TABLE]], null
; CHECK-NEXT:    br i1 [[TMP0]], label [[TMP1:%.*]], label [[TMP2:%.*]]
; CHECK:       1:
; CHECK-NEXT:    br label [[TMP2]]
; CHECK:       2:
; CHECK-NEXT:    call void @nanos6_unpacked_task_region__Z13non_pod_arrayv.17(ptr [[GEP_ARRAY]], ptr [[DEVICE_ENV]], ptr [[ADDRESS_TRANSLATION_TABLE]])
; CHECK-NEXT:    ret void
;
