; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --include-generated-funcs
; RUN: opt %s -passes=ompss-2 -S | FileCheck %s
; ModuleID = 'array_sections.ll'
source_filename = "array_sections.ll"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; int mat[7][3];
; int main() {
;     #pragma oss task in(mat[:][:])
;     {}
;     #pragma oss task in(mat[0:1][1:1])
;     {}
; }

%struct._depend_unpack_t = type { ptr, i64, i64, i64, i64, i64, i64 }
%struct._depend_unpack_t.0 = type { ptr, i64, i64, i64, i64, i64, i64 }

@mat = global [7 x [3 x i32]] zeroinitializer, align 16

; Function Attrs: noinline nounwind optnone
define dso_local i32 @main() #0 !dbg !5 {
entry:
  %0 = call token @llvm.directive.region.entry() [ "DIR.OSS"([5 x i8] c"TASK\00"), "QUAL.OSS.SHARED"(ptr @mat, [7 x [3 x i32]] undef), "QUAL.OSS.DEP.IN"(ptr @mat, [10 x i8] c"mat[:][:]\00", ptr @compute_dep, ptr @mat) ], !dbg !9
  call void @llvm.directive.region.exit(token %0), !dbg !10
  %1 = call token @llvm.directive.region.entry() [ "DIR.OSS"([5 x i8] c"TASK\00"), "QUAL.OSS.SHARED"(ptr @mat, [7 x [3 x i32]] undef), "QUAL.OSS.DEP.IN"(ptr @mat, [14 x i8] c"mat[0:1][1:1]\00", ptr @compute_dep.1, ptr @mat) ], !dbg !11
  call void @llvm.directive.region.exit(token %1), !dbg !12
  ret i32 0, !dbg !13
}

; Function Attrs: nounwind
declare token @llvm.directive.region.entry() #1

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token) #1

define internal %struct._depend_unpack_t @compute_dep(ptr %mat) #2 !dbg !14 {
entry:
  %retval = alloca %struct._depend_unpack_t, align 8
  %mat.addr = alloca ptr, align 8
  store ptr %mat, ptr %mat.addr, align 8
  %arraydecay = getelementptr inbounds [7 x [3 x i32]], ptr %mat, i64 0, i64 0, !dbg !15
  %0 = getelementptr inbounds %struct._depend_unpack_t, ptr %retval, i32 0, i32 0
  store ptr %arraydecay, ptr %0, align 8
  %1 = getelementptr inbounds %struct._depend_unpack_t, ptr %retval, i32 0, i32 1
  store i64 12, ptr %1, align 8
  %2 = getelementptr inbounds %struct._depend_unpack_t, ptr %retval, i32 0, i32 2
  store i64 0, ptr %2, align 8
  %3 = getelementptr inbounds %struct._depend_unpack_t, ptr %retval, i32 0, i32 3
  store i64 12, ptr %3, align 8
  %4 = getelementptr inbounds %struct._depend_unpack_t, ptr %retval, i32 0, i32 4
  store i64 7, ptr %4, align 8
  %5 = getelementptr inbounds %struct._depend_unpack_t, ptr %retval, i32 0, i32 5
  store i64 0, ptr %5, align 8
  %6 = getelementptr inbounds %struct._depend_unpack_t, ptr %retval, i32 0, i32 6
  store i64 7, ptr %6, align 8
  %7 = load %struct._depend_unpack_t, ptr %retval, align 8, !dbg !15
  ret %struct._depend_unpack_t %7, !dbg !15
}

define internal %struct._depend_unpack_t.0 @compute_dep.1(ptr %mat) #2 !dbg !17 {
entry:
  %retval = alloca %struct._depend_unpack_t.0, align 8
  %mat.addr = alloca ptr, align 8
  store ptr %mat, ptr %mat.addr, align 8
  %arraydecay = getelementptr inbounds [7 x [3 x i32]], ptr %mat, i64 0, i64 0, !dbg !18
  %0 = getelementptr inbounds %struct._depend_unpack_t.0, ptr %retval, i32 0, i32 0
  store ptr %arraydecay, ptr %0, align 8
  %1 = getelementptr inbounds %struct._depend_unpack_t.0, ptr %retval, i32 0, i32 1
  store i64 12, ptr %1, align 8
  %2 = getelementptr inbounds %struct._depend_unpack_t.0, ptr %retval, i32 0, i32 2
  store i64 4, ptr %2, align 8
  %3 = getelementptr inbounds %struct._depend_unpack_t.0, ptr %retval, i32 0, i32 3
  store i64 8, ptr %3, align 8
  %4 = getelementptr inbounds %struct._depend_unpack_t.0, ptr %retval, i32 0, i32 4
  store i64 7, ptr %4, align 8
  %5 = getelementptr inbounds %struct._depend_unpack_t.0, ptr %retval, i32 0, i32 5
  store i64 0, ptr %5, align 8
  %6 = getelementptr inbounds %struct._depend_unpack_t.0, ptr %retval, i32 0, i32 6
  store i64 2, ptr %6, align 8
  %7 = load %struct._depend_unpack_t.0, ptr %retval, align 8, !dbg !18
  ret %struct._depend_unpack_t.0 %7, !dbg !18
}

attributes #0 = { noinline nounwind optnone "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
attributes #1 = { nounwind }
attributes #2 = { "min-legal-vector-width"="0" }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "", isOptimized: false, runtimeVersion: 0, emissionKind: NoDebug, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "<stdin>", directory: "")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 1, !"wchar_size", i32 4}
!4 = !{!""}
!5 = distinct !DISubprogram(name: "main", scope: !6, file: !6, line: 2, type: !7, scopeLine: 2, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !8)
!6 = !DIFile(filename: "array_sections.ll", directory: "")
!7 = !DISubroutineType(types: !8)
!8 = !{}
!9 = !DILocation(line: 3, column: 13, scope: !5)
!10 = !DILocation(line: 4, column: 6, scope: !5)
!11 = !DILocation(line: 5, column: 13, scope: !5)
!12 = !DILocation(line: 6, column: 6, scope: !5)
!13 = !DILocation(line: 7, column: 1, scope: !5)
!14 = distinct !DISubprogram(linkageName: "compute_dep", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!15 = !DILocation(line: 3, column: 25, scope: !16)
!16 = !DILexicalBlockFile(scope: !14, file: !6, discriminator: 0)
!17 = distinct !DISubprogram(linkageName: "compute_dep.1", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!18 = !DILocation(line: 5, column: 25, scope: !19)
!19 = !DILexicalBlockFile(scope: !17, file: !6, discriminator: 0)
; CHECK-LABEL: @main(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = alloca ptr, align 8, !dbg [[DBG9:![0-9]+]]
; CHECK-NEXT:    [[TMP1:%.*]] = alloca ptr, align 8, !dbg [[DBG9]]
; CHECK-NEXT:    [[NUM_DEPS:%.*]] = alloca i64, align 8, !dbg [[DBG9]]
; CHECK-NEXT:    [[TMP2:%.*]] = alloca ptr, align 8, !dbg [[DBG10:![0-9]+]]
; CHECK-NEXT:    [[TMP3:%.*]] = alloca ptr, align 8, !dbg [[DBG10]]
; CHECK-NEXT:    [[NUM_DEPS5:%.*]] = alloca i64, align 8, !dbg [[DBG10]]
; CHECK-NEXT:    br label [[FINAL_COND:%.*]], !dbg [[DBG9]]
; CHECK:       codeRepl:
; CHECK-NEXT:    store i64 0, ptr [[NUM_DEPS]], align 8, !dbg [[DBG9]]
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[NUM_DEPS]], align 8, !dbg [[DBG9]]
; CHECK-NEXT:    [[TMP5:%.*]] = add i64 [[TMP4]], 1, !dbg [[DBG9]]
; CHECK-NEXT:    store i64 [[TMP5]], ptr [[NUM_DEPS]], align 8, !dbg [[DBG9]]
; CHECK-NEXT:    [[TMP6:%.*]] = load i64, ptr [[NUM_DEPS]], align 8, !dbg [[DBG9]]
; CHECK-NEXT:    call void @nanos6_create_task(ptr @task_info_var_main, ptr @task_invocation_info_main, ptr null, i64 16, ptr [[TMP0]], ptr [[TMP1]], i64 0, i64 [[TMP6]]), !dbg [[DBG9]]
; CHECK-NEXT:    [[TMP7:%.*]] = load ptr, ptr [[TMP0]], align 8, !dbg [[DBG9]]
; CHECK-NEXT:    [[ARGS_END:%.*]] = getelementptr i8, ptr [[TMP7]], i64 16, !dbg [[DBG9]]
; CHECK-NEXT:    [[GEP_MAT:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN:%.*]], ptr [[TMP7]], i32 0, i32 0, !dbg [[DBG9]]
; CHECK-NEXT:    store ptr @mat, ptr [[GEP_MAT]], align 8, !dbg [[DBG9]]
; CHECK-NEXT:    [[TMP8:%.*]] = load ptr, ptr [[TMP1]], align 8, !dbg [[DBG9]]
; CHECK-NEXT:    call void @nanos6_submit_task(ptr [[TMP8]]), !dbg [[DBG9]]
; CHECK-NEXT:    br label [[FINAL_END:%.*]], !dbg [[DBG9]]
; CHECK:       final.end:
; CHECK-NEXT:    br label [[FINAL_COND2:%.*]], !dbg [[DBG10]]
; CHECK:       codeRepl4:
; CHECK-NEXT:    store i64 0, ptr [[NUM_DEPS5]], align 8, !dbg [[DBG10]]
; CHECK-NEXT:    [[TMP9:%.*]] = load i64, ptr [[NUM_DEPS5]], align 8, !dbg [[DBG10]]
; CHECK-NEXT:    [[TMP10:%.*]] = add i64 [[TMP9]], 1, !dbg [[DBG10]]
; CHECK-NEXT:    store i64 [[TMP10]], ptr [[NUM_DEPS5]], align 8, !dbg [[DBG10]]
; CHECK-NEXT:    [[TMP11:%.*]] = load i64, ptr [[NUM_DEPS5]], align 8, !dbg [[DBG10]]
; CHECK-NEXT:    call void @nanos6_create_task(ptr @task_info_var_main.12, ptr @task_invocation_info_main.8, ptr null, i64 16, ptr [[TMP2]], ptr [[TMP3]], i64 0, i64 [[TMP11]]), !dbg [[DBG10]]
; CHECK-NEXT:    [[TMP12:%.*]] = load ptr, ptr [[TMP2]], align 8, !dbg [[DBG10]]
; CHECK-NEXT:    [[ARGS_END6:%.*]] = getelementptr i8, ptr [[TMP12]], i64 16, !dbg [[DBG10]]
; CHECK-NEXT:    [[GEP_MAT7:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN_0:%.*]], ptr [[TMP12]], i32 0, i32 0, !dbg [[DBG10]]
; CHECK-NEXT:    store ptr @mat, ptr [[GEP_MAT7]], align 8, !dbg [[DBG10]]
; CHECK-NEXT:    [[TMP13:%.*]] = load ptr, ptr [[TMP3]], align 8, !dbg [[DBG10]]
; CHECK-NEXT:    call void @nanos6_submit_task(ptr [[TMP13]]), !dbg [[DBG10]]
; CHECK-NEXT:    br label [[FINAL_END1:%.*]], !dbg [[DBG10]]
; CHECK:       final.end1:
; CHECK-NEXT:    ret i32 0, !dbg [[DBG11:![0-9]+]]
; CHECK:       final.then:
; CHECK-NEXT:    br label [[FINAL_END]], !dbg [[DBG10]]
; CHECK:       final.then3:
; CHECK-NEXT:    br label [[FINAL_END1]], !dbg [[DBG11]]
; CHECK:       final.cond:
; CHECK-NEXT:    [[TMP14:%.*]] = call i32 @nanos6_in_final(), !dbg [[DBG9]]
; CHECK-NEXT:    [[TMP15:%.*]] = icmp ne i32 [[TMP14]], 0, !dbg [[DBG9]]
; CHECK-NEXT:    br i1 [[TMP15]], label [[FINAL_THEN:%.*]], label [[CODEREPL:%.*]], !dbg [[DBG9]]
; CHECK:       final.cond2:
; CHECK-NEXT:    [[TMP16:%.*]] = call i32 @nanos6_in_final(), !dbg [[DBG10]]
; CHECK-NEXT:    [[TMP17:%.*]] = icmp ne i32 [[TMP16]], 0, !dbg [[DBG10]]
; CHECK-NEXT:    br i1 [[TMP17]], label [[FINAL_THEN3:%.*]], label [[CODEREPL4:%.*]], !dbg [[DBG10]]
;
;
; CHECK-LABEL: @compute_dep(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[RETVAL:%.*]] = alloca [[STRUCT__DEPEND_UNPACK_T:%.*]], align 8
; CHECK-NEXT:    [[MAT_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr [[MAT:%.*]], ptr [[MAT_ADDR]], align 8
; CHECK-NEXT:    [[ARRAYDECAY:%.*]] = getelementptr inbounds [7 x [3 x i32]], ptr [[MAT]], i64 0, i64 0, !dbg [[DBG13:![0-9]+]]
; CHECK-NEXT:    [[TMP0:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], i32 0, i32 0
; CHECK-NEXT:    store ptr [[ARRAYDECAY]], ptr [[TMP0]], align 8
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], i32 0, i32 1
; CHECK-NEXT:    store i64 12, ptr [[TMP1]], align 8
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], i32 0, i32 2
; CHECK-NEXT:    store i64 0, ptr [[TMP2]], align 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], i32 0, i32 3
; CHECK-NEXT:    store i64 12, ptr [[TMP3]], align 8
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], i32 0, i32 4
; CHECK-NEXT:    store i64 7, ptr [[TMP4]], align 8
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], i32 0, i32 5
; CHECK-NEXT:    store i64 0, ptr [[TMP5]], align 8
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], i32 0, i32 6
; CHECK-NEXT:    store i64 7, ptr [[TMP6]], align 8
; CHECK-NEXT:    [[TMP7:%.*]] = load [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], align 8, !dbg [[DBG13]]
; CHECK-NEXT:    ret [[STRUCT__DEPEND_UNPACK_T]] [[TMP7]], !dbg [[DBG13]]
;
;
; CHECK-LABEL: @compute_dep.1(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[RETVAL:%.*]] = alloca [[STRUCT__DEPEND_UNPACK_T_0:%.*]], align 8
; CHECK-NEXT:    [[MAT_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr [[MAT:%.*]], ptr [[MAT_ADDR]], align 8
; CHECK-NEXT:    [[ARRAYDECAY:%.*]] = getelementptr inbounds [7 x [3 x i32]], ptr [[MAT]], i64 0, i64 0, !dbg [[DBG16:![0-9]+]]
; CHECK-NEXT:    [[TMP0:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_0]], ptr [[RETVAL]], i32 0, i32 0
; CHECK-NEXT:    store ptr [[ARRAYDECAY]], ptr [[TMP0]], align 8
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_0]], ptr [[RETVAL]], i32 0, i32 1
; CHECK-NEXT:    store i64 12, ptr [[TMP1]], align 8
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_0]], ptr [[RETVAL]], i32 0, i32 2
; CHECK-NEXT:    store i64 4, ptr [[TMP2]], align 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_0]], ptr [[RETVAL]], i32 0, i32 3
; CHECK-NEXT:    store i64 8, ptr [[TMP3]], align 8
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_0]], ptr [[RETVAL]], i32 0, i32 4
; CHECK-NEXT:    store i64 7, ptr [[TMP4]], align 8
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_0]], ptr [[RETVAL]], i32 0, i32 5
; CHECK-NEXT:    store i64 0, ptr [[TMP5]], align 8
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_0]], ptr [[RETVAL]], i32 0, i32 6
; CHECK-NEXT:    store i64 2, ptr [[TMP6]], align 8
; CHECK-NEXT:    [[TMP7:%.*]] = load [[STRUCT__DEPEND_UNPACK_T_0]], ptr [[RETVAL]], align 8, !dbg [[DBG16]]
; CHECK-NEXT:    ret [[STRUCT__DEPEND_UNPACK_T_0]] [[TMP7]], !dbg [[DBG16]]
;
;
; CHECK-LABEL: @nanos6_unpacked_task_region_main(
; CHECK-NEXT:  newFuncRoot:
; CHECK-NEXT:    br label [[TMP0:%.*]], !dbg [[DBG19:![0-9]+]]
; CHECK:       0:
; CHECK-NEXT:    br label [[DOTEXITSTUB:%.*]], !dbg [[DBG20:![0-9]+]]
; CHECK:       .exitStub:
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: @nanos6_ol_task_region_main(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_MAT:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN:%.*]], ptr [[TASK_ARGS:%.*]], i32 0, i32 0
; CHECK-NEXT:    [[LOAD_GEP_MAT:%.*]] = load ptr, ptr [[GEP_MAT]], align 8
; CHECK-NEXT:    [[TLATE_LOAD_GEP_MAT:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr [[LOAD_GEP_MAT]], ptr [[TLATE_LOAD_GEP_MAT]], align 8
; CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[TLATE_LOAD_GEP_MAT]], align 8
; CHECK-NEXT:    [[TMP1:%.*]] = icmp ne ptr [[ADDRESS_TRANSLATION_TABLE:%.*]], null
; CHECK-NEXT:    br i1 [[TMP1]], label [[TMP2:%.*]], label [[TMP8:%.*]]
; CHECK:       2:
; CHECK-NEXT:    [[LOCAL_LOOKUP_MAT:%.*]] = getelementptr [[NANOS6_ADDRESS_TRANSLATION_ENTRY_T:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE]], i32 0, i32 0
; CHECK-NEXT:    [[TMP3:%.*]] = load i64, ptr [[LOCAL_LOOKUP_MAT]], align 8
; CHECK-NEXT:    [[DEVICE_LOOKUP_MAT:%.*]] = getelementptr [[NANOS6_ADDRESS_TRANSLATION_ENTRY_T]], ptr [[ADDRESS_TRANSLATION_TABLE]], i32 0, i32 1
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[DEVICE_LOOKUP_MAT]], align 8
; CHECK-NEXT:    [[TMP5:%.*]] = sub i64 0, [[TMP3]]
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[TMP0]], i64 [[TMP5]]
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[TMP6]], i64 [[TMP4]]
; CHECK-NEXT:    store ptr [[TMP7]], ptr [[TLATE_LOAD_GEP_MAT]], align 8
; CHECK-NEXT:    br label [[TMP8]]
; CHECK:       8:
; CHECK-NEXT:    [[TMP9:%.*]] = load ptr, ptr [[TLATE_LOAD_GEP_MAT]], align 8
; CHECK-NEXT:    call void @nanos6_unpacked_task_region_main(ptr [[TMP9]], ptr [[DEVICE_ENV:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: @nanos6_unpacked_deps_main(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = call [[STRUCT__DEPEND_UNPACK_T:%.*]] @compute_dep(ptr [[MAT:%.*]])
; CHECK-NEXT:    [[TMP1:%.*]] = call [[STRUCT__DEPEND_UNPACK_T]] @compute_dep(ptr [[MAT]])
; CHECK-NEXT:    [[TMP2:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T]] [[TMP0]], 0
; CHECK-NEXT:    [[TMP3:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T]] [[TMP0]], 1
; CHECK-NEXT:    [[TMP4:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T]] [[TMP0]], 2
; CHECK-NEXT:    [[TMP5:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T]] [[TMP1]], 3
; CHECK-NEXT:    [[TMP6:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T]] [[TMP0]], 4
; CHECK-NEXT:    [[TMP7:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T]] [[TMP0]], 5
; CHECK-NEXT:    [[TMP8:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T]] [[TMP1]], 6
; CHECK-NEXT:    call void @nanos6_register_region_read_depinfo2(ptr [[HANDLER:%.*]], i32 0, ptr @[[GLOB1:[0-9]+]], ptr [[TMP2]], i64 [[TMP3]], i64 [[TMP4]], i64 [[TMP5]], i64 [[TMP6]], i64 [[TMP7]], i64 [[TMP8]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: @nanos6_ol_deps_main(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_MAT:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN:%.*]], ptr [[TASK_ARGS:%.*]], i32 0, i32 0
; CHECK-NEXT:    [[LOAD_GEP_MAT:%.*]] = load ptr, ptr [[GEP_MAT]], align 8
; CHECK-NEXT:    call void @nanos6_unpacked_deps_main(ptr [[LOAD_GEP_MAT]], ptr [[LOOP_BOUNDS:%.*]], ptr [[HANDLER:%.*]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: @nanos6_constructor_register_task_info(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @nanos6_register_task_info(ptr @task_info_var_main)
; CHECK-NEXT:    call void @nanos6_register_task_info(ptr @task_info_var_main.12)
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: @nanos6_unpacked_task_region_main.4(
; CHECK-NEXT:  newFuncRoot:
; CHECK-NEXT:    br label [[TMP0:%.*]], !dbg [[DBG22:![0-9]+]]
; CHECK:       0:
; CHECK-NEXT:    br label [[DOTEXITSTUB:%.*]], !dbg [[DBG23:![0-9]+]]
; CHECK:       .exitStub:
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: @nanos6_ol_task_region_main.5(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_MAT:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN_0:%.*]], ptr [[TASK_ARGS:%.*]], i32 0, i32 0
; CHECK-NEXT:    [[LOAD_GEP_MAT:%.*]] = load ptr, ptr [[GEP_MAT]], align 8
; CHECK-NEXT:    [[TLATE_LOAD_GEP_MAT:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr [[LOAD_GEP_MAT]], ptr [[TLATE_LOAD_GEP_MAT]], align 8
; CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[TLATE_LOAD_GEP_MAT]], align 8
; CHECK-NEXT:    [[TMP1:%.*]] = icmp ne ptr [[ADDRESS_TRANSLATION_TABLE:%.*]], null
; CHECK-NEXT:    br i1 [[TMP1]], label [[TMP2:%.*]], label [[TMP8:%.*]]
; CHECK:       2:
; CHECK-NEXT:    [[LOCAL_LOOKUP_MAT:%.*]] = getelementptr [[NANOS6_ADDRESS_TRANSLATION_ENTRY_T:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE]], i32 0, i32 0
; CHECK-NEXT:    [[TMP3:%.*]] = load i64, ptr [[LOCAL_LOOKUP_MAT]], align 8
; CHECK-NEXT:    [[DEVICE_LOOKUP_MAT:%.*]] = getelementptr [[NANOS6_ADDRESS_TRANSLATION_ENTRY_T]], ptr [[ADDRESS_TRANSLATION_TABLE]], i32 0, i32 1
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[DEVICE_LOOKUP_MAT]], align 8
; CHECK-NEXT:    [[TMP5:%.*]] = sub i64 0, [[TMP3]]
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[TMP0]], i64 [[TMP5]]
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[TMP6]], i64 [[TMP4]]
; CHECK-NEXT:    store ptr [[TMP7]], ptr [[TLATE_LOAD_GEP_MAT]], align 8
; CHECK-NEXT:    br label [[TMP8]]
; CHECK:       8:
; CHECK-NEXT:    [[TMP9:%.*]] = load ptr, ptr [[TLATE_LOAD_GEP_MAT]], align 8
; CHECK-NEXT:    call void @nanos6_unpacked_task_region_main.4(ptr [[TMP9]], ptr [[DEVICE_ENV:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: @nanos6_unpacked_deps_main.6(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = call [[STRUCT__DEPEND_UNPACK_T_0:%.*]] @compute_dep.1(ptr [[MAT:%.*]])
; CHECK-NEXT:    [[TMP1:%.*]] = call [[STRUCT__DEPEND_UNPACK_T_0]] @compute_dep.1(ptr [[MAT]])
; CHECK-NEXT:    [[TMP2:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_0]] [[TMP0]], 0
; CHECK-NEXT:    [[TMP3:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_0]] [[TMP0]], 1
; CHECK-NEXT:    [[TMP4:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_0]] [[TMP0]], 2
; CHECK-NEXT:    [[TMP5:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_0]] [[TMP1]], 3
; CHECK-NEXT:    [[TMP6:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_0]] [[TMP0]], 4
; CHECK-NEXT:    [[TMP7:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_0]] [[TMP0]], 5
; CHECK-NEXT:    [[TMP8:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_0]] [[TMP1]], 6
; CHECK-NEXT:    call void @nanos6_register_region_read_depinfo2(ptr [[HANDLER:%.*]], i32 0, ptr @[[GLOB3:[0-9]+]], ptr [[TMP2]], i64 [[TMP3]], i64 [[TMP4]], i64 [[TMP5]], i64 [[TMP6]], i64 [[TMP7]], i64 [[TMP8]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: @nanos6_ol_deps_main.7(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_MAT:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN_0:%.*]], ptr [[TASK_ARGS:%.*]], i32 0, i32 0
; CHECK-NEXT:    [[LOAD_GEP_MAT:%.*]] = load ptr, ptr [[GEP_MAT]], align 8
; CHECK-NEXT:    call void @nanos6_unpacked_deps_main.6(ptr [[LOAD_GEP_MAT]], ptr [[LOOP_BOUNDS:%.*]], ptr [[HANDLER:%.*]])
; CHECK-NEXT:    ret void
;
