; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --function-signature --include-generated-funcs
; RUN: opt %s -passes=ompss-2 -S | opt -O3 -S | FileCheck %s
; ModuleID = 'collapse_niters01.ll'
source_filename = "collapse_niters01.ll"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; int main() {
;     #pragma oss taskloop collapse(2)
;     for (int i = 0; i < 10; ++i) {
;         for (int j = 10; j > i; --j) {
;         }
;     }
;     #pragma oss taskloop collapse(2)
;     for (int i = 0; i < 10; ++i) {
;         for (int j = i; j > 0; --j) {
;         }
;     }
;     #pragma oss taskloop collapse(2)
;     for (int i = 0; i < 10; ++i) {
;         for (int j = 0; j < i; ++j) {
;         }
;     }
;     #pragma oss taskloop collapse(2)
;     for (int i = 0; i < 10; ++i) {
;         for (int j = i; j < 10; ++j) {
;         }
;     }
;     #pragma oss taskwait
; }

; Function Attrs: noinline nounwind optnone
define dso_local i32 @main() #0 !dbg !5 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %i1 = alloca i32, align 4
  %j2 = alloca i32, align 4
  %i3 = alloca i32, align 4
  %j4 = alloca i32, align 4
  %i5 = alloca i32, align 4
  %j6 = alloca i32, align 4
  store i32 0, ptr %i, align 4, !dbg !9
  store i32 10, ptr %j, align 4, !dbg !10
  %0 = call token @llvm.directive.region.entry() [ "DIR.OSS"([9 x i8] c"TASKLOOP\00"), "QUAL.OSS.PRIVATE"(ptr %i, i32 undef), "QUAL.OSS.PRIVATE"(ptr %j, i32 undef), "QUAL.OSS.LOOP.IND.VAR"(ptr %i, ptr %j), "QUAL.OSS.LOOP.LOWER.BOUND"(ptr @compute_lb, ptr @compute_lb.1), "QUAL.OSS.LOOP.UPPER.BOUND"(ptr @compute_ub, ptr @compute_ub.2, ptr %i), "QUAL.OSS.LOOP.STEP"(ptr @compute_step, ptr @compute_step.3), "QUAL.OSS.LOOP.TYPE"(i64 0, i64 1, i64 1, i64 1, i64 1, i64 2, i64 1, i64 1, i64 1, i64 1) ], !dbg !11
  call void @llvm.directive.region.exit(token %0), !dbg !12
  store i32 0, ptr %i1, align 4, !dbg !13
  %1 = load i32, ptr %i1, align 4, !dbg !14
  store i32 %1, ptr %j2, align 4, !dbg !15
  %2 = call token @llvm.directive.region.entry() [ "DIR.OSS"([9 x i8] c"TASKLOOP\00"), "QUAL.OSS.PRIVATE"(ptr %i1, i32 undef), "QUAL.OSS.PRIVATE"(ptr %j2, i32 undef), "QUAL.OSS.LOOP.IND.VAR"(ptr %i1, ptr %j2), "QUAL.OSS.LOOP.LOWER.BOUND"(ptr @compute_lb.4, ptr @compute_lb.7, ptr %i1), "QUAL.OSS.LOOP.UPPER.BOUND"(ptr @compute_ub.5, ptr @compute_ub.8), "QUAL.OSS.LOOP.STEP"(ptr @compute_step.6, ptr @compute_step.9), "QUAL.OSS.LOOP.TYPE"(i64 0, i64 1, i64 1, i64 1, i64 1, i64 2, i64 1, i64 1, i64 1, i64 1) ], !dbg !16
  call void @llvm.directive.region.exit(token %2), !dbg !17
  store i32 0, ptr %i3, align 4, !dbg !18
  store i32 0, ptr %j4, align 4, !dbg !19
  %3 = call token @llvm.directive.region.entry() [ "DIR.OSS"([9 x i8] c"TASKLOOP\00"), "QUAL.OSS.PRIVATE"(ptr %i3, i32 undef), "QUAL.OSS.PRIVATE"(ptr %j4, i32 undef), "QUAL.OSS.LOOP.IND.VAR"(ptr %i3, ptr %j4), "QUAL.OSS.LOOP.LOWER.BOUND"(ptr @compute_lb.10, ptr @compute_lb.13), "QUAL.OSS.LOOP.UPPER.BOUND"(ptr @compute_ub.11, ptr @compute_ub.14, ptr %i3), "QUAL.OSS.LOOP.STEP"(ptr @compute_step.12, ptr @compute_step.15), "QUAL.OSS.LOOP.TYPE"(i64 0, i64 1, i64 1, i64 1, i64 1, i64 0, i64 1, i64 1, i64 1, i64 1) ], !dbg !20
  call void @llvm.directive.region.exit(token %3), !dbg !21
  store i32 0, ptr %i5, align 4, !dbg !22
  %4 = load i32, ptr %i5, align 4, !dbg !23
  store i32 %4, ptr %j6, align 4, !dbg !24
  %5 = call token @llvm.directive.region.entry() [ "DIR.OSS"([9 x i8] c"TASKLOOP\00"), "QUAL.OSS.PRIVATE"(ptr %i5, i32 undef), "QUAL.OSS.PRIVATE"(ptr %j6, i32 undef), "QUAL.OSS.LOOP.IND.VAR"(ptr %i5, ptr %j6), "QUAL.OSS.LOOP.LOWER.BOUND"(ptr @compute_lb.16, ptr @compute_lb.19, ptr %i5), "QUAL.OSS.LOOP.UPPER.BOUND"(ptr @compute_ub.17, ptr @compute_ub.20), "QUAL.OSS.LOOP.STEP"(ptr @compute_step.18, ptr @compute_step.21), "QUAL.OSS.LOOP.TYPE"(i64 0, i64 1, i64 1, i64 1, i64 1, i64 0, i64 1, i64 1, i64 1, i64 1) ], !dbg !25
  call void @llvm.directive.region.exit(token %5), !dbg !26
  %6 = call i1 @llvm.directive.marker() [ "DIR.OSS"([9 x i8] c"TASKWAIT\00") ], !dbg !27
  ret i32 0, !dbg !28
}

; Function Attrs: nounwind
declare token @llvm.directive.region.entry() #1

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token) #1

define internal i32 @compute_lb() #2 !dbg !29 {
entry:
  ret i32 0, !dbg !30
}

define internal i32 @compute_ub() #2 !dbg !32 {
entry:
  ret i32 10, !dbg !33
}

define internal i32 @compute_step() #2 !dbg !35 {
entry:
  ret i32 1, !dbg !36
}

define internal i32 @compute_lb.1() #2 !dbg !38 {
entry:
  ret i32 10, !dbg !39
}

define internal i32 @compute_ub.2(ptr %i) #2 !dbg !41 {
entry:
  %i.addr = alloca ptr, align 8
  store ptr %i, ptr %i.addr, align 8
  %0 = load i32, ptr %i, align 4, !dbg !42
  ret i32 %0, !dbg !42
}

define internal i32 @compute_step.3() #2 !dbg !44 {
entry:
  ret i32 -1, !dbg !45
}

define internal i32 @compute_lb.4() #2 !dbg !47 {
entry:
  ret i32 0, !dbg !48
}

define internal i32 @compute_ub.5() #2 !dbg !50 {
entry:
  ret i32 10, !dbg !51
}

define internal i32 @compute_step.6() #2 !dbg !53 {
entry:
  ret i32 1, !dbg !54
}

define internal i32 @compute_lb.7(ptr %i) #2 !dbg !56 {
entry:
  %i.addr = alloca ptr, align 8
  store ptr %i, ptr %i.addr, align 8
  %0 = load i32, ptr %i, align 4, !dbg !57
  ret i32 %0, !dbg !57
}

define internal i32 @compute_ub.8() #2 !dbg !59 {
entry:
  ret i32 0, !dbg !60
}

define internal i32 @compute_step.9() #2 !dbg !62 {
entry:
  ret i32 -1, !dbg !63
}

define internal i32 @compute_lb.10() #2 !dbg !65 {
entry:
  ret i32 0, !dbg !66
}

define internal i32 @compute_ub.11() #2 !dbg !68 {
entry:
  ret i32 10, !dbg !69
}

define internal i32 @compute_step.12() #2 !dbg !71 {
entry:
  ret i32 1, !dbg !72
}

define internal i32 @compute_lb.13() #2 !dbg !74 {
entry:
  ret i32 0, !dbg !75
}

define internal i32 @compute_ub.14(ptr %i) #2 !dbg !77 {
entry:
  %i.addr = alloca ptr, align 8
  store ptr %i, ptr %i.addr, align 8
  %0 = load i32, ptr %i, align 4, !dbg !78
  ret i32 %0, !dbg !78
}

define internal i32 @compute_step.15() #2 !dbg !80 {
entry:
  ret i32 1, !dbg !81
}

define internal i32 @compute_lb.16() #2 !dbg !83 {
entry:
  ret i32 0, !dbg !84
}

define internal i32 @compute_ub.17() #2 !dbg !86 {
entry:
  ret i32 10, !dbg !87
}

define internal i32 @compute_step.18() #2 !dbg !89 {
entry:
  ret i32 1, !dbg !90
}

define internal i32 @compute_lb.19(ptr %i) #2 !dbg !92 {
entry:
  %i.addr = alloca ptr, align 8
  store ptr %i, ptr %i.addr, align 8
  %0 = load i32, ptr %i, align 4, !dbg !93
  ret i32 %0, !dbg !93
}

define internal i32 @compute_ub.20() #2 !dbg !95 {
entry:
  ret i32 10, !dbg !96
}

define internal i32 @compute_step.21() #2 !dbg !98 {
entry:
  ret i32 1, !dbg !99
}

; Function Attrs: nounwind
declare i1 @llvm.directive.marker() #1

attributes #0 = { noinline nounwind optnone "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
attributes #1 = { nounwind }
attributes #2 = { "min-legal-vector-width"="0" }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "", isOptimized: false, runtimeVersion: 0, emissionKind: NoDebug, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "<stdin>", directory: "")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 1, !"wchar_size", i32 4}
!4 = !{!""}
!5 = distinct !DISubprogram(name: "main", scope: !6, file: !6, line: 1, type: !7, scopeLine: 1, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !8)
!6 = !DIFile(filename: "collapse_niters01.ll", directory: "")
!7 = !DISubroutineType(types: !8)
!8 = !{}
!9 = !DILocation(line: 3, column: 14, scope: !5)
!10 = !DILocation(line: 4, column: 18, scope: !5)
!11 = !DILocation(line: 4, column: 14, scope: !5)
!12 = !DILocation(line: 5, column: 9, scope: !5)
!13 = !DILocation(line: 8, column: 14, scope: !5)
!14 = !DILocation(line: 9, column: 22, scope: !5)
!15 = !DILocation(line: 9, column: 18, scope: !5)
!16 = !DILocation(line: 9, column: 14, scope: !5)
!17 = !DILocation(line: 10, column: 9, scope: !5)
!18 = !DILocation(line: 13, column: 14, scope: !5)
!19 = !DILocation(line: 14, column: 18, scope: !5)
!20 = !DILocation(line: 14, column: 14, scope: !5)
!21 = !DILocation(line: 15, column: 9, scope: !5)
!22 = !DILocation(line: 18, column: 14, scope: !5)
!23 = !DILocation(line: 19, column: 22, scope: !5)
!24 = !DILocation(line: 19, column: 18, scope: !5)
!25 = !DILocation(line: 19, column: 14, scope: !5)
!26 = !DILocation(line: 20, column: 9, scope: !5)
!27 = !DILocation(line: 22, column: 13, scope: !5)
!28 = !DILocation(line: 23, column: 1, scope: !5)
!29 = distinct !DISubprogram(linkageName: "compute_lb", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!30 = !DILocation(line: 3, column: 18, scope: !31)
!31 = !DILexicalBlockFile(scope: !29, file: !6, discriminator: 0)
!32 = distinct !DISubprogram(linkageName: "compute_ub", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!33 = !DILocation(line: 3, column: 25, scope: !34)
!34 = !DILexicalBlockFile(scope: !32, file: !6, discriminator: 0)
!35 = distinct !DISubprogram(linkageName: "compute_step", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!36 = !DILocation(line: 3, column: 29, scope: !37)
!37 = !DILexicalBlockFile(scope: !35, file: !6, discriminator: 0)
!38 = distinct !DISubprogram(linkageName: "compute_lb.1", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!39 = !DILocation(line: 4, column: 22, scope: !40)
!40 = !DILexicalBlockFile(scope: !38, file: !6, discriminator: 0)
!41 = distinct !DISubprogram(linkageName: "compute_ub.2", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!42 = !DILocation(line: 4, column: 30, scope: !43)
!43 = !DILexicalBlockFile(scope: !41, file: !6, discriminator: 0)
!44 = distinct !DISubprogram(linkageName: "compute_step.3", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!45 = !DILocation(line: 4, column: 33, scope: !46)
!46 = !DILexicalBlockFile(scope: !44, file: !6, discriminator: 0)
!47 = distinct !DISubprogram(linkageName: "compute_lb.4", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!48 = !DILocation(line: 8, column: 18, scope: !49)
!49 = !DILexicalBlockFile(scope: !47, file: !6, discriminator: 0)
!50 = distinct !DISubprogram(linkageName: "compute_ub.5", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!51 = !DILocation(line: 8, column: 25, scope: !52)
!52 = !DILexicalBlockFile(scope: !50, file: !6, discriminator: 0)
!53 = distinct !DISubprogram(linkageName: "compute_step.6", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!54 = !DILocation(line: 8, column: 29, scope: !55)
!55 = !DILexicalBlockFile(scope: !53, file: !6, discriminator: 0)
!56 = distinct !DISubprogram(linkageName: "compute_lb.7", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!57 = !DILocation(line: 9, column: 22, scope: !58)
!58 = !DILexicalBlockFile(scope: !56, file: !6, discriminator: 0)
!59 = distinct !DISubprogram(linkageName: "compute_ub.8", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!60 = !DILocation(line: 9, column: 29, scope: !61)
!61 = !DILexicalBlockFile(scope: !59, file: !6, discriminator: 0)
!62 = distinct !DISubprogram(linkageName: "compute_step.9", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!63 = !DILocation(line: 9, column: 32, scope: !64)
!64 = !DILexicalBlockFile(scope: !62, file: !6, discriminator: 0)
!65 = distinct !DISubprogram(linkageName: "compute_lb.10", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!66 = !DILocation(line: 13, column: 18, scope: !67)
!67 = !DILexicalBlockFile(scope: !65, file: !6, discriminator: 0)
!68 = distinct !DISubprogram(linkageName: "compute_ub.11", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!69 = !DILocation(line: 13, column: 25, scope: !70)
!70 = !DILexicalBlockFile(scope: !68, file: !6, discriminator: 0)
!71 = distinct !DISubprogram(linkageName: "compute_step.12", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!72 = !DILocation(line: 13, column: 29, scope: !73)
!73 = !DILexicalBlockFile(scope: !71, file: !6, discriminator: 0)
!74 = distinct !DISubprogram(linkageName: "compute_lb.13", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!75 = !DILocation(line: 14, column: 22, scope: !76)
!76 = !DILexicalBlockFile(scope: !74, file: !6, discriminator: 0)
!77 = distinct !DISubprogram(linkageName: "compute_ub.14", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!78 = !DILocation(line: 14, column: 29, scope: !79)
!79 = !DILexicalBlockFile(scope: !77, file: !6, discriminator: 0)
!80 = distinct !DISubprogram(linkageName: "compute_step.15", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!81 = !DILocation(line: 14, column: 32, scope: !82)
!82 = !DILexicalBlockFile(scope: !80, file: !6, discriminator: 0)
!83 = distinct !DISubprogram(linkageName: "compute_lb.16", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!84 = !DILocation(line: 18, column: 18, scope: !85)
!85 = !DILexicalBlockFile(scope: !83, file: !6, discriminator: 0)
!86 = distinct !DISubprogram(linkageName: "compute_ub.17", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!87 = !DILocation(line: 18, column: 25, scope: !88)
!88 = !DILexicalBlockFile(scope: !86, file: !6, discriminator: 0)
!89 = distinct !DISubprogram(linkageName: "compute_step.18", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!90 = !DILocation(line: 18, column: 29, scope: !91)
!91 = !DILexicalBlockFile(scope: !89, file: !6, discriminator: 0)
!92 = distinct !DISubprogram(linkageName: "compute_lb.19", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!93 = !DILocation(line: 19, column: 22, scope: !94)
!94 = !DILexicalBlockFile(scope: !92, file: !6, discriminator: 0)
!95 = distinct !DISubprogram(linkageName: "compute_ub.20", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!96 = !DILocation(line: 19, column: 29, scope: !97)
!97 = !DILexicalBlockFile(scope: !95, file: !6, discriminator: 0)
!98 = distinct !DISubprogram(linkageName: "compute_step.21", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !8)
!99 = !DILocation(line: 19, column: 33, scope: !100)
!100 = !DILexicalBlockFile(scope: !98, file: !6, discriminator: 0)
; CHECK-LABEL: define {{[^@]+}}@main
; CHECK-SAME: () local_unnamed_addr #[[ATTR0:[0-9]+]] !dbg [[DBG5:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[I:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[J:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[I1:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[J2:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[I3:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[J4:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[I5:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[J6:%.*]] = alloca i32, align 4
; CHECK-NEXT:    store i32 0, ptr [[I]], align 4, !dbg [[DBG9:![0-9]+]]
; CHECK-NEXT:    store i32 10, ptr [[J]], align 4, !dbg [[DBG10:![0-9]+]]
; CHECK-NEXT:    [[TMP0:%.*]] = alloca ptr, align 8, !dbg [[DBG11:![0-9]+]]
; CHECK-NEXT:    [[TMP1:%.*]] = alloca ptr, align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[NUM_DEPS:%.*]] = alloca i64, align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP2:%.*]] = alloca ptr, align 8, !dbg [[DBG12:![0-9]+]]
; CHECK-NEXT:    [[TMP3:%.*]] = alloca ptr, align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[NUM_DEPS25:%.*]] = alloca i64, align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP4:%.*]] = alloca ptr, align 8, !dbg [[DBG13:![0-9]+]]
; CHECK-NEXT:    [[TMP5:%.*]] = alloca ptr, align 8, !dbg [[DBG13]]
; CHECK-NEXT:    [[NUM_DEPS43:%.*]] = alloca i64, align 8, !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP6:%.*]] = alloca ptr, align 8, !dbg [[DBG14:![0-9]+]]
; CHECK-NEXT:    [[TMP7:%.*]] = alloca ptr, align 8, !dbg [[DBG14]]
; CHECK-NEXT:    [[NUM_DEPS61:%.*]] = alloca i64, align 8, !dbg [[DBG14]]
; CHECK-NEXT:    br label [[FINAL_COND:%.*]], !dbg [[DBG11]]
; CHECK:       codeRepl:
; CHECK-NEXT:    store i64 0, ptr [[NUM_DEPS]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP8:%.*]] = load i64, ptr [[NUM_DEPS]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    call fastcc void @compute_lb(), !dbg [[DBG11]]
; CHECK-NEXT:    call fastcc void @compute_ub(), !dbg [[DBG11]]
; CHECK-NEXT:    call fastcc void @compute_step(), !dbg [[DBG11]]
; CHECK-NEXT:    store i32 9, ptr [[I]], align 4, !dbg [[DBG11]]
; CHECK-NEXT:    call fastcc void @compute_lb.1(), !dbg [[DBG11]]
; CHECK-NEXT:    store i32 0, ptr [[I]], align 4, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP9:%.*]] = call fastcc i32 @compute_ub.2(ptr [[I]]), !dbg [[DBG11]]
; CHECK-NEXT:    call fastcc void @compute_step.3(), !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP10:%.*]] = sub i32 [[TMP9]], 10, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP11:%.*]] = add i32 [[TMP10]], 1, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP12:%.*]] = sdiv i32 [[TMP11]], -1, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP13:%.*]] = add i32 [[TMP12]], 1, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP14:%.*]] = sext i32 [[TMP13]] to i64, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP15:%.*]] = mul nsw i64 10, [[TMP14]], !dbg [[DBG11]]
; CHECK-NEXT:    call void @nanos6_create_loop(ptr @task_info_var_main, ptr @task_invocation_info_main, ptr null, i64 16, ptr [[TMP0]], ptr [[TMP1]], i64 4, i64 [[TMP8]], i64 0, i64 [[TMP15]], i64 0, i64 0), !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP16:%.*]] = load ptr, ptr [[TMP0]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[ARGS_END:%.*]] = getelementptr i8, ptr [[TMP16]], i64 16, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP17:%.*]] = load ptr, ptr [[TMP1]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    call void @nanos6_submit_task(ptr [[TMP17]]), !dbg [[DBG11]]
; CHECK-NEXT:    br label [[FOR_END7:%.*]], !dbg [[DBG11]]
; CHECK:       final.end:
; CHECK-NEXT:    store i32 0, ptr [[I1]], align 4, !dbg [[DBG15:![0-9]+]]
; CHECK-NEXT:    [[TMP18:%.*]] = load i32, ptr [[I1]], align 4, !dbg [[DBG16:![0-9]+]]
; CHECK-NEXT:    store i32 [[TMP18]], ptr [[J2]], align 4, !dbg [[DBG17:![0-9]+]]
; CHECK-NEXT:    br label [[FINAL_COND18:%.*]], !dbg [[DBG12]]
; CHECK:       codeRepl24:
; CHECK-NEXT:    store i64 0, ptr [[NUM_DEPS25]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP19:%.*]] = load i64, ptr [[NUM_DEPS25]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    call fastcc void @compute_lb.4(), !dbg [[DBG12]]
; CHECK-NEXT:    call fastcc void @compute_ub.5(), !dbg [[DBG12]]
; CHECK-NEXT:    call fastcc void @compute_step.6(), !dbg [[DBG12]]
; CHECK-NEXT:    store i32 9, ptr [[I1]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP20:%.*]] = call fastcc i32 @compute_lb.7(ptr [[I1]]), !dbg [[DBG12]]
; CHECK-NEXT:    store i32 0, ptr [[I1]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    call fastcc void @compute_ub.8(), !dbg [[DBG12]]
; CHECK-NEXT:    call fastcc void @compute_step.9(), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP21:%.*]] = sub i32 0, [[TMP20]], !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP22:%.*]] = add i32 [[TMP21]], 1, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP23:%.*]] = sdiv i32 [[TMP22]], -1, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP24:%.*]] = add i32 [[TMP23]], 1, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP25:%.*]] = sext i32 [[TMP24]] to i64, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP26:%.*]] = mul nsw i64 10, [[TMP25]], !dbg [[DBG12]]
; CHECK-NEXT:    call void @nanos6_create_loop(ptr @task_info_var_main.10, ptr @task_invocation_info_main.6, ptr null, i64 16, ptr [[TMP2]], ptr [[TMP3]], i64 4, i64 [[TMP19]], i64 0, i64 [[TMP26]], i64 0, i64 0), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP27:%.*]] = load ptr, ptr [[TMP2]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[ARGS_END26:%.*]] = getelementptr i8, ptr [[TMP27]], i64 16, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP28:%.*]] = load ptr, ptr [[TMP3]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    call void @nanos6_submit_task(ptr [[TMP28]]), !dbg [[DBG12]]
; CHECK-NEXT:    br label [[FOR_END22:%.*]], !dbg [[DBG12]]
; CHECK:       final.end17:
; CHECK-NEXT:    store i32 0, ptr [[I3]], align 4, !dbg [[DBG18:![0-9]+]]
; CHECK-NEXT:    store i32 0, ptr [[J4]], align 4, !dbg [[DBG19:![0-9]+]]
; CHECK-NEXT:    br label [[FINAL_COND36:%.*]], !dbg [[DBG13]]
; CHECK:       codeRepl42:
; CHECK-NEXT:    store i64 0, ptr [[NUM_DEPS43]], align 8, !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP29:%.*]] = load i64, ptr [[NUM_DEPS43]], align 8, !dbg [[DBG13]]
; CHECK-NEXT:    call fastcc void @compute_lb.10(), !dbg [[DBG13]]
; CHECK-NEXT:    call fastcc void @compute_ub.11(), !dbg [[DBG13]]
; CHECK-NEXT:    call fastcc void @compute_step.12(), !dbg [[DBG13]]
; CHECK-NEXT:    store i32 0, ptr [[I3]], align 4, !dbg [[DBG13]]
; CHECK-NEXT:    call fastcc void @compute_lb.13(), !dbg [[DBG13]]
; CHECK-NEXT:    store i32 9, ptr [[I3]], align 4, !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP30:%.*]] = call fastcc i32 @compute_ub.14(ptr [[I3]]), !dbg [[DBG13]]
; CHECK-NEXT:    call fastcc void @compute_step.15(), !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP31:%.*]] = sub nuw nsw i32 [[TMP30]], 0, !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP32:%.*]] = sub i32 [[TMP31]], 1, !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP33:%.*]] = sdiv i32 [[TMP32]], 1, !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP34:%.*]] = add i32 [[TMP33]], 1, !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP35:%.*]] = sext i32 [[TMP34]] to i64, !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP36:%.*]] = mul nsw i64 10, [[TMP35]], !dbg [[DBG13]]
; CHECK-NEXT:    call void @nanos6_create_loop(ptr @task_info_var_main.20, ptr @task_invocation_info_main.16, ptr null, i64 16, ptr [[TMP4]], ptr [[TMP5]], i64 4, i64 [[TMP29]], i64 0, i64 [[TMP36]], i64 0, i64 0), !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP37:%.*]] = load ptr, ptr [[TMP4]], align 8, !dbg [[DBG13]]
; CHECK-NEXT:    [[ARGS_END44:%.*]] = getelementptr i8, ptr [[TMP37]], i64 16, !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP38:%.*]] = load ptr, ptr [[TMP5]], align 8, !dbg [[DBG13]]
; CHECK-NEXT:    call void @nanos6_submit_task(ptr [[TMP38]]), !dbg [[DBG13]]
; CHECK-NEXT:    br label [[FOR_END40:%.*]], !dbg [[DBG13]]
; CHECK:       final.end35:
; CHECK-NEXT:    store i32 0, ptr [[I5]], align 4, !dbg [[DBG20:![0-9]+]]
; CHECK-NEXT:    [[TMP39:%.*]] = load i32, ptr [[I5]], align 4, !dbg [[DBG21:![0-9]+]]
; CHECK-NEXT:    store i32 [[TMP39]], ptr [[J6]], align 4, !dbg [[DBG22:![0-9]+]]
; CHECK-NEXT:    br label [[FINAL_COND54:%.*]], !dbg [[DBG14]]
; CHECK:       codeRepl60:
; CHECK-NEXT:    store i64 0, ptr [[NUM_DEPS61]], align 8, !dbg [[DBG14]]
; CHECK-NEXT:    [[TMP40:%.*]] = load i64, ptr [[NUM_DEPS61]], align 8, !dbg [[DBG14]]
; CHECK-NEXT:    call fastcc void @compute_lb.16(), !dbg [[DBG14]]
; CHECK-NEXT:    call fastcc void @compute_ub.17(), !dbg [[DBG14]]
; CHECK-NEXT:    call fastcc void @compute_step.18(), !dbg [[DBG14]]
; CHECK-NEXT:    store i32 0, ptr [[I5]], align 4, !dbg [[DBG14]]
; CHECK-NEXT:    [[TMP41:%.*]] = call fastcc i32 @compute_lb.19(ptr [[I5]]), !dbg [[DBG14]]
; CHECK-NEXT:    store i32 9, ptr [[I5]], align 4, !dbg [[DBG14]]
; CHECK-NEXT:    call fastcc void @compute_ub.20(), !dbg [[DBG14]]
; CHECK-NEXT:    call fastcc void @compute_step.21(), !dbg [[DBG14]]
; CHECK-NEXT:    [[TMP42:%.*]] = sub i32 10, [[TMP41]], !dbg [[DBG14]]
; CHECK-NEXT:    [[TMP43:%.*]] = sub i32 [[TMP42]], 1, !dbg [[DBG14]]
; CHECK-NEXT:    [[TMP44:%.*]] = sdiv i32 [[TMP43]], 1, !dbg [[DBG14]]
; CHECK-NEXT:    [[TMP45:%.*]] = add i32 [[TMP44]], 1, !dbg [[DBG14]]
; CHECK-NEXT:    [[TMP46:%.*]] = sext i32 [[TMP45]] to i64, !dbg [[DBG14]]
; CHECK-NEXT:    [[TMP47:%.*]] = mul nsw i64 10, [[TMP46]], !dbg [[DBG14]]
; CHECK-NEXT:    call void @nanos6_create_loop(ptr @task_info_var_main.30, ptr @task_invocation_info_main.26, ptr null, i64 16, ptr [[TMP6]], ptr [[TMP7]], i64 4, i64 [[TMP40]], i64 0, i64 [[TMP47]], i64 0, i64 0), !dbg [[DBG14]]
; CHECK-NEXT:    [[TMP48:%.*]] = load ptr, ptr [[TMP6]], align 8, !dbg [[DBG14]]
; CHECK-NEXT:    [[ARGS_END62:%.*]] = getelementptr i8, ptr [[TMP48]], i64 16, !dbg [[DBG14]]
; CHECK-NEXT:    [[TMP49:%.*]] = load ptr, ptr [[TMP7]], align 8, !dbg [[DBG14]]
; CHECK-NEXT:    call void @nanos6_submit_task(ptr [[TMP49]]), !dbg [[DBG14]]
; CHECK-NEXT:    br label [[FOR_END58:%.*]], !dbg [[DBG14]]
; CHECK:       final.end53:
; CHECK-NEXT:    call void @nanos6_taskwait(ptr @[[GLOB4:[0-9]+]]), !dbg [[DBG23:![0-9]+]]
; CHECK-NEXT:    ret i32 0, !dbg [[DBG24:![0-9]+]]
; CHECK:       final.then:
; CHECK-NEXT:    call fastcc void @compute_lb(), !dbg [[DBG11]]
; CHECK-NEXT:    call fastcc void @compute_ub(), !dbg [[DBG11]]
; CHECK-NEXT:    call fastcc void @compute_step(), !dbg [[DBG11]]
; CHECK-NEXT:    store i32 0, ptr [[I]], align 4, !dbg [[DBG11]]
; CHECK-NEXT:    br label [[FOR_COND1:%.*]], !dbg [[DBG11]]
; CHECK:       for.cond1:
; CHECK-NEXT:    [[TMP50:%.*]] = load i32, ptr [[I]], align 4, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP51:%.*]] = icmp slt i32 [[TMP50]], 10, !dbg [[DBG11]]
; CHECK-NEXT:    br i1 [[TMP51]], label [[TMP52:%.*]], label [[FOR_END3:%.*]], !dbg [[DBG11]]
; CHECK:       52:
; CHECK-NEXT:    br label [[TMP53:%.*]], !dbg [[DBG11]]
; CHECK:       53:
; CHECK-NEXT:    br label [[FOR_BODY2:%.*]], !dbg [[DBG11]]
; CHECK:       for.body2:
; CHECK-NEXT:    call fastcc void @compute_lb.1(), !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP54:%.*]] = call fastcc i32 @compute_ub.2(ptr [[I]]), !dbg [[DBG11]]
; CHECK-NEXT:    call fastcc void @compute_step.3(), !dbg [[DBG11]]
; CHECK-NEXT:    store i32 10, ptr [[J]], align 4, !dbg [[DBG11]]
; CHECK-NEXT:    br label [[FOR_COND:%.*]], !dbg [[DBG11]]
; CHECK:       for.cond:
; CHECK-NEXT:    [[TMP55:%.*]] = load i32, ptr [[J]], align 4, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP56:%.*]] = icmp sgt i32 [[TMP55]], [[TMP54]], !dbg [[DBG11]]
; CHECK-NEXT:    br i1 [[TMP56]], label [[TMP57:%.*]], label [[FOR_END:%.*]], !dbg [[DBG11]]
; CHECK:       57:
; CHECK-NEXT:    br label [[TMP58:%.*]], !dbg [[DBG11]]
; CHECK:       58:
; CHECK-NEXT:    br label [[FOR_BODY:%.*]], !dbg [[DBG11]]
; CHECK:       for.body:
; CHECK-NEXT:    br label [[FOR_INCR:%.*]], !dbg [[DBG15]]
; CHECK:       final.then19:
; CHECK-NEXT:    call fastcc void @compute_lb.4(), !dbg [[DBG12]]
; CHECK-NEXT:    call fastcc void @compute_ub.5(), !dbg [[DBG12]]
; CHECK-NEXT:    call fastcc void @compute_step.6(), !dbg [[DBG12]]
; CHECK-NEXT:    store i32 0, ptr [[I1]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    br label [[FOR_COND13:%.*]], !dbg [[DBG12]]
; CHECK:       for.cond13:
; CHECK-NEXT:    [[TMP59:%.*]] = load i32, ptr [[I1]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP60:%.*]] = icmp slt i32 [[TMP59]], 10, !dbg [[DBG12]]
; CHECK-NEXT:    br i1 [[TMP60]], label [[TMP61:%.*]], label [[FOR_END15:%.*]], !dbg [[DBG12]]
; CHECK:       61:
; CHECK-NEXT:    br label [[TMP62:%.*]], !dbg [[DBG12]]
; CHECK:       62:
; CHECK-NEXT:    br label [[FOR_BODY14:%.*]], !dbg [[DBG12]]
; CHECK:       for.body14:
; CHECK-NEXT:    [[TMP63:%.*]] = call fastcc i32 @compute_lb.7(ptr [[I1]]), !dbg [[DBG12]]
; CHECK-NEXT:    call fastcc void @compute_ub.8(), !dbg [[DBG12]]
; CHECK-NEXT:    call fastcc void @compute_step.9(), !dbg [[DBG12]]
; CHECK-NEXT:    store i32 [[TMP63]], ptr [[J2]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    br label [[FOR_COND9:%.*]], !dbg [[DBG12]]
; CHECK:       for.cond9:
; CHECK-NEXT:    [[TMP64:%.*]] = load i32, ptr [[J2]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP65:%.*]] = icmp sgt i32 [[TMP64]], 0, !dbg [[DBG12]]
; CHECK-NEXT:    br i1 [[TMP65]], label [[TMP66:%.*]], label [[FOR_END11:%.*]], !dbg [[DBG12]]
; CHECK:       66:
; CHECK-NEXT:    br label [[TMP67:%.*]], !dbg [[DBG12]]
; CHECK:       67:
; CHECK-NEXT:    br label [[FOR_BODY10:%.*]], !dbg [[DBG12]]
; CHECK:       for.body10:
; CHECK-NEXT:    br label [[FOR_INCR12:%.*]], !dbg [[DBG18]]
; CHECK:       final.then37:
; CHECK-NEXT:    call fastcc void @compute_lb.10(), !dbg [[DBG13]]
; CHECK-NEXT:    call fastcc void @compute_ub.11(), !dbg [[DBG13]]
; CHECK-NEXT:    call fastcc void @compute_step.12(), !dbg [[DBG13]]
; CHECK-NEXT:    store i32 0, ptr [[I3]], align 4, !dbg [[DBG13]]
; CHECK-NEXT:    br label [[FOR_COND31:%.*]], !dbg [[DBG13]]
; CHECK:       for.cond31:
; CHECK-NEXT:    [[TMP68:%.*]] = load i32, ptr [[I3]], align 4, !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP69:%.*]] = icmp slt i32 [[TMP68]], 10, !dbg [[DBG13]]
; CHECK-NEXT:    br i1 [[TMP69]], label [[TMP70:%.*]], label [[FOR_END33:%.*]], !dbg [[DBG13]]
; CHECK:       70:
; CHECK-NEXT:    br label [[TMP71:%.*]], !dbg [[DBG13]]
; CHECK:       71:
; CHECK-NEXT:    br label [[FOR_BODY32:%.*]], !dbg [[DBG13]]
; CHECK:       for.body32:
; CHECK-NEXT:    call fastcc void @compute_lb.13(), !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP72:%.*]] = call fastcc i32 @compute_ub.14(ptr [[I3]]), !dbg [[DBG13]]
; CHECK-NEXT:    call fastcc void @compute_step.15(), !dbg [[DBG13]]
; CHECK-NEXT:    store i32 0, ptr [[J4]], align 4, !dbg [[DBG13]]
; CHECK-NEXT:    br label [[FOR_COND27:%.*]], !dbg [[DBG13]]
; CHECK:       for.cond27:
; CHECK-NEXT:    [[TMP73:%.*]] = load i32, ptr [[J4]], align 4, !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP74:%.*]] = icmp slt i32 [[TMP73]], [[TMP72]], !dbg [[DBG13]]
; CHECK-NEXT:    br i1 [[TMP74]], label [[TMP75:%.*]], label [[FOR_END29:%.*]], !dbg [[DBG13]]
; CHECK:       75:
; CHECK-NEXT:    br label [[TMP76:%.*]], !dbg [[DBG13]]
; CHECK:       76:
; CHECK-NEXT:    br label [[FOR_BODY28:%.*]], !dbg [[DBG13]]
; CHECK:       for.body28:
; CHECK-NEXT:    br label [[FOR_INCR30:%.*]], !dbg [[DBG20]]
; CHECK:       final.then55:
; CHECK-NEXT:    call fastcc void @compute_lb.16(), !dbg [[DBG14]]
; CHECK-NEXT:    call fastcc void @compute_ub.17(), !dbg [[DBG14]]
; CHECK-NEXT:    call fastcc void @compute_step.18(), !dbg [[DBG14]]
; CHECK-NEXT:    store i32 0, ptr [[I5]], align 4, !dbg [[DBG14]]
; CHECK-NEXT:    br label [[FOR_COND49:%.*]], !dbg [[DBG14]]
; CHECK:       for.cond49:
; CHECK-NEXT:    [[TMP77:%.*]] = load i32, ptr [[I5]], align 4, !dbg [[DBG14]]
; CHECK-NEXT:    [[TMP78:%.*]] = icmp slt i32 [[TMP77]], 10, !dbg [[DBG14]]
; CHECK-NEXT:    br i1 [[TMP78]], label [[TMP79:%.*]], label [[FOR_END51:%.*]], !dbg [[DBG14]]
; CHECK:       79:
; CHECK-NEXT:    br label [[TMP80:%.*]], !dbg [[DBG14]]
; CHECK:       80:
; CHECK-NEXT:    br label [[FOR_BODY50:%.*]], !dbg [[DBG14]]
; CHECK:       for.body50:
; CHECK-NEXT:    [[TMP81:%.*]] = call fastcc i32 @compute_lb.19(ptr [[I5]]), !dbg [[DBG14]]
; CHECK-NEXT:    call fastcc void @compute_ub.20(), !dbg [[DBG14]]
; CHECK-NEXT:    call fastcc void @compute_step.21(), !dbg [[DBG14]]
; CHECK-NEXT:    store i32 [[TMP81]], ptr [[J6]], align 4, !dbg [[DBG14]]
; CHECK-NEXT:    br label [[FOR_COND45:%.*]], !dbg [[DBG14]]
; CHECK:       for.cond45:
; CHECK-NEXT:    [[TMP82:%.*]] = load i32, ptr [[J6]], align 4, !dbg [[DBG14]]
; CHECK-NEXT:    [[TMP83:%.*]] = icmp slt i32 [[TMP82]], 10, !dbg [[DBG14]]
; CHECK-NEXT:    br i1 [[TMP83]], label [[TMP84:%.*]], label [[FOR_END47:%.*]], !dbg [[DBG14]]
; CHECK:       84:
; CHECK-NEXT:    br label [[TMP85:%.*]], !dbg [[DBG14]]
; CHECK:       85:
; CHECK-NEXT:    br label [[FOR_BODY46:%.*]], !dbg [[DBG14]]
; CHECK:       for.body46:
; CHECK-NEXT:    br label [[FOR_INCR48:%.*]], !dbg [[DBG23]]
; CHECK:       for.end:
; CHECK-NEXT:    br label [[FOR_INCR4:%.*]], !dbg [[DBG11]]
; CHECK:       for.incr:
; CHECK-NEXT:    [[TMP86:%.*]] = load i32, ptr [[J]], align 4, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP87:%.*]] = add i32 [[TMP86]], -1, !dbg [[DBG11]]
; CHECK-NEXT:    store i32 [[TMP87]], ptr [[J]], align 4, !dbg [[DBG11]]
; CHECK-NEXT:    br label [[FOR_COND]], !dbg [[DBG11]]
; CHECK:       for.end3:
; CHECK-NEXT:    br label [[FINAL_END:%.*]], !dbg [[DBG11]]
; CHECK:       for.incr4:
; CHECK-NEXT:    [[TMP88:%.*]] = load i32, ptr [[I]], align 4, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP89:%.*]] = add i32 [[TMP88]], 1, !dbg [[DBG11]]
; CHECK-NEXT:    store i32 [[TMP89]], ptr [[I]], align 4, !dbg [[DBG11]]
; CHECK-NEXT:    br label [[FOR_COND1]], !dbg [[DBG11]]
; CHECK:       final.cond:
; CHECK-NEXT:    [[TMP90:%.*]] = call i32 @nanos6_in_final(), !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP91:%.*]] = icmp ne i32 [[TMP90]], 0, !dbg [[DBG11]]
; CHECK-NEXT:    br i1 [[TMP91]], label [[FINAL_THEN:%.*]], label [[CODEREPL:%.*]], !dbg [[DBG11]]
; CHECK:       for.end7:
; CHECK-NEXT:    br label [[FINAL_END]], !dbg [[DBG11]]
; CHECK:       for.end11:
; CHECK-NEXT:    br label [[FOR_INCR16:%.*]], !dbg [[DBG12]]
; CHECK:       for.incr12:
; CHECK-NEXT:    [[TMP92:%.*]] = load i32, ptr [[J2]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP93:%.*]] = add i32 [[TMP92]], -1, !dbg [[DBG12]]
; CHECK-NEXT:    store i32 [[TMP93]], ptr [[J2]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    br label [[FOR_COND9]], !dbg [[DBG12]]
; CHECK:       for.end15:
; CHECK-NEXT:    br label [[FINAL_END17:%.*]], !dbg [[DBG12]]
; CHECK:       for.incr16:
; CHECK-NEXT:    [[TMP94:%.*]] = load i32, ptr [[I1]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP95:%.*]] = add i32 [[TMP94]], 1, !dbg [[DBG12]]
; CHECK-NEXT:    store i32 [[TMP95]], ptr [[I1]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    br label [[FOR_COND13]], !dbg [[DBG12]]
; CHECK:       final.cond18:
; CHECK-NEXT:    [[TMP96:%.*]] = call i32 @nanos6_in_final(), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP97:%.*]] = icmp ne i32 [[TMP96]], 0, !dbg [[DBG12]]
; CHECK-NEXT:    br i1 [[TMP97]], label [[FINAL_THEN19:%.*]], label [[CODEREPL24:%.*]], !dbg [[DBG12]]
; CHECK:       for.end22:
; CHECK-NEXT:    br label [[FINAL_END17]], !dbg [[DBG12]]
; CHECK:       for.end29:
; CHECK-NEXT:    br label [[FOR_INCR34:%.*]], !dbg [[DBG13]]
; CHECK:       for.incr30:
; CHECK-NEXT:    [[TMP98:%.*]] = load i32, ptr [[J4]], align 4, !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP99:%.*]] = add i32 [[TMP98]], 1, !dbg [[DBG13]]
; CHECK-NEXT:    store i32 [[TMP99]], ptr [[J4]], align 4, !dbg [[DBG13]]
; CHECK-NEXT:    br label [[FOR_COND27]], !dbg [[DBG13]]
; CHECK:       for.end33:
; CHECK-NEXT:    br label [[FINAL_END35:%.*]], !dbg [[DBG13]]
; CHECK:       for.incr34:
; CHECK-NEXT:    [[TMP100:%.*]] = load i32, ptr [[I3]], align 4, !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP101:%.*]] = add i32 [[TMP100]], 1, !dbg [[DBG13]]
; CHECK-NEXT:    store i32 [[TMP101]], ptr [[I3]], align 4, !dbg [[DBG13]]
; CHECK-NEXT:    br label [[FOR_COND31]], !dbg [[DBG13]]
; CHECK:       final.cond36:
; CHECK-NEXT:    [[TMP102:%.*]] = call i32 @nanos6_in_final(), !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP103:%.*]] = icmp ne i32 [[TMP102]], 0, !dbg [[DBG13]]
; CHECK-NEXT:    br i1 [[TMP103]], label [[FINAL_THEN37:%.*]], label [[CODEREPL42:%.*]], !dbg [[DBG13]]
; CHECK:       for.end40:
; CHECK-NEXT:    br label [[FINAL_END35]], !dbg [[DBG13]]
; CHECK:       for.end47:
; CHECK-NEXT:    br label [[FOR_INCR52:%.*]], !dbg [[DBG14]]
; CHECK:       for.incr48:
; CHECK-NEXT:    [[TMP104:%.*]] = load i32, ptr [[J6]], align 4, !dbg [[DBG14]]
; CHECK-NEXT:    [[TMP105:%.*]] = add i32 [[TMP104]], 1, !dbg [[DBG14]]
; CHECK-NEXT:    store i32 [[TMP105]], ptr [[J6]], align 4, !dbg [[DBG14]]
; CHECK-NEXT:    br label [[FOR_COND45]], !dbg [[DBG14]]
; CHECK:       for.end51:
; CHECK-NEXT:    br label [[FINAL_END53:%.*]], !dbg [[DBG14]]
; CHECK:       for.incr52:
; CHECK-NEXT:    [[TMP106:%.*]] = load i32, ptr [[I5]], align 4, !dbg [[DBG14]]
; CHECK-NEXT:    [[TMP107:%.*]] = add i32 [[TMP106]], 1, !dbg [[DBG14]]
; CHECK-NEXT:    store i32 [[TMP107]], ptr [[I5]], align 4, !dbg [[DBG14]]
; CHECK-NEXT:    br label [[FOR_COND49]], !dbg [[DBG14]]
; CHECK:       final.cond54:
; CHECK-NEXT:    [[TMP108:%.*]] = call i32 @nanos6_in_final(), !dbg [[DBG14]]
; CHECK-NEXT:    [[TMP109:%.*]] = icmp ne i32 [[TMP108]], 0, !dbg [[DBG14]]
; CHECK-NEXT:    br i1 [[TMP109]], label [[FINAL_THEN55:%.*]], label [[CODEREPL60:%.*]], !dbg [[DBG14]]
; CHECK:       for.end58:
; CHECK-NEXT:    br label [[FINAL_END53]], !dbg [[DBG14]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_lb
; CHECK-SAME: () unnamed_addr #[[ATTR1:[0-9]+]] !dbg [[DBG25:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret void, !dbg [[DBG27:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_ub
; CHECK-SAME: () unnamed_addr #[[ATTR1]] !dbg [[DBG29:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret void, !dbg [[DBG30:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_step
; CHECK-SAME: () unnamed_addr #[[ATTR1]] !dbg [[DBG32:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret void, !dbg [[DBG33:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_lb.1
; CHECK-SAME: () unnamed_addr #[[ATTR1]] !dbg [[DBG35:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret void, !dbg [[DBG36:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_ub.2
; CHECK-SAME: (ptr nocapture readonly [[I:%.*]]) unnamed_addr #[[ATTR2:[0-9]+]] !dbg [[DBG38:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[I]], align 4, !dbg [[DBG39:![0-9]+]]
; CHECK-NEXT:    ret i32 [[TMP0]], !dbg [[DBG39]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_step.3
; CHECK-SAME: () unnamed_addr #[[ATTR1]] !dbg [[DBG41:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret void, !dbg [[DBG42:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_lb.4
; CHECK-SAME: () unnamed_addr #[[ATTR1]] !dbg [[DBG44:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret void, !dbg [[DBG45:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_ub.5
; CHECK-SAME: () unnamed_addr #[[ATTR1]] !dbg [[DBG47:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret void, !dbg [[DBG48:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_step.6
; CHECK-SAME: () unnamed_addr #[[ATTR1]] !dbg [[DBG50:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret void, !dbg [[DBG51:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_lb.7
; CHECK-SAME: (ptr nocapture readonly [[I:%.*]]) unnamed_addr #[[ATTR2]] !dbg [[DBG53:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[I]], align 4, !dbg [[DBG54:![0-9]+]]
; CHECK-NEXT:    ret i32 [[TMP0]], !dbg [[DBG54]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_ub.8
; CHECK-SAME: () unnamed_addr #[[ATTR1]] !dbg [[DBG56:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret void, !dbg [[DBG57:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_step.9
; CHECK-SAME: () unnamed_addr #[[ATTR1]] !dbg [[DBG59:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret void, !dbg [[DBG60:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_lb.10
; CHECK-SAME: () unnamed_addr #[[ATTR1]] !dbg [[DBG62:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret void, !dbg [[DBG63:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_ub.11
; CHECK-SAME: () unnamed_addr #[[ATTR1]] !dbg [[DBG65:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret void, !dbg [[DBG66:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_step.12
; CHECK-SAME: () unnamed_addr #[[ATTR1]] !dbg [[DBG68:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret void, !dbg [[DBG69:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_lb.13
; CHECK-SAME: () unnamed_addr #[[ATTR1]] !dbg [[DBG71:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret void, !dbg [[DBG72:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_ub.14
; CHECK-SAME: (ptr nocapture readonly [[I:%.*]]) unnamed_addr #[[ATTR2]] !dbg [[DBG74:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[I]], align 4, !dbg [[DBG75:![0-9]+]]
; CHECK-NEXT:    ret i32 [[TMP0]], !dbg [[DBG75]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_step.15
; CHECK-SAME: () unnamed_addr #[[ATTR1]] !dbg [[DBG77:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret void, !dbg [[DBG78:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_lb.16
; CHECK-SAME: () unnamed_addr #[[ATTR1]] !dbg [[DBG80:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret void, !dbg [[DBG81:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_ub.17
; CHECK-SAME: () unnamed_addr #[[ATTR1]] !dbg [[DBG83:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret void, !dbg [[DBG84:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_step.18
; CHECK-SAME: () unnamed_addr #[[ATTR1]] !dbg [[DBG86:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret void, !dbg [[DBG87:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_lb.19
; CHECK-SAME: (ptr nocapture readonly [[I:%.*]]) unnamed_addr #[[ATTR2]] !dbg [[DBG89:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[I]], align 4, !dbg [[DBG90:![0-9]+]]
; CHECK-NEXT:    ret i32 [[TMP0]], !dbg [[DBG90]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_ub.20
; CHECK-SAME: () unnamed_addr #[[ATTR1]] !dbg [[DBG92:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret void, !dbg [[DBG93:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_step.21
; CHECK-SAME: () unnamed_addr #[[ATTR1]] !dbg [[DBG95:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret void, !dbg [[DBG96:![0-9]+]]
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_task_region_main
; CHECK-SAME: (ptr nocapture writeonly [[TASK_ARGS:%.*]], ptr nocapture readonly [[LOOP_BOUNDS:%.*]], ptr nocapture readnone [[ADDRESS_TRANSLATION_TABLE:%.*]]) #[[ATTR3:[0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[LOOP_BOUNDS_VAL:%.*]] = load i64, ptr [[LOOP_BOUNDS]], align 8
; CHECK-NEXT:    [[TMP0:%.*]] = getelementptr i8, ptr [[LOOP_BOUNDS]], i64 8
; CHECK-NEXT:    [[LOOP_BOUNDS_VAL1:%.*]] = load i64, ptr [[TMP0]], align 8
; CHECK-NEXT:    store i32 0, ptr [[TASK_ARGS]], align 4, !dbg [[DBG98:![0-9]+]]
; CHECK-NEXT:    [[TMP1:%.*]] = icmp ult i64 [[LOOP_BOUNDS_VAL]], [[LOOP_BOUNDS_VAL1]], !dbg [[DBG98]]
; CHECK-NEXT:    br i1 [[TMP1]], label [[FOR_INCR8_I_PREHEADER:%.*]], label [[NANOS6_UNPACKED_TASK_REGION_MAIN_EXIT:%.*]], !dbg [[DBG98]]
; CHECK:       for.incr8.i.preheader:
; CHECK-NEXT:    [[GEP_J:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN:%.*]], ptr [[TASK_ARGS]], i64 0, i32 1
; CHECK-NEXT:    [[TMP2:%.*]] = add i64 [[LOOP_BOUNDS_VAL1]], -1, !dbg [[DBG98]]
; CHECK-NEXT:    [[TMP3:%.*]] = udiv i64 [[TMP2]], 10, !dbg [[DBG98]]
; CHECK-NEXT:    [[TMP4:%.*]] = mul nuw i64 [[TMP3]], 10, !dbg [[DBG98]]
; CHECK-NEXT:    [[DOTNEG_I_LE:%.*]] = sub i64 [[TMP4]], [[TMP2]], !dbg [[DBG98]]
; CHECK-NEXT:    [[TMP5:%.*]] = trunc i64 [[TMP3]] to i32, !dbg [[DBG98]]
; CHECK-NEXT:    [[TMP6:%.*]] = trunc i64 [[DOTNEG_I_LE]] to i32, !dbg [[DBG98]]
; CHECK-NEXT:    [[TMP7:%.*]] = add i32 [[TMP6]], 10, !dbg [[DBG98]]
; CHECK-NEXT:    store i32 [[TMP5]], ptr [[TASK_ARGS]], align 4, !dbg [[DBG98]]
; CHECK-NEXT:    store i32 [[TMP7]], ptr [[GEP_J]], align 4, !dbg [[DBG98]]
; CHECK-NEXT:    br label [[NANOS6_UNPACKED_TASK_REGION_MAIN_EXIT]]
; CHECK:       nanos6_unpacked_task_region_main.exit:
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_constructor_register_task_info() {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    tail call void @nanos6_register_task_info(ptr nonnull @task_info_var_main)
; CHECK-NEXT:    tail call void @nanos6_register_task_info(ptr nonnull @task_info_var_main.10)
; CHECK-NEXT:    tail call void @nanos6_register_task_info(ptr nonnull @task_info_var_main.20)
; CHECK-NEXT:    tail call void @nanos6_register_task_info(ptr nonnull @task_info_var_main.30)
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_task_region_main.5
; CHECK-SAME: (ptr nocapture writeonly [[TASK_ARGS:%.*]], ptr nocapture readonly [[LOOP_BOUNDS:%.*]], ptr nocapture readnone [[ADDRESS_TRANSLATION_TABLE:%.*]]) #[[ATTR3]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[LOOP_BOUNDS_VAL:%.*]] = load i64, ptr [[LOOP_BOUNDS]], align 8
; CHECK-NEXT:    [[TMP0:%.*]] = getelementptr i8, ptr [[LOOP_BOUNDS]], i64 8
; CHECK-NEXT:    [[LOOP_BOUNDS_VAL1:%.*]] = load i64, ptr [[TMP0]], align 8
; CHECK-NEXT:    store i32 0, ptr [[TASK_ARGS]], align 4, !dbg [[DBG100:![0-9]+]]
; CHECK-NEXT:    [[TMP1:%.*]] = icmp ult i64 [[LOOP_BOUNDS_VAL]], [[LOOP_BOUNDS_VAL1]], !dbg [[DBG100]]
; CHECK-NEXT:    br i1 [[TMP1]], label [[FOR_INCR23_I_PREHEADER:%.*]], label [[NANOS6_UNPACKED_TASK_REGION_MAIN_4_EXIT:%.*]], !dbg [[DBG100]]
; CHECK:       for.incr23.i.preheader:
; CHECK-NEXT:    [[GEP_J2:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN_0:%.*]], ptr [[TASK_ARGS]], i64 0, i32 1
; CHECK-NEXT:    [[TMP2:%.*]] = add i64 [[LOOP_BOUNDS_VAL1]], -1, !dbg [[DBG100]]
; CHECK-NEXT:    [[TMP3:%.*]] = udiv i64 [[TMP2]], 9, !dbg [[DBG100]]
; CHECK-NEXT:    [[TMP4:%.*]] = mul nuw i64 [[TMP3]], 9, !dbg [[DBG100]]
; CHECK-NEXT:    [[DOTNEG_I_LE:%.*]] = sub i64 [[TMP4]], [[TMP2]], !dbg [[DBG100]]
; CHECK-NEXT:    [[TMP5:%.*]] = trunc i64 [[TMP3]] to i32, !dbg [[DBG100]]
; CHECK-NEXT:    [[TMP6:%.*]] = trunc i64 [[DOTNEG_I_LE]] to i32, !dbg [[DBG100]]
; CHECK-NEXT:    [[TMP7:%.*]] = add i32 [[TMP6]], 9, !dbg [[DBG100]]
; CHECK-NEXT:    store i32 [[TMP5]], ptr [[TASK_ARGS]], align 4, !dbg [[DBG100]]
; CHECK-NEXT:    store i32 [[TMP7]], ptr [[GEP_J2]], align 4, !dbg [[DBG100]]
; CHECK-NEXT:    br label [[NANOS6_UNPACKED_TASK_REGION_MAIN_4_EXIT]]
; CHECK:       nanos6_unpacked_task_region_main.4.exit:
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_task_region_main.15
; CHECK-SAME: (ptr nocapture writeonly [[TASK_ARGS:%.*]], ptr nocapture readonly [[LOOP_BOUNDS:%.*]], ptr nocapture readnone [[ADDRESS_TRANSLATION_TABLE:%.*]]) #[[ATTR3]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[LOOP_BOUNDS_VAL:%.*]] = load i64, ptr [[LOOP_BOUNDS]], align 8
; CHECK-NEXT:    [[TMP0:%.*]] = getelementptr i8, ptr [[LOOP_BOUNDS]], i64 8
; CHECK-NEXT:    [[LOOP_BOUNDS_VAL1:%.*]] = load i64, ptr [[TMP0]], align 8
; CHECK-NEXT:    store i32 9, ptr [[TASK_ARGS]], align 4, !dbg [[DBG102:![0-9]+]]
; CHECK-NEXT:    [[TMP1:%.*]] = icmp ult i64 [[LOOP_BOUNDS_VAL]], [[LOOP_BOUNDS_VAL1]], !dbg [[DBG102]]
; CHECK-NEXT:    br i1 [[TMP1]], label [[FOR_INCR41_I_PREHEADER:%.*]], label [[NANOS6_UNPACKED_TASK_REGION_MAIN_14_EXIT:%.*]], !dbg [[DBG102]]
; CHECK:       for.incr41.i.preheader:
; CHECK-NEXT:    [[GEP_J4:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN_1:%.*]], ptr [[TASK_ARGS]], i64 0, i32 1
; CHECK-NEXT:    [[TMP2:%.*]] = add i64 [[LOOP_BOUNDS_VAL1]], -1, !dbg [[DBG102]]
; CHECK-NEXT:    [[TMP3:%.*]] = udiv i64 [[TMP2]], 9, !dbg [[DBG102]]
; CHECK-NEXT:    [[DOTNEG_I_LE:%.*]] = mul i64 [[TMP3]], 4294967287, !dbg [[DBG102]]
; CHECK-NEXT:    [[TMP4:%.*]] = add i64 [[DOTNEG_I_LE]], [[TMP2]], !dbg [[DBG102]]
; CHECK-NEXT:    [[TMP5:%.*]] = trunc i64 [[TMP3]] to i32, !dbg [[DBG102]]
; CHECK-NEXT:    [[TMP6:%.*]] = trunc i64 [[TMP4]] to i32, !dbg [[DBG102]]
; CHECK-NEXT:    store i32 [[TMP5]], ptr [[TASK_ARGS]], align 4, !dbg [[DBG102]]
; CHECK-NEXT:    store i32 [[TMP6]], ptr [[GEP_J4]], align 4, !dbg [[DBG102]]
; CHECK-NEXT:    br label [[NANOS6_UNPACKED_TASK_REGION_MAIN_14_EXIT]]
; CHECK:       nanos6_unpacked_task_region_main.14.exit:
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_task_region_main.25
; CHECK-SAME: (ptr nocapture writeonly [[TASK_ARGS:%.*]], ptr nocapture readonly [[LOOP_BOUNDS:%.*]], ptr nocapture readnone [[ADDRESS_TRANSLATION_TABLE:%.*]]) #[[ATTR3]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[LOOP_BOUNDS_VAL:%.*]] = load i64, ptr [[LOOP_BOUNDS]], align 8
; CHECK-NEXT:    [[TMP0:%.*]] = getelementptr i8, ptr [[LOOP_BOUNDS]], i64 8
; CHECK-NEXT:    [[LOOP_BOUNDS_VAL1:%.*]] = load i64, ptr [[TMP0]], align 8
; CHECK-NEXT:    store i32 9, ptr [[TASK_ARGS]], align 4, !dbg [[DBG104:![0-9]+]]
; CHECK-NEXT:    [[TMP1:%.*]] = icmp ult i64 [[LOOP_BOUNDS_VAL]], [[LOOP_BOUNDS_VAL1]], !dbg [[DBG104]]
; CHECK-NEXT:    br i1 [[TMP1]], label [[FOR_INCR59_I_PREHEADER:%.*]], label [[NANOS6_UNPACKED_TASK_REGION_MAIN_24_EXIT:%.*]], !dbg [[DBG104]]
; CHECK:       for.incr59.i.preheader:
; CHECK-NEXT:    [[GEP_J6:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN_2:%.*]], ptr [[TASK_ARGS]], i64 0, i32 1
; CHECK-NEXT:    [[TMP2:%.*]] = add i64 [[LOOP_BOUNDS_VAL1]], -1, !dbg [[DBG104]]
; CHECK-NEXT:    [[TMP3:%.*]] = udiv i64 [[TMP2]], 10, !dbg [[DBG104]]
; CHECK-NEXT:    [[DOTNEG_I_LE:%.*]] = mul i64 [[TMP3]], 4294967286, !dbg [[DBG104]]
; CHECK-NEXT:    [[TMP4:%.*]] = add i64 [[DOTNEG_I_LE]], [[TMP2]], !dbg [[DBG104]]
; CHECK-NEXT:    [[TMP5:%.*]] = trunc i64 [[TMP3]] to i32, !dbg [[DBG104]]
; CHECK-NEXT:    [[TMP6:%.*]] = trunc i64 [[TMP4]] to i32, !dbg [[DBG104]]
; CHECK-NEXT:    store i32 [[TMP5]], ptr [[TASK_ARGS]], align 4, !dbg [[DBG104]]
; CHECK-NEXT:    store i32 [[TMP6]], ptr [[GEP_J6]], align 4, !dbg [[DBG104]]
; CHECK-NEXT:    br label [[NANOS6_UNPACKED_TASK_REGION_MAIN_24_EXIT]]
; CHECK:       nanos6_unpacked_task_region_main.24.exit:
; CHECK-NEXT:    ret void
;
