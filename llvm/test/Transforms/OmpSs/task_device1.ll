; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --function-signature --check-globals --include-generated-funcs
; RUN: opt %s -passes=ompss-2 -S | FileCheck %s
; ModuleID = 'task_device.ll'
source_filename = "task_device.ll"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._depend_unpack_t = type { i32, i32, i32, i32 }
%struct._depend_unpack_t.0 = type { ptr, i64, i64, i64 }

@a = global ptr null, align 8

; Check that we priorize the call args in the first
; positions of the task_args. Used by the runtime
; to call the kernel

; int* a;
; #pragma oss task device(cuda) ndrange(1, 1, 1) in( {[1]a, j=0;10})
; void foo(char x, short y, int z);
; int main() {
;   foo(1, 2, 3);
;   #pragma oss task device(cuda)
;   {}
; }

; Function Attrs: noinline nounwind optnone
define dso_local i32 @main() #0 !dbg !5 {
entry:
  %call_arg = alloca i8, align 1
  %call_arg1 = alloca i16, align 2
  %call_arg2 = alloca i32, align 4
  %j.call_arg = alloca i32, align 4
  store i8 1, ptr %call_arg, align 1, !dbg !9
  store i16 2, ptr %call_arg1, align 2, !dbg !10
  store i32 3, ptr %call_arg2, align 4, !dbg !11
  %0 = call token @llvm.directive.region.entry() [ "DIR.OSS"([5 x i8] c"TASK\00"), "QUAL.OSS.PRIVATE"(ptr %j.call_arg, i32 undef), "QUAL.OSS.FIRSTPRIVATE"(ptr %call_arg, i8 undef), "QUAL.OSS.FIRSTPRIVATE"(ptr %call_arg1, i16 undef), "QUAL.OSS.FIRSTPRIVATE"(ptr %call_arg2, i32 undef), "QUAL.OSS.DEVICE"(i32 1), "QUAL.OSS.DEVICE.DEVFUNC"([4 x i8] c"foo\00"), "QUAL.OSS.DEVICE.NDRANGE"(i32 1, i32 1, i32 1), "QUAL.OSS.DEVICE.CALL.ORDER"(ptr %call_arg, ptr %call_arg1, ptr %call_arg2), "QUAL.OSS.SHARED"(ptr @a, ptr undef), "QUAL.OSS.MULTIDEP.RANGE.IN"(ptr %j.call_arg, ptr @compute_dep, ptr %j.call_arg, ptr @a, [15 x i8] c"{[1]a, j=0;10}\00", ptr @compute_dep.1, ptr %j.call_arg, ptr @a), "QUAL.OSS.DECL.SOURCE"([13 x i8] c"device.c:2:9\00") ], !dbg !12
  call void @llvm.directive.region.exit(token %0), !dbg !12
  ret i32 0, !dbg !13
}

; Function Attrs: nounwind
declare token @llvm.directive.region.entry() #1

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token) #1

define internal %struct._depend_unpack_t @compute_dep(ptr %j, i64 %0) #2 !dbg !14 {
entry:
  %retval = alloca %struct._depend_unpack_t, align 4
  %j.addr = alloca ptr, align 8
  %.addr = alloca i64, align 8
  store ptr %j, ptr %j.addr, align 8
  store i64 %0, ptr %.addr, align 8
  switch i64 %0, label %3 [
    i64 0, label %4
  ]

1:                                                ; preds = %4, %3
  %2 = load %struct._depend_unpack_t, ptr %retval, align 4, !dbg !15
  ret %struct._depend_unpack_t %2, !dbg !15

3:                                                ; preds = %entry
  br label %1

4:                                                ; preds = %entry
  %5 = load i32, ptr %j, align 4, !dbg !17
  %6 = getelementptr inbounds %struct._depend_unpack_t, ptr %retval, i32 0, i32 0
  store i32 0, ptr %6, align 4
  %7 = getelementptr inbounds %struct._depend_unpack_t, ptr %retval, i32 0, i32 1
  store i32 %5, ptr %7, align 4
  %8 = getelementptr inbounds %struct._depend_unpack_t, ptr %retval, i32 0, i32 2
  store i32 9, ptr %8, align 4
  %9 = getelementptr inbounds %struct._depend_unpack_t, ptr %retval, i32 0, i32 3
  store i32 1, ptr %9, align 4
  br label %1
}

define internal %struct._depend_unpack_t.0 @compute_dep.1(ptr %j, ptr %a) #2 !dbg !18 {
entry:
  %retval = alloca %struct._depend_unpack_t.0, align 8
  %j.addr = alloca ptr, align 8
  %a.addr = alloca ptr, align 8
  store ptr %j, ptr %j.addr, align 8
  store ptr %a, ptr %a.addr, align 8
  %0 = load ptr, ptr %a, align 8, !dbg !19
  %1 = getelementptr inbounds %struct._depend_unpack_t.0, ptr %retval, i32 0, i32 0
  store ptr %0, ptr %1, align 8
  %2 = getelementptr inbounds %struct._depend_unpack_t.0, ptr %retval, i32 0, i32 1
  store i64 4, ptr %2, align 8
  %3 = getelementptr inbounds %struct._depend_unpack_t.0, ptr %retval, i32 0, i32 2
  store i64 0, ptr %3, align 8
  %4 = getelementptr inbounds %struct._depend_unpack_t.0, ptr %retval, i32 0, i32 3
  store i64 4, ptr %4, align 8
  %5 = load %struct._depend_unpack_t.0, ptr %retval, align 8, !dbg !19
  ret %struct._depend_unpack_t.0 %5, !dbg !19
}

attributes #0 = { noinline nounwind optnone "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
attributes #1 = { nounwind }
attributes #2 = { "min-legal-vector-width"="0" }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C11, file: !1, producer: "", isOptimized: false, runtimeVersion: 0, emissionKind: NoDebug, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "<stdin>", directory: "")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 1, !"wchar_size", i32 4}
!4 = !{!""}
!5 = distinct !DISubprogram(name: "main", scope: !6, file: !6, line: 5, type: !7, scopeLine: 5, spFlags: DISPFlagDefinition, unit: !0)
!6 = !DIFile(filename: "task_device.ll", directory: "")
!7 = !DISubroutineType(types: !8)
!8 = !{}
!9 = !DILocation(line: 6, column: 7, scope: !5)
!10 = !DILocation(line: 6, column: 10, scope: !5)
!11 = !DILocation(line: 6, column: 13, scope: !5)
!12 = !DILocation(line: 6, column: 3, scope: !5)
!13 = !DILocation(line: 7, column: 1, scope: !5)
!14 = distinct !DISubprogram(linkageName: "compute_dep", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0)
!15 = !DILocation(line: 2, column: 63, scope: !16)
!16 = !DILexicalBlockFile(scope: !14, file: !6, discriminator: 0)
!17 = !DILocation(line: 2, column: 59, scope: !16)
!18 = distinct !DISubprogram(linkageName: "compute_dep.1", scope: !1, file: !1, type: !7, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0)
!19 = !DILocation(line: 2, column: 56, scope: !20)
!20 = !DILexicalBlockFile(scope: !18, file: !6, discriminator: 0)
;.
; CHECK: @a = global ptr null, align 8
; CHECK: @nanos6_versions = internal constant [3 x i64] [i64 0, i64 1, i64 0]
; CHECK: @[[GLOB0:[0-9]+]] = private unnamed_addr constant [15 x i8] c"task_device.ll\00", align 1
; CHECK: @[[GLOB1:[0-9]+]] = private unnamed_addr constant [19 x i8] c"task_device.ll:6:3\00", align 1
; CHECK: @[[GLOB2:[0-9]+]] = private unnamed_addr constant [13 x i8] c"device.c:2:9\00", align 1
; CHECK: @[[GLOB3:[0-9]+]] = private unnamed_addr constant [4 x i8] c"foo\00", align 1
; CHECK: @sizeof_table_var_main = internal constant [5 x i32] [i32 1, i32 2, i32 4, i32 8, i32 4], align 64
; CHECK: @offset_table_var_main = internal constant [5 x i32] [i32 60, i32 62, i32 64, i32 72, i32 80]
; CHECK: @arg_idx_table_var_main = internal constant [1 x i32] [i32 3]
; CHECK: @[[GLOB4:[0-9]+]] = private unnamed_addr constant [15 x i8] c"{[1]a, j=0
; CHECK: @task_invocation_info_main = internal constant %nanos6_task_invocation_info_t { ptr @[[GLOB1]] }, align 64
; CHECK: @implementations_var_main = internal constant [1 x %nanos6_task_implementation_info_t] [%nanos6_task_implementation_info_t { i32 1, ptr @nanos6_ol_task_region_main, ptr null, ptr null, ptr @[[GLOB2]], ptr @[[GLOB3]] }], align 64
; CHECK: @nanos6_reduction_initializers_main = internal constant [0 x ptr] zeroinitializer, align 64
; CHECK: @nanos6_reduction_combiners_main = internal constant [0 x ptr] zeroinitializer
; CHECK: @task_info_var_main = internal global %nanos6_task_info_t { i32 1, ptr @nanos6_ol_deps_main, ptr null, ptr null, i32 1, ptr @implementations_var_main, ptr null, ptr null, ptr @nanos6_reduction_initializers_main, ptr @nanos6_reduction_combiners_main, ptr null, ptr null, i32 5, ptr @sizeof_table_var_main, ptr @offset_table_var_main, ptr @arg_idx_table_var_main, i32 -1 }, align 64
; CHECK: @llvm.global_ctors = appending global [2 x { i32, ptr, ptr }] [{ i32, ptr, ptr } { i32 65535, ptr @nanos6_constructor_check_version, ptr null }, { i32, ptr, ptr } { i32 65535, ptr @nanos6_constructor_register_task_info, ptr null }]
; CHECK: @[[GLOB5:[0-9]+]] = private unnamed_addr constant [19 x i8] c"task_device.ll:6:3\00", align 1
; CHECK: @[[GLOB6:[0-9]+]] = private unnamed_addr constant [13 x i8] c"device.c:2:9\00", align 1
; CHECK: @[[GLOB7:[0-9]+]] = private unnamed_addr constant [4 x i8] c"foo\00", align 1
; CHECK: @sizeof_table_var_main.1 = internal constant [5 x i32] [i32 1, i32 2, i32 4, i32 8, i32 4], align 64
; CHECK: @offset_table_var_main.2 = internal constant [5 x i32] [i32 60, i32 62, i32 64, i32 72, i32 80]
; CHECK: @arg_idx_table_var_main.3 = internal constant [1 x i32] [i32 3]
; CHECK: @[[GLOB8:[0-9]+]] = private unnamed_addr constant [15 x i8] c"{[1]a, j=0
; CHECK: @task_invocation_info_main.8 = internal constant %nanos6_task_invocation_info_t { ptr @[[GLOB5]] }, align 64
; CHECK: @implementations_var_main.9 = internal constant [1 x %nanos6_task_implementation_info_t] [%nanos6_task_implementation_info_t { i32 1, ptr @nanos6_ol_task_region_main.5, ptr null, ptr null, ptr @[[GLOB6]], ptr @[[GLOB7]] }], align 64
; CHECK: @nanos6_reduction_initializers_main.10 = internal constant [0 x ptr] zeroinitializer, align 64
; CHECK: @nanos6_reduction_combiners_main.11 = internal constant [0 x ptr] zeroinitializer
; CHECK: @task_info_var_main.12 = internal global %nanos6_task_info_t { i32 1, ptr @nanos6_ol_deps_main.7, ptr null, ptr null, i32 1, ptr @implementations_var_main.9, ptr null, ptr null, ptr @nanos6_reduction_initializers_main.10, ptr @nanos6_reduction_combiners_main.11, ptr null, ptr null, i32 5, ptr @sizeof_table_var_main.1, ptr @offset_table_var_main.2, ptr @arg_idx_table_var_main.3, i32 -1 }, align 64
;.
; CHECK-LABEL: define {{[^@]+}}@main
; CHECK-SAME: () #[[ATTR0:[0-9]+]] !dbg [[DBG5:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CALL_ARG:%.*]] = alloca i8, align 1
; CHECK-NEXT:    [[CALL_ARG1:%.*]] = alloca i16, align 2
; CHECK-NEXT:    [[CALL_ARG2:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[J_CALL_ARG:%.*]] = alloca i32, align 4
; CHECK-NEXT:    store i8 1, ptr [[CALL_ARG]], align 1, !dbg [[DBG9:![0-9]+]]
; CHECK-NEXT:    store i16 2, ptr [[CALL_ARG1]], align 2, !dbg [[DBG10:![0-9]+]]
; CHECK-NEXT:    store i32 3, ptr [[CALL_ARG2]], align 4, !dbg [[DBG11:![0-9]+]]
; CHECK-NEXT:    [[TMP0:%.*]] = alloca ptr, align 8, !dbg [[DBG12:![0-9]+]]
; CHECK-NEXT:    [[TMP1:%.*]] = alloca ptr, align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[NUM_DEPS:%.*]] = alloca i64, align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[J_CALL_ARG_REMAP:%.*]] = alloca i32, align 4, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP2:%.*]] = alloca ptr, align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP3:%.*]] = alloca ptr, align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[NUM_DEPS5:%.*]] = alloca i64, align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[J_CALL_ARG_REMAP6:%.*]] = alloca i32, align 4, !dbg [[DBG12]]
; CHECK-NEXT:    br label [[FINAL_COND:%.*]], !dbg [[DBG12]]
; CHECK:       codeRepl4:
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 8, ptr [[TMP2]]), !dbg [[DBG12]]
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 8, ptr [[TMP3]]), !dbg [[DBG12]]
; CHECK-NEXT:    store i64 0, ptr [[NUM_DEPS5]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    br label [[TMP4:%.*]], !dbg [[DBG12]]
; CHECK:       4:
; CHECK-NEXT:    store i32 0, ptr [[J_CALL_ARG]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP5:%.*]] = call [[STRUCT__DEPEND_UNPACK_T:%.*]] @[[COMPUTE_DEP:[a-zA-Z0-9_$\"\\.-]*[a-zA-Z_$\"\\.-][a-zA-Z0-9_$\"\\.-]*]](ptr [[J_CALL_ARG]], i64 0), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP6:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T]] [[TMP5]], 0, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP7:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T]] [[TMP5]], 2, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP8:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T]] [[TMP5]], 3, !dbg [[DBG12]]
; CHECK-NEXT:    store i32 [[TMP6]], ptr [[J_CALL_ARG]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    br label [[FOR_COND7:%.*]], !dbg [[DBG12]]
; CHECK:       for.cond7:
; CHECK-NEXT:    [[TMP9:%.*]] = load i32, ptr [[J_CALL_ARG]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP10:%.*]] = icmp sle i32 [[TMP9]], [[TMP7]], !dbg [[DBG12]]
; CHECK-NEXT:    br i1 [[TMP10]], label [[FOR_BODY8:%.*]], label [[TMP15:%.*]], !dbg [[DBG12]]
; CHECK:       for.body8:
; CHECK-NEXT:    [[TMP11:%.*]] = call [[STRUCT__DEPEND_UNPACK_T]] @[[COMPUTE_DEP]](ptr [[J_CALL_ARG]], i64 0), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP12:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T]] [[TMP11]], 1, !dbg [[DBG12]]
; CHECK-NEXT:    store i32 [[TMP12]], ptr [[J_CALL_ARG_REMAP6]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP13:%.*]] = load i64, ptr [[NUM_DEPS5]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP14:%.*]] = add i64 [[TMP13]], 1, !dbg [[DBG12]]
; CHECK-NEXT:    store i64 [[TMP14]], ptr [[NUM_DEPS5]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    br label [[FOR_INCR9:%.*]], !dbg [[DBG12]]
; CHECK:       15:
; CHECK-NEXT:    [[TMP16:%.*]] = load i64, ptr [[NUM_DEPS5]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    call void @nanos6_create_task(ptr @task_info_var_main.12, ptr @task_invocation_info_main.8, ptr null, i64 96, ptr [[TMP2]], ptr [[TMP3]], i64 0, i64 [[TMP16]]), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP17:%.*]] = load ptr, ptr [[TMP2]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[ARGS_END10:%.*]] = getelementptr i8, ptr [[TMP17]], i64 96, !dbg [[DBG12]]
; CHECK-NEXT:    [[GEP_DEV_NDRANGE011:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN_0:%.*]], ptr [[TMP17]], i32 0, i32 0, !dbg [[DBG12]]
; CHECK-NEXT:    store i64 1, ptr [[GEP_DEV_NDRANGE011]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[GEP_DEV_NDRANGE112:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN_0]], ptr [[TMP17]], i32 0, i32 1, !dbg [[DBG12]]
; CHECK-NEXT:    store i64 -1, ptr [[GEP_DEV_NDRANGE112]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[GEP_DEV_NDRANGE213:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN_0]], ptr [[TMP17]], i32 0, i32 2, !dbg [[DBG12]]
; CHECK-NEXT:    store i64 -1, ptr [[GEP_DEV_NDRANGE213]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[GEP_DEV_NDRANGE014:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN_0]], ptr [[TMP17]], i32 0, i32 3, !dbg [[DBG12]]
; CHECK-NEXT:    store i64 1, ptr [[GEP_DEV_NDRANGE014]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[GEP_DEV_NDRANGE115:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN_0]], ptr [[TMP17]], i32 0, i32 4, !dbg [[DBG12]]
; CHECK-NEXT:    store i64 -1, ptr [[GEP_DEV_NDRANGE115]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[GEP_DEV_NDRANGE216:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN_0]], ptr [[TMP17]], i32 0, i32 5, !dbg [[DBG12]]
; CHECK-NEXT:    store i64 -1, ptr [[GEP_DEV_NDRANGE216]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[GEP_DEV_SHM17:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN_0]], ptr [[TMP17]], i32 0, i32 6, !dbg [[DBG12]]
; CHECK-NEXT:    store i64 0, ptr [[GEP_DEV_SHM17]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[GEP_DEV_IS_GRID18:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN_0]], ptr [[TMP17]], i32 0, i32 7, !dbg [[DBG12]]
; CHECK-NEXT:    store i32 0, ptr [[GEP_DEV_IS_GRID18]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    [[GEP_A19:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN_0]], ptr [[TMP17]], i32 0, i32 11, !dbg [[DBG12]]
; CHECK-NEXT:    store ptr @a, ptr [[GEP_A19]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[GEP_CALL_ARG20:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN_0]], ptr [[TMP17]], i32 0, i32 8, !dbg [[DBG12]]
; CHECK-NEXT:    call void @llvm.memcpy.p0.p0.i64(ptr align 1 [[GEP_CALL_ARG20]], ptr align 1 [[CALL_ARG]], i64 1, i1 false), !dbg [[DBG12]]
; CHECK-NEXT:    [[GEP_CALL_ARG121:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN_0]], ptr [[TMP17]], i32 0, i32 9, !dbg [[DBG12]]
; CHECK-NEXT:    call void @llvm.memcpy.p0.p0.i64(ptr align 2 [[GEP_CALL_ARG121]], ptr align 2 [[CALL_ARG1]], i64 2, i1 false), !dbg [[DBG12]]
; CHECK-NEXT:    [[GEP_CALL_ARG222:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN_0]], ptr [[TMP17]], i32 0, i32 10, !dbg [[DBG12]]
; CHECK-NEXT:    call void @llvm.memcpy.p0.p0.i64(ptr align 4 [[GEP_CALL_ARG222]], ptr align 4 [[CALL_ARG2]], i64 4, i1 false), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP18:%.*]] = load ptr, ptr [[TMP3]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    call void @nanos6_submit_task(ptr [[TMP18]]), !dbg [[DBG12]]
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 8, ptr [[TMP2]]), !dbg [[DBG12]]
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 8, ptr [[TMP3]]), !dbg [[DBG12]]
; CHECK-NEXT:    br label [[FINAL_END:%.*]], !dbg [[DBG12]]
; CHECK:       final.end:
; CHECK-NEXT:    ret i32 0, !dbg [[DBG13:![0-9]+]]
; CHECK:       codeRepl:
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 8, ptr [[TMP0]]), !dbg [[DBG12]]
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 8, ptr [[TMP1]]), !dbg [[DBG12]]
; CHECK-NEXT:    store i64 0, ptr [[NUM_DEPS]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    br label [[TMP19:%.*]], !dbg [[DBG12]]
; CHECK:       19:
; CHECK-NEXT:    store i32 0, ptr [[J_CALL_ARG]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP20:%.*]] = call [[STRUCT__DEPEND_UNPACK_T]] @[[COMPUTE_DEP]](ptr [[J_CALL_ARG]], i64 0), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP21:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T]] [[TMP20]], 0, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP22:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T]] [[TMP20]], 2, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP23:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T]] [[TMP20]], 3, !dbg [[DBG12]]
; CHECK-NEXT:    store i32 [[TMP21]], ptr [[J_CALL_ARG]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    br label [[FOR_COND:%.*]], !dbg [[DBG12]]
; CHECK:       for.cond:
; CHECK-NEXT:    [[TMP24:%.*]] = load i32, ptr [[J_CALL_ARG]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP25:%.*]] = icmp sle i32 [[TMP24]], [[TMP22]], !dbg [[DBG12]]
; CHECK-NEXT:    br i1 [[TMP25]], label [[FOR_BODY:%.*]], label [[TMP30:%.*]], !dbg [[DBG12]]
; CHECK:       for.body:
; CHECK-NEXT:    [[TMP26:%.*]] = call [[STRUCT__DEPEND_UNPACK_T]] @[[COMPUTE_DEP]](ptr [[J_CALL_ARG]], i64 0), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP27:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T]] [[TMP26]], 1, !dbg [[DBG12]]
; CHECK-NEXT:    store i32 [[TMP27]], ptr [[J_CALL_ARG_REMAP]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP28:%.*]] = load i64, ptr [[NUM_DEPS]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP29:%.*]] = add i64 [[TMP28]], 1, !dbg [[DBG12]]
; CHECK-NEXT:    store i64 [[TMP29]], ptr [[NUM_DEPS]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    br label [[FOR_INCR:%.*]], !dbg [[DBG12]]
; CHECK:       30:
; CHECK-NEXT:    [[TMP31:%.*]] = load i64, ptr [[NUM_DEPS]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    call void @nanos6_create_task(ptr @task_info_var_main, ptr @task_invocation_info_main, ptr null, i64 96, ptr [[TMP0]], ptr [[TMP1]], i64 2, i64 [[TMP31]]), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP32:%.*]] = load ptr, ptr [[TMP0]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[ARGS_END:%.*]] = getelementptr i8, ptr [[TMP32]], i64 96, !dbg [[DBG12]]
; CHECK-NEXT:    [[GEP_DEV_NDRANGE0:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN:%.*]], ptr [[TMP32]], i32 0, i32 0, !dbg [[DBG12]]
; CHECK-NEXT:    store i64 1, ptr [[GEP_DEV_NDRANGE0]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[GEP_DEV_NDRANGE1:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN]], ptr [[TMP32]], i32 0, i32 1, !dbg [[DBG12]]
; CHECK-NEXT:    store i64 -1, ptr [[GEP_DEV_NDRANGE1]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[GEP_DEV_NDRANGE2:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN]], ptr [[TMP32]], i32 0, i32 2, !dbg [[DBG12]]
; CHECK-NEXT:    store i64 -1, ptr [[GEP_DEV_NDRANGE2]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[GEP_DEV_NDRANGE01:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN]], ptr [[TMP32]], i32 0, i32 3, !dbg [[DBG12]]
; CHECK-NEXT:    store i64 1, ptr [[GEP_DEV_NDRANGE01]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[GEP_DEV_NDRANGE12:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN]], ptr [[TMP32]], i32 0, i32 4, !dbg [[DBG12]]
; CHECK-NEXT:    store i64 -1, ptr [[GEP_DEV_NDRANGE12]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[GEP_DEV_NDRANGE23:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN]], ptr [[TMP32]], i32 0, i32 5, !dbg [[DBG12]]
; CHECK-NEXT:    store i64 -1, ptr [[GEP_DEV_NDRANGE23]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[GEP_DEV_SHM:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN]], ptr [[TMP32]], i32 0, i32 6, !dbg [[DBG12]]
; CHECK-NEXT:    store i64 0, ptr [[GEP_DEV_SHM]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[GEP_DEV_IS_GRID:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN]], ptr [[TMP32]], i32 0, i32 7, !dbg [[DBG12]]
; CHECK-NEXT:    store i32 0, ptr [[GEP_DEV_IS_GRID]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    [[GEP_A:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN]], ptr [[TMP32]], i32 0, i32 11, !dbg [[DBG12]]
; CHECK-NEXT:    store ptr @a, ptr [[GEP_A]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[GEP_CALL_ARG:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN]], ptr [[TMP32]], i32 0, i32 8, !dbg [[DBG12]]
; CHECK-NEXT:    call void @llvm.memcpy.p0.p0.i64(ptr align 1 [[GEP_CALL_ARG]], ptr align 1 [[CALL_ARG]], i64 1, i1 false), !dbg [[DBG12]]
; CHECK-NEXT:    [[GEP_CALL_ARG1:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN]], ptr [[TMP32]], i32 0, i32 9, !dbg [[DBG12]]
; CHECK-NEXT:    call void @llvm.memcpy.p0.p0.i64(ptr align 2 [[GEP_CALL_ARG1]], ptr align 2 [[CALL_ARG1]], i64 2, i1 false), !dbg [[DBG12]]
; CHECK-NEXT:    [[GEP_CALL_ARG2:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN]], ptr [[TMP32]], i32 0, i32 10, !dbg [[DBG12]]
; CHECK-NEXT:    call void @llvm.memcpy.p0.p0.i64(ptr align 4 [[GEP_CALL_ARG2]], ptr align 4 [[CALL_ARG2]], i64 4, i1 false), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP33:%.*]] = load ptr, ptr [[TMP1]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    call void @nanos6_submit_task(ptr [[TMP33]]), !dbg [[DBG12]]
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 8, ptr [[TMP0]]), !dbg [[DBG12]]
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 8, ptr [[TMP1]]), !dbg [[DBG12]]
; CHECK-NEXT:    br label [[FINAL_END]], !dbg [[DBG12]]
; CHECK:       final.cond:
; CHECK-NEXT:    [[TMP34:%.*]] = call i32 @nanos6_in_final(), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP35:%.*]] = icmp ne i32 [[TMP34]], 0, !dbg [[DBG12]]
; CHECK-NEXT:    br i1 [[TMP35]], label [[CODEREPL:%.*]], label [[CODEREPL4:%.*]], !dbg [[DBG12]]
; CHECK:       for.incr:
; CHECK-NEXT:    [[TMP36:%.*]] = load i32, ptr [[J_CALL_ARG]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP37:%.*]] = add i32 [[TMP36]], [[TMP23]], !dbg [[DBG12]]
; CHECK-NEXT:    store i32 [[TMP37]], ptr [[J_CALL_ARG]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    br label [[FOR_COND]], !dbg [[DBG12]]
; CHECK:       for.incr9:
; CHECK-NEXT:    [[TMP38:%.*]] = load i32, ptr [[J_CALL_ARG]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP39:%.*]] = add i32 [[TMP38]], [[TMP8]], !dbg [[DBG12]]
; CHECK-NEXT:    store i32 [[TMP39]], ptr [[J_CALL_ARG]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    br label [[FOR_COND7]], !dbg [[DBG12]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_dep
; CHECK-SAME: (ptr [[J:%.*]], i64 [[TMP0:%.*]]) #[[ATTR2:[0-9]+]] !dbg [[DBG14:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[RETVAL:%.*]] = alloca [[STRUCT__DEPEND_UNPACK_T:%.*]], align 4
; CHECK-NEXT:    [[J_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    [[DOTADDR:%.*]] = alloca i64, align 8
; CHECK-NEXT:    store ptr [[J]], ptr [[J_ADDR]], align 8
; CHECK-NEXT:    store i64 [[TMP0]], ptr [[DOTADDR]], align 8
; CHECK-NEXT:    switch i64 [[TMP0]], label [[TMP3:%.*]] [
; CHECK-NEXT:      i64 0, label [[TMP4:%.*]]
; CHECK-NEXT:    ]
; CHECK:       1:
; CHECK-NEXT:    [[TMP2:%.*]] = load [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], align 4, !dbg [[DBG15:![0-9]+]]
; CHECK-NEXT:    ret [[STRUCT__DEPEND_UNPACK_T]] [[TMP2]], !dbg [[DBG15]]
; CHECK:       3:
; CHECK-NEXT:    br label [[TMP1:%.*]]
; CHECK:       4:
; CHECK-NEXT:    [[TMP5:%.*]] = load i32, ptr [[J]], align 4, !dbg [[DBG17:![0-9]+]]
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], i32 0, i32 0
; CHECK-NEXT:    store i32 0, ptr [[TMP6]], align 4
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], i32 0, i32 1
; CHECK-NEXT:    store i32 [[TMP5]], ptr [[TMP7]], align 4
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], i32 0, i32 2
; CHECK-NEXT:    store i32 9, ptr [[TMP8]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T]], ptr [[RETVAL]], i32 0, i32 3
; CHECK-NEXT:    store i32 1, ptr [[TMP9]], align 4
; CHECK-NEXT:    br label [[TMP1]]
;
;
; CHECK-LABEL: define {{[^@]+}}@compute_dep.1
; CHECK-SAME: (ptr [[J:%.*]], ptr [[A:%.*]]) #[[ATTR2]] !dbg [[DBG18:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[RETVAL:%.*]] = alloca [[STRUCT__DEPEND_UNPACK_T_0:%.*]], align 8
; CHECK-NEXT:    [[J_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    [[A_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr [[J]], ptr [[J_ADDR]], align 8
; CHECK-NEXT:    store ptr [[A]], ptr [[A_ADDR]], align 8
; CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[A]], align 8, !dbg [[DBG19:![0-9]+]]
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_0]], ptr [[RETVAL]], i32 0, i32 0
; CHECK-NEXT:    store ptr [[TMP0]], ptr [[TMP1]], align 8
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_0]], ptr [[RETVAL]], i32 0, i32 1
; CHECK-NEXT:    store i64 4, ptr [[TMP2]], align 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_0]], ptr [[RETVAL]], i32 0, i32 2
; CHECK-NEXT:    store i64 0, ptr [[TMP3]], align 8
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_0]], ptr [[RETVAL]], i32 0, i32 3
; CHECK-NEXT:    store i64 4, ptr [[TMP4]], align 8
; CHECK-NEXT:    [[TMP5:%.*]] = load [[STRUCT__DEPEND_UNPACK_T_0]], ptr [[RETVAL]], align 8, !dbg [[DBG19]]
; CHECK-NEXT:    ret [[STRUCT__DEPEND_UNPACK_T_0]] [[TMP5]], !dbg [[DBG19]]
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_constructor_check_version() {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @nanos6_check_version(i64 1, ptr @nanos6_versions, ptr @[[GLOB0]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_unpacked_task_region_main
; CHECK-SAME: (ptr [[CALL_ARG:%.*]], ptr [[CALL_ARG1:%.*]], ptr [[CALL_ARG2:%.*]], ptr [[A:%.*]], ptr [[J_CALL_ARG:%.*]], ptr [[DEVICE_ENV:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) !dbg [[DBG21:![0-9]+]] {
; CHECK-NEXT:  newFuncRoot:
; CHECK-NEXT:    br label [[FINAL_THEN:%.*]], !dbg [[DBG22:![0-9]+]]
; CHECK:       final.then:
; CHECK-NEXT:    br label [[DOTEXITSTUB:%.*]], !dbg [[DBG23:![0-9]+]]
; CHECK:       .exitStub:
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_task_region_main
; CHECK-SAME: (ptr [[TASK_ARGS:%.*]], ptr [[DEVICE_ENV:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_A:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN:%.*]], ptr [[TASK_ARGS]], i32 0, i32 11
; CHECK-NEXT:    [[LOAD_GEP_A:%.*]] = load ptr, ptr [[GEP_A]], align 8
; CHECK-NEXT:    [[GEP_J_CALL_ARG:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN]], ptr [[TASK_ARGS]], i32 0, i32 12
; CHECK-NEXT:    [[GEP_CALL_ARG:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN]], ptr [[TASK_ARGS]], i32 0, i32 8
; CHECK-NEXT:    [[GEP_CALL_ARG1:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN]], ptr [[TASK_ARGS]], i32 0, i32 9
; CHECK-NEXT:    [[GEP_CALL_ARG2:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN]], ptr [[TASK_ARGS]], i32 0, i32 10
; CHECK-NEXT:    [[TLATE_LOAD_GEP_A:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr [[LOAD_GEP_A]], ptr [[TLATE_LOAD_GEP_A]], align 8
; CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[TLATE_LOAD_GEP_A]], align 8
; CHECK-NEXT:    [[TMP1:%.*]] = icmp ne ptr [[ADDRESS_TRANSLATION_TABLE]], null
; CHECK-NEXT:    br i1 [[TMP1]], label [[TLATE_IF:%.*]], label [[TLATE_END:%.*]]
; CHECK:       end:
; CHECK-NEXT:    call void @nanos6_unpacked_task_region_main(ptr [[GEP_CALL_ARG]], ptr [[GEP_CALL_ARG1]], ptr [[GEP_CALL_ARG2]], ptr [[TMP7:%.*]], ptr [[GEP_J_CALL_ARG]], ptr [[DEVICE_ENV]], ptr [[ADDRESS_TRANSLATION_TABLE]])
; CHECK-NEXT:    ret void
; CHECK:       tlate.if:
; CHECK-NEXT:    [[LOCAL_LOOKUP_A:%.*]] = getelementptr [[NANOS6_ADDRESS_TRANSLATION_ENTRY_T:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE]], i32 0, i32 0
; CHECK-NEXT:    [[TMP2:%.*]] = load i64, ptr [[LOCAL_LOOKUP_A]], align 8
; CHECK-NEXT:    [[DEVICE_LOOKUP_A:%.*]] = getelementptr [[NANOS6_ADDRESS_TRANSLATION_ENTRY_T]], ptr [[ADDRESS_TRANSLATION_TABLE]], i32 0, i32 1
; CHECK-NEXT:    [[TMP3:%.*]] = load i64, ptr [[DEVICE_LOOKUP_A]], align 8
; CHECK-NEXT:    [[TMP4:%.*]] = sub i64 0, [[TMP2]]
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[TMP0]], i64 [[TMP4]]
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[TMP5]], i64 [[TMP3]]
; CHECK-NEXT:    store ptr [[TMP6]], ptr [[TLATE_LOAD_GEP_A]], align 8
; CHECK-NEXT:    br label [[TLATE_END]]
; CHECK:       tlate.end:
; CHECK-NEXT:    [[TMP7]] = load ptr, ptr [[TLATE_LOAD_GEP_A]], align 8
; CHECK-NEXT:    br label [[END:%.*]]
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_unpacked_deps_main
; CHECK-SAME: (ptr [[CALL_ARG:%.*]], ptr [[CALL_ARG1:%.*]], ptr [[CALL_ARG2:%.*]], ptr [[A:%.*]], ptr [[J_CALL_ARG:%.*]], ptr [[LOOP_BOUNDS:%.*]], ptr [[HANDLER:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[J_CALL_ARG_REMAP:%.*]] = alloca i32, align 4
; CHECK-NEXT:    br label [[TMP0:%.*]]
; CHECK:       0:
; CHECK-NEXT:    store i32 0, ptr [[J_CALL_ARG]], align 4
; CHECK-NEXT:    [[TMP1:%.*]] = call [[STRUCT__DEPEND_UNPACK_T:%.*]] @[[COMPUTE_DEP]](ptr [[J_CALL_ARG]], i64 0)
; CHECK-NEXT:    [[TMP2:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T]] [[TMP1]], 0
; CHECK-NEXT:    [[TMP3:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T]] [[TMP1]], 2
; CHECK-NEXT:    [[TMP4:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T]] [[TMP1]], 3
; CHECK-NEXT:    store i32 [[TMP2]], ptr [[J_CALL_ARG]], align 4
; CHECK-NEXT:    br label [[FOR_COND:%.*]]
; CHECK:       for.cond:
; CHECK-NEXT:    [[TMP5:%.*]] = load i32, ptr [[J_CALL_ARG]], align 4
; CHECK-NEXT:    [[TMP6:%.*]] = icmp sle i32 [[TMP5]], [[TMP3]]
; CHECK-NEXT:    br i1 [[TMP6]], label [[FOR_BODY:%.*]], label [[TMP15:%.*]]
; CHECK:       for.body:
; CHECK-NEXT:    [[TMP7:%.*]] = call [[STRUCT__DEPEND_UNPACK_T]] @[[COMPUTE_DEP]](ptr [[J_CALL_ARG]], i64 0)
; CHECK-NEXT:    [[TMP8:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T]] [[TMP7]], 1
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[J_CALL_ARG_REMAP]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = call [[STRUCT__DEPEND_UNPACK_T_0:%.*]] @[[COMPUTE_DEP_1:[a-zA-Z0-9_$\"\\.-]*[a-zA-Z_$\"\\.-][a-zA-Z0-9_$\"\\.-]*]](ptr [[J_CALL_ARG_REMAP]], ptr [[A]])
; CHECK-NEXT:    [[TMP10:%.*]] = call [[STRUCT__DEPEND_UNPACK_T_0]] @[[COMPUTE_DEP_1]](ptr [[J_CALL_ARG_REMAP]], ptr [[A]])
; CHECK-NEXT:    [[TMP11:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_0]] [[TMP9]], 0
; CHECK-NEXT:    [[TMP12:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_0]] [[TMP9]], 1
; CHECK-NEXT:    [[TMP13:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_0]] [[TMP9]], 2
; CHECK-NEXT:    [[TMP14:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_0]] [[TMP10]], 3
; CHECK-NEXT:    call void @nanos6_register_region_read_depinfo1(ptr [[HANDLER]], i32 0, ptr @[[GLOB4]], ptr [[TMP11]], i64 [[TMP12]], i64 [[TMP13]], i64 [[TMP14]])
; CHECK-NEXT:    br label [[FOR_INCR:%.*]]
; CHECK:       15:
; CHECK-NEXT:    ret void
; CHECK:       for.incr:
; CHECK-NEXT:    [[TMP16:%.*]] = load i32, ptr [[J_CALL_ARG]], align 4
; CHECK-NEXT:    [[TMP17:%.*]] = add i32 [[TMP16]], [[TMP4]]
; CHECK-NEXT:    store i32 [[TMP17]], ptr [[J_CALL_ARG]], align 4
; CHECK-NEXT:    br label [[FOR_COND]]
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_deps_main
; CHECK-SAME: (ptr [[TASK_ARGS:%.*]], ptr [[LOOP_BOUNDS:%.*]], ptr [[HANDLER:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_A:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN:%.*]], ptr [[TASK_ARGS]], i32 0, i32 11
; CHECK-NEXT:    [[LOAD_GEP_A:%.*]] = load ptr, ptr [[GEP_A]], align 8
; CHECK-NEXT:    [[GEP_J_CALL_ARG:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN]], ptr [[TASK_ARGS]], i32 0, i32 12
; CHECK-NEXT:    [[GEP_CALL_ARG:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN]], ptr [[TASK_ARGS]], i32 0, i32 8
; CHECK-NEXT:    [[GEP_CALL_ARG1:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN]], ptr [[TASK_ARGS]], i32 0, i32 9
; CHECK-NEXT:    [[GEP_CALL_ARG2:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN]], ptr [[TASK_ARGS]], i32 0, i32 10
; CHECK-NEXT:    br label [[END:%.*]]
; CHECK:       end:
; CHECK-NEXT:    call void @nanos6_unpacked_deps_main(ptr [[GEP_CALL_ARG]], ptr [[GEP_CALL_ARG1]], ptr [[GEP_CALL_ARG2]], ptr [[LOAD_GEP_A]], ptr [[GEP_J_CALL_ARG]], ptr [[LOOP_BOUNDS]], ptr [[HANDLER]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_constructor_register_task_info() {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @nanos6_register_task_info(ptr @task_info_var_main)
; CHECK-NEXT:    call void @nanos6_register_task_info(ptr @task_info_var_main.12)
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_unpacked_task_region_main.4
; CHECK-SAME: (ptr [[CALL_ARG:%.*]], ptr [[CALL_ARG1:%.*]], ptr [[CALL_ARG2:%.*]], ptr [[A:%.*]], ptr [[J_CALL_ARG:%.*]], ptr [[DEVICE_ENV:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) !dbg [[DBG24:![0-9]+]] {
; CHECK-NEXT:  newFuncRoot:
; CHECK-NEXT:    br label [[TMP0:%.*]], !dbg [[DBG25:![0-9]+]]
; CHECK:       0:
; CHECK-NEXT:    br label [[DOTEXITSTUB:%.*]], !dbg [[DBG26:![0-9]+]]
; CHECK:       .exitStub:
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_task_region_main.5
; CHECK-SAME: (ptr [[TASK_ARGS:%.*]], ptr [[DEVICE_ENV:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_A:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN_0:%.*]], ptr [[TASK_ARGS]], i32 0, i32 11
; CHECK-NEXT:    [[LOAD_GEP_A:%.*]] = load ptr, ptr [[GEP_A]], align 8
; CHECK-NEXT:    [[GEP_J_CALL_ARG:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN_0]], ptr [[TASK_ARGS]], i32 0, i32 12
; CHECK-NEXT:    [[GEP_CALL_ARG:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN_0]], ptr [[TASK_ARGS]], i32 0, i32 8
; CHECK-NEXT:    [[GEP_CALL_ARG1:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN_0]], ptr [[TASK_ARGS]], i32 0, i32 9
; CHECK-NEXT:    [[GEP_CALL_ARG2:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN_0]], ptr [[TASK_ARGS]], i32 0, i32 10
; CHECK-NEXT:    [[TLATE_LOAD_GEP_A:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr [[LOAD_GEP_A]], ptr [[TLATE_LOAD_GEP_A]], align 8
; CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[TLATE_LOAD_GEP_A]], align 8
; CHECK-NEXT:    [[TMP1:%.*]] = icmp ne ptr [[ADDRESS_TRANSLATION_TABLE]], null
; CHECK-NEXT:    br i1 [[TMP1]], label [[TLATE_IF:%.*]], label [[TLATE_END:%.*]]
; CHECK:       end:
; CHECK-NEXT:    call void @nanos6_unpacked_task_region_main.4(ptr [[GEP_CALL_ARG]], ptr [[GEP_CALL_ARG1]], ptr [[GEP_CALL_ARG2]], ptr [[TMP7:%.*]], ptr [[GEP_J_CALL_ARG]], ptr [[DEVICE_ENV]], ptr [[ADDRESS_TRANSLATION_TABLE]])
; CHECK-NEXT:    ret void
; CHECK:       tlate.if:
; CHECK-NEXT:    [[LOCAL_LOOKUP_A:%.*]] = getelementptr [[NANOS6_ADDRESS_TRANSLATION_ENTRY_T:%.*]], ptr [[ADDRESS_TRANSLATION_TABLE]], i32 0, i32 0
; CHECK-NEXT:    [[TMP2:%.*]] = load i64, ptr [[LOCAL_LOOKUP_A]], align 8
; CHECK-NEXT:    [[DEVICE_LOOKUP_A:%.*]] = getelementptr [[NANOS6_ADDRESS_TRANSLATION_ENTRY_T]], ptr [[ADDRESS_TRANSLATION_TABLE]], i32 0, i32 1
; CHECK-NEXT:    [[TMP3:%.*]] = load i64, ptr [[DEVICE_LOOKUP_A]], align 8
; CHECK-NEXT:    [[TMP4:%.*]] = sub i64 0, [[TMP2]]
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[TMP0]], i64 [[TMP4]]
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[TMP5]], i64 [[TMP3]]
; CHECK-NEXT:    store ptr [[TMP6]], ptr [[TLATE_LOAD_GEP_A]], align 8
; CHECK-NEXT:    br label [[TLATE_END]]
; CHECK:       tlate.end:
; CHECK-NEXT:    [[TMP7]] = load ptr, ptr [[TLATE_LOAD_GEP_A]], align 8
; CHECK-NEXT:    br label [[END:%.*]]
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_unpacked_deps_main.6
; CHECK-SAME: (ptr [[CALL_ARG:%.*]], ptr [[CALL_ARG1:%.*]], ptr [[CALL_ARG2:%.*]], ptr [[A:%.*]], ptr [[J_CALL_ARG:%.*]], ptr [[LOOP_BOUNDS:%.*]], ptr [[HANDLER:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[J_CALL_ARG_REMAP:%.*]] = alloca i32, align 4
; CHECK-NEXT:    br label [[TMP0:%.*]]
; CHECK:       0:
; CHECK-NEXT:    store i32 0, ptr [[J_CALL_ARG]], align 4
; CHECK-NEXT:    [[TMP1:%.*]] = call [[STRUCT__DEPEND_UNPACK_T:%.*]] @[[COMPUTE_DEP]](ptr [[J_CALL_ARG]], i64 0)
; CHECK-NEXT:    [[TMP2:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T]] [[TMP1]], 0
; CHECK-NEXT:    [[TMP3:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T]] [[TMP1]], 2
; CHECK-NEXT:    [[TMP4:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T]] [[TMP1]], 3
; CHECK-NEXT:    store i32 [[TMP2]], ptr [[J_CALL_ARG]], align 4
; CHECK-NEXT:    br label [[FOR_COND:%.*]]
; CHECK:       for.cond:
; CHECK-NEXT:    [[TMP5:%.*]] = load i32, ptr [[J_CALL_ARG]], align 4
; CHECK-NEXT:    [[TMP6:%.*]] = icmp sle i32 [[TMP5]], [[TMP3]]
; CHECK-NEXT:    br i1 [[TMP6]], label [[FOR_BODY:%.*]], label [[TMP15:%.*]]
; CHECK:       for.body:
; CHECK-NEXT:    [[TMP7:%.*]] = call [[STRUCT__DEPEND_UNPACK_T]] @[[COMPUTE_DEP]](ptr [[J_CALL_ARG]], i64 0)
; CHECK-NEXT:    [[TMP8:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T]] [[TMP7]], 1
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[J_CALL_ARG_REMAP]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = call [[STRUCT__DEPEND_UNPACK_T_0:%.*]] @[[COMPUTE_DEP_1]](ptr [[J_CALL_ARG_REMAP]], ptr [[A]])
; CHECK-NEXT:    [[TMP10:%.*]] = call [[STRUCT__DEPEND_UNPACK_T_0]] @[[COMPUTE_DEP_1]](ptr [[J_CALL_ARG_REMAP]], ptr [[A]])
; CHECK-NEXT:    [[TMP11:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_0]] [[TMP9]], 0
; CHECK-NEXT:    [[TMP12:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_0]] [[TMP9]], 1
; CHECK-NEXT:    [[TMP13:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_0]] [[TMP9]], 2
; CHECK-NEXT:    [[TMP14:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_0]] [[TMP10]], 3
; CHECK-NEXT:    call void @nanos6_register_region_read_depinfo1(ptr [[HANDLER]], i32 0, ptr @[[GLOB8]], ptr [[TMP11]], i64 [[TMP12]], i64 [[TMP13]], i64 [[TMP14]])
; CHECK-NEXT:    br label [[FOR_INCR:%.*]]
; CHECK:       15:
; CHECK-NEXT:    ret void
; CHECK:       for.incr:
; CHECK-NEXT:    [[TMP16:%.*]] = load i32, ptr [[J_CALL_ARG]], align 4
; CHECK-NEXT:    [[TMP17:%.*]] = add i32 [[TMP16]], [[TMP4]]
; CHECK-NEXT:    store i32 [[TMP17]], ptr [[J_CALL_ARG]], align 4
; CHECK-NEXT:    br label [[FOR_COND]]
;
;
; CHECK-LABEL: define {{[^@]+}}@nanos6_ol_deps_main.7
; CHECK-SAME: (ptr [[TASK_ARGS:%.*]], ptr [[LOOP_BOUNDS:%.*]], ptr [[HANDLER:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEP_A:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN_0:%.*]], ptr [[TASK_ARGS]], i32 0, i32 11
; CHECK-NEXT:    [[LOAD_GEP_A:%.*]] = load ptr, ptr [[GEP_A]], align 8
; CHECK-NEXT:    [[GEP_J_CALL_ARG:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN_0]], ptr [[TASK_ARGS]], i32 0, i32 12
; CHECK-NEXT:    [[GEP_CALL_ARG:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN_0]], ptr [[TASK_ARGS]], i32 0, i32 8
; CHECK-NEXT:    [[GEP_CALL_ARG1:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN_0]], ptr [[TASK_ARGS]], i32 0, i32 9
; CHECK-NEXT:    [[GEP_CALL_ARG2:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN_0]], ptr [[TASK_ARGS]], i32 0, i32 10
; CHECK-NEXT:    br label [[END:%.*]]
; CHECK:       end:
; CHECK-NEXT:    call void @nanos6_unpacked_deps_main.6(ptr [[GEP_CALL_ARG]], ptr [[GEP_CALL_ARG1]], ptr [[GEP_CALL_ARG2]], ptr [[LOAD_GEP_A]], ptr [[GEP_J_CALL_ARG]], ptr [[LOOP_BOUNDS]], ptr [[HANDLER]])
; CHECK-NEXT:    ret void
;
;.
; CHECK: attributes #[[ATTR0]] = { noinline nounwind optnone "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
; CHECK: attributes #[[ATTR1:[0-9]+]] = { nounwind }
; CHECK: attributes #[[ATTR2]] = { "min-legal-vector-width"="0" }
; CHECK: attributes #[[ATTR3:[0-9]+]] = { nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
; CHECK: attributes #[[ATTR4:[0-9]+]] = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
;.
; CHECK: [[META0:![0-9]+]] = distinct !DICompileUnit(language: DW_LANG_C11, file: [[META1:![0-9]+]], isOptimized: false, runtimeVersion: 0, emissionKind: NoDebug, splitDebugInlining: false, nameTableKind: None)
; CHECK: [[META1]] = !DIFile(filename: "<stdin>", directory: "")
; CHECK: [[META2:![0-9]+]] = !{i32 2, !"Debug Info Version", i32 3}
; CHECK: [[META3:![0-9]+]] = !{i32 1, !"wchar_size", i32 4}
; CHECK: [[META4:![0-9]+]] = !{!""}
; CHECK: [[DBG5]] = distinct !DISubprogram(name: "main", scope: [[META6:![0-9]+]], file: [[META6]], line: 5, type: [[META7:![0-9]+]], scopeLine: 5, spFlags: DISPFlagDefinition, unit: [[META0]])
; CHECK: [[META6]] = !DIFile(filename: "task_device.ll", directory: "")
; CHECK: [[META7]] = !DISubroutineType(types: [[META8:![0-9]+]])
; CHECK: [[META8]] = !{}
; CHECK: [[DBG9]] = !DILocation(line: 6, column: 7, scope: [[DBG5]])
; CHECK: [[DBG10]] = !DILocation(line: 6, column: 10, scope: [[DBG5]])
; CHECK: [[DBG11]] = !DILocation(line: 6, column: 13, scope: [[DBG5]])
; CHECK: [[DBG12]] = !DILocation(line: 6, column: 3, scope: [[DBG5]])
; CHECK: [[DBG13]] = !DILocation(line: 7, column: 1, scope: [[DBG5]])
; CHECK: [[DBG14]] = distinct !DISubprogram(linkageName: "compute_dep", scope: [[META1]], file: [[META1]], type: [[META7]], flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: [[META0]])
; CHECK: [[DBG15]] = !DILocation(line: 2, column: 63, scope: [[META16:![0-9]+]])
; CHECK: [[META16]] = !DILexicalBlockFile(scope: [[DBG14]], file: [[META6]], discriminator: 0)
; CHECK: [[DBG17]] = !DILocation(line: 2, column: 59, scope: [[META16]])
; CHECK: [[DBG18]] = distinct !DISubprogram(linkageName: "compute_dep.1", scope: [[META1]], file: [[META1]], type: [[META7]], flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: [[META0]])
; CHECK: [[DBG19]] = !DILocation(line: 2, column: 56, scope: [[META20:![0-9]+]])
; CHECK: [[META20]] = !DILexicalBlockFile(scope: [[DBG18]], file: [[META6]], discriminator: 0)
; CHECK: [[DBG21]] = distinct !DISubprogram(name: "nanos6_unpacked_task_region_main", linkageName: "nanos6_unpacked_task_region_main", scope: null, file: [[META6]], type: [[META7]], spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: [[META0]])
; CHECK: [[DBG22]] = !DILocation(line: 6, column: 3, scope: [[DBG21]])
; CHECK: [[DBG23]] = !DILocation(line: 7, column: 1, scope: [[DBG21]])
; CHECK: [[DBG24]] = distinct !DISubprogram(name: "nanos6_unpacked_task_region_main.4", linkageName: "nanos6_unpacked_task_region_main.4", scope: null, file: [[META6]], type: [[META7]], spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: [[META0]])
; CHECK: [[DBG25]] = !DILocation(line: 6, column: 3, scope: [[DBG24]])
; CHECK: [[DBG26]] = !DILocation(line: 7, column: 1, scope: [[DBG24]])
;.
